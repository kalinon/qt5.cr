module Qt
  
  # Native bindings.  Mostly generated.
  lib Binding
    # Container for string data.
    struct CrystalString
      ptr : LibC::Char*
      size : LibC::Int
    end
  
    # Container for a `Proc`
    struct CrystalProc
      ptr : Void*
      context : Void*
    end
  
    # Container for raw memory-data.  The `ptr` could be anything.
    struct CrystalSlice
      ptr : Void*
      size : LibC::Int
    end
  end
  
  # Helpers for bindings.  Required.
  module BindgenHelper
    # Wraps `Proc` to a `Binding::CrystalProc`, which can then passed on to C++.
    def self.wrap_proc(proc : Proc)
      Binding::CrystalProc.new(
        ptr: proc.pointer,
        context: proc.closure_data,
      )
    end
  
    # Wraps `Proc` to a `Binding::CrystalProc`, which can then passed on to C++.
    # `Nil` version, returns a null-proc.
    def self.wrap_proc(nothing : Nil)
      Binding::CrystalProc.new(
        ptr: Pointer(Void).null,
        context: Pointer(Void).null,
      )
    end
  
    # Wraps a *list* into a container *wrapper*, if it's not already one.
    macro wrap_container(wrapper, list)
      %instance = {{ list }}
      if %instance.is_a?({{ wrapper }})
        %instance
      else
        {{wrapper}}.new.concat(%instance)
      end
    end
  
    # Wrapper for an instantiated, sequential container type.
    #
    # This offers (almost) all read-only methods known from `Array`.
    # Additionally, there's `#<<`.  Other than that, the container type is not
    # meant to be used for storage, but for data transmission between the C++
    # and the Crystal world.  Don't let that discourage you though.
    module SequentialContainer(T)
      include Indexable(T)
  
      # `#unsafe_fetch` and `#size` will be implemented by the wrapper class.
  
      # Adds an element at the end.  Implemented by the wrapper.
      abstract def push(value : T)
  
      # Adds *element* at the end of the container.
      def <<(value : T) : self
        push(value)
        self
      end
  
      # Adds all *elements* at the end of the container, retaining their order.
      def concat(values : Enumerable(T)) : self
        values.each { |v| push(v) }
        self
      end
  
      def to_s(io)
        to_a.to_s(io)
      end
  
      def inspect(io)
        io << "<Wrapped "
        to_a.inspect(io)
        io << ">"
      end
    end
  end
  
  @[Link(ldflags: "#{__DIR__}/../../../ext/binding_darwin-unknown-x86_64-qt5.15.a -lstdc++ `pkg-config --libs Qt5Widgets`")]
  lib Binding
    alias QMetaObjectConnection = Void
    alias QObject = Void
    alias QMetaObject = Void
    alias QEvent = Void
    alias QThread = Void
    alias QObjectList = Void
    alias QMetaMethod = Void
    alias QTimerEvent = Void
    alias QChildEvent = Void
    alias QEventLoop = Void
    alias QAbstractEventDispatcher = Void
    alias QSocketNotifier = Void
    alias ContainerQListQAbstractEventDispatcherTimerInfo = Void
    alias QAbstractNativeEventFilter = Void
    alias QByteArray = Void
    alias QAbstractEventDispatcherPrivate = Void
    alias QModelIndex = Void
    alias QAbstractItemModel = Void
    alias QStringList = Void
    alias QMimeData = Void
    alias QModelIndexList = Void
    alias QSize = Void
    alias ContainerQVectorInt = Void
    alias ContainerQListQPersistentModelIndex = Void
    alias QAbstractItemModelPrivate = Void
    alias QDataStream = Void
    alias QIODevice = Void
    alias QIODevicePrivate = Void
    alias QUrl = Void
    alias QUrlQuery = Void
    alias ContainerQListQUrl = Void
    alias QDynamicPropertyChangeEvent = Void
    alias QDeferredDeleteEvent = Void
    alias QCoreApplication = Void
    alias QTranslator = Void
    alias QPostEventList = Void
    alias QCoreApplicationPrivate = Void
    alias QDir = Void
    alias QFileInfoList = Void
    alias QDirPrivate = Void
    alias QLine = Void
    alias QMatrix = Void
    alias QTransform = Void
    alias QLineF = Void
    alias QRect = Void
    alias QMargins = Void
    alias QRectF = Void
    alias QSizeF = Void
    alias QMarginsF = Void
    alias QStandardPaths = Void
    alias QTimer = Void
    alias QColor = Void
    alias QRgba64 = Void
    alias QStringView = Void
    alias QLatin1String = Void
    alias QKeySequence = Void
    alias ContainerQListQKeySequence = Void
    alias QInputEvent = Void
    alias QEnterEvent = Void
    alias QMouseEvent = Void
    alias QKeyEvent = Void
    alias QFocusEvent = Void
    alias QPaintEvent = Void
    alias QRegion = Void
    alias QMoveEvent = Void
    alias QExposeEvent = Void
    alias QPlatformSurfaceEvent = Void
    alias QResizeEvent = Void
    alias QCloseEvent = Void
    alias QIconDragEvent = Void
    alias QShowEvent = Void
    alias QHideEvent = Void
    alias QInputMethodEvent = Void
    alias QInputMethodQueryEvent = Void
    alias QDropEvent = Void
    alias QDragMoveEvent = Void
    alias QDragEnterEvent = Void
    alias QDragLeaveEvent = Void
    alias QHelpEvent = Void
    alias QStatusTipEvent = Void
    alias QWhatsThisClickedEvent = Void
    alias QActionEvent = Void
    alias QAction = Void
    alias QFileOpenEvent = Void
    alias QFile = Void
    alias QToolBarChangeEvent = Void
    alias QShortcutEvent = Void
    alias QScrollPrepareEvent = Void
    alias QScrollEvent = Void
    alias QScreenOrientationChangeEvent = Void
    alias QScreen = Void
    alias QApplicationStateChangeEvent = Void
    alias QFont = Void
    alias QPaintDevice = Void
    alias QPaintEngine = Void
    alias QPainter = Void
    alias QPixelFormat = Void
    alias QImage = Void
    alias ContainerQVectorUnsignedInt = Void
    alias QColorSpace = Void
    alias QColorTransform = Void
    alias CGImage = Void
    alias QPixmap = Void
    alias QPlatformPixmap = Void
    alias QBitmap = Void
    alias QImageReader = Void
    alias QBrush = Void
    alias QGradient = Void
    alias QTextOption = Void
    alias ContainerQListQreal = Void
    alias QTextLength = Void
    alias QTextFormat = Void
    alias QPen = Void
    alias ContainerQVectorQTextLength = Void
    alias QTextBlockFormat = Void
    alias QTextCharFormat = Void
    alias QTextListFormat = Void
    alias QTextTableFormat = Void
    alias QTextFrameFormat = Void
    alias QTextImageFormat = Void
    alias QTextTableCellFormat = Void
    alias QTextCursor = Void
    alias QTextDocument = Void
    alias QTextDocumentPrivate = Void
    alias QTextCursorPrivate = Void
    alias QTextFrame = Void
    alias QTextBlock = Void
    alias QTextDocumentFragment = Void
    alias QTextList = Void
    alias QTextTable = Void
    alias QAbstractTextDocumentLayout = Void
    alias QRegExp = Void
    alias QRegularExpression = Void
    alias QTextObject = Void
    alias QPagedPaintDevice = Void
    alias ContainerQVectorQTextFormat = Void
    alias QAbstractUndoItem = Void
    alias QPalette = Void
    alias QSurface = Void
    alias QSurfaceFormat = Void
    alias QPlatformSurface = Void
    alias QIcon = Void
    alias QIconEngine = Void
    alias QWindow = Void
    alias ContainerQListQSize = Void
    alias QCursor = Void
    alias QPlatformWindow = Void
    alias QAccessibleInterface = Void
    alias QWheelEvent = Void
    alias QTouchEvent = Void
    alias QTabletEvent = Void
    alias QWindowPrivate = Void
    alias QDesktopServices = Void
    alias QDrag = Void
    alias QFontMetrics = Void
    alias QGuiApplication = Void
    alias QWindowList = Void
    alias ContainerQListQScreenX = Void
    alias QClipboard = Void
    alias QStyleHints = Void
    alias QInputMethod = Void
    alias QPlatformNativeInterface = Void
    alias QSessionManager = Void
    alias QGuiApplicationPrivate = Void
    alias QFontInfo = Void
    alias QPainterPath = Void
    alias QPolygonF = Void
    alias QPolygon = Void
    alias ContainerQVectorQLineF = Void
    alias ContainerQVectorQPointF = Void
    alias ContainerQVectorQLine = Void
    alias ContainerQVectorQPoint = Void
    alias ContainerQVectorQRectF = Void
    alias ContainerQVectorQRect = Void
    alias QPicture = Void
    alias QGlyphRun = Void
    alias QStaticText = Void
    alias QTextItem = Void
    alias QPlatformScreen = Void
    alias QSizePolicy = Void
    alias QWidget = Void
    alias QStyle = Void
    alias QGraphicsEffect = Void
    alias QLocale = Void
    alias QGraphicsProxyWidget = Void
    alias QLayout = Void
    alias ContainerQListQActionX = Void
    alias QBackingStore = Void
    alias QContextMenuEvent = Void
    alias QWidgetPrivate = Void
    alias QAbstractButton = Void
    alias QButtonGroup = Void
    alias QAbstractButtonPrivate = Void
    alias QAbstractSpinBox = Void
    alias QStyleOptionSpinBox = Void
    alias QLineEdit = Void
    alias QAbstractSpinBoxPrivate = Void
    alias QAbstractSlider = Void
    alias QAbstractSliderPrivate = Void
    alias QSlider = Void
    alias QStyleOptionSlider = Void
    alias QTabBar = Void
    alias QStyleOptionTab = Void
    alias QTabWidget = Void
    alias QStyleOptionTabWidgetFrame = Void
    alias QFrame = Void
    alias QFramePrivate = Void
    alias QStyleOptionFrame = Void
    alias QStyleOptionGraphicsItem = Void
    alias QAbstractItemDelegate = Void
    alias QStyleOptionViewItem = Void
    alias QAbstractItemView = Void
    alias QAbstractScrollArea = Void
    alias QScrollBar = Void
    alias QWidgetList = Void
    alias QAbstractScrollAreaPrivate = Void
    alias QItemSelectionModel = Void
    alias QItemSelection = Void
    alias QAbstractItemViewPrivate = Void
    alias QActionGroup = Void
    alias QMenu = Void
    alias ContainerQListQWidgetX = Void
    alias ContainerQListQGraphicsWidgetX = Void
    alias QActionPrivate = Void
    alias QApplication = Void
    alias QDesktopWidget = Void
    alias QLayoutItem = Void
    alias QSpacerItem = Void
    alias QWidgetItem = Void
    alias QLayoutPrivate = Void
    alias QGridLayout = Void
    alias QBoxLayout = Void
    alias QHBoxLayout = Void
    alias QVBoxLayout = Void
    alias ContainerQListQAbstractButtonX = Void
    alias QCheckBox = Void
    alias QStyleOptionButton = Void
    alias QDialog = Void
    alias QDialogPrivate = Void
    alias QComboBox = Void
    alias QValidator = Void
    alias QCompleter = Void
    alias QStyleOptionComboBox = Void
    alias QComboBoxPrivate = Void
    alias QPushButton = Void
    alias QPushButtonPrivate = Void
    alias QDateTimeEdit = Void
    alias QDateTime = Void
    alias QDate = Void
    alias QTime = Void
    alias QCalendar = Void
    alias QCalendarWidget = Void
    alias QDial = Void
    alias QDockWidget = Void
    alias QStyleOptionDockWidget = Void
    alias QFileDialog = Void
    alias QFileIconProvider = Void
    alias QAbstractProxyModel = Void
    alias QFileDialogArgs = Void
    alias QFormLayout = Void
    alias QGesture = Void
    alias QGesturePrivate = Void
    alias QGestureEvent = Void
    alias ContainerQListQGestureX = Void
    alias QGraphicsItem = Void
    alias QGraphicsScene = Void
    alias QGraphicsObject = Void
    alias QGraphicsWidget = Void
    alias ContainerQListQGraphicsItemX = Void
    alias QGraphicsItemGroup = Void
    alias ContainerQListQGraphicsTransformX = Void
    alias QGraphicsSceneContextMenuEvent = Void
    alias QGraphicsSceneDragDropEvent = Void
    alias QGraphicsSceneHoverEvent = Void
    alias QGraphicsSceneMouseEvent = Void
    alias QGraphicsSceneWheelEvent = Void
    alias QGraphicsItemPrivate = Void
    alias QAbstractGraphicsShapeItem = Void
    alias QAbstractGraphicsShapeItemPrivate = Void
    alias QGraphicsPathItem = Void
    alias QGraphicsRectItem = Void
    alias QGraphicsEllipseItem = Void
    alias QGraphicsPolygonItem = Void
    alias QGraphicsPixmapItem = Void
    alias QGraphicsTextItem = Void
    alias QGraphicsSimpleTextItem = Void
    alias QGraphicsLayout = Void
    alias QStyleOption = Void
    alias QGraphicsSceneMoveEvent = Void
    alias QGraphicsSceneResizeEvent = Void
    alias QGraphicsWidgetPrivate = Void
    alias QGraphicsLineItem = Void
    alias ContainerQListQGraphicsViewX = Void
    alias QGraphicsSceneHelpEvent = Void
    alias ContainerQListQRectF = Void
    alias QGraphicsSceneEvent = Void
    alias QGraphicsSceneEventPrivate = Void
    alias QGraphicsTransform = Void
    alias QMatrix4x4 = Void
    alias QGraphicsTransformPrivate = Void
    alias QScrollArea = Void
    alias QScrollAreaPrivate = Void
    alias QGraphicsView = Void
    alias QGraphicsViewPrivate = Void
    alias QGroupBox = Void
    alias QStyleOptionGroupBox = Void
    alias QItemEditorFactory = Void
    alias QItemEditorCreatorBase = Void
    alias QLabel = Void
    alias QMovie = Void
    alias QLCDNumber = Void
    alias QMainWindow = Void
    alias QMenuBar = Void
    alias QStatusBar = Void
    alias QToolBar = Void
    alias ContainerQListQDockWidgetX = Void
    alias ContainerQListInt = Void
    alias QPlatformMenu = Void
    alias NSMenu = Void
    alias QStyleOptionMenuItem = Void
    alias QMenuPrivate = Void
    alias QPlatformMenuBar = Void
    alias QTextEdit = Void
    alias QTextEditPrivate = Void
    alias QProgressBar = Void
    alias QStyleOptionProgressBar = Void
    alias QRadioButton = Void
    alias QSpinBox = Void
    alias QDoubleSpinBox = Void
    alias QStackedLayout = Void
    alias QStyledItemDelegate = Void
    alias QSystemTrayIcon = Void
    alias QTableView = Void
    alias QHeaderView = Void
    alias QTableViewPrivate = Void
    alias QTableWidgetItem = Void
    alias QTableWidget = Void
    alias QTableWidgetSelectionRange = Void
    alias ContainerQListQTableWidgetSelectionRange = Void
    alias ContainerQListQTableWidgetItemX = Void
    alias QStyleOptionToolBar = Void
    alias QToolButton = Void
    alias QStyleOptionToolButton = Void
    alias ContainerQListQVariant = Void
    alias QPersistentModelIndex = Void
    struct QPoint
      xp : Int32
      yp : Int32
    end
    struct QPointF
      xp : Float64
      yp : Float64
    end
    struct EventDispatcherTimerInfo
      timer_id : Int32
      interval : Int32
      timer_type : TimerType
    end
    struct BgJumptable_QObject
      bg_QObject_metaObject_ : CrystalProc
      bg_QObject_qt_metacast_const_char_X : CrystalProc
      bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QEventLoop
      bg_QEventLoop_metaObject_ : CrystalProc
      bg_QEventLoop_qt_metacast_const_char_X : CrystalProc
      bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QEventLoop_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QAbstractEventDispatcher
      bg_QAbstractEventDispatcher_metaObject_ : CrystalProc
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags : CrystalProc
      bg_QAbstractEventDispatcher_hasPendingEvents_ : CrystalProc
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X : CrystalProc
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X : CrystalProc
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_unregisterTimer_int : CrystalProc
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X : CrystalProc
      bg_QAbstractEventDispatcher_remainingTime_int : CrystalProc
      bg_QAbstractEventDispatcher_wakeUp_ : CrystalProc
      bg_QAbstractEventDispatcher_interrupt_ : CrystalProc
      bg_QAbstractEventDispatcher_flush_ : CrystalProc
      bg_QAbstractEventDispatcher_startingUp_ : CrystalProc
      bg_QAbstractEventDispatcher_closingDown_ : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QAbstractItemModel
      bg_QAbstractItemModel_metaObject_ : CrystalProc
      bg_QAbstractItemModel_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractItemModel_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractItemModel_index_int_int : CrystalProc
      bg_QAbstractItemModel_index_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_parent_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_sibling_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_rowCount_ : CrystalProc
      bg_QAbstractItemModel_rowCount_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_columnCount_ : CrystalProc
      bg_QAbstractItemModel_columnCount_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_hasChildren_ : CrystalProc
      bg_QAbstractItemModel_hasChildren_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_data_const_QModelIndex_R_int : CrystalProc
      bg_QAbstractItemModel_setData_const_QModelIndex_R_const_QVariant_R_int : CrystalProc
      bg_QAbstractItemModel_headerData_int_Qt__Orientation_int : CrystalProc
      bg_QAbstractItemModel_setHeaderData_int_Qt__Orientation_const_QVariant_R_int : CrystalProc
      bg_QAbstractItemModel_mimeTypes_ : CrystalProc
      bg_QAbstractItemModel_mimeData_const_QModelIndexList_R : CrystalProc
      bg_QAbstractItemModel_canDropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_dropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_supportedDropActions_ : CrystalProc
      bg_QAbstractItemModel_supportedDragActions_ : CrystalProc
      bg_QAbstractItemModel_insertRows_int_int : CrystalProc
      bg_QAbstractItemModel_insertRows_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_insertColumns_int_int : CrystalProc
      bg_QAbstractItemModel_insertColumns_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_removeRows_int_int : CrystalProc
      bg_QAbstractItemModel_removeRows_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_removeColumns_int_int : CrystalProc
      bg_QAbstractItemModel_removeColumns_int_int_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_moveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int : CrystalProc
      bg_QAbstractItemModel_moveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int : CrystalProc
      bg_QAbstractItemModel_fetchMore_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_canFetchMore_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_flags_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_sort_int_Qt__SortOrder : CrystalProc
      bg_QAbstractItemModel_buddy_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int : CrystalProc
      bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags : CrystalProc
      bg_QAbstractItemModel_span_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemModel_submit_ : CrystalProc
      bg_QAbstractItemModel_revert_ : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QIODevice
      bg_QIODevice_metaObject_ : CrystalProc
      bg_QIODevice_qt_metacast_const_char_X : CrystalProc
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QIODevice_isSequential_ : CrystalProc
      bg_QIODevice_open_QIODevice__OpenMode : CrystalProc
      bg_QIODevice_close_ : CrystalProc
      bg_QIODevice_pos_ : CrystalProc
      bg_QIODevice_size_ : CrystalProc
      bg_QIODevice_seek_qint64 : CrystalProc
      bg_QIODevice_atEnd_ : CrystalProc
      bg_QIODevice_reset_ : CrystalProc
      bg_QIODevice_bytesAvailable_ : CrystalProc
      bg_QIODevice_bytesToWrite_ : CrystalProc
      bg_QIODevice_canReadLine_ : CrystalProc
      bg_QIODevice_waitForReadyRead_int : CrystalProc
      bg_QIODevice_waitForBytesWritten_int : CrystalProc
      bg_QIODevice_readData_char_X_qint64 : CrystalProc
      bg_QIODevice_readLineData_char_X_qint64 : CrystalProc
      bg_QIODevice_writeData_const_char_X_qint64 : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QCoreApplication
      bg_QCoreApplication_metaObject_ : CrystalProc
      bg_QCoreApplication_qt_metacast_const_char_X : CrystalProc
      bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QCoreApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QCoreApplication_event_QEvent_X : CrystalProc
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QMimeData
      bg_QMimeData_metaObject_ : CrystalProc
      bg_QMimeData_qt_metacast_const_char_X : CrystalProc
      bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMimeData_hasFormat_const_QString_R : CrystalProc
      bg_QMimeData_formats_ : CrystalProc
      bg_QMimeData_retrieveData_const_QString_R_QVariant__Type : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QSocketNotifier
      bg_QSocketNotifier_metaObject_ : CrystalProc
      bg_QSocketNotifier_qt_metacast_const_char_X : CrystalProc
      bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSocketNotifier_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QTimer
      bg_QTimer_metaObject_ : CrystalProc
      bg_QTimer_qt_metacast_const_char_X : CrystalProc
      bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTimer_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QPaintDevice
      bg_QPaintDevice_devType_ : CrystalProc
      bg_QPaintDevice_paintEngine_ : CrystalProc
      bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QPaintDevice_initPainter_QPainter_X : CrystalProc
      bg_QPaintDevice_sharedPainter_ : CrystalProc
    end
    struct BgJumptable_QImage
      bg_QImage_devType_ : CrystalProc
      bg_QImage_paintEngine_ : CrystalProc
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QPaintDevice_initPainter_QPainter_X : CrystalProc
      bg_QPaintDevice_sharedPainter_ : CrystalProc
    end
    struct BgJumptable_QPixmap
      bg_QPixmap_devType_ : CrystalProc
      bg_QPixmap_paintEngine_ : CrystalProc
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QPaintDevice_initPainter_QPainter_X : CrystalProc
      bg_QPaintDevice_sharedPainter_ : CrystalProc
    end
    struct BgJumptable_QTextDocument
      bg_QTextDocument_metaObject_ : CrystalProc
      bg_QTextDocument_qt_metacast_const_char_X : CrystalProc
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTextDocument_clear_ : CrystalProc
      bg_QTextDocument_createObject_const_QTextFormat_R : CrystalProc
      bg_QTextDocument_loadResource_int_const_QUrl_R : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QSurface
      bg_QSurface_format_ : CrystalProc
      bg_QSurface_surfaceHandle_ : CrystalProc
      bg_QSurface_surfaceType_ : CrystalProc
      bg_QSurface_size_ : CrystalProc
    end
    struct BgJumptable_QWindow
      bg_QWindow_metaObject_ : CrystalProc
      bg_QWindow_qt_metacast_const_char_X : CrystalProc
      bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QWindow_surfaceType_ : CrystalProc
      bg_QWindow_format_ : CrystalProc
      bg_QWindow_size_ : CrystalProc
      bg_QWindow_accessibleRoot_ : CrystalProc
      bg_QWindow_focusObject_ : CrystalProc
      bg_QWindow_exposeEvent_QExposeEvent_X : CrystalProc
      bg_QWindow_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWindow_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWindow_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWindow_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWindow_showEvent_QShowEvent_X : CrystalProc
      bg_QWindow_hideEvent_QHideEvent_X : CrystalProc
      bg_QWindow_event_QEvent_X : CrystalProc
      bg_QWindow_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWindow_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWindow_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWindow_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWindow_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWindow_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWindow_touchEvent_QTouchEvent_X : CrystalProc
      bg_QWindow_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QSurface_surfaceHandle_ : CrystalProc
    end
    struct BgJumptable_QBitmap
      bg_QPixmap_devType_ : CrystalProc
      bg_QPixmap_paintEngine_ : CrystalProc
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
    end
    struct BgJumptable_QDrag
      bg_QDrag_metaObject_ : CrystalProc
      bg_QDrag_qt_metacast_const_char_X : CrystalProc
      bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QGuiApplication
      bg_QGuiApplication_metaObject_ : CrystalProc
      bg_QGuiApplication_qt_metacast_const_char_X : CrystalProc
      bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGuiApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QGuiApplication_event_QEvent_X : CrystalProc
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
    end
    struct BgJumptable_QScreen
      bg_QScreen_metaObject_ : CrystalProc
      bg_QScreen_qt_metacast_const_char_X : CrystalProc
      bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QWidget
      bg_QWidget_metaObject_ : CrystalProc
      bg_QWidget_qt_metacast_const_char_X : CrystalProc
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QAbstractButton
      bg_QAbstractButton_metaObject_ : CrystalProc
      bg_QAbstractButton_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractButton_hitButton_const_QPoint_R : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_event_QEvent_X : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QAbstractSpinBox
      bg_QAbstractSpinBox_metaObject_ : CrystalProc
      bg_QAbstractSpinBox_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractSpinBox_sizeHint_ : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_event_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QAbstractSpinBox_stepBy_int : CrystalProc
      bg_QAbstractSpinBox_clear_ : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepEnabled_ : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QAbstractSlider
      bg_QAbstractSlider_metaObject_ : CrystalProc
      bg_QAbstractSlider_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractSlider_event_QEvent_X : CrystalProc
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QSlider
      bg_QSlider_metaObject_ : CrystalProc
      bg_QSlider_qt_metacast_const_char_X : CrystalProc
      bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSlider_sizeHint_ : CrystalProc
      bg_QSlider_minimumSizeHint_ : CrystalProc
      bg_QSlider_event_QEvent_X : CrystalProc
      bg_QSlider_paintEvent_QPaintEvent_X : CrystalProc
      bg_QSlider_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QSlider_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QSlider_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
    end
    struct BgJumptable_QTabBar
      bg_QTabBar_metaObject_ : CrystalProc
      bg_QTabBar_qt_metacast_const_char_X : CrystalProc
      bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTabBar_sizeHint_ : CrystalProc
      bg_QTabBar_minimumSizeHint_ : CrystalProc
      bg_QTabBar_tabSizeHint_int : CrystalProc
      bg_QTabBar_minimumTabSizeHint_int : CrystalProc
      bg_QTabBar_tabInserted_int : CrystalProc
      bg_QTabBar_tabRemoved_int : CrystalProc
      bg_QTabBar_tabLayoutChange_ : CrystalProc
      bg_QTabBar_event_QEvent_X : CrystalProc
      bg_QTabBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTabBar_showEvent_QShowEvent_X : CrystalProc
      bg_QTabBar_hideEvent_QHideEvent_X : CrystalProc
      bg_QTabBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTabBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QTabBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QTabBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QTabBar_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QTabBar_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTabBar_changeEvent_QEvent_X : CrystalProc
      bg_QTabBar_timerEvent_QTimerEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QTabWidget
      bg_QTabWidget_metaObject_ : CrystalProc
      bg_QTabWidget_qt_metacast_const_char_X : CrystalProc
      bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTabWidget_sizeHint_ : CrystalProc
      bg_QTabWidget_minimumSizeHint_ : CrystalProc
      bg_QTabWidget_heightForWidth_int : CrystalProc
      bg_QTabWidget_hasHeightForWidth_ : CrystalProc
      bg_QTabWidget_tabInserted_int : CrystalProc
      bg_QTabWidget_tabRemoved_int : CrystalProc
      bg_QTabWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QTabWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTabWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTabWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTabWidget_changeEvent_QEvent_X : CrystalProc
      bg_QTabWidget_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QFrame
      bg_QFrame_metaObject_ : CrystalProc
      bg_QFrame_qt_metacast_const_char_X : CrystalProc
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QFrame_sizeHint_ : CrystalProc
      bg_QFrame_event_QEvent_X : CrystalProc
      bg_QFrame_paintEvent_QPaintEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QAbstractItemDelegate
      bg_QAbstractItemDelegate_metaObject_ : CrystalProc
      bg_QAbstractItemDelegate_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_paintingRoles_ : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QAbstractScrollArea
      bg_QAbstractScrollArea_metaObject_ : CrystalProc
      bg_QAbstractScrollArea_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_event_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractScrollArea_scrollContentsBy_int_int : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
    end
    struct BgJumptable_QAbstractItemView
      bg_QAbstractItemView_metaObject_ : CrystalProc
      bg_QAbstractItemView_qt_metacast_const_char_X : CrystalProc
      bg_QAbstractItemView_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAbstractItemView_setModel_QAbstractItemModel_X : CrystalProc
      bg_QAbstractItemView_setSelectionModel_QItemSelectionModel_X : CrystalProc
      bg_QAbstractItemView_keyboardSearch_const_QString_R : CrystalProc
      bg_QAbstractItemView_visualRect_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint : CrystalProc
      bg_QAbstractItemView_indexAt_const_QPoint_R : CrystalProc
      bg_QAbstractItemView_sizeHintForRow_int : CrystalProc
      bg_QAbstractItemView_sizeHintForColumn_int : CrystalProc
      bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QAbstractItemView_reset_ : CrystalProc
      bg_QAbstractItemView_setRootIndex_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemView_doItemsLayout_ : CrystalProc
      bg_QAbstractItemView_selectAll_ : CrystalProc
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R : CrystalProc
      bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int : CrystalProc
      bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int : CrystalProc
      bg_QAbstractItemView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R : CrystalProc
      bg_QAbstractItemView_currentChanged_const_QModelIndex_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemView_updateEditorData_ : CrystalProc
      bg_QAbstractItemView_updateEditorGeometries_ : CrystalProc
      bg_QAbstractItemView_updateGeometries_ : CrystalProc
      bg_QAbstractItemView_verticalScrollbarAction_int : CrystalProc
      bg_QAbstractItemView_horizontalScrollbarAction_int : CrystalProc
      bg_QAbstractItemView_verticalScrollbarValueChanged_int : CrystalProc
      bg_QAbstractItemView_horizontalScrollbarValueChanged_int : CrystalProc
      bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint : CrystalProc
      bg_QAbstractItemView_commitData_QWidget_X : CrystalProc
      bg_QAbstractItemView_editorDestroyed_QObject_X : CrystalProc
      bg_QAbstractItemView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers : CrystalProc
      bg_QAbstractItemView_horizontalOffset_ : CrystalProc
      bg_QAbstractItemView_verticalOffset_ : CrystalProc
      bg_QAbstractItemView_isIndexHidden_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags : CrystalProc
      bg_QAbstractItemView_visualRegionForSelection_const_QItemSelection_R : CrystalProc
      bg_QAbstractItemView_selectedIndexes_ : CrystalProc
      bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X : CrystalProc
      bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X : CrystalProc
      bg_QAbstractItemView_startDrag_Qt__DropActions : CrystalProc
      bg_QAbstractItemView_viewOptions_ : CrystalProc
      bg_QAbstractItemView_focusNextPrevChild_bool : CrystalProc
      bg_QAbstractItemView_event_QEvent_X : CrystalProc
      bg_QAbstractItemView_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractItemView_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractItemView_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractItemView_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractItemView_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractItemView_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractItemView_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractItemView_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractItemView_viewportSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_scrollContentsBy_int_int : CrystalProc
    end
    struct BgJumptable_QAction
      bg_QAction_metaObject_ : CrystalProc
      bg_QAction_qt_metacast_const_char_X : CrystalProc
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QAction_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QApplication
      bg_QApplication_metaObject_ : CrystalProc
      bg_QApplication_qt_metacast_const_char_X : CrystalProc
      bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QApplication_notify_QObject_X_QEvent_X : CrystalProc
      bg_QApplication_event_QEvent_X : CrystalProc
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X : CrystalProc
    end
    struct BgJumptable_QLayoutItem
      bg_QLayoutItem_sizeHint_ : CrystalProc
      bg_QLayoutItem_minimumSize_ : CrystalProc
      bg_QLayoutItem_maximumSize_ : CrystalProc
      bg_QLayoutItem_expandingDirections_ : CrystalProc
      bg_QLayoutItem_setGeometry_const_QRect_R : CrystalProc
      bg_QLayoutItem_geometry_ : CrystalProc
      bg_QLayoutItem_isEmpty_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_invalidate_ : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_layout_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
      bg_QLayoutItem_controlTypes_ : CrystalProc
    end
    struct BgJumptable_QSpacerItem
      bg_QSpacerItem_sizeHint_ : CrystalProc
      bg_QSpacerItem_minimumSize_ : CrystalProc
      bg_QSpacerItem_maximumSize_ : CrystalProc
      bg_QSpacerItem_expandingDirections_ : CrystalProc
      bg_QSpacerItem_isEmpty_ : CrystalProc
      bg_QSpacerItem_setGeometry_const_QRect_R : CrystalProc
      bg_QSpacerItem_geometry_ : CrystalProc
      bg_QSpacerItem_spacerItem_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_invalidate_ : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_layout_ : CrystalProc
      bg_QLayoutItem_controlTypes_ : CrystalProc
    end
    struct BgJumptable_QWidgetItem
      bg_QWidgetItem_sizeHint_ : CrystalProc
      bg_QWidgetItem_minimumSize_ : CrystalProc
      bg_QWidgetItem_maximumSize_ : CrystalProc
      bg_QWidgetItem_expandingDirections_ : CrystalProc
      bg_QWidgetItem_isEmpty_ : CrystalProc
      bg_QWidgetItem_setGeometry_const_QRect_R : CrystalProc
      bg_QWidgetItem_geometry_ : CrystalProc
      bg_QWidgetItem_widget_ : CrystalProc
      bg_QWidgetItem_hasHeightForWidth_ : CrystalProc
      bg_QWidgetItem_heightForWidth_int : CrystalProc
      bg_QWidgetItem_controlTypes_ : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_invalidate_ : CrystalProc
      bg_QLayoutItem_layout_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    struct BgJumptable_QLayout
      bg_QLayout_metaObject_ : CrystalProc
      bg_QLayout_qt_metacast_const_char_X : CrystalProc
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLayout_invalidate_ : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QLayout_expandingDirections_ : CrystalProc
      bg_QLayout_minimumSize_ : CrystalProc
      bg_QLayout_maximumSize_ : CrystalProc
      bg_QLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_itemAt_int : CrystalProc
      bg_QLayout_takeAt_int : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_count_ : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QLayoutItem_sizeHint_ : CrystalProc
      bg_QLayoutItem_hasHeightForWidth_ : CrystalProc
      bg_QLayoutItem_heightForWidth_int : CrystalProc
      bg_QLayoutItem_minimumHeightForWidth_int : CrystalProc
      bg_QLayoutItem_widget_ : CrystalProc
      bg_QLayoutItem_spacerItem_ : CrystalProc
    end
    struct BgJumptable_QGridLayout
      bg_QGridLayout_metaObject_ : CrystalProc
      bg_QGridLayout_qt_metacast_const_char_X : CrystalProc
      bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGridLayout_sizeHint_ : CrystalProc
      bg_QGridLayout_minimumSize_ : CrystalProc
      bg_QGridLayout_maximumSize_ : CrystalProc
      bg_QGridLayout_hasHeightForWidth_ : CrystalProc
      bg_QGridLayout_heightForWidth_int : CrystalProc
      bg_QGridLayout_minimumHeightForWidth_int : CrystalProc
      bg_QGridLayout_expandingDirections_ : CrystalProc
      bg_QGridLayout_invalidate_ : CrystalProc
      bg_QGridLayout_itemAt_int : CrystalProc
      bg_QGridLayout_takeAt_int : CrystalProc
      bg_QGridLayout_count_ : CrystalProc
      bg_QGridLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QGridLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
    end
    struct BgJumptable_QBoxLayout
      bg_QBoxLayout_metaObject_ : CrystalProc
      bg_QBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
    end
    struct BgJumptable_QHBoxLayout
      bg_QHBoxLayout_metaObject_ : CrystalProc
      bg_QHBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
    end
    struct BgJumptable_QVBoxLayout
      bg_QVBoxLayout_metaObject_ : CrystalProc
      bg_QVBoxLayout_qt_metacast_const_char_X : CrystalProc
      bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QBoxLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QBoxLayout_sizeHint_ : CrystalProc
      bg_QBoxLayout_minimumSize_ : CrystalProc
      bg_QBoxLayout_maximumSize_ : CrystalProc
      bg_QBoxLayout_hasHeightForWidth_ : CrystalProc
      bg_QBoxLayout_heightForWidth_int : CrystalProc
      bg_QBoxLayout_minimumHeightForWidth_int : CrystalProc
      bg_QBoxLayout_expandingDirections_ : CrystalProc
      bg_QBoxLayout_invalidate_ : CrystalProc
      bg_QBoxLayout_itemAt_int : CrystalProc
      bg_QBoxLayout_takeAt_int : CrystalProc
      bg_QBoxLayout_count_ : CrystalProc
      bg_QBoxLayout_setGeometry_const_QRect_R : CrystalProc
    end
    struct BgJumptable_QButtonGroup
      bg_QButtonGroup_metaObject_ : CrystalProc
      bg_QButtonGroup_qt_metacast_const_char_X : CrystalProc
      bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QCheckBox
      bg_QCheckBox_metaObject_ : CrystalProc
      bg_QCheckBox_qt_metacast_const_char_X : CrystalProc
      bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QCheckBox_sizeHint_ : CrystalProc
      bg_QCheckBox_minimumSizeHint_ : CrystalProc
      bg_QCheckBox_event_QEvent_X : CrystalProc
      bg_QCheckBox_hitButton_const_QPoint_R : CrystalProc
      bg_QCheckBox_checkStateSet_ : CrystalProc
      bg_QCheckBox_nextCheckState_ : CrystalProc
      bg_QCheckBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
    end
    struct BgJumptable_QDialog
      bg_QDialog_metaObject_ : CrystalProc
      bg_QDialog_qt_metacast_const_char_X : CrystalProc
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDialog_setVisible_bool : CrystalProc
      bg_QDialog_sizeHint_ : CrystalProc
      bg_QDialog_minimumSizeHint_ : CrystalProc
      bg_QDialog_open_ : CrystalProc
      bg_QDialog_exec_ : CrystalProc
      bg_QDialog_done_int : CrystalProc
      bg_QDialog_accept_ : CrystalProc
      bg_QDialog_reject_ : CrystalProc
      bg_QDialog_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDialog_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDialog_showEvent_QShowEvent_X : CrystalProc
      bg_QDialog_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QDialog_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QComboBox
      bg_QComboBox_metaObject_ : CrystalProc
      bg_QComboBox_qt_metacast_const_char_X : CrystalProc
      bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QComboBox_sizeHint_ : CrystalProc
      bg_QComboBox_minimumSizeHint_ : CrystalProc
      bg_QComboBox_showPopup_ : CrystalProc
      bg_QComboBox_hidePopup_ : CrystalProc
      bg_QComboBox_event_QEvent_X : CrystalProc
      bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QComboBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QComboBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QComboBox_changeEvent_QEvent_X : CrystalProc
      bg_QComboBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QComboBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QComboBox_showEvent_QShowEvent_X : CrystalProc
      bg_QComboBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QComboBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QComboBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QComboBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QComboBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QComboBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QComboBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QComboBox_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QPushButton
      bg_QPushButton_metaObject_ : CrystalProc
      bg_QPushButton_qt_metacast_const_char_X : CrystalProc
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QPushButton_sizeHint_ : CrystalProc
      bg_QPushButton_minimumSizeHint_ : CrystalProc
      bg_QPushButton_event_QEvent_X : CrystalProc
      bg_QPushButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QPushButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QPushButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QPushButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QPushButton_hitButton_const_QPoint_R : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
    end
    struct BgJumptable_QCompleter
      bg_QCompleter_metaObject_ : CrystalProc
      bg_QCompleter_qt_metacast_const_char_X : CrystalProc
      bg_QCompleter_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QCompleter_pathFromIndex_const_QModelIndex_R : CrystalProc
      bg_QCompleter_splitPath_const_QString_R : CrystalProc
      bg_QCompleter_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QCompleter_event_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QDateTimeEdit
      bg_QDateTimeEdit_metaObject_ : CrystalProc
      bg_QDateTimeEdit_qt_metacast_const_char_X : CrystalProc
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDateTimeEdit_sizeHint_ : CrystalProc
      bg_QDateTimeEdit_clear_ : CrystalProc
      bg_QDateTimeEdit_stepBy_int : CrystalProc
      bg_QDateTimeEdit_event_QEvent_X : CrystalProc
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QDateTimeEdit_focusNextPrevChild_bool : CrystalProc
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R : CrystalProc
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R : CrystalProc
      bg_QDateTimeEdit_stepEnabled_ : CrystalProc
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
    end
    struct BgJumptable_QDesktopWidget
      bg_QDesktopWidget_metaObject_ : CrystalProc
      bg_QDesktopWidget_qt_metacast_const_char_X : CrystalProc
      bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDesktopWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_event_QEvent_X : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QDial
      bg_QDial_metaObject_ : CrystalProc
      bg_QDial_qt_metacast_const_char_X : CrystalProc
      bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDial_sizeHint_ : CrystalProc
      bg_QDial_minimumSizeHint_ : CrystalProc
      bg_QDial_event_QEvent_X : CrystalProc
      bg_QDial_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDial_paintEvent_QPaintEvent_X : CrystalProc
      bg_QDial_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QDial_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QDial_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QDial_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
    end
    struct BgJumptable_QDockWidget
      bg_QDockWidget_metaObject_ : CrystalProc
      bg_QDockWidget_qt_metacast_const_char_X : CrystalProc
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDockWidget_changeEvent_QEvent_X : CrystalProc
      bg_QDockWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDockWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QDockWidget_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QFileDialog
      bg_QFileDialog_metaObject_ : CrystalProc
      bg_QFileDialog_qt_metacast_const_char_X : CrystalProc
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QFileDialog_setVisible_bool : CrystalProc
      bg_QFileDialog_done_int : CrystalProc
      bg_QFileDialog_accept_ : CrystalProc
      bg_QFileDialog_changeEvent_QEvent_X : CrystalProc
      bg_QDialog_sizeHint_ : CrystalProc
      bg_QDialog_minimumSizeHint_ : CrystalProc
      bg_QDialog_open_ : CrystalProc
      bg_QDialog_exec_ : CrystalProc
      bg_QDialog_reject_ : CrystalProc
      bg_QDialog_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QDialog_closeEvent_QCloseEvent_X : CrystalProc
      bg_QDialog_showEvent_QShowEvent_X : CrystalProc
      bg_QDialog_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QDialog_eventFilter_QObject_X_QEvent_X : CrystalProc
    end
    struct BgJumptable_QFormLayout
      bg_QFormLayout_metaObject_ : CrystalProc
      bg_QFormLayout_qt_metacast_const_char_X : CrystalProc
      bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QFormLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QFormLayout_itemAt_int : CrystalProc
      bg_QFormLayout_takeAt_int : CrystalProc
      bg_QFormLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QFormLayout_minimumSize_ : CrystalProc
      bg_QFormLayout_sizeHint_ : CrystalProc
      bg_QFormLayout_invalidate_ : CrystalProc
      bg_QFormLayout_hasHeightForWidth_ : CrystalProc
      bg_QFormLayout_heightForWidth_int : CrystalProc
      bg_QFormLayout_expandingDirections_ : CrystalProc
      bg_QFormLayout_count_ : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_maximumSize_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
    end
    struct BgJumptable_QGesture
      bg_QGesture_metaObject_ : CrystalProc
      bg_QGesture_qt_metacast_const_char_X : CrystalProc
      bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QGraphicsItem
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_boundingRect_ : CrystalProc
      bg_QGraphicsItem_shape_ : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsItem_type_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsObject
      bg_QGraphicsObject_metaObject_ : CrystalProc
      bg_QGraphicsObject_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_boundingRect_ : CrystalProc
      bg_QGraphicsItem_shape_ : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsItem_type_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QAbstractGraphicsShapeItem
      bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QAbstractGraphicsShapeItem_opaqueArea_ : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_boundingRect_ : CrystalProc
      bg_QGraphicsItem_shape_ : CrystalProc
      bg_QGraphicsItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsItem_type_ : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsPathItem
      bg_QGraphicsPathItem_boundingRect_ : CrystalProc
      bg_QGraphicsPathItem_shape_ : CrystalProc
      bg_QGraphicsPathItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsPathItem_opaqueArea_ : CrystalProc
      bg_QGraphicsPathItem_type_ : CrystalProc
      bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsPathItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsRectItem
      bg_QGraphicsRectItem_boundingRect_ : CrystalProc
      bg_QGraphicsRectItem_shape_ : CrystalProc
      bg_QGraphicsRectItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsRectItem_opaqueArea_ : CrystalProc
      bg_QGraphicsRectItem_type_ : CrystalProc
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsRectItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsEllipseItem
      bg_QGraphicsEllipseItem_boundingRect_ : CrystalProc
      bg_QGraphicsEllipseItem_shape_ : CrystalProc
      bg_QGraphicsEllipseItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsEllipseItem_opaqueArea_ : CrystalProc
      bg_QGraphicsEllipseItem_type_ : CrystalProc
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsEllipseItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsPolygonItem
      bg_QGraphicsPolygonItem_boundingRect_ : CrystalProc
      bg_QGraphicsPolygonItem_shape_ : CrystalProc
      bg_QGraphicsPolygonItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsPolygonItem_opaqueArea_ : CrystalProc
      bg_QGraphicsPolygonItem_type_ : CrystalProc
      bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsPolygonItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsPixmapItem
      bg_QGraphicsPixmapItem_boundingRect_ : CrystalProc
      bg_QGraphicsPixmapItem_shape_ : CrystalProc
      bg_QGraphicsPixmapItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsPixmapItem_opaqueArea_ : CrystalProc
      bg_QGraphicsPixmapItem_type_ : CrystalProc
      bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsPixmapItem_extension_const_QVariant_R : CrystalProc
      bg_QGraphicsItem_advance_int : CrystalProc
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode : CrystalProc
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X : CrystalProc
      bg_QGraphicsItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsTextItem
      bg_QGraphicsTextItem_metaObject_ : CrystalProc
      bg_QGraphicsTextItem_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsTextItem_boundingRect_ : CrystalProc
      bg_QGraphicsTextItem_shape_ : CrystalProc
      bg_QGraphicsTextItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsTextItem_opaqueArea_ : CrystalProc
      bg_QGraphicsTextItem_type_ : CrystalProc
      bg_QGraphicsTextItem_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsTextItem_extension_const_QVariant_R : CrystalProc
      bg_QGraphicsObject_event_QEvent_X : CrystalProc
    end
    struct BgJumptable_QGraphicsSimpleTextItem
      bg_QGraphicsSimpleTextItem_boundingRect_ : CrystalProc
      bg_QGraphicsSimpleTextItem_shape_ : CrystalProc
      bg_QGraphicsSimpleTextItem_contains_const_QPointF_R : CrystalProc
      bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X : CrystalProc
      bg_QGraphicsSimpleTextItem_opaqueArea_ : CrystalProc
      bg_QGraphicsSimpleTextItem_type_ : CrystalProc
      bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension : CrystalProc
      bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R : CrystalProc
      bg_QGraphicsSimpleTextItem_extension_const_QVariant_R : CrystalProc
    end
    struct BgJumptable_QGraphicsWidget
      bg_QGraphicsWidget_metaObject_ : CrystalProc
      bg_QGraphicsWidget_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsWidget_setGeometry_const_QRectF_R : CrystalProc
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X : CrystalProc
      bg_QGraphicsWidget_type_ : CrystalProc
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QGraphicsWidget_boundingRect_ : CrystalProc
      bg_QGraphicsWidget_shape_ : CrystalProc
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X : CrystalProc
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint : CrystalProc
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R : CrystalProc
      bg_QGraphicsWidget_updateGeometry_ : CrystalProc
      bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R : CrystalProc
      bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R : CrystalProc
      bg_QGraphicsWidget_sceneEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R : CrystalProc
      bg_QGraphicsWidget_event_QEvent_X : CrystalProc
      bg_QGraphicsWidget_changeEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsWidget_focusNextPrevChild_bool : CrystalProc
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X : CrystalProc
      bg_QGraphicsWidget_polishEvent_ : CrystalProc
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X : CrystalProc
      bg_QGraphicsWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X : CrystalProc
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X : CrystalProc
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X : CrystalProc
    end
    struct BgJumptable_QGraphicsScene
      bg_QGraphicsScene_metaObject_ : CrystalProc
      bg_QGraphicsScene_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsScene_event_QEvent_X : CrystalProc
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X : CrystalProc
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X : CrystalProc
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X : CrystalProc
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X : CrystalProc
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X : CrystalProc
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QGraphicsTransform
      bg_QGraphicsTransform_metaObject_ : CrystalProc
      bg_QGraphicsTransform_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsTransform_applyTo_QMatrix4x4_X : CrystalProc
      bg_QObject_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QScrollArea
      bg_QScrollArea_metaObject_ : CrystalProc
      bg_QScrollArea_qt_metacast_const_char_X : CrystalProc
      bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QScrollArea_sizeHint_ : CrystalProc
      bg_QScrollArea_focusNextPrevChild_bool : CrystalProc
      bg_QScrollArea_event_QEvent_X : CrystalProc
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QScrollArea_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QScrollArea_scrollContentsBy_int_int : CrystalProc
      bg_QScrollArea_viewportSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X : CrystalProc
    end
    struct BgJumptable_QGraphicsView
      bg_QGraphicsView_metaObject_ : CrystalProc
      bg_QGraphicsView_qt_metacast_const_char_X : CrystalProc
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGraphicsView_sizeHint_ : CrystalProc
      bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QGraphicsView_setupViewport_QWidget_X : CrystalProc
      bg_QGraphicsView_event_QEvent_X : CrystalProc
      bg_QGraphicsView_viewportEvent_QEvent_X : CrystalProc
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QGraphicsView_dropEvent_QDropEvent_X : CrystalProc
      bg_QGraphicsView_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsView_focusNextPrevChild_bool : CrystalProc
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QGraphicsView_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QGraphicsView_paintEvent_QPaintEvent_X : CrystalProc
      bg_QGraphicsView_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QGraphicsView_scrollContentsBy_int_int : CrystalProc
      bg_QGraphicsView_showEvent_QShowEvent_X : CrystalProc
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R : CrystalProc
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
    end
    struct BgJumptable_QGroupBox
      bg_QGroupBox_metaObject_ : CrystalProc
      bg_QGroupBox_qt_metacast_const_char_X : CrystalProc
      bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QGroupBox_minimumSizeHint_ : CrystalProc
      bg_QGroupBox_event_QEvent_X : CrystalProc
      bg_QGroupBox_childEvent_QChildEvent_X : CrystalProc
      bg_QGroupBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QGroupBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QGroupBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QGroupBox_changeEvent_QEvent_X : CrystalProc
      bg_QGroupBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QGroupBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QLineEdit
      bg_QLineEdit_metaObject_ : CrystalProc
      bg_QLineEdit_qt_metacast_const_char_X : CrystalProc
      bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLineEdit_sizeHint_ : CrystalProc
      bg_QLineEdit_minimumSizeHint_ : CrystalProc
      bg_QLineEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QLineEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QLineEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QLineEdit_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QLineEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QLineEdit_dropEvent_QDropEvent_X : CrystalProc
      bg_QLineEdit_changeEvent_QEvent_X : CrystalProc
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QLineEdit_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QItemEditorFactory
      bg_QItemEditorFactory_createEditor_int_QWidget_X : CrystalProc
      bg_QItemEditorFactory_valuePropertyName_int : CrystalProc
    end
    struct BgJumptable_QLabel
      bg_QLabel_metaObject_ : CrystalProc
      bg_QLabel_qt_metacast_const_char_X : CrystalProc
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLabel_sizeHint_ : CrystalProc
      bg_QLabel_minimumSizeHint_ : CrystalProc
      bg_QLabel_heightForWidth_int : CrystalProc
      bg_QLabel_event_QEvent_X : CrystalProc
      bg_QLabel_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QLabel_paintEvent_QPaintEvent_X : CrystalProc
      bg_QLabel_changeEvent_QEvent_X : CrystalProc
      bg_QLabel_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QLabel_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QLabel_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QLabel_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QLCDNumber
      bg_QLCDNumber_metaObject_ : CrystalProc
      bg_QLCDNumber_qt_metacast_const_char_X : CrystalProc
      bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QLCDNumber_sizeHint_ : CrystalProc
      bg_QLCDNumber_event_QEvent_X : CrystalProc
      bg_QLCDNumber_paintEvent_QPaintEvent_X : CrystalProc
      bg_QFrame_changeEvent_QEvent_X : CrystalProc
    end
    struct BgJumptable_QMainWindow
      bg_QMainWindow_metaObject_ : CrystalProc
      bg_QMainWindow_qt_metacast_const_char_X : CrystalProc
      bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMainWindow_createPopupMenu_ : CrystalProc
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QMainWindow_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QMenu
      bg_QMenu_metaObject_ : CrystalProc
      bg_QMenu_qt_metacast_const_char_X : CrystalProc
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMenu_sizeHint_ : CrystalProc
      bg_QMenu_changeEvent_QEvent_X : CrystalProc
      bg_QMenu_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QMenu_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QMenu_enterEvent_QEvent_X : CrystalProc
      bg_QMenu_leaveEvent_QEvent_X : CrystalProc
      bg_QMenu_hideEvent_QHideEvent_X : CrystalProc
      bg_QMenu_paintEvent_QPaintEvent_X : CrystalProc
      bg_QMenu_actionEvent_QActionEvent_X : CrystalProc
      bg_QMenu_timerEvent_QTimerEvent_X : CrystalProc
      bg_QMenu_event_QEvent_X : CrystalProc
      bg_QMenu_focusNextPrevChild_bool : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
    end
    struct BgJumptable_QMenuBar
      bg_QMenuBar_metaObject_ : CrystalProc
      bg_QMenuBar_qt_metacast_const_char_X : CrystalProc
      bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QMenuBar_sizeHint_ : CrystalProc
      bg_QMenuBar_minimumSizeHint_ : CrystalProc
      bg_QMenuBar_heightForWidth_int : CrystalProc
      bg_QMenuBar_setVisible_bool : CrystalProc
      bg_QMenuBar_changeEvent_QEvent_X : CrystalProc
      bg_QMenuBar_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QMenuBar_leaveEvent_QEvent_X : CrystalProc
      bg_QMenuBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QMenuBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QMenuBar_actionEvent_QActionEvent_X : CrystalProc
      bg_QMenuBar_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QMenuBar_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QMenuBar_timerEvent_QTimerEvent_X : CrystalProc
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QMenuBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QTextEdit
      bg_QTextEdit_metaObject_ : CrystalProc
      bg_QTextEdit_qt_metacast_const_char_X : CrystalProc
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTextEdit_loadResource_int_const_QUrl_R : CrystalProc
      bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QTextEdit_event_QEvent_X : CrystalProc
      bg_QTextEdit_timerEvent_QTimerEvent_X : CrystalProc
      bg_QTextEdit_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QTextEdit_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QTextEdit_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTextEdit_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QTextEdit_focusNextPrevChild_bool : CrystalProc
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QTextEdit_dropEvent_QDropEvent_X : CrystalProc
      bg_QTextEdit_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QTextEdit_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QTextEdit_showEvent_QShowEvent_X : CrystalProc
      bg_QTextEdit_changeEvent_QEvent_X : CrystalProc
      bg_QTextEdit_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QTextEdit_createMimeDataFromSelection_ : CrystalProc
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X : CrystalProc
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X : CrystalProc
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QTextEdit_scrollContentsBy_int_int : CrystalProc
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R : CrystalProc
      bg_QAbstractScrollArea_minimumSizeHint_ : CrystalProc
      bg_QAbstractScrollArea_sizeHint_ : CrystalProc
      bg_QAbstractScrollArea_setupViewport_QWidget_X : CrystalProc
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractScrollArea_viewportSizeHint_ : CrystalProc
    end
    struct BgJumptable_QProgressBar
      bg_QProgressBar_metaObject_ : CrystalProc
      bg_QProgressBar_qt_metacast_const_char_X : CrystalProc
      bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QProgressBar_text_ : CrystalProc
      bg_QProgressBar_sizeHint_ : CrystalProc
      bg_QProgressBar_minimumSizeHint_ : CrystalProc
      bg_QProgressBar_event_QEvent_X : CrystalProc
      bg_QProgressBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QRadioButton
      bg_QRadioButton_metaObject_ : CrystalProc
      bg_QRadioButton_qt_metacast_const_char_X : CrystalProc
      bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QRadioButton_sizeHint_ : CrystalProc
      bg_QRadioButton_minimumSizeHint_ : CrystalProc
      bg_QRadioButton_event_QEvent_X : CrystalProc
      bg_QRadioButton_hitButton_const_QPoint_R : CrystalProc
      bg_QRadioButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QRadioButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractButton_timerEvent_QTimerEvent_X : CrystalProc
    end
    struct BgJumptable_QScrollBar
      bg_QScrollBar_metaObject_ : CrystalProc
      bg_QScrollBar_qt_metacast_const_char_X : CrystalProc
      bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QScrollBar_sizeHint_ : CrystalProc
      bg_QScrollBar_event_QEvent_X : CrystalProc
      bg_QScrollBar_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QScrollBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QScrollBar_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QScrollBar_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QScrollBar_hideEvent_QHideEvent_X : CrystalProc
      bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange : CrystalProc
      bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSlider_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSlider_changeEvent_QEvent_X : CrystalProc
    end
    struct BgJumptable_QSpinBox
      bg_QSpinBox_metaObject_ : CrystalProc
      bg_QSpinBox_qt_metacast_const_char_X : CrystalProc
      bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSpinBox_event_QEvent_X : CrystalProc
      bg_QSpinBox_valueFromText_const_QString_R : CrystalProc
      bg_QSpinBox_textFromValue_int : CrystalProc
      bg_QAbstractSpinBox_sizeHint_ : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QAbstractSpinBox_stepBy_int : CrystalProc
      bg_QAbstractSpinBox_clear_ : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepEnabled_ : CrystalProc
    end
    struct BgJumptable_QDoubleSpinBox
      bg_QDoubleSpinBox_metaObject_ : CrystalProc
      bg_QDoubleSpinBox_qt_metacast_const_char_X : CrystalProc
      bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QDoubleSpinBox_valueFromText_const_QString_R : CrystalProc
      bg_QDoubleSpinBox_textFromValue_double : CrystalProc
      bg_QAbstractSpinBox_sizeHint_ : CrystalProc
      bg_QAbstractSpinBox_minimumSizeHint_ : CrystalProc
      bg_QAbstractSpinBox_event_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QAbstractSpinBox_stepBy_int : CrystalProc
      bg_QAbstractSpinBox_clear_ : CrystalProc
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QAbstractSpinBox_changeEvent_QEvent_X : CrystalProc
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X : CrystalProc
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X : CrystalProc
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X : CrystalProc
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X : CrystalProc
      bg_QAbstractSpinBox_showEvent_QShowEvent_X : CrystalProc
      bg_QAbstractSpinBox_stepEnabled_ : CrystalProc
    end
    struct BgJumptable_QStackedLayout
      bg_QStackedLayout_metaObject_ : CrystalProc
      bg_QStackedLayout_qt_metacast_const_char_X : CrystalProc
      bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QStackedLayout_count_ : CrystalProc
      bg_QStackedLayout_addItem_QLayoutItem_X : CrystalProc
      bg_QStackedLayout_sizeHint_ : CrystalProc
      bg_QStackedLayout_minimumSize_ : CrystalProc
      bg_QStackedLayout_itemAt_int : CrystalProc
      bg_QStackedLayout_takeAt_int : CrystalProc
      bg_QStackedLayout_setGeometry_const_QRect_R : CrystalProc
      bg_QStackedLayout_hasHeightForWidth_ : CrystalProc
      bg_QStackedLayout_heightForWidth_int : CrystalProc
      bg_QLayout_invalidate_ : CrystalProc
      bg_QLayout_geometry_ : CrystalProc
      bg_QLayout_expandingDirections_ : CrystalProc
      bg_QLayout_maximumSize_ : CrystalProc
      bg_QLayout_indexOf_QWidget_X : CrystalProc
      bg_QLayout_isEmpty_ : CrystalProc
      bg_QLayout_controlTypes_ : CrystalProc
      bg_QLayout_layout_ : CrystalProc
      bg_QLayout_childEvent_QChildEvent_X : CrystalProc
    end
    struct BgJumptable_QStatusBar
      bg_QStatusBar_metaObject_ : CrystalProc
      bg_QStatusBar_qt_metacast_const_char_X : CrystalProc
      bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QStatusBar_showEvent_QShowEvent_X : CrystalProc
      bg_QStatusBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QStatusBar_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QStatusBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_actionEvent_QActionEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_changeEvent_QEvent_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QStyledItemDelegate
      bg_QStyledItemDelegate_metaObject_ : CrystalProc
      bg_QStyledItemDelegate_qt_metacast_const_char_X : CrystalProc
      bg_QStyledItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QStyledItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_displayText_const_QVariant_R_const_QLocale_R : CrystalProc
      bg_QStyledItemDelegate_initStyleOption_QStyleOptionViewItem_X_const_QModelIndex_R : CrystalProc
      bg_QStyledItemDelegate_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QStyledItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemDelegate_paintingRoles_ : CrystalProc
    end
    struct BgJumptable_QSystemTrayIcon
      bg_QSystemTrayIcon_metaObject_ : CrystalProc
      bg_QSystemTrayIcon_qt_metacast_const_char_X : CrystalProc
      bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QSystemTrayIcon_event_QEvent_X : CrystalProc
      bg_QObject_eventFilter_QObject_X_QEvent_X : CrystalProc
      bg_QObject_timerEvent_QTimerEvent_X : CrystalProc
      bg_QObject_childEvent_QChildEvent_X : CrystalProc
      bg_QObject_customEvent_QEvent_X : CrystalProc
      bg_QObject_connectNotify_const_QMetaMethod_R : CrystalProc
      bg_QObject_disconnectNotify_const_QMetaMethod_R : CrystalProc
    end
    struct BgJumptable_QTableView
      bg_QTableView_metaObject_ : CrystalProc
      bg_QTableView_qt_metacast_const_char_X : CrystalProc
      bg_QTableView_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTableView_setModel_QAbstractItemModel_X : CrystalProc
      bg_QTableView_setRootIndex_const_QModelIndex_R : CrystalProc
      bg_QTableView_setSelectionModel_QItemSelectionModel_X : CrystalProc
      bg_QTableView_doItemsLayout_ : CrystalProc
      bg_QTableView_visualRect_const_QModelIndex_R : CrystalProc
      bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint : CrystalProc
      bg_QTableView_indexAt_const_QPoint_R : CrystalProc
      bg_QTableView_scrollContentsBy_int_int : CrystalProc
      bg_QTableView_viewOptions_ : CrystalProc
      bg_QTableView_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTableView_timerEvent_QTimerEvent_X : CrystalProc
      bg_QTableView_horizontalOffset_ : CrystalProc
      bg_QTableView_verticalOffset_ : CrystalProc
      bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers : CrystalProc
      bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags : CrystalProc
      bg_QTableView_visualRegionForSelection_const_QItemSelection_R : CrystalProc
      bg_QTableView_selectedIndexes_ : CrystalProc
      bg_QTableView_updateGeometries_ : CrystalProc
      bg_QTableView_viewportSizeHint_ : CrystalProc
      bg_QTableView_sizeHintForRow_int : CrystalProc
      bg_QTableView_sizeHintForColumn_int : CrystalProc
      bg_QTableView_verticalScrollbarAction_int : CrystalProc
      bg_QTableView_horizontalScrollbarAction_int : CrystalProc
      bg_QTableView_isIndexHidden_const_QModelIndex_R : CrystalProc
      bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R : CrystalProc
      bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R : CrystalProc
      bg_QAbstractItemView_keyboardSearch_const_QString_R : CrystalProc
      bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QAbstractItemView_reset_ : CrystalProc
      bg_QAbstractItemView_selectAll_ : CrystalProc
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R : CrystalProc
      bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int : CrystalProc
      bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int : CrystalProc
      bg_QAbstractItemView_updateEditorData_ : CrystalProc
      bg_QAbstractItemView_updateEditorGeometries_ : CrystalProc
      bg_QAbstractItemView_verticalScrollbarValueChanged_int : CrystalProc
      bg_QAbstractItemView_horizontalScrollbarValueChanged_int : CrystalProc
      bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint : CrystalProc
      bg_QAbstractItemView_commitData_QWidget_X : CrystalProc
      bg_QAbstractItemView_editorDestroyed_QObject_X : CrystalProc
      bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X : CrystalProc
      bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X : CrystalProc
      bg_QAbstractItemView_startDrag_Qt__DropActions : CrystalProc
      bg_QAbstractItemView_focusNextPrevChild_bool : CrystalProc
      bg_QAbstractItemView_event_QEvent_X : CrystalProc
      bg_QAbstractItemView_viewportEvent_QEvent_X : CrystalProc
      bg_QAbstractItemView_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QAbstractItemView_dropEvent_QDropEvent_X : CrystalProc
      bg_QAbstractItemView_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractItemView_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractItemView_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractItemView_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X : CrystalProc
    end
    struct BgJumptable_QTableWidgetItem
      bg_QTableWidgetItem_clone_ : CrystalProc
      bg_QTableWidgetItem_data_int : CrystalProc
      bg_QTableWidgetItem_setData_int_const_QVariant_R : CrystalProc
      bg_QTableWidgetItem_read_QDataStream_R : CrystalProc
      bg_QTableWidgetItem_write_QDataStream_R : CrystalProc
    end
    struct BgJumptable_QTableWidget
      bg_QTableWidget_metaObject_ : CrystalProc
      bg_QTableWidget_qt_metacast_const_char_X : CrystalProc
      bg_QTableWidget_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QTableWidget_event_QEvent_X : CrystalProc
      bg_QTableWidget_mimeTypes_ : CrystalProc
      bg_QTableWidget_mimeData_const_QList_QTableWidgetItem_X_ : CrystalProc
      bg_QTableWidget_dropMimeData_int_int_const_QMimeData_X_Qt__DropAction : CrystalProc
      bg_QTableWidget_supportedDropActions_ : CrystalProc
      bg_QTableWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QTableView_setModel_QAbstractItemModel_X : CrystalProc
      bg_QTableView_setRootIndex_const_QModelIndex_R : CrystalProc
      bg_QTableView_setSelectionModel_QItemSelectionModel_X : CrystalProc
      bg_QTableView_doItemsLayout_ : CrystalProc
      bg_QTableView_visualRect_const_QModelIndex_R : CrystalProc
      bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint : CrystalProc
      bg_QTableView_indexAt_const_QPoint_R : CrystalProc
      bg_QTableView_scrollContentsBy_int_int : CrystalProc
      bg_QTableView_viewOptions_ : CrystalProc
      bg_QTableView_paintEvent_QPaintEvent_X : CrystalProc
      bg_QTableView_timerEvent_QTimerEvent_X : CrystalProc
      bg_QTableView_horizontalOffset_ : CrystalProc
      bg_QTableView_verticalOffset_ : CrystalProc
      bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers : CrystalProc
      bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags : CrystalProc
      bg_QTableView_visualRegionForSelection_const_QItemSelection_R : CrystalProc
      bg_QTableView_selectedIndexes_ : CrystalProc
      bg_QTableView_updateGeometries_ : CrystalProc
      bg_QTableView_viewportSizeHint_ : CrystalProc
      bg_QTableView_sizeHintForRow_int : CrystalProc
      bg_QTableView_sizeHintForColumn_int : CrystalProc
      bg_QTableView_verticalScrollbarAction_int : CrystalProc
      bg_QTableView_horizontalScrollbarAction_int : CrystalProc
      bg_QTableView_isIndexHidden_const_QModelIndex_R : CrystalProc
      bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R : CrystalProc
      bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R : CrystalProc
    end
    struct BgJumptable_QToolBar
      bg_QToolBar_metaObject_ : CrystalProc
      bg_QToolBar_qt_metacast_const_char_X : CrystalProc
      bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QToolBar_actionEvent_QActionEvent_X : CrystalProc
      bg_QToolBar_changeEvent_QEvent_X : CrystalProc
      bg_QToolBar_paintEvent_QPaintEvent_X : CrystalProc
      bg_QToolBar_event_QEvent_X : CrystalProc
      bg_QWidget_devType_ : CrystalProc
      bg_QWidget_setVisible_bool : CrystalProc
      bg_QWidget_sizeHint_ : CrystalProc
      bg_QWidget_minimumSizeHint_ : CrystalProc
      bg_QWidget_heightForWidth_int : CrystalProc
      bg_QWidget_hasHeightForWidth_ : CrystalProc
      bg_QWidget_paintEngine_ : CrystalProc
      bg_QWidget_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QWidget_wheelEvent_QWheelEvent_X : CrystalProc
      bg_QWidget_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QWidget_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_focusOutEvent_QFocusEvent_X : CrystalProc
      bg_QWidget_enterEvent_QEvent_X : CrystalProc
      bg_QWidget_leaveEvent_QEvent_X : CrystalProc
      bg_QWidget_moveEvent_QMoveEvent_X : CrystalProc
      bg_QWidget_resizeEvent_QResizeEvent_X : CrystalProc
      bg_QWidget_closeEvent_QCloseEvent_X : CrystalProc
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X : CrystalProc
      bg_QWidget_tabletEvent_QTabletEvent_X : CrystalProc
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X : CrystalProc
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X : CrystalProc
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X : CrystalProc
      bg_QWidget_dropEvent_QDropEvent_X : CrystalProc
      bg_QWidget_showEvent_QShowEvent_X : CrystalProc
      bg_QWidget_hideEvent_QHideEvent_X : CrystalProc
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X : CrystalProc
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric : CrystalProc
      bg_QWidget_initPainter_QPainter_X : CrystalProc
      bg_QWidget_sharedPainter_ : CrystalProc
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X : CrystalProc
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery : CrystalProc
      bg_QWidget_focusNextPrevChild_bool : CrystalProc
    end
    struct BgJumptable_QToolButton
      bg_QToolButton_metaObject_ : CrystalProc
      bg_QToolButton_qt_metacast_const_char_X : CrystalProc
      bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX : CrystalProc
      bg_QToolButton_sizeHint_ : CrystalProc
      bg_QToolButton_minimumSizeHint_ : CrystalProc
      bg_QToolButton_event_QEvent_X : CrystalProc
      bg_QToolButton_mousePressEvent_QMouseEvent_X : CrystalProc
      bg_QToolButton_mouseReleaseEvent_QMouseEvent_X : CrystalProc
      bg_QToolButton_paintEvent_QPaintEvent_X : CrystalProc
      bg_QToolButton_actionEvent_QActionEvent_X : CrystalProc
      bg_QToolButton_enterEvent_QEvent_X : CrystalProc
      bg_QToolButton_leaveEvent_QEvent_X : CrystalProc
      bg_QToolButton_timerEvent_QTimerEvent_X : CrystalProc
      bg_QToolButton_changeEvent_QEvent_X : CrystalProc
      bg_QToolButton_hitButton_const_QPoint_R : CrystalProc
      bg_QToolButton_nextCheckState_ : CrystalProc
      bg_QAbstractButton_checkStateSet_ : CrystalProc
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X : CrystalProc
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X : CrystalProc
      bg_QAbstractButton_focusInEvent_QFocusEvent_X : CrystalProc
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X : CrystalProc
    end
    fun bg_QMetaObject__Connection__CONSTRUCT_() : QMetaObjectConnection*
    fun bg_QObject_metaObject_(_self_ : QObject*) : QMetaObject*
    fun bg_QObject_qt_metacast_const_char_X(_self_ : QObject*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QObject*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QObject_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QObject_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QObject_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QObject__CONSTRUCT_QObject_X(parent : QObject*) : QObject*
    fun bg_QObject_event_QEvent_X(_self_ : QObject*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QObject*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_objectName_(_self_ : QObject*) : CrystalString
    fun bg_QObject_setObjectName_const_QString_R(_self_ : QObject*, name : CrystalString) : Void
    fun bg_QObject_isWidgetType_(_self_ : QObject*) : Bool
    fun bg_QObject_isWindowType_(_self_ : QObject*) : Bool
    fun bg_QObject_signalsBlocked_(_self_ : QObject*) : Bool
    fun bg_QObject_blockSignals_bool(_self_ : QObject*, b : Bool) : Bool
    fun bg_QObject_thread_(_self_ : QObject*) : QThread*
    fun bg_QObject_moveToThread_QThread_X(_self_ : QObject*, thread : QThread*) : Void
    fun bg_QObject_startTimer_int_Qt__TimerType(_self_ : QObject*, interval : Int32, timer_type : TimerType) : Int32
    fun bg_QObject_startTimer_std__chrono__milliseconds_Qt__TimerType(_self_ : QObject*, time : Int64, timer_type : TimerType) : Int32
    fun bg_QObject_killTimer_int(_self_ : QObject*, id : Int32) : Void
    fun bg_QObject_children_(_self_ : QObject*) : QObjectList*
    fun bg_QObject_setParent_QObject_X(_self_ : QObject*, parent : QObject*) : Void
    fun bg_QObject_installEventFilter_QObject_X(_self_ : QObject*, filter_obj : QObject*) : Void
    fun bg_QObject_removeEventFilter_QObject_X(_self_ : QObject*, obj : QObject*) : Void
    fun bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*, unnamed_arg_4 : ConnectionType) : QMetaObjectConnection*
    fun bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, method : QMetaMethod*, type : ConnectionType) : QMetaObjectConnection*
    fun bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(_self_ : QObject*, sender : QObject*, signal : UInt8*, member : UInt8*, type : ConnectionType) : QMetaObjectConnection*
    fun bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender : QObject*, signal : QMetaMethod*, receiver : QObject*, member : QMetaMethod*) : Bool
    fun bg_QObject_disconnect_(_self_ : QObject*) : Bool
    fun bg_QObject_disconnect_const_char_X(_self_ : QObject*, signal : UInt8*) : Bool
    fun bg_QObject_disconnect_const_char_X_const_QObject_X(_self_ : QObject*, signal : UInt8*, receiver : QObject*) : Bool
    fun bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(_self_ : QObject*, signal : UInt8*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_const_QObject_X(_self_ : QObject*, receiver : QObject*) : Bool
    fun bg_QObject_disconnect_const_QObject_X_const_char_X(_self_ : QObject*, receiver : QObject*, member : UInt8*) : Bool
    fun bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(unnamed_arg_0 : QMetaObjectConnection*) : Bool
    fun bg_QObject_dumpObjectTree_(_self_ : QObject*) : Void
    fun bg_QObject_dumpObjectInfo_(_self_ : QObject*) : Void
    fun bg_QObject_setProperty_const_char_X_const_QVariant_R(_self_ : QObject*, name : UInt8*, value : CrystalVariant) : Bool
    fun bg_QObject_property_const_char_X(_self_ : QObject*, name : UInt8*) : CrystalVariant
    fun bg_QObject_destroyed_QObject_X(_self_ : QObject*, unnamed_arg_0 : QObject*) : Void
    fun bg_QObject_parent_(_self_ : QObject*) : QObject*
    fun bg_QObject_inherits_const_char_X(_self_ : QObject*, classname : UInt8*) : Bool
    fun bg_QObject_deleteLater_(_self_ : QObject*) : Void
    fun bg_QObject_sender_(_self_ : QObject*) : QObject*
    fun bg_QObject_senderSignalIndex_(_self_ : QObject*) : Int32
    fun bg_QObject_receivers_const_char_X(_self_ : QObject*, signal : UInt8*) : Int32
    fun bg_QObject_isSignalConnected_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QObject*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QObject*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QObject*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QObject_CONNECT_destroyed_CrystalProc_void__QObject_X_(_self_ : QObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_CONNECT_objectNameChanged_CrystalProc_void__const_QString_R_(_self_ : QObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QObject*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QObject*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QObject*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QObject*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QObject*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QObject*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QObject_JUMPTABLE_BgJumptable_QObject_R(_self_ : QObject*, table : BgJumptable_QObject*) : Void
    fun bg_QEventLoop_metaObject_(_self_ : QEventLoop*) : QMetaObject*
    fun bg_QEventLoop_qt_metacast_const_char_X(_self_ : QEventLoop*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QEventLoop*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QEventLoop_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QEventLoop_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QEventLoop__CONSTRUCT_QObject_X(parent : QObject*) : QEventLoop*
    fun bg_QEventLoop_processEvents_(_self_ : QEventLoop*) : Bool
    fun bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(_self_ : QEventLoop*, flags : EventLoop::ProcessEventsFlags) : Bool
    fun bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(_self_ : QEventLoop*, flags : EventLoop::ProcessEventsFlags, maximum_time : Int32) : Void
    fun bg_QEventLoop_exec_(_self_ : QEventLoop*) : Int32
    fun bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(_self_ : QEventLoop*, flags : EventLoop::ProcessEventsFlags) : Int32
    fun bg_QEventLoop_exit_int(_self_ : QEventLoop*, return_code : Int32) : Void
    fun bg_QEventLoop_isRunning_(_self_ : QEventLoop*) : Bool
    fun bg_QEventLoop_wakeUp_(_self_ : QEventLoop*) : Void
    fun bg_QEventLoop_event_QEvent_X(_self_ : QEventLoop*, event : QEvent*) : Bool
    fun bg_QEventLoop_quit_(_self_ : QEventLoop*) : Void
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QEventLoop*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QEventLoop*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QEventLoop*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QEventLoop*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QEventLoop*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QEventLoop*, signal : QMetaMethod*) : Void
    fun bg_QEventLoop_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QEventLoop_event_SUPER_QEvent_X(_self_ : QEventLoop*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QEventLoop*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QEventLoop*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QEventLoop*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QEventLoop*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QEventLoop*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QEventLoop*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QEventLoop_JUMPTABLE_BgJumptable_QEventLoop_R(_self_ : QEventLoop*, table : BgJumptable_QEventLoop*) : Void
    fun bg_QAbstractEventDispatcher_metaObject_(_self_ : QAbstractEventDispatcher*) : QMetaObject*
    fun bg_QAbstractEventDispatcher_qt_metacast_const_char_X(_self_ : QAbstractEventDispatcher*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractEventDispatcher*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractEventDispatcher__CONSTRUCT_QObject_X(parent : QObject*) : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(thread : QThread*) : QAbstractEventDispatcher*
    fun bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(_self_ : QAbstractEventDispatcher*, flags : EventLoop::ProcessEventsFlags) : Bool
    fun bg_QAbstractEventDispatcher_hasPendingEvents_(_self_ : QAbstractEventDispatcher*) : Bool
    fun bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(_self_ : QAbstractEventDispatcher*, notifier : QSocketNotifier*) : Void
    fun bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(_self_ : QAbstractEventDispatcher*, notifier : QSocketNotifier*) : Void
    fun bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(_self_ : QAbstractEventDispatcher*, interval : Int32, timer_type : TimerType, object : QObject*) : Int32
    fun bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(_self_ : QAbstractEventDispatcher*, timer_id : Int32, interval : Int32, timer_type : TimerType, object : QObject*) : Void
    fun bg_QAbstractEventDispatcher_unregisterTimer_int(_self_ : QAbstractEventDispatcher*, timer_id : Int32) : Bool
    fun bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(_self_ : QAbstractEventDispatcher*, object : QObject*) : Bool
    fun bg_QAbstractEventDispatcher_registeredTimers_QObject_X(_self_ : QAbstractEventDispatcher*, object : QObject*) : ContainerQListQAbstractEventDispatcherTimerInfo*
    fun bg_QAbstractEventDispatcher_remainingTime_int(_self_ : QAbstractEventDispatcher*, timer_id : Int32) : Int32
    fun bg_QAbstractEventDispatcher_wakeUp_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_interrupt_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_flush_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_startingUp_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_closingDown_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QAbstractEventDispatcher*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QAbstractEventDispatcher*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QAbstractEventDispatcher*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QAbstractEventDispatcher_aboutToBlock_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_awake_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher__CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(unnamed_arg_0 : QAbstractEventDispatcherPrivate*, parent : QObject*) : QAbstractEventDispatcher*
    fun bg_QObject_event_QEvent_X(_self_ : QAbstractEventDispatcher*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QAbstractEventDispatcher*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QAbstractEventDispatcher*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QAbstractEventDispatcher*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QAbstractEventDispatcher*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QAbstractEventDispatcher*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QAbstractEventDispatcher*, signal : QMetaMethod*) : Void
    fun bg_QAbstractEventDispatcher_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractEventDispatcher_CONNECT_aboutToBlock_CrystalProc_void_(_self_ : QAbstractEventDispatcher*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractEventDispatcher_CONNECT_awake_CrystalProc_void_(_self_ : QAbstractEventDispatcher*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractEventDispatcher_startingUp_SUPER_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QAbstractEventDispatcher_closingDown_SUPER_(_self_ : QAbstractEventDispatcher*) : Void
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QAbstractEventDispatcher*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QAbstractEventDispatcher*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractEventDispatcher*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QAbstractEventDispatcher*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QAbstractEventDispatcher*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QAbstractEventDispatcher*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QAbstractEventDispatcher*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QAbstractEventDispatcher_JUMPTABLE_BgJumptable_QAbstractEventDispatcher_R(_self_ : QAbstractEventDispatcher*, table : BgJumptable_QAbstractEventDispatcher*) : Void
    fun bg_QModelIndex__CONSTRUCT_() : QModelIndex*
    fun bg_QModelIndex_row_(_self_ : QModelIndex*) : Int32
    fun bg_QModelIndex_column_(_self_ : QModelIndex*) : Int32
    fun bg_QModelIndex_internalId_(_self_ : QModelIndex*) : UInt64
    fun bg_QModelIndex_internalPointer_(_self_ : QModelIndex*) : Void*
    fun bg_QModelIndex_parent_(_self_ : QModelIndex*) : QModelIndex*
    fun bg_QModelIndex_sibling_int_int(_self_ : QModelIndex*, row : Int32, column : Int32) : QModelIndex*
    fun bg_QModelIndex_siblingAtColumn_int(_self_ : QModelIndex*, column : Int32) : QModelIndex*
    fun bg_QModelIndex_siblingAtRow_int(_self_ : QModelIndex*, row : Int32) : QModelIndex*
    fun bg_QModelIndex_data_int(_self_ : QModelIndex*, role : Int32) : CrystalVariant
    fun bg_QModelIndex_flags_(_self_ : QModelIndex*) : ItemFlags
    fun bg_QModelIndex_model_(_self_ : QModelIndex*) : QAbstractItemModel*
    fun bg_QModelIndex_isValid_(_self_ : QModelIndex*) : Bool
    fun bg_QModelIndex__OPERATOR_eq_const_QModelIndex_R(_self_ : QModelIndex*, other : QModelIndex*) : Bool
    fun bg_QModelIndex__OPERATOR_ne_const_QModelIndex_R(_self_ : QModelIndex*, other : QModelIndex*) : Bool
    fun bg_QModelIndex__OPERATOR_lt_const_QModelIndex_R(_self_ : QModelIndex*, other : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_metaObject_(_self_ : QAbstractItemModel*) : QMetaObject*
    fun bg_QAbstractItemModel_qt_metacast_const_char_X(_self_ : QAbstractItemModel*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractItemModel_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractItemModel*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractItemModel_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractItemModel_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractItemModel_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractItemModel__CONSTRUCT_QObject_X(parent : QObject*) : QAbstractItemModel*
    fun bg_QAbstractItemModel_hasIndex_int_int(_self_ : QAbstractItemModel*, row : Int32, column : Int32) : Bool
    fun bg_QAbstractItemModel_hasIndex_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_index_int_int(_self_ : QAbstractItemModel*, row : Int32, column : Int32) : QModelIndex*
    fun bg_QAbstractItemModel_index_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, column : Int32, parent : QModelIndex*) : QModelIndex*
    fun bg_QAbstractItemModel_parent_const_QModelIndex_R(_self_ : QAbstractItemModel*, child : QModelIndex*) : QModelIndex*
    fun bg_QAbstractItemModel_sibling_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, column : Int32, idx : QModelIndex*) : QModelIndex*
    fun bg_QAbstractItemModel_rowCount_(_self_ : QAbstractItemModel*) : Int32
    fun bg_QAbstractItemModel_rowCount_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Int32
    fun bg_QAbstractItemModel_columnCount_(_self_ : QAbstractItemModel*) : Int32
    fun bg_QAbstractItemModel_columnCount_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Int32
    fun bg_QAbstractItemModel_hasChildren_(_self_ : QAbstractItemModel*) : Bool
    fun bg_QAbstractItemModel_hasChildren_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_data_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, index : QModelIndex*, role : Int32) : CrystalVariant
    fun bg_QAbstractItemModel_setData_const_QModelIndex_R_const_QVariant_R_int(_self_ : QAbstractItemModel*, index : QModelIndex*, value : CrystalVariant, role : Int32) : Bool
    fun bg_QAbstractItemModel_headerData_int_Qt__Orientation_int(_self_ : QAbstractItemModel*, section : Int32, orientation : Orientation, role : Int32) : CrystalVariant
    fun bg_QAbstractItemModel_setHeaderData_int_Qt__Orientation_const_QVariant_R_int(_self_ : QAbstractItemModel*, section : Int32, orientation : Orientation, value : CrystalVariant, role : Int32) : Bool
    fun bg_QAbstractItemModel_mimeTypes_(_self_ : QAbstractItemModel*) : QStringList*
    fun bg_QAbstractItemModel_mimeData_const_QModelIndexList_R(_self_ : QAbstractItemModel*, indexes : QModelIndexList*) : QMimeData*
    fun bg_QAbstractItemModel_canDropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, data : QMimeData*, action : DropAction, row : Int32, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_dropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, data : QMimeData*, action : DropAction, row : Int32, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_supportedDropActions_(_self_ : QAbstractItemModel*) : DropActions
    fun bg_QAbstractItemModel_supportedDragActions_(_self_ : QAbstractItemModel*) : DropActions
    fun bg_QAbstractItemModel_insertRows_int_int(_self_ : QAbstractItemModel*, row : Int32, count : Int32) : Bool
    fun bg_QAbstractItemModel_insertRows_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_insertColumns_int_int(_self_ : QAbstractItemModel*, column : Int32, count : Int32) : Bool
    fun bg_QAbstractItemModel_insertColumns_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, column : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_removeRows_int_int(_self_ : QAbstractItemModel*, row : Int32, count : Int32) : Bool
    fun bg_QAbstractItemModel_removeRows_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_removeColumns_int_int(_self_ : QAbstractItemModel*, column : Int32, count : Int32) : Bool
    fun bg_QAbstractItemModel_removeColumns_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, column : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_moveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_row : Int32, count : Int32, destination_parent : QModelIndex*, destination_child : Int32) : Bool
    fun bg_QAbstractItemModel_moveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_column : Int32, count : Int32, destination_parent : QModelIndex*, destination_child : Int32) : Bool
    fun bg_QAbstractItemModel_insertRow_int(_self_ : QAbstractItemModel*, row : Int32) : Bool
    fun bg_QAbstractItemModel_insertRow_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_insertColumn_int(_self_ : QAbstractItemModel*, column : Int32) : Bool
    fun bg_QAbstractItemModel_insertColumn_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_removeRow_int(_self_ : QAbstractItemModel*, row : Int32) : Bool
    fun bg_QAbstractItemModel_removeRow_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_removeColumn_int(_self_ : QAbstractItemModel*, column : Int32) : Bool
    fun bg_QAbstractItemModel_removeColumn_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_moveRow_const_QModelIndex_R_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_row : Int32, destination_parent : QModelIndex*, destination_child : Int32) : Bool
    fun bg_QAbstractItemModel_moveColumn_const_QModelIndex_R_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_column : Int32, destination_parent : QModelIndex*, destination_child : Int32) : Bool
    fun bg_QAbstractItemModel_fetchMore_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Void
    fun bg_QAbstractItemModel_canFetchMore_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_flags_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : ItemFlags
    fun bg_QAbstractItemModel_sort_int_Qt__SortOrder(_self_ : QAbstractItemModel*, column : Int32, order : SortOrder) : Void
    fun bg_QAbstractItemModel_buddy_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : QModelIndex*
    fun bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int(_self_ : QAbstractItemModel*, start : QModelIndex*, role : Int32, value : CrystalVariant, hits : Int32) : QModelIndexList*
    fun bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags(_self_ : QAbstractItemModel*, start : QModelIndex*, role : Int32, value : CrystalVariant, hits : Int32, flags : MatchFlags) : QModelIndexList*
    fun bg_QAbstractItemModel_span_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : QSize*
    fun bg_QAbstractItemModel_checkIndex_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_checkIndex_const_QModelIndex_R_QAbstractItemModel__CheckIndexOptions(_self_ : QAbstractItemModel*, index : QModelIndex*, options : AbstractItemModel::CheckIndexOptions) : Bool
    fun bg_QAbstractItemModel_dataChanged_const_QModelIndex_R_const_QModelIndex_R(_self_ : QAbstractItemModel*, top_left : QModelIndex*, bottom_right : QModelIndex*) : Void
    fun bg_QAbstractItemModel_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(_self_ : QAbstractItemModel*, top_left : QModelIndex*, bottom_right : QModelIndex*, roles : ContainerQVectorInt*) : Void
    fun bg_QAbstractItemModel_headerDataChanged_Qt__Orientation_int_int(_self_ : QAbstractItemModel*, orientation : Orientation, first : Int32, last : Int32) : Void
    fun bg_QAbstractItemModel_layoutChanged_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_layoutChanged_const_QList_QPersistentModelIndex__R(_self_ : QAbstractItemModel*, parents : ContainerQListQPersistentModelIndex*) : Void
    fun bg_QAbstractItemModel_layoutChanged_const_QList_QPersistentModelIndex__R_QAbstractItemModel__LayoutChangeHint(_self_ : QAbstractItemModel*, parents : ContainerQListQPersistentModelIndex*, hint : AbstractItemModel::LayoutChangeHint) : Void
    fun bg_QAbstractItemModel_layoutAboutToBeChanged_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_layoutAboutToBeChanged_const_QList_QPersistentModelIndex__R(_self_ : QAbstractItemModel*, parents : ContainerQListQPersistentModelIndex*) : Void
    fun bg_QAbstractItemModel_layoutAboutToBeChanged_const_QList_QPersistentModelIndex__R_QAbstractItemModel__LayoutChangeHint(_self_ : QAbstractItemModel*, parents : ContainerQListQPersistentModelIndex*, hint : AbstractItemModel::LayoutChangeHint) : Void
    fun bg_QAbstractItemModel_submit_(_self_ : QAbstractItemModel*) : Bool
    fun bg_QAbstractItemModel_revert_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_resetInternalData_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel__CONSTRUCT_QAbstractItemModelPrivate_R_QObject_X(dd : QAbstractItemModelPrivate*, parent : QObject*) : QAbstractItemModel*
    fun bg_QAbstractItemModel_createIndex_int_int_void_X(_self_ : QAbstractItemModel*, row : Int32, column : Int32, data : Void*) : QModelIndex*
    fun bg_QAbstractItemModel_createIndex_int_int_quintptr(_self_ : QAbstractItemModel*, row : Int32, column : Int32, id : UInt64) : QModelIndex*
    fun bg_QAbstractItemModel_encodeData_const_QModelIndexList_R_QDataStream_R(_self_ : QAbstractItemModel*, indexes : QModelIndexList*, stream : QDataStream*) : Void
    fun bg_QAbstractItemModel_decodeData_int_int_const_QModelIndex_R_QDataStream_R(_self_ : QAbstractItemModel*, row : Int32, column : Int32, parent : QModelIndex*, stream : QDataStream*) : Bool
    fun bg_QAbstractItemModel_beginInsertRows_const_QModelIndex_R_int_int(_self_ : QAbstractItemModel*, parent : QModelIndex*, first : Int32, last : Int32) : Void
    fun bg_QAbstractItemModel_endInsertRows_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_beginRemoveRows_const_QModelIndex_R_int_int(_self_ : QAbstractItemModel*, parent : QModelIndex*, first : Int32, last : Int32) : Void
    fun bg_QAbstractItemModel_endRemoveRows_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_beginMoveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_first : Int32, source_last : Int32, destination_parent : QModelIndex*, destination_row : Int32) : Bool
    fun bg_QAbstractItemModel_endMoveRows_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_beginInsertColumns_const_QModelIndex_R_int_int(_self_ : QAbstractItemModel*, parent : QModelIndex*, first : Int32, last : Int32) : Void
    fun bg_QAbstractItemModel_endInsertColumns_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_beginRemoveColumns_const_QModelIndex_R_int_int(_self_ : QAbstractItemModel*, parent : QModelIndex*, first : Int32, last : Int32) : Void
    fun bg_QAbstractItemModel_endRemoveColumns_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_beginMoveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_first : Int32, source_last : Int32, destination_parent : QModelIndex*, destination_column : Int32) : Bool
    fun bg_QAbstractItemModel_endMoveColumns_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_beginResetModel_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_endResetModel_(_self_ : QAbstractItemModel*) : Void
    fun bg_QAbstractItemModel_changePersistentIndex_const_QModelIndex_R_const_QModelIndex_R(_self_ : QAbstractItemModel*, from : QModelIndex*, to : QModelIndex*) : Void
    fun bg_QAbstractItemModel_changePersistentIndexList_const_QModelIndexList_R_const_QModelIndexList_R(_self_ : QAbstractItemModel*, from : QModelIndexList*, to : QModelIndexList*) : Void
    fun bg_QAbstractItemModel_persistentIndexList_(_self_ : QAbstractItemModel*) : QModelIndexList*
    fun bg_QObject_event_QEvent_X(_self_ : QAbstractItemModel*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QAbstractItemModel*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QAbstractItemModel*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QAbstractItemModel*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QAbstractItemModel*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QAbstractItemModel*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QAbstractItemModel*, signal : QMetaMethod*) : Void
    fun bg_QAbstractItemModel_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractItemModel_CONNECT_dataChanged_CrystalProc_void__const_QModelIndex_R__const_QModelIndex_R__const_QVector_int__R_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_headerDataChanged_CrystalProc_void__Qt__Orientation__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_layoutChanged_CrystalProc_void__const_QList_QPersistentModelIndex__R__QAbstractItemModel__LayoutChangeHint_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_layoutAboutToBeChanged_CrystalProc_void__const_QList_QPersistentModelIndex__R__QAbstractItemModel__LayoutChangeHint_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_rowsAboutToBeInserted_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_rowsInserted_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_rowsAboutToBeRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_rowsRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_columnsAboutToBeInserted_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_columnsInserted_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_columnsAboutToBeRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_columnsRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_modelAboutToBeReset_CrystalProc_void_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_modelReset_CrystalProc_void_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_rowsAboutToBeMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_rowsMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_columnsAboutToBeMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_CONNECT_columnsMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(_self_ : QAbstractItemModel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemModel_sibling_SUPER_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, column : Int32, idx : QModelIndex*) : QModelIndex*
    fun bg_QAbstractItemModel_hasChildren_SUPER_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_setData_SUPER_const_QModelIndex_R_const_QVariant_R_int(_self_ : QAbstractItemModel*, index : QModelIndex*, value : CrystalVariant, role : Int32) : Bool
    fun bg_QAbstractItemModel_headerData_SUPER_int_Qt__Orientation_int(_self_ : QAbstractItemModel*, section : Int32, orientation : Orientation, role : Int32) : CrystalVariant
    fun bg_QAbstractItemModel_setHeaderData_SUPER_int_Qt__Orientation_const_QVariant_R_int(_self_ : QAbstractItemModel*, section : Int32, orientation : Orientation, value : CrystalVariant, role : Int32) : Bool
    fun bg_QAbstractItemModel_mimeTypes_SUPER_(_self_ : QAbstractItemModel*) : QStringList*
    fun bg_QAbstractItemModel_mimeData_SUPER_const_QModelIndexList_R(_self_ : QAbstractItemModel*, indexes : QModelIndexList*) : QMimeData*
    fun bg_QAbstractItemModel_canDropMimeData_SUPER_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, data : QMimeData*, action : DropAction, row : Int32, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_dropMimeData_SUPER_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, data : QMimeData*, action : DropAction, row : Int32, column : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_supportedDropActions_SUPER_(_self_ : QAbstractItemModel*) : DropActions
    fun bg_QAbstractItemModel_supportedDragActions_SUPER_(_self_ : QAbstractItemModel*) : DropActions
    fun bg_QAbstractItemModel_insertRows_SUPER_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_insertColumns_SUPER_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, column : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_removeRows_SUPER_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, row : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_removeColumns_SUPER_int_int_const_QModelIndex_R(_self_ : QAbstractItemModel*, column : Int32, count : Int32, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_moveRows_SUPER_const_QModelIndex_R_int_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_row : Int32, count : Int32, destination_parent : QModelIndex*, destination_child : Int32) : Bool
    fun bg_QAbstractItemModel_moveColumns_SUPER_const_QModelIndex_R_int_int_const_QModelIndex_R_int(_self_ : QAbstractItemModel*, source_parent : QModelIndex*, source_column : Int32, count : Int32, destination_parent : QModelIndex*, destination_child : Int32) : Bool
    fun bg_QAbstractItemModel_fetchMore_SUPER_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Void
    fun bg_QAbstractItemModel_canFetchMore_SUPER_const_QModelIndex_R(_self_ : QAbstractItemModel*, parent : QModelIndex*) : Bool
    fun bg_QAbstractItemModel_flags_SUPER_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : ItemFlags
    fun bg_QAbstractItemModel_sort_SUPER_int_Qt__SortOrder(_self_ : QAbstractItemModel*, column : Int32, order : SortOrder) : Void
    fun bg_QAbstractItemModel_buddy_SUPER_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : QModelIndex*
    fun bg_QAbstractItemModel_match_SUPER_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags(_self_ : QAbstractItemModel*, start : QModelIndex*, role : Int32, value : CrystalVariant, hits : Int32, flags : MatchFlags) : QModelIndexList*
    fun bg_QAbstractItemModel_span_SUPER_const_QModelIndex_R(_self_ : QAbstractItemModel*, index : QModelIndex*) : QSize*
    fun bg_QAbstractItemModel_submit_SUPER_(_self_ : QAbstractItemModel*) : Bool
    fun bg_QAbstractItemModel_revert_SUPER_(_self_ : QAbstractItemModel*) : Void
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QAbstractItemModel*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QAbstractItemModel*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractItemModel*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QAbstractItemModel*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QAbstractItemModel*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QAbstractItemModel*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QAbstractItemModel*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QAbstractItemModel_JUMPTABLE_BgJumptable_QAbstractItemModel_R(_self_ : QAbstractItemModel*, table : BgJumptable_QAbstractItemModel*) : Void
    fun bg_QIODevice_metaObject_(_self_ : QIODevice*) : QMetaObject*
    fun bg_QIODevice_qt_metacast_const_char_X(_self_ : QIODevice*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QIODevice*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QIODevice_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QIODevice_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QIODevice_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QIODevice__CONSTRUCT_() : QIODevice*
    fun bg_QIODevice__CONSTRUCT_QObject_X(parent : QObject*) : QIODevice*
    fun bg_QIODevice_openMode_(_self_ : QIODevice*) : IODevice::OpenMode
    fun bg_QIODevice_setTextModeEnabled_bool(_self_ : QIODevice*, enabled : Bool) : Void
    fun bg_QIODevice_isTextModeEnabled_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_isOpen_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_isReadable_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_isWritable_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_isSequential_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_readChannelCount_(_self_ : QIODevice*) : Int32
    fun bg_QIODevice_writeChannelCount_(_self_ : QIODevice*) : Int32
    fun bg_QIODevice_currentReadChannel_(_self_ : QIODevice*) : Int32
    fun bg_QIODevice_setCurrentReadChannel_int(_self_ : QIODevice*, channel : Int32) : Void
    fun bg_QIODevice_currentWriteChannel_(_self_ : QIODevice*) : Int32
    fun bg_QIODevice_setCurrentWriteChannel_int(_self_ : QIODevice*, channel : Int32) : Void
    fun bg_QIODevice_open_QIODevice__OpenMode(_self_ : QIODevice*, mode : IODevice::OpenMode) : Bool
    fun bg_QIODevice_close_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_pos_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_size_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_seek_qint64(_self_ : QIODevice*, pos : Int64) : Bool
    fun bg_QIODevice_atEnd_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_reset_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_bytesAvailable_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_bytesToWrite_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_read_char_X_qint64(_self_ : QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_read_qint64(_self_ : QIODevice*, maxlen : Int64) : QByteArray*
    fun bg_QIODevice_readAll_(_self_ : QIODevice*) : QByteArray*
    fun bg_QIODevice_readLine_char_X_qint64(_self_ : QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_readLine_qint64(_self_ : QIODevice*, maxlen : Int64) : QByteArray*
    fun bg_QIODevice_canReadLine_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_startTransaction_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_commitTransaction_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_rollbackTransaction_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_isTransactionStarted_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_write_const_char_X_qint64(_self_ : QIODevice*, data : UInt8*, len : Int64) : Int64
    fun bg_QIODevice_write_const_char_X(_self_ : QIODevice*, data : UInt8*) : Int64
    fun bg_QIODevice_write_const_QByteArray_R(_self_ : QIODevice*, data : QByteArray*) : Int64
    fun bg_QIODevice_peek_char_X_qint64(_self_ : QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_peek_qint64(_self_ : QIODevice*, maxlen : Int64) : QByteArray*
    fun bg_QIODevice_skip_qint64(_self_ : QIODevice*, max_size : Int64) : Int64
    fun bg_QIODevice_waitForReadyRead_int(_self_ : QIODevice*, msecs : Int32) : Bool
    fun bg_QIODevice_waitForBytesWritten_int(_self_ : QIODevice*, msecs : Int32) : Bool
    fun bg_QIODevice_ungetChar_char(_self_ : QIODevice*, c : UInt8) : Void
    fun bg_QIODevice_putChar_char(_self_ : QIODevice*, c : UInt8) : Bool
    fun bg_QIODevice_getChar_char_X(_self_ : QIODevice*, c : UInt8*) : Bool
    fun bg_QIODevice_errorString_(_self_ : QIODevice*) : CrystalString
    fun bg_QIODevice_readyRead_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_channelReadyRead_int(_self_ : QIODevice*, channel : Int32) : Void
    fun bg_QIODevice_bytesWritten_qint64(_self_ : QIODevice*, bytes : Int64) : Void
    fun bg_QIODevice_channelBytesWritten_int_qint64(_self_ : QIODevice*, channel : Int32, bytes : Int64) : Void
    fun bg_QIODevice_aboutToClose_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_readChannelFinished_(_self_ : QIODevice*) : Void
    fun bg_QIODevice__CONSTRUCT_QIODevicePrivate_R_QObject_X(dd : QIODevicePrivate*, parent : QObject*) : QIODevice*
    fun bg_QIODevice_readData_char_X_qint64(_self_ : QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_readLineData_char_X_qint64(_self_ : QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QIODevice_writeData_const_char_X_qint64(_self_ : QIODevice*, data : UInt8*, len : Int64) : Int64
    fun bg_QIODevice_setOpenMode_QIODevice__OpenMode(_self_ : QIODevice*, open_mode : IODevice::OpenMode) : Void
    fun bg_QIODevice_setErrorString_const_QString_R(_self_ : QIODevice*, error_string : CrystalString) : Void
    fun bg_QObject_event_QEvent_X(_self_ : QIODevice*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QIODevice*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QIODevice*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QIODevice*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QIODevice*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QIODevice*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QIODevice*, signal : QMetaMethod*) : Void
    fun bg_QIODevice_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QIODevice_CONNECT_readyRead_CrystalProc_void_(_self_ : QIODevice*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QIODevice_CONNECT_channelReadyRead_CrystalProc_void__int_(_self_ : QIODevice*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QIODevice_CONNECT_bytesWritten_CrystalProc_void__qint64_(_self_ : QIODevice*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QIODevice_CONNECT_channelBytesWritten_CrystalProc_void__int__qint64_(_self_ : QIODevice*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QIODevice_CONNECT_aboutToClose_CrystalProc_void_(_self_ : QIODevice*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QIODevice_CONNECT_readChannelFinished_CrystalProc_void_(_self_ : QIODevice*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QIODevice_isSequential_SUPER_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_open_SUPER_QIODevice__OpenMode(_self_ : QIODevice*, mode : IODevice::OpenMode) : Bool
    fun bg_QIODevice_close_SUPER_(_self_ : QIODevice*) : Void
    fun bg_QIODevice_pos_SUPER_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_size_SUPER_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_seek_SUPER_qint64(_self_ : QIODevice*, pos : Int64) : Bool
    fun bg_QIODevice_atEnd_SUPER_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_reset_SUPER_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_bytesAvailable_SUPER_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_bytesToWrite_SUPER_(_self_ : QIODevice*) : Int64
    fun bg_QIODevice_canReadLine_SUPER_(_self_ : QIODevice*) : Bool
    fun bg_QIODevice_waitForReadyRead_SUPER_int(_self_ : QIODevice*, msecs : Int32) : Bool
    fun bg_QIODevice_waitForBytesWritten_SUPER_int(_self_ : QIODevice*, msecs : Int32) : Bool
    fun bg_QIODevice_readLineData_SUPER_char_X_qint64(_self_ : QIODevice*, data : UInt8*, maxlen : Int64) : Int64
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QIODevice*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QIODevice*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QIODevice*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QIODevice*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QIODevice*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QIODevice*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QIODevice*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QIODevice_JUMPTABLE_BgJumptable_QIODevice_R(_self_ : QIODevice*, table : BgJumptable_QIODevice*) : Void
    fun bg_QUrl__CONSTRUCT_() : QUrl*
    fun bg_QUrl__CONSTRUCT_const_QString_R_QUrl__ParsingMode(url : CrystalString, mode : Url::ParsingMode) : QUrl*
    fun bg_QUrl_swap_QUrl_R(_self_ : QUrl*, other : QUrl*) : Void
    fun bg_QUrl_setUrl_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, url : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_url_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_url_QUrl__FormattingOptions(_self_ : QUrl*, options : Url::FormattingOptions) : CrystalString
    fun bg_QUrl_toString_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_toString_QUrl__FormattingOptions(_self_ : QUrl*, options : Url::FormattingOptions) : CrystalString
    fun bg_QUrl_toDisplayString_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_toDisplayString_QUrl__FormattingOptions(_self_ : QUrl*, options : Url::FormattingOptions) : CrystalString
    fun bg_QUrl_adjusted_QUrl__FormattingOptions(_self_ : QUrl*, options : Url::FormattingOptions) : QUrl*
    fun bg_QUrl_toEncoded_(_self_ : QUrl*) : QByteArray*
    fun bg_QUrl_toEncoded_QUrl__FormattingOptions(_self_ : QUrl*, options : Url::FormattingOptions) : QByteArray*
    fun bg_QUrl_fromEncoded_STATIC_const_QByteArray_R_QUrl__ParsingMode(url : QByteArray*, mode : Url::ParsingMode) : QUrl*
    fun bg_QUrl_fromUserInput_STATIC_const_QString_R(user_input : CrystalString) : QUrl*
    fun bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R(user_input : CrystalString, working_directory : CrystalString) : QUrl*
    fun bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R_QUrl__UserInputResolutionOptions(user_input : CrystalString, working_directory : CrystalString, options : Url::UserInputResolutionOptions) : QUrl*
    fun bg_QUrl_isValid_(_self_ : QUrl*) : Bool
    fun bg_QUrl_errorString_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_isEmpty_(_self_ : QUrl*) : Bool
    fun bg_QUrl_clear_(_self_ : QUrl*) : Void
    fun bg_QUrl_setScheme_const_QString_R(_self_ : QUrl*, scheme : CrystalString) : Void
    fun bg_QUrl_scheme_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_setAuthority_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, authority : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_authority_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_authority_QUrl__ComponentFormattingOptions(_self_ : QUrl*, options : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_setUserInfo_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, user_info : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_userInfo_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_userInfo_QUrl__ComponentFormattingOptions(_self_ : QUrl*, options : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_setUserName_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, user_name : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_userName_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_userName_QUrl__ComponentFormattingOptions(_self_ : QUrl*, options : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_setPassword_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, password : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_password_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_password_QUrl__ComponentFormattingOptions(_self_ : QUrl*, unnamed_arg_0 : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_setHost_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, host : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_host_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_host_QUrl__ComponentFormattingOptions(_self_ : QUrl*, unnamed_arg_0 : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_setPort_int(_self_ : QUrl*, port : Int32) : Void
    fun bg_QUrl_port_int(_self_ : QUrl*, default_port : Int32) : Int32
    fun bg_QUrl_setPath_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, path : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_path_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_path_QUrl__ComponentFormattingOptions(_self_ : QUrl*, options : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_fileName_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_fileName_QUrl__ComponentFormattingOptions(_self_ : QUrl*, options : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_hasQuery_(_self_ : QUrl*) : Bool
    fun bg_QUrl_setQuery_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, query : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_setQuery_const_QUrlQuery_R(_self_ : QUrl*, query : QUrlQuery*) : Void
    fun bg_QUrl_query_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_query_QUrl__ComponentFormattingOptions(_self_ : QUrl*, unnamed_arg_0 : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_hasFragment_(_self_ : QUrl*) : Bool
    fun bg_QUrl_fragment_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_fragment_QUrl__ComponentFormattingOptions(_self_ : QUrl*, options : Url::ComponentFormattingOptions) : CrystalString
    fun bg_QUrl_setFragment_const_QString_R_QUrl__ParsingMode(_self_ : QUrl*, fragment : CrystalString, mode : Url::ParsingMode) : Void
    fun bg_QUrl_resolved_const_QUrl_R(_self_ : QUrl*, relative : QUrl*) : QUrl*
    fun bg_QUrl_isRelative_(_self_ : QUrl*) : Bool
    fun bg_QUrl_isParentOf_const_QUrl_R(_self_ : QUrl*, url : QUrl*) : Bool
    fun bg_QUrl_isLocalFile_(_self_ : QUrl*) : Bool
    fun bg_QUrl_fromLocalFile_STATIC_const_QString_R(localfile : CrystalString) : QUrl*
    fun bg_QUrl_toLocalFile_(_self_ : QUrl*) : CrystalString
    fun bg_QUrl_detach_(_self_ : QUrl*) : Void
    fun bg_QUrl_isDetached_(_self_ : QUrl*) : Bool
    fun bg_QUrl__OPERATOR_lt_const_QUrl_R(_self_ : QUrl*, url : QUrl*) : Bool
    fun bg_QUrl__OPERATOR_eq_const_QUrl_R(_self_ : QUrl*, url : QUrl*) : Bool
    fun bg_QUrl__OPERATOR_ne_const_QUrl_R(_self_ : QUrl*, url : QUrl*) : Bool
    fun bg_QUrl_matches_const_QUrl_R_QUrl__FormattingOptions(_self_ : QUrl*, url : QUrl*, options : Url::FormattingOptions) : Bool
    fun bg_QUrl_fromPercentEncoding_STATIC_const_QByteArray_R(unnamed_arg_0 : QByteArray*) : CrystalString
    fun bg_QUrl_toPercentEncoding_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QByteArray*
    fun bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R(unnamed_arg_0 : CrystalString, exclude : QByteArray*) : QByteArray*
    fun bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R_const_QByteArray_R(unnamed_arg_0 : CrystalString, exclude : QByteArray*, include_ : QByteArray*) : QByteArray*
    fun bg_QUrl_fromAce_STATIC_const_QByteArray_R(unnamed_arg_0 : QByteArray*) : CrystalString
    fun bg_QUrl_toAce_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QByteArray*
    fun bg_QUrl_idnWhitelist_STATIC_() : QStringList*
    fun bg_QUrl_toStringList_STATIC_const_QList_QUrl__R(uris : ContainerQListQUrl*) : QStringList*
    fun bg_QUrl_toStringList_STATIC_const_QList_QUrl__R_QUrl__FormattingOptions(uris : ContainerQListQUrl*, options : Url::FormattingOptions) : QStringList*
    fun bg_QUrl_fromStringList_STATIC_const_QStringList_R_QUrl__ParsingMode(uris : QStringList*, mode : Url::ParsingMode) : ContainerQListQUrl*
    fun bg_QUrl_setIdnWhitelist_STATIC_const_QStringList_R(unnamed_arg_0 : QStringList*) : Void
    fun bg_QEvent__CONSTRUCT_QEvent__Type(type : Event::Type) : QEvent*
    fun bg_QEvent_type_(_self_ : QEvent*) : Event::Type
    fun bg_QEvent_spontaneous_(_self_ : QEvent*) : Bool
    fun bg_QEvent_setAccepted_bool(_self_ : QEvent*, accepted : Bool) : Void
    fun bg_QEvent_isAccepted_(_self_ : QEvent*) : Bool
    fun bg_QEvent_accept_(_self_ : QEvent*) : Void
    fun bg_QEvent_ignore_(_self_ : QEvent*) : Void
    fun bg_QEvent_registerEventType_STATIC_int(hint : Int32) : Int32
    fun bg_QEvent_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTimerEvent__CONSTRUCT_int(timer_id : Int32) : QTimerEvent*
    fun bg_QTimerEvent_timerId_(_self_ : QTimerEvent*) : Int32
    fun bg_QDynamicPropertyChangeEvent__CONSTRUCT_const_QByteArray_R(name : QByteArray*) : QDynamicPropertyChangeEvent*
    fun bg_QDynamicPropertyChangeEvent_propertyName_(_self_ : QDynamicPropertyChangeEvent*) : QByteArray*
    fun bg_QDeferredDeleteEvent__CONSTRUCT_() : QDeferredDeleteEvent*
    fun bg_QDeferredDeleteEvent_loopLevel_(_self_ : QDeferredDeleteEvent*) : Int32
    fun bg_QCoreApplication_metaObject_(_self_ : QCoreApplication*) : QMetaObject*
    fun bg_QCoreApplication_qt_metacast_const_char_X(_self_ : QCoreApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QCoreApplication*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QCoreApplication_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCoreApplication__CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : QCoreApplication*
    fun bg_QCoreApplication_arguments_STATIC_() : QStringList*
    fun bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(attribute : ApplicationAttribute, on : Bool) : Void
    fun bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(attribute : ApplicationAttribute) : Bool
    fun bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(org_domain : CrystalString) : Void
    fun bg_QCoreApplication_organizationDomain_STATIC_() : CrystalString
    fun bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(org_name : CrystalString) : Void
    fun bg_QCoreApplication_organizationName_STATIC_() : CrystalString
    fun bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(application : CrystalString) : Void
    fun bg_QCoreApplication_applicationName_STATIC_() : CrystalString
    fun bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(version : CrystalString) : Void
    fun bg_QCoreApplication_applicationVersion_STATIC_() : CrystalString
    fun bg_QCoreApplication_setSetuidAllowed_STATIC_bool(allow : Bool) : Void
    fun bg_QCoreApplication_isSetuidAllowed_STATIC_() : Bool
    fun bg_QCoreApplication_instance_STATIC_() : QCoreApplication*
    fun bg_QCoreApplication_exec_STATIC_() : Int32
    fun bg_QCoreApplication_processEvents_STATIC_() : Void
    fun bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(flags : EventLoop::ProcessEventsFlags) : Void
    fun bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(flags : EventLoop::ProcessEventsFlags, maxtime : Int32) : Void
    fun bg_QCoreApplication_exit_STATIC_int(retcode : Int32) : Void
    fun bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(receiver : QObject*, event : QEvent*) : Bool
    fun bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(receiver : QObject*, event : QEvent*, priority : Int32) : Void
    fun bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(receiver : QObject*, event_type : Int32) : Void
    fun bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(receiver : QObject*, event_type : Int32) : Void
    fun bg_QCoreApplication_eventDispatcher_STATIC_() : QAbstractEventDispatcher*
    fun bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(event_dispatcher : QAbstractEventDispatcher*) : Void
    fun bg_QCoreApplication_notify_QObject_X_QEvent_X(_self_ : QCoreApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QCoreApplication_startingUp_STATIC_() : Bool
    fun bg_QCoreApplication_closingDown_STATIC_() : Bool
    fun bg_QCoreApplication_applicationDirPath_STATIC_() : CrystalString
    fun bg_QCoreApplication_applicationFilePath_STATIC_() : CrystalString
    fun bg_QCoreApplication_applicationPid_STATIC_() : Int64
    fun bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(unnamed_arg_0 : QStringList*) : Void
    fun bg_QCoreApplication_libraryPaths_STATIC_() : QStringList*
    fun bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(message_file : QTranslator*) : Bool
    fun bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(message_file : QTranslator*) : Bool
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X(context : UInt8*, key : UInt8*) : CrystalString
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X(context : UInt8*, key : UInt8*, disambiguation : UInt8*) : CrystalString
    fun bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(context : UInt8*, key : UInt8*, disambiguation : UInt8*, n : Int32) : CrystalString
    fun bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QCoreApplication*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(_self_ : QCoreApplication*, filter_obj : QAbstractNativeEventFilter*) : Void
    fun bg_QCoreApplication_isQuitLockEnabled_STATIC_() : Bool
    fun bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(enabled : Bool) : Void
    fun bg_QCoreApplication_quit_STATIC_() : Void
    fun bg_QCoreApplication_organizationNameChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_organizationDomainChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_applicationNameChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_applicationVersionChanged_(_self_ : QCoreApplication*) : Void
    fun bg_QCoreApplication_event_QEvent_X(_self_ : QCoreApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : QCoreApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QCoreApplication__CONSTRUCT_QCoreApplicationPrivate_R(p : QCoreApplicationPrivate*) : QCoreApplication*
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QCoreApplication*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QCoreApplication*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QCoreApplication*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QCoreApplication*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QCoreApplication*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QCoreApplication*, signal : QMetaMethod*) : Void
    fun bg_QCoreApplication_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QCoreApplication_CONNECT_aboutToQuit_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_CONNECT_organizationNameChanged_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_CONNECT_organizationDomainChanged_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_CONNECT_applicationNameChanged_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_CONNECT_applicationVersionChanged_CrystalProc_void_(_self_ : QCoreApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCoreApplication_notify_SUPER_QObject_X_QEvent_X(_self_ : QCoreApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QCoreApplication_event_SUPER_QEvent_X(_self_ : QCoreApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QCoreApplication_compressEvent_SUPER_QEvent_X_QObject_X_QPostEventList_X(_self_ : QCoreApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QCoreApplication*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QCoreApplication*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QCoreApplication*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QCoreApplication*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QCoreApplication*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QCoreApplication*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QCoreApplication_JUMPTABLE_BgJumptable_QCoreApplication_R(_self_ : QCoreApplication*, table : BgJumptable_QCoreApplication*) : Void
    fun bg_QDir__CONSTRUCT_() : QDir*
    fun bg_QDir__CONSTRUCT_const_QString_R(path : CrystalString) : QDir*
    fun bg_QDir__CONSTRUCT_const_QString_R_const_QString_R(path : CrystalString, name_filter : CrystalString) : QDir*
    fun bg_QDir__CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(path : CrystalString, name_filter : CrystalString, sort : Dir::SortFlags) : QDir*
    fun bg_QDir__CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(path : CrystalString, name_filter : CrystalString, sort : Dir::SortFlags, filter : Dir::Filters) : QDir*
    fun bg_QDir_swap_QDir_R(_self_ : QDir*, other : QDir*) : Void
    fun bg_QDir_setPath_const_QString_R(_self_ : QDir*, path : CrystalString) : Void
    fun bg_QDir_path_(_self_ : QDir*) : CrystalString
    fun bg_QDir_absolutePath_(_self_ : QDir*) : CrystalString
    fun bg_QDir_canonicalPath_(_self_ : QDir*) : CrystalString
    fun bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(prefix : CrystalString, search_paths : QStringList*) : Void
    fun bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(prefix : CrystalString, path : CrystalString) : Void
    fun bg_QDir_searchPaths_STATIC_const_QString_R(prefix : CrystalString) : QStringList*
    fun bg_QDir_dirName_(_self_ : QDir*) : CrystalString
    fun bg_QDir_filePath_const_QString_R(_self_ : QDir*, file_name : CrystalString) : CrystalString
    fun bg_QDir_absoluteFilePath_const_QString_R(_self_ : QDir*, file_name : CrystalString) : CrystalString
    fun bg_QDir_relativeFilePath_const_QString_R(_self_ : QDir*, file_name : CrystalString) : CrystalString
    fun bg_QDir_toNativeSeparators_STATIC_const_QString_R(path_name : CrystalString) : CrystalString
    fun bg_QDir_fromNativeSeparators_STATIC_const_QString_R(path_name : CrystalString) : CrystalString
    fun bg_QDir_cd_const_QString_R(_self_ : QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_cdUp_(_self_ : QDir*) : Bool
    fun bg_QDir_nameFilters_(_self_ : QDir*) : QStringList*
    fun bg_QDir_setNameFilters_const_QStringList_R(_self_ : QDir*, name_filters : QStringList*) : Void
    fun bg_QDir_filter_(_self_ : QDir*) : Dir::Filters
    fun bg_QDir_setFilter_QDir__Filters(_self_ : QDir*, filter : Dir::Filters) : Void
    fun bg_QDir_sorting_(_self_ : QDir*) : Dir::SortFlags
    fun bg_QDir_setSorting_QDir__SortFlags(_self_ : QDir*, sort : Dir::SortFlags) : Void
    fun bg_QDir_count_(_self_ : QDir*) : UInt32
    fun bg_QDir_isEmpty_(_self_ : QDir*) : Bool
    fun bg_QDir_isEmpty_QDir__Filters(_self_ : QDir*, filters : Dir::Filters) : Bool
    fun bg_QDir__OPERATOR_at_int(_self_ : QDir*, unnamed_arg_0 : Int32) : CrystalString
    fun bg_QDir_nameFiltersFromString_STATIC_const_QString_R(name_filter : CrystalString) : QStringList*
    fun bg_QDir_entryList_(_self_ : QDir*) : QStringList*
    fun bg_QDir_entryList_QDir__Filters(_self_ : QDir*, filters : Dir::Filters) : QStringList*
    fun bg_QDir_entryList_QDir__Filters_QDir__SortFlags(_self_ : QDir*, filters : Dir::Filters, sort : Dir::SortFlags) : QStringList*
    fun bg_QDir_entryList_const_QStringList_R(_self_ : QDir*, name_filters : QStringList*) : QStringList*
    fun bg_QDir_entryList_const_QStringList_R_QDir__Filters(_self_ : QDir*, name_filters : QStringList*, filters : Dir::Filters) : QStringList*
    fun bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(_self_ : QDir*, name_filters : QStringList*, filters : Dir::Filters, sort : Dir::SortFlags) : QStringList*
    fun bg_QDir_entryInfoList_(_self_ : QDir*) : QFileInfoList*
    fun bg_QDir_entryInfoList_QDir__Filters(_self_ : QDir*, filters : Dir::Filters) : QFileInfoList*
    fun bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(_self_ : QDir*, filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R(_self_ : QDir*, name_filters : QStringList*) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(_self_ : QDir*, name_filters : QStringList*, filters : Dir::Filters) : QFileInfoList*
    fun bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(_self_ : QDir*, name_filters : QStringList*, filters : Dir::Filters, sort : Dir::SortFlags) : QFileInfoList*
    fun bg_QDir_mkdir_const_QString_R(_self_ : QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_rmdir_const_QString_R(_self_ : QDir*, dir_name : CrystalString) : Bool
    fun bg_QDir_mkpath_const_QString_R(_self_ : QDir*, dir_path : CrystalString) : Bool
    fun bg_QDir_rmpath_const_QString_R(_self_ : QDir*, dir_path : CrystalString) : Bool
    fun bg_QDir_removeRecursively_(_self_ : QDir*) : Bool
    fun bg_QDir_isReadable_(_self_ : QDir*) : Bool
    fun bg_QDir_exists_(_self_ : QDir*) : Bool
    fun bg_QDir_isRoot_(_self_ : QDir*) : Bool
    fun bg_QDir_isRelativePath_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_isAbsolutePath_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_isRelative_(_self_ : QDir*) : Bool
    fun bg_QDir_isAbsolute_(_self_ : QDir*) : Bool
    fun bg_QDir_makeAbsolute_(_self_ : QDir*) : Bool
    fun bg_QDir__OPERATOR_eq_const_QDir_R(_self_ : QDir*, dir : QDir*) : Bool
    fun bg_QDir__OPERATOR_ne_const_QDir_R(_self_ : QDir*, dir : QDir*) : Bool
    fun bg_QDir_remove_const_QString_R(_self_ : QDir*, file_name : CrystalString) : Bool
    fun bg_QDir_rename_const_QString_R_const_QString_R(_self_ : QDir*, old_name : CrystalString, new_name : CrystalString) : Bool
    fun bg_QDir_exists_const_QString_R(_self_ : QDir*, name : CrystalString) : Bool
    fun bg_QDir_drives_STATIC_() : QFileInfoList*
    fun bg_QDir_listSeparator_STATIC_() : Int32
    fun bg_QDir_separator_STATIC_() : Int32
    fun bg_QDir_setCurrent_STATIC_const_QString_R(path : CrystalString) : Bool
    fun bg_QDir_current_STATIC_() : QDir*
    fun bg_QDir_currentPath_STATIC_() : CrystalString
    fun bg_QDir_home_STATIC_() : QDir*
    fun bg_QDir_homePath_STATIC_() : CrystalString
    fun bg_QDir_root_STATIC_() : QDir*
    fun bg_QDir_rootPath_STATIC_() : CrystalString
    fun bg_QDir_temp_STATIC_() : QDir*
    fun bg_QDir_tempPath_STATIC_() : CrystalString
    fun bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(filters : QStringList*, file_name : CrystalString) : Bool
    fun bg_QDir_match_STATIC_const_QString_R_const_QString_R(filter : CrystalString, file_name : CrystalString) : Bool
    fun bg_QDir_cleanPath_STATIC_const_QString_R(path : CrystalString) : CrystalString
    fun bg_QDir_refresh_(_self_ : QDir*) : Void
    fun bg_QDir__CONSTRUCT_QDirPrivate_R(d : QDirPrivate*) : QDir*
    fun bg_QLine__CONSTRUCT_() : QLine*
    fun bg_QLine__CONSTRUCT_const_QPoint_R_const_QPoint_R(pt1 : QPoint, pt2 : QPoint) : QLine*
    fun bg_QLine__CONSTRUCT_int_int_int_int(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : QLine*
    fun bg_QLine_isNull_(_self_ : QLine*) : Bool
    fun bg_QLine_p1_(_self_ : QLine*) : QPoint
    fun bg_QLine_p2_(_self_ : QLine*) : QPoint
    fun bg_QLine_x1_(_self_ : QLine*) : Int32
    fun bg_QLine_y1_(_self_ : QLine*) : Int32
    fun bg_QLine_x2_(_self_ : QLine*) : Int32
    fun bg_QLine_y2_(_self_ : QLine*) : Int32
    fun bg_QLine_dx_(_self_ : QLine*) : Int32
    fun bg_QLine_dy_(_self_ : QLine*) : Int32
    fun bg_QLine_translate_const_QPoint_R(_self_ : QLine*, p : QPoint) : Void
    fun bg_QLine_translate_int_int(_self_ : QLine*, dx : Int32, dy : Int32) : Void
    fun bg_QLine_translated_const_QPoint_R(_self_ : QLine*, p : QPoint) : QLine*
    fun bg_QLine_translated_int_int(_self_ : QLine*, dx : Int32, dy : Int32) : QLine*
    fun bg_QLine_center_(_self_ : QLine*) : QPoint
    fun bg_QLine_setP1_const_QPoint_R(_self_ : QLine*, p1 : QPoint) : Void
    fun bg_QLine_setP2_const_QPoint_R(_self_ : QLine*, p2 : QPoint) : Void
    fun bg_QLine_setPoints_const_QPoint_R_const_QPoint_R(_self_ : QLine*, p1 : QPoint, p2 : QPoint) : Void
    fun bg_QLine_setLine_int_int_int_int(_self_ : QLine*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QLine__OPERATOR_eq_const_QLine_R(_self_ : QLine*, d : QLine*) : Bool
    fun bg_QLine__OPERATOR_ne_const_QLine_R(_self_ : QLine*, d : QLine*) : Bool
    fun bg_QLine__OPERATOR_mul_const_QMatrix_R(_self_ : QLine*, m : QMatrix*) : QLine*
    fun bg_QLine__OPERATOR_mul_const_QTransform_R(_self_ : QLine*, m : QTransform*) : QLine*
    fun bg_QLineF__CONSTRUCT_() : QLineF*
    fun bg_QLineF__CONSTRUCT_const_QPointF_R_const_QPointF_R(pt1 : QPointF, pt2 : QPointF) : QLineF*
    fun bg_QLineF__CONSTRUCT_qreal_qreal_qreal_qreal(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : QLineF*
    fun bg_QLineF__CONSTRUCT_const_QLine_R(line : QLine*) : QLineF*
    fun bg_QLineF_fromPolar_STATIC_qreal_qreal(length : Float64, angle : Float64) : QLineF*
    fun bg_QLineF_isNull_(_self_ : QLineF*) : Bool
    fun bg_QLineF_p1_(_self_ : QLineF*) : QPointF
    fun bg_QLineF_p2_(_self_ : QLineF*) : QPointF
    fun bg_QLineF_x1_(_self_ : QLineF*) : Float64
    fun bg_QLineF_y1_(_self_ : QLineF*) : Float64
    fun bg_QLineF_x2_(_self_ : QLineF*) : Float64
    fun bg_QLineF_y2_(_self_ : QLineF*) : Float64
    fun bg_QLineF_dx_(_self_ : QLineF*) : Float64
    fun bg_QLineF_dy_(_self_ : QLineF*) : Float64
    fun bg_QLineF_length_(_self_ : QLineF*) : Float64
    fun bg_QLineF_setLength_qreal(_self_ : QLineF*, len : Float64) : Void
    fun bg_QLineF_setAngle_qreal(_self_ : QLineF*, angle : Float64) : Void
    fun bg_QLineF_angleTo_const_QLineF_R(_self_ : QLineF*, l : QLineF*) : Float64
    fun bg_QLineF_unitVector_(_self_ : QLineF*) : QLineF*
    fun bg_QLineF_normalVector_(_self_ : QLineF*) : QLineF*
    fun bg_QLineF_pointAt_qreal(_self_ : QLineF*, t : Float64) : QPointF
    fun bg_QLineF_translate_const_QPointF_R(_self_ : QLineF*, p : QPointF) : Void
    fun bg_QLineF_translate_qreal_qreal(_self_ : QLineF*, dx : Float64, dy : Float64) : Void
    fun bg_QLineF_translated_const_QPointF_R(_self_ : QLineF*, p : QPointF) : QLineF*
    fun bg_QLineF_translated_qreal_qreal(_self_ : QLineF*, dx : Float64, dy : Float64) : QLineF*
    fun bg_QLineF_center_(_self_ : QLineF*) : QPointF
    fun bg_QLineF_setP1_const_QPointF_R(_self_ : QLineF*, p1 : QPointF) : Void
    fun bg_QLineF_setP2_const_QPointF_R(_self_ : QLineF*, p2 : QPointF) : Void
    fun bg_QLineF_setPoints_const_QPointF_R_const_QPointF_R(_self_ : QLineF*, p1 : QPointF, p2 : QPointF) : Void
    fun bg_QLineF_setLine_qreal_qreal_qreal_qreal(_self_ : QLineF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
    fun bg_QLineF__OPERATOR_eq_const_QLineF_R(_self_ : QLineF*, d : QLineF*) : Bool
    fun bg_QLineF__OPERATOR_ne_const_QLineF_R(_self_ : QLineF*, d : QLineF*) : Bool
    fun bg_QLineF_toLine_(_self_ : QLineF*) : QLine*
    fun bg_QLineF__OPERATOR_mul_const_QMatrix_R(_self_ : QLineF*, m : QMatrix*) : QLineF*
    fun bg_QLineF__OPERATOR_mul_const_QTransform_R(_self_ : QLineF*, m : QTransform*) : QLineF*
    fun bg_QMimeData_metaObject_(_self_ : QMimeData*) : QMetaObject*
    fun bg_QMimeData_qt_metacast_const_char_X(_self_ : QMimeData*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QMimeData*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMimeData_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMimeData_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMimeData_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMimeData__CONSTRUCT_() : QMimeData*
    fun bg_QMimeData_urls_(_self_ : QMimeData*) : ContainerQListQUrl*
    fun bg_QMimeData_setUrls_const_QList_QUrl__R(_self_ : QMimeData*, urls : ContainerQListQUrl*) : Void
    fun bg_QMimeData_hasUrls_(_self_ : QMimeData*) : Bool
    fun bg_QMimeData_text_(_self_ : QMimeData*) : CrystalString
    fun bg_QMimeData_setText_const_QString_R(_self_ : QMimeData*, text : CrystalString) : Void
    fun bg_QMimeData_hasText_(_self_ : QMimeData*) : Bool
    fun bg_QMimeData_html_(_self_ : QMimeData*) : CrystalString
    fun bg_QMimeData_setHtml_const_QString_R(_self_ : QMimeData*, html : CrystalString) : Void
    fun bg_QMimeData_hasHtml_(_self_ : QMimeData*) : Bool
    fun bg_QMimeData_imageData_(_self_ : QMimeData*) : CrystalVariant
    fun bg_QMimeData_setImageData_const_QVariant_R(_self_ : QMimeData*, image : CrystalVariant) : Void
    fun bg_QMimeData_hasImage_(_self_ : QMimeData*) : Bool
    fun bg_QMimeData_colorData_(_self_ : QMimeData*) : CrystalVariant
    fun bg_QMimeData_setColorData_const_QVariant_R(_self_ : QMimeData*, color : CrystalVariant) : Void
    fun bg_QMimeData_hasColor_(_self_ : QMimeData*) : Bool
    fun bg_QMimeData_data_const_QString_R(_self_ : QMimeData*, mimetype : CrystalString) : QByteArray*
    fun bg_QMimeData_setData_const_QString_R_const_QByteArray_R(_self_ : QMimeData*, mimetype : CrystalString, data : QByteArray*) : Void
    fun bg_QMimeData_removeFormat_const_QString_R(_self_ : QMimeData*, mimetype : CrystalString) : Void
    fun bg_QMimeData_hasFormat_const_QString_R(_self_ : QMimeData*, mimetype : CrystalString) : Bool
    fun bg_QMimeData_formats_(_self_ : QMimeData*) : QStringList*
    fun bg_QMimeData_clear_(_self_ : QMimeData*) : Void
    fun bg_QMimeData_retrieveData_const_QString_R_QVariant__Type(_self_ : QMimeData*, mimetype : CrystalString, preferred_type : VariantType) : CrystalVariant
    fun bg_QObject_event_QEvent_X(_self_ : QMimeData*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QMimeData*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QMimeData*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QMimeData*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QMimeData*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QMimeData*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QMimeData*, signal : QMetaMethod*) : Void
    fun bg_QMimeData_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QMimeData_hasFormat_SUPER_const_QString_R(_self_ : QMimeData*, mimetype : CrystalString) : Bool
    fun bg_QMimeData_formats_SUPER_(_self_ : QMimeData*) : QStringList*
    fun bg_QMimeData_retrieveData_SUPER_const_QString_R_QVariant__Type(_self_ : QMimeData*, mimetype : CrystalString, preferred_type : VariantType) : CrystalVariant
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QMimeData*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QMimeData*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QMimeData*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QMimeData*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QMimeData*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QMimeData*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QMimeData*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QMimeData_JUMPTABLE_BgJumptable_QMimeData_R(_self_ : QMimeData*, table : BgJumptable_QMimeData*) : Void
    fun bg_QRect__CONSTRUCT_() : QRect*
    fun bg_QRect__CONSTRUCT_const_QPoint_R_const_QPoint_R(topleft : QPoint, bottomright : QPoint) : QRect*
    fun bg_QRect__CONSTRUCT_const_QPoint_R_const_QSize_R(topleft : QPoint, size : QSize*) : QRect*
    fun bg_QRect__CONSTRUCT_int_int_int_int(left : Int32, top : Int32, width : Int32, height : Int32) : QRect*
    fun bg_QRect_isNull_(_self_ : QRect*) : Bool
    fun bg_QRect_isEmpty_(_self_ : QRect*) : Bool
    fun bg_QRect_isValid_(_self_ : QRect*) : Bool
    fun bg_QRect_left_(_self_ : QRect*) : Int32
    fun bg_QRect_top_(_self_ : QRect*) : Int32
    fun bg_QRect_right_(_self_ : QRect*) : Int32
    fun bg_QRect_bottom_(_self_ : QRect*) : Int32
    fun bg_QRect_normalized_(_self_ : QRect*) : QRect*
    fun bg_QRect_x_(_self_ : QRect*) : Int32
    fun bg_QRect_y_(_self_ : QRect*) : Int32
    fun bg_QRect_setLeft_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_setTop_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_setRight_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_setBottom_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_setX_int(_self_ : QRect*, x : Int32) : Void
    fun bg_QRect_setY_int(_self_ : QRect*, y : Int32) : Void
    fun bg_QRect_setTopLeft_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_setBottomRight_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_setTopRight_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_setBottomLeft_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_topLeft_(_self_ : QRect*) : QPoint
    fun bg_QRect_bottomRight_(_self_ : QRect*) : QPoint
    fun bg_QRect_topRight_(_self_ : QRect*) : QPoint
    fun bg_QRect_bottomLeft_(_self_ : QRect*) : QPoint
    fun bg_QRect_center_(_self_ : QRect*) : QPoint
    fun bg_QRect_moveLeft_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_moveTop_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_moveRight_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_moveBottom_int(_self_ : QRect*, pos : Int32) : Void
    fun bg_QRect_moveTopLeft_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_moveBottomRight_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_moveTopRight_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_moveBottomLeft_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_moveCenter_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_translate_int_int(_self_ : QRect*, dx : Int32, dy : Int32) : Void
    fun bg_QRect_translate_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_translated_int_int(_self_ : QRect*, dx : Int32, dy : Int32) : QRect*
    fun bg_QRect_translated_const_QPoint_R(_self_ : QRect*, p : QPoint) : QRect*
    fun bg_QRect_transposed_(_self_ : QRect*) : QRect*
    fun bg_QRect_moveTo_int_int(_self_ : QRect*, x : Int32, t : Int32) : Void
    fun bg_QRect_moveTo_const_QPoint_R(_self_ : QRect*, p : QPoint) : Void
    fun bg_QRect_setRect_int_int_int_int(_self_ : QRect*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QRect_getRect_int_X_int_X_int_X_int_X(_self_ : QRect*, x : Int32*, y : Int32*, w : Int32*, h : Int32*) : Void
    fun bg_QRect_setCoords_int_int_int_int(_self_ : QRect*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QRect_getCoords_int_X_int_X_int_X_int_X(_self_ : QRect*, x1 : Int32*, y1 : Int32*, x2 : Int32*, y2 : Int32*) : Void
    fun bg_QRect_adjust_int_int_int_int(_self_ : QRect*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QRect_adjusted_int_int_int_int(_self_ : QRect*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : QRect*
    fun bg_QRect_size_(_self_ : QRect*) : QSize*
    fun bg_QRect_width_(_self_ : QRect*) : Int32
    fun bg_QRect_height_(_self_ : QRect*) : Int32
    fun bg_QRect_setWidth_int(_self_ : QRect*, w : Int32) : Void
    fun bg_QRect_setHeight_int(_self_ : QRect*, h : Int32) : Void
    fun bg_QRect_setSize_const_QSize_R(_self_ : QRect*, s : QSize*) : Void
    fun bg_QRect__OPERATOR_bit_or_const_QRect_R(_self_ : QRect*, r : QRect*) : QRect*
    fun bg_QRect__OPERATOR_bit_and_const_QRect_R(_self_ : QRect*, r : QRect*) : QRect*
    fun bg_QRect__OPERATOR_bit_or_assign_const_QRect_R(_self_ : QRect*, r : QRect*) : QRect*
    fun bg_QRect__OPERATOR_bit_and_assign_const_QRect_R(_self_ : QRect*, r : QRect*) : QRect*
    fun bg_QRect_contains_const_QRect_R_bool(_self_ : QRect*, r : QRect*, proper : Bool) : Bool
    fun bg_QRect_contains_const_QPoint_R_bool(_self_ : QRect*, p : QPoint, proper : Bool) : Bool
    fun bg_QRect_contains_int_int(_self_ : QRect*, x : Int32, y : Int32) : Bool
    fun bg_QRect_contains_int_int_bool(_self_ : QRect*, x : Int32, y : Int32, proper : Bool) : Bool
    fun bg_QRect_united_const_QRect_R(_self_ : QRect*, other : QRect*) : QRect*
    fun bg_QRect_intersected_const_QRect_R(_self_ : QRect*, other : QRect*) : QRect*
    fun bg_QRect_intersects_const_QRect_R(_self_ : QRect*, r : QRect*) : Bool
    fun bg_QRect_marginsAdded_const_QMargins_R(_self_ : QRect*, margins : QMargins*) : QRect*
    fun bg_QRect_marginsRemoved_const_QMargins_R(_self_ : QRect*, margins : QMargins*) : QRect*
    fun bg_QRect__OPERATOR_add_assign_const_QMargins_R(_self_ : QRect*, margins : QMargins*) : QRect*
    fun bg_QRect__OPERATOR_sub_assign_const_QMargins_R(_self_ : QRect*, margins : QMargins*) : QRect*
    fun bg_QRect__OPERATOR_eq_const_QRect_R(_self_ : QRect*, unnamed_arg_0 : QRect*) : Bool
    fun bg_QRect__OPERATOR_ne_const_QRect_R(_self_ : QRect*, unnamed_arg_0 : QRect*) : Bool
    fun bg_QRect__OPERATOR_add_const_QMargins_R(_self_ : QRect*, margins : QMargins*) : QRect*
    fun bg_QRect__OPERATOR_sub_const_QMargins_R(_self_ : QRect*, rhs : QMargins*) : QRect*
    fun bg_QRectF__CONSTRUCT_() : QRectF*
    fun bg_QRectF__CONSTRUCT_const_QPointF_R_const_QSizeF_R(topleft : QPointF, size : QSizeF*) : QRectF*
    fun bg_QRectF__CONSTRUCT_const_QPointF_R_const_QPointF_R(topleft : QPointF, bottom_right : QPointF) : QRectF*
    fun bg_QRectF__CONSTRUCT_qreal_qreal_qreal_qreal(left : Float64, top : Float64, width : Float64, height : Float64) : QRectF*
    fun bg_QRectF__CONSTRUCT_const_QRect_R(rect : QRect*) : QRectF*
    fun bg_QRectF_isNull_(_self_ : QRectF*) : Bool
    fun bg_QRectF_isEmpty_(_self_ : QRectF*) : Bool
    fun bg_QRectF_isValid_(_self_ : QRectF*) : Bool
    fun bg_QRectF_normalized_(_self_ : QRectF*) : QRectF*
    fun bg_QRectF_left_(_self_ : QRectF*) : Float64
    fun bg_QRectF_top_(_self_ : QRectF*) : Float64
    fun bg_QRectF_right_(_self_ : QRectF*) : Float64
    fun bg_QRectF_bottom_(_self_ : QRectF*) : Float64
    fun bg_QRectF_x_(_self_ : QRectF*) : Float64
    fun bg_QRectF_y_(_self_ : QRectF*) : Float64
    fun bg_QRectF_setLeft_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_setTop_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_setRight_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_setBottom_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_setX_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_setY_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_topLeft_(_self_ : QRectF*) : QPointF
    fun bg_QRectF_bottomRight_(_self_ : QRectF*) : QPointF
    fun bg_QRectF_topRight_(_self_ : QRectF*) : QPointF
    fun bg_QRectF_bottomLeft_(_self_ : QRectF*) : QPointF
    fun bg_QRectF_center_(_self_ : QRectF*) : QPointF
    fun bg_QRectF_setTopLeft_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_setBottomRight_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_setTopRight_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_setBottomLeft_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveLeft_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveTop_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveRight_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveBottom_qreal(_self_ : QRectF*, pos : Float64) : Void
    fun bg_QRectF_moveTopLeft_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveBottomRight_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveTopRight_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveBottomLeft_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_moveCenter_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_translate_qreal_qreal(_self_ : QRectF*, dx : Float64, dy : Float64) : Void
    fun bg_QRectF_translate_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_translated_qreal_qreal(_self_ : QRectF*, dx : Float64, dy : Float64) : QRectF*
    fun bg_QRectF_translated_const_QPointF_R(_self_ : QRectF*, p : QPointF) : QRectF*
    fun bg_QRectF_transposed_(_self_ : QRectF*) : QRectF*
    fun bg_QRectF_moveTo_qreal_qreal(_self_ : QRectF*, x : Float64, y : Float64) : Void
    fun bg_QRectF_moveTo_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Void
    fun bg_QRectF_setRect_qreal_qreal_qreal_qreal(_self_ : QRectF*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QRectF_getRect_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QRectF*, x : Float64*, y : Float64*, w : Float64*, h : Float64*) : Void
    fun bg_QRectF_setCoords_qreal_qreal_qreal_qreal(_self_ : QRectF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
    fun bg_QRectF_getCoords_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QRectF*, x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
    fun bg_QRectF_adjust_qreal_qreal_qreal_qreal(_self_ : QRectF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
    fun bg_QRectF_adjusted_qreal_qreal_qreal_qreal(_self_ : QRectF*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : QRectF*
    fun bg_QRectF_size_(_self_ : QRectF*) : QSizeF*
    fun bg_QRectF_width_(_self_ : QRectF*) : Float64
    fun bg_QRectF_height_(_self_ : QRectF*) : Float64
    fun bg_QRectF_setWidth_qreal(_self_ : QRectF*, w : Float64) : Void
    fun bg_QRectF_setHeight_qreal(_self_ : QRectF*, h : Float64) : Void
    fun bg_QRectF_setSize_const_QSizeF_R(_self_ : QRectF*, s : QSizeF*) : Void
    fun bg_QRectF__OPERATOR_bit_or_const_QRectF_R(_self_ : QRectF*, r : QRectF*) : QRectF*
    fun bg_QRectF__OPERATOR_bit_and_const_QRectF_R(_self_ : QRectF*, r : QRectF*) : QRectF*
    fun bg_QRectF__OPERATOR_bit_or_assign_const_QRectF_R(_self_ : QRectF*, r : QRectF*) : QRectF*
    fun bg_QRectF__OPERATOR_bit_and_assign_const_QRectF_R(_self_ : QRectF*, r : QRectF*) : QRectF*
    fun bg_QRectF_contains_const_QRectF_R(_self_ : QRectF*, r : QRectF*) : Bool
    fun bg_QRectF_contains_const_QPointF_R(_self_ : QRectF*, p : QPointF) : Bool
    fun bg_QRectF_contains_qreal_qreal(_self_ : QRectF*, x : Float64, y : Float64) : Bool
    fun bg_QRectF_united_const_QRectF_R(_self_ : QRectF*, other : QRectF*) : QRectF*
    fun bg_QRectF_intersected_const_QRectF_R(_self_ : QRectF*, other : QRectF*) : QRectF*
    fun bg_QRectF_intersects_const_QRectF_R(_self_ : QRectF*, r : QRectF*) : Bool
    fun bg_QRectF_marginsAdded_const_QMarginsF_R(_self_ : QRectF*, margins : QMarginsF*) : QRectF*
    fun bg_QRectF_marginsRemoved_const_QMarginsF_R(_self_ : QRectF*, margins : QMarginsF*) : QRectF*
    fun bg_QRectF__OPERATOR_add_assign_const_QMarginsF_R(_self_ : QRectF*, margins : QMarginsF*) : QRectF*
    fun bg_QRectF__OPERATOR_sub_assign_const_QMarginsF_R(_self_ : QRectF*, margins : QMarginsF*) : QRectF*
    fun bg_QRectF_toRect_(_self_ : QRectF*) : QRect*
    fun bg_QRectF_toAlignedRect_(_self_ : QRectF*) : QRect*
    fun bg_QRectF__OPERATOR_eq_const_QRectF_R(_self_ : QRectF*, unnamed_arg_0 : QRectF*) : Bool
    fun bg_QRectF__OPERATOR_ne_const_QRectF_R(_self_ : QRectF*, unnamed_arg_0 : QRectF*) : Bool
    fun bg_QRectF__OPERATOR_add_const_QMarginsF_R(_self_ : QRectF*, rhs : QMarginsF*) : QRectF*
    fun bg_QRectF__OPERATOR_sub_const_QMarginsF_R(_self_ : QRectF*, rhs : QMarginsF*) : QRectF*
    fun bg_QSocketNotifier_metaObject_(_self_ : QSocketNotifier*) : QMetaObject*
    fun bg_QSocketNotifier_qt_metacast_const_char_X(_self_ : QSocketNotifier*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QSocketNotifier*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSocketNotifier_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QSocketNotifier__CONSTRUCT_qintptr_QSocketNotifier__Type_QObject_X(socket : Int64, unnamed_arg_1 : SocketNotifier::Type, parent : QObject*) : QSocketNotifier*
    fun bg_QSocketNotifier_socket_(_self_ : QSocketNotifier*) : Int64
    fun bg_QSocketNotifier_type_(_self_ : QSocketNotifier*) : SocketNotifier::Type
    fun bg_QSocketNotifier_isEnabled_(_self_ : QSocketNotifier*) : Bool
    fun bg_QSocketNotifier_setEnabled_bool(_self_ : QSocketNotifier*, unnamed_arg_0 : Bool) : Void
    fun bg_QSocketNotifier_event_QEvent_X(_self_ : QSocketNotifier*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QSocketNotifier*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QSocketNotifier*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QSocketNotifier*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QSocketNotifier*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QSocketNotifier*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QSocketNotifier*, signal : QMetaMethod*) : Void
    fun bg_QSocketNotifier_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QSocketNotifier_CONNECT_activated_CrystalProc_void__QSocketDescriptor__QSocketNotifier__Type_(_self_ : QSocketNotifier*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QSocketNotifier_event_SUPER_QEvent_X(_self_ : QSocketNotifier*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QSocketNotifier*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QSocketNotifier*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QSocketNotifier*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QSocketNotifier*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QSocketNotifier*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QSocketNotifier*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QSocketNotifier_JUMPTABLE_BgJumptable_QSocketNotifier_R(_self_ : QSocketNotifier*, table : BgJumptable_QSocketNotifier*) : Void
    fun bg_QStandardPaths_writableLocation_STATIC_QStandardPaths__StandardLocation(type : StandardPaths::StandardLocation) : CrystalString
    fun bg_QStandardPaths_standardLocations_STATIC_QStandardPaths__StandardLocation(type : StandardPaths::StandardLocation) : QStringList*
    fun bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R(type : StandardPaths::StandardLocation, file_name : CrystalString) : CrystalString
    fun bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type : StandardPaths::StandardLocation, file_name : CrystalString, options : StandardPaths::LocateOptions) : CrystalString
    fun bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R(type : StandardPaths::StandardLocation, file_name : CrystalString) : QStringList*
    fun bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type : StandardPaths::StandardLocation, file_name : CrystalString, options : StandardPaths::LocateOptions) : QStringList*
    fun bg_QStandardPaths_displayName_STATIC_QStandardPaths__StandardLocation(type : StandardPaths::StandardLocation) : CrystalString
    fun bg_QStandardPaths_findExecutable_STATIC_const_QString_R(executable_name : CrystalString) : CrystalString
    fun bg_QStandardPaths_findExecutable_STATIC_const_QString_R_const_QStringList_R(executable_name : CrystalString, paths : QStringList*) : CrystalString
    fun bg_QStandardPaths_setTestModeEnabled_STATIC_bool(test_mode : Bool) : Void
    fun bg_QStandardPaths_isTestModeEnabled_STATIC_() : Bool
    fun bg_QStandardPaths_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTimer_metaObject_(_self_ : QTimer*) : QMetaObject*
    fun bg_QTimer_qt_metacast_const_char_X(_self_ : QTimer*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTimer*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTimer_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTimer_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTimer_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTimer__CONSTRUCT_QObject_X(parent : QObject*) : QTimer*
    fun bg_QTimer_isActive_(_self_ : QTimer*) : Bool
    fun bg_QTimer_timerId_(_self_ : QTimer*) : Int32
    fun bg_QTimer_setInterval_int(_self_ : QTimer*, msec : Int32) : Void
    fun bg_QTimer_interval_(_self_ : QTimer*) : Int32
    fun bg_QTimer_remainingTime_(_self_ : QTimer*) : Int32
    fun bg_QTimer_setTimerType_Qt__TimerType(_self_ : QTimer*, atype : TimerType) : Void
    fun bg_QTimer_timerType_(_self_ : QTimer*) : TimerType
    fun bg_QTimer_setSingleShot_bool(_self_ : QTimer*, single_shot : Bool) : Void
    fun bg_QTimer_isSingleShot_(_self_ : QTimer*) : Bool
    fun bg_QTimer_singleShot_STATIC_int_const_QObject_X_const_char_X(msec : Int32, receiver : QObject*, member : UInt8*) : Void
    fun bg_QTimer_singleShot_STATIC_int_Qt__TimerType_const_QObject_X_const_char_X(msec : Int32, timer_type : TimerType, receiver : QObject*, member : UInt8*) : Void
    fun bg_QTimer_start_int(_self_ : QTimer*, msec : Int32) : Void
    fun bg_QTimer_start_(_self_ : QTimer*) : Void
    fun bg_QTimer_stop_(_self_ : QTimer*) : Void
    fun bg_QTimer_setInterval_std__chrono__milliseconds(_self_ : QTimer*, value : Int64) : Void
    fun bg_QTimer_intervalAsDuration_(_self_ : QTimer*) : Int64
    fun bg_QTimer_remainingTimeAsDuration_(_self_ : QTimer*) : Int64
    fun bg_QTimer_singleShot_STATIC_std__chrono__milliseconds_const_QObject_X_const_char_X(value : Int64, receiver : QObject*, member : UInt8*) : Void
    fun bg_QTimer_singleShot_STATIC_std__chrono__milliseconds_Qt__TimerType_const_QObject_X_const_char_X(value : Int64, timer_type : TimerType, receiver : QObject*, member : UInt8*) : Void
    fun bg_QTimer_start_std__chrono__milliseconds(_self_ : QTimer*, value : Int64) : Void
    fun bg_QTimer_timerEvent_QTimerEvent_X(_self_ : QTimer*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QObject_event_QEvent_X(_self_ : QTimer*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QTimer*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QTimer*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QTimer*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QTimer*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QTimer*, signal : QMetaMethod*) : Void
    fun bg_QTimer_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTimer_CONNECT_timeout_CrystalProc_void_(_self_ : QTimer*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTimer_timerEvent_SUPER_QTimerEvent_X(_self_ : QTimer*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QTimer*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QTimer*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QTimer*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QTimer*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QTimer*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QTimer*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QTimer_JUMPTABLE_BgJumptable_QTimer_R(_self_ : QTimer*, table : BgJumptable_QTimer*) : Void
    fun bg_QColor__CONSTRUCT_() : QColor*
    fun bg_QColor__CONSTRUCT_Qt__GlobalColor(color : GlobalColor) : QColor*
    fun bg_QColor__CONSTRUCT_int_int_int_int(r : Int32, g : Int32, b : Int32, a : Int32) : QColor*
    fun bg_QColor__CONSTRUCT_QRgb(rgb : UInt32) : QColor*
    fun bg_QColor__CONSTRUCT_QRgba64(rgba64 : QRgba64*) : QColor*
    fun bg_QColor__CONSTRUCT_const_QString_R(name : CrystalString) : QColor*
    fun bg_QColor__CONSTRUCT_QStringView(name : QStringView*) : QColor*
    fun bg_QColor__CONSTRUCT_const_char_X(aname : UInt8*) : QColor*
    fun bg_QColor__CONSTRUCT_QLatin1String(name : QLatin1String*) : QColor*
    fun bg_QColor__CONSTRUCT_QColor__Spec(spec : Color::Spec) : QColor*
    fun bg_QColor_isValid_(_self_ : QColor*) : Bool
    fun bg_QColor_name_(_self_ : QColor*) : CrystalString
    fun bg_QColor_name_QColor__NameFormat(_self_ : QColor*, format : Color::NameFormat) : CrystalString
    fun bg_QColor_setNamedColor_const_QString_R(_self_ : QColor*, name : CrystalString) : Void
    fun bg_QColor_setNamedColor_QStringView(_self_ : QColor*, name : QStringView*) : Void
    fun bg_QColor_setNamedColor_QLatin1String(_self_ : QColor*, name : QLatin1String*) : Void
    fun bg_QColor_colorNames_STATIC_() : QStringList*
    fun bg_QColor_spec_(_self_ : QColor*) : Color::Spec
    fun bg_QColor_alpha_(_self_ : QColor*) : Int32
    fun bg_QColor_setAlpha_int(_self_ : QColor*, alpha : Int32) : Void
    fun bg_QColor_alphaF_(_self_ : QColor*) : Float64
    fun bg_QColor_setAlphaF_qreal(_self_ : QColor*, alpha : Float64) : Void
    fun bg_QColor_red_(_self_ : QColor*) : Int32
    fun bg_QColor_green_(_self_ : QColor*) : Int32
    fun bg_QColor_blue_(_self_ : QColor*) : Int32
    fun bg_QColor_setRed_int(_self_ : QColor*, red : Int32) : Void
    fun bg_QColor_setGreen_int(_self_ : QColor*, green : Int32) : Void
    fun bg_QColor_setBlue_int(_self_ : QColor*, blue : Int32) : Void
    fun bg_QColor_redF_(_self_ : QColor*) : Float64
    fun bg_QColor_greenF_(_self_ : QColor*) : Float64
    fun bg_QColor_blueF_(_self_ : QColor*) : Float64
    fun bg_QColor_setRedF_qreal(_self_ : QColor*, red : Float64) : Void
    fun bg_QColor_setGreenF_qreal(_self_ : QColor*, green : Float64) : Void
    fun bg_QColor_setBlueF_qreal(_self_ : QColor*, blue : Float64) : Void
    fun bg_QColor_getRgb_int_X_int_X_int_X_int_X(_self_ : QColor*, r : Int32*, g : Int32*, b : Int32*, a : Int32*) : Void
    fun bg_QColor_setRgb_int_int_int_int(_self_ : QColor*, r : Int32, g : Int32, b : Int32, a : Int32) : Void
    fun bg_QColor_getRgbF_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QColor*, r : Float64*, g : Float64*, b : Float64*, a : Float64*) : Void
    fun bg_QColor_setRgbF_qreal_qreal_qreal_qreal(_self_ : QColor*, r : Float64, g : Float64, b : Float64, a : Float64) : Void
    fun bg_QColor_rgba64_(_self_ : QColor*) : QRgba64*
    fun bg_QColor_setRgba64_QRgba64(_self_ : QColor*, rgba : QRgba64*) : Void
    fun bg_QColor_rgba_(_self_ : QColor*) : UInt32
    fun bg_QColor_setRgba_QRgb(_self_ : QColor*, rgba : UInt32) : Void
    fun bg_QColor_rgb_(_self_ : QColor*) : UInt32
    fun bg_QColor_setRgb_QRgb(_self_ : QColor*, rgb : UInt32) : Void
    fun bg_QColor_hue_(_self_ : QColor*) : Int32
    fun bg_QColor_saturation_(_self_ : QColor*) : Int32
    fun bg_QColor_hsvHue_(_self_ : QColor*) : Int32
    fun bg_QColor_hsvSaturation_(_self_ : QColor*) : Int32
    fun bg_QColor_value_(_self_ : QColor*) : Int32
    fun bg_QColor_hueF_(_self_ : QColor*) : Float64
    fun bg_QColor_saturationF_(_self_ : QColor*) : Float64
    fun bg_QColor_hsvHueF_(_self_ : QColor*) : Float64
    fun bg_QColor_hsvSaturationF_(_self_ : QColor*) : Float64
    fun bg_QColor_valueF_(_self_ : QColor*) : Float64
    fun bg_QColor_getHsv_int_X_int_X_int_X_int_X(_self_ : QColor*, h : Int32*, s : Int32*, v : Int32*, a : Int32*) : Void
    fun bg_QColor_setHsv_int_int_int_int(_self_ : QColor*, h : Int32, s : Int32, v : Int32, a : Int32) : Void
    fun bg_QColor_getHsvF_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QColor*, h : Float64*, s : Float64*, v : Float64*, a : Float64*) : Void
    fun bg_QColor_setHsvF_qreal_qreal_qreal_qreal(_self_ : QColor*, h : Float64, s : Float64, v : Float64, a : Float64) : Void
    fun bg_QColor_cyan_(_self_ : QColor*) : Int32
    fun bg_QColor_magenta_(_self_ : QColor*) : Int32
    fun bg_QColor_yellow_(_self_ : QColor*) : Int32
    fun bg_QColor_black_(_self_ : QColor*) : Int32
    fun bg_QColor_cyanF_(_self_ : QColor*) : Float64
    fun bg_QColor_magentaF_(_self_ : QColor*) : Float64
    fun bg_QColor_yellowF_(_self_ : QColor*) : Float64
    fun bg_QColor_blackF_(_self_ : QColor*) : Float64
    fun bg_QColor_getCmyk_int_X_int_X_int_X_int_X_int_X(_self_ : QColor*, c : Int32*, m : Int32*, y : Int32*, k : Int32*, a : Int32*) : Void
    fun bg_QColor_setCmyk_int_int_int_int_int(_self_ : QColor*, c : Int32, m : Int32, y : Int32, k : Int32, a : Int32) : Void
    fun bg_QColor_getCmykF_qreal_X_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QColor*, c : Float64*, m : Float64*, y : Float64*, k : Float64*, a : Float64*) : Void
    fun bg_QColor_setCmykF_qreal_qreal_qreal_qreal_qreal(_self_ : QColor*, c : Float64, m : Float64, y : Float64, k : Float64, a : Float64) : Void
    fun bg_QColor_hslHue_(_self_ : QColor*) : Int32
    fun bg_QColor_hslSaturation_(_self_ : QColor*) : Int32
    fun bg_QColor_lightness_(_self_ : QColor*) : Int32
    fun bg_QColor_hslHueF_(_self_ : QColor*) : Float64
    fun bg_QColor_hslSaturationF_(_self_ : QColor*) : Float64
    fun bg_QColor_lightnessF_(_self_ : QColor*) : Float64
    fun bg_QColor_getHsl_int_X_int_X_int_X_int_X(_self_ : QColor*, h : Int32*, s : Int32*, l : Int32*, a : Int32*) : Void
    fun bg_QColor_setHsl_int_int_int_int(_self_ : QColor*, h : Int32, s : Int32, l : Int32, a : Int32) : Void
    fun bg_QColor_getHslF_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QColor*, h : Float64*, s : Float64*, l : Float64*, a : Float64*) : Void
    fun bg_QColor_setHslF_qreal_qreal_qreal_qreal(_self_ : QColor*, h : Float64, s : Float64, l : Float64, a : Float64) : Void
    fun bg_QColor_toRgb_(_self_ : QColor*) : QColor*
    fun bg_QColor_toHsv_(_self_ : QColor*) : QColor*
    fun bg_QColor_toCmyk_(_self_ : QColor*) : QColor*
    fun bg_QColor_toHsl_(_self_ : QColor*) : QColor*
    fun bg_QColor_toExtendedRgb_(_self_ : QColor*) : QColor*
    fun bg_QColor_convertTo_QColor__Spec(_self_ : QColor*, color_spec : Color::Spec) : QColor*
    fun bg_QColor_fromRgb_STATIC_QRgb(rgb : UInt32) : QColor*
    fun bg_QColor_fromRgba_STATIC_QRgb(rgba : UInt32) : QColor*
    fun bg_QColor_fromRgb_STATIC_int_int_int_int(r : Int32, g : Int32, b : Int32, a : Int32) : QColor*
    fun bg_QColor_fromRgbF_STATIC_qreal_qreal_qreal_qreal(r : Float64, g : Float64, b : Float64, a : Float64) : QColor*
    fun bg_QColor_fromRgba64_STATIC_ushort_ushort_ushort_ushort(r : UInt16, g : UInt16, b : UInt16, a : UInt16) : QColor*
    fun bg_QColor_fromRgba64_STATIC_QRgba64(rgba : QRgba64*) : QColor*
    fun bg_QColor_fromHsv_STATIC_int_int_int_int(h : Int32, s : Int32, v : Int32, a : Int32) : QColor*
    fun bg_QColor_fromHsvF_STATIC_qreal_qreal_qreal_qreal(h : Float64, s : Float64, v : Float64, a : Float64) : QColor*
    fun bg_QColor_fromCmyk_STATIC_int_int_int_int_int(c : Int32, m : Int32, y : Int32, k : Int32, a : Int32) : QColor*
    fun bg_QColor_fromCmykF_STATIC_qreal_qreal_qreal_qreal_qreal(c : Float64, m : Float64, y : Float64, k : Float64, a : Float64) : QColor*
    fun bg_QColor_fromHsl_STATIC_int_int_int_int(h : Int32, s : Int32, l : Int32, a : Int32) : QColor*
    fun bg_QColor_fromHslF_STATIC_qreal_qreal_qreal_qreal(h : Float64, s : Float64, l : Float64, a : Float64) : QColor*
    fun bg_QColor_lighter_int(_self_ : QColor*, f : Int32) : QColor*
    fun bg_QColor_darker_int(_self_ : QColor*, f : Int32) : QColor*
    fun bg_QColor__OPERATOR_eq_const_QColor_R(_self_ : QColor*, c : QColor*) : Bool
    fun bg_QColor__OPERATOR_ne_const_QColor_R(_self_ : QColor*, c : QColor*) : Bool
    fun bg_QColor_isValidColor_STATIC_const_QString_R(name : CrystalString) : Bool
    fun bg_QColor_isValidColor_STATIC_QStringView(unnamed_arg_0 : QStringView*) : Bool
    fun bg_QColor_isValidColor_STATIC_QLatin1String(unnamed_arg_0 : QLatin1String*) : Bool
    fun bg_QColor__CONSTRUCT_QColor__Spec_ushort_ushort_ushort_ushort_ushort(spec : Color::Spec, a1 : UInt16, a2 : UInt16, a3 : UInt16, a4 : UInt16, a5 : UInt16) : QColor*
    fun bg_QKeySequence__CONSTRUCT_() : QKeySequence*
    fun bg_QKeySequence__CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(key : CrystalString, format : KeySequence::SequenceFormat) : QKeySequence*
    fun bg_QKeySequence__CONSTRUCT_int_int_int_int(k1 : Int32, k2 : Int32, k3 : Int32, k4 : Int32) : QKeySequence*
    fun bg_QKeySequence__CONSTRUCT_QKeySequence__StandardKey(key : KeySequence::StandardKey) : QKeySequence*
    fun bg_QKeySequence_count_(_self_ : QKeySequence*) : Int32
    fun bg_QKeySequence_isEmpty_(_self_ : QKeySequence*) : Bool
    fun bg_QKeySequence_toString_QKeySequence__SequenceFormat(_self_ : QKeySequence*, format : KeySequence::SequenceFormat) : CrystalString
    fun bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(str : CrystalString, format : KeySequence::SequenceFormat) : QKeySequence*
    fun bg_QKeySequence_listFromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(str : CrystalString, format : KeySequence::SequenceFormat) : ContainerQListQKeySequence*
    fun bg_QKeySequence_listToString_STATIC_const_QList_QKeySequence__R_QKeySequence__SequenceFormat(list : ContainerQListQKeySequence*, format : KeySequence::SequenceFormat) : CrystalString
    fun bg_QKeySequence_matches_const_QKeySequence_R(_self_ : QKeySequence*, seq : QKeySequence*) : KeySequence::SequenceMatch
    fun bg_QKeySequence_mnemonic_STATIC_const_QString_R(text : CrystalString) : QKeySequence*
    fun bg_QKeySequence_keyBindings_STATIC_QKeySequence__StandardKey(key : KeySequence::StandardKey) : ContainerQListQKeySequence*
    fun bg_QKeySequence__OPERATOR_at_uint(_self_ : QKeySequence*, i : UInt32) : Int32
    fun bg_QKeySequence_swap_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Void
    fun bg_QKeySequence__OPERATOR_eq_const_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Bool
    fun bg_QKeySequence__OPERATOR_ne_const_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Bool
    fun bg_QKeySequence__OPERATOR_lt_const_QKeySequence_R(_self_ : QKeySequence*, ks : QKeySequence*) : Bool
    fun bg_QKeySequence__OPERATOR_gt_const_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Bool
    fun bg_QKeySequence__OPERATOR_le_const_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Bool
    fun bg_QKeySequence__OPERATOR_ge_const_QKeySequence_R(_self_ : QKeySequence*, other : QKeySequence*) : Bool
    fun bg_QKeySequence_isDetached_(_self_ : QKeySequence*) : Bool
    fun bg_QKeySequence_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QInputEvent__CONSTRUCT_QEvent__Type(type : Event::Type) : QInputEvent*
    fun bg_QInputEvent__CONSTRUCT_QEvent__Type_Qt__KeyboardModifiers(type : Event::Type, modifiers : KeyboardModifiers) : QInputEvent*
    fun bg_QInputEvent_modifiers_(_self_ : QInputEvent*) : KeyboardModifiers
    fun bg_QInputEvent_setModifiers_Qt__KeyboardModifiers(_self_ : QInputEvent*, amodifiers : KeyboardModifiers) : Void
    fun bg_QInputEvent_timestamp_(_self_ : QInputEvent*) : UInt64
    fun bg_QInputEvent_setTimestamp_ulong(_self_ : QInputEvent*, atimestamp : UInt64) : Void
    fun bg_QEnterEvent__CONSTRUCT_const_QPointF_R_const_QPointF_R_const_QPointF_R(local_pos : QPointF, window_pos : QPointF, screen_pos : QPointF) : QEnterEvent*
    fun bg_QEnterEvent_pos_(_self_ : QEnterEvent*) : QPoint
    fun bg_QEnterEvent_globalPos_(_self_ : QEnterEvent*) : QPoint
    fun bg_QEnterEvent_x_(_self_ : QEnterEvent*) : Int32
    fun bg_QEnterEvent_y_(_self_ : QEnterEvent*) : Int32
    fun bg_QEnterEvent_globalX_(_self_ : QEnterEvent*) : Int32
    fun bg_QEnterEvent_globalY_(_self_ : QEnterEvent*) : Int32
    fun bg_QEnterEvent_localPos_(_self_ : QEnterEvent*) : QPointF
    fun bg_QEnterEvent_windowPos_(_self_ : QEnterEvent*) : QPointF
    fun bg_QEnterEvent_screenPos_(_self_ : QEnterEvent*) : QPointF
    fun bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type : Event::Type, local_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers) : QMouseEvent*
    fun bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type : Event::Type, local_pos : QPointF, screen_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers) : QMouseEvent*
    fun bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type : Event::Type, local_pos : QPointF, window_pos : QPointF, screen_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers) : QMouseEvent*
    fun bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers_Qt__MouseEventSource(type : Event::Type, local_pos : QPointF, window_pos : QPointF, screen_pos : QPointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers, source : MouseEventSource) : QMouseEvent*
    fun bg_QMouseEvent_pos_(_self_ : QMouseEvent*) : QPoint
    fun bg_QMouseEvent_globalPos_(_self_ : QMouseEvent*) : QPoint
    fun bg_QMouseEvent_x_(_self_ : QMouseEvent*) : Int32
    fun bg_QMouseEvent_y_(_self_ : QMouseEvent*) : Int32
    fun bg_QMouseEvent_globalX_(_self_ : QMouseEvent*) : Int32
    fun bg_QMouseEvent_globalY_(_self_ : QMouseEvent*) : Int32
    fun bg_QMouseEvent_localPos_(_self_ : QMouseEvent*) : QPointF
    fun bg_QMouseEvent_windowPos_(_self_ : QMouseEvent*) : QPointF
    fun bg_QMouseEvent_screenPos_(_self_ : QMouseEvent*) : QPointF
    fun bg_QMouseEvent_button_(_self_ : QMouseEvent*) : MouseButton
    fun bg_QMouseEvent_buttons_(_self_ : QMouseEvent*) : MouseButtons
    fun bg_QMouseEvent_setLocalPos_const_QPointF_R(_self_ : QMouseEvent*, local_position : QPointF) : Void
    fun bg_QMouseEvent_source_(_self_ : QMouseEvent*) : MouseEventSource
    fun bg_QMouseEvent_flags_(_self_ : QMouseEvent*) : MouseEventFlags
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers(type : Event::Type, key : Int32, modifiers : KeyboardModifiers) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, text : CrystalString) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R_bool(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, text : CrystalString, autorep : Bool) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R_bool_ushort(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, text : CrystalString, autorep : Bool, count : UInt16) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32, text : CrystalString) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R_bool(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32, text : CrystalString, autorep : Bool) : QKeyEvent*
    fun bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R_bool_ushort(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32, text : CrystalString, autorep : Bool, count : UInt16) : QKeyEvent*
    fun bg_QKeyEvent_key_(_self_ : QKeyEvent*) : Int32
    fun bg_QKeyEvent_matches_QKeySequence__StandardKey(_self_ : QKeyEvent*, key : KeySequence::StandardKey) : Bool
    fun bg_QKeyEvent_modifiers_(_self_ : QKeyEvent*) : KeyboardModifiers
    fun bg_QKeyEvent_text_(_self_ : QKeyEvent*) : CrystalString
    fun bg_QKeyEvent_isAutoRepeat_(_self_ : QKeyEvent*) : Bool
    fun bg_QKeyEvent_count_(_self_ : QKeyEvent*) : Int32
    fun bg_QKeyEvent_nativeScanCode_(_self_ : QKeyEvent*) : UInt32
    fun bg_QKeyEvent_nativeVirtualKey_(_self_ : QKeyEvent*) : UInt32
    fun bg_QKeyEvent_nativeModifiers_(_self_ : QKeyEvent*) : UInt32
    fun bg_QFocusEvent__CONSTRUCT_QEvent__Type_Qt__FocusReason(type : Event::Type, reason : FocusReason) : QFocusEvent*
    fun bg_QFocusEvent_gotFocus_(_self_ : QFocusEvent*) : Bool
    fun bg_QFocusEvent_lostFocus_(_self_ : QFocusEvent*) : Bool
    fun bg_QFocusEvent_reason_(_self_ : QFocusEvent*) : FocusReason
    fun bg_QPaintEvent__CONSTRUCT_const_QRegion_R(paint_region : QRegion*) : QPaintEvent*
    fun bg_QPaintEvent__CONSTRUCT_const_QRect_R(paint_rect : QRect*) : QPaintEvent*
    fun bg_QPaintEvent_rect_(_self_ : QPaintEvent*) : QRect*
    fun bg_QPaintEvent_region_(_self_ : QPaintEvent*) : QRegion*
    fun bg_QMoveEvent__CONSTRUCT_const_QPoint_R_const_QPoint_R(pos : QPoint, old_pos : QPoint) : QMoveEvent*
    fun bg_QMoveEvent_pos_(_self_ : QMoveEvent*) : QPoint
    fun bg_QMoveEvent_oldPos_(_self_ : QMoveEvent*) : QPoint
    fun bg_QExposeEvent__CONSTRUCT_const_QRegion_R(rgn : QRegion*) : QExposeEvent*
    fun bg_QExposeEvent_region_(_self_ : QExposeEvent*) : QRegion*
    fun bg_QPlatformSurfaceEvent__CONSTRUCT_QPlatformSurfaceEvent__SurfaceEventType(surface_event_type : PlatformSurfaceEvent::SurfaceEventType) : QPlatformSurfaceEvent*
    fun bg_QPlatformSurfaceEvent_surfaceEventType_(_self_ : QPlatformSurfaceEvent*) : PlatformSurfaceEvent::SurfaceEventType
    fun bg_QResizeEvent__CONSTRUCT_const_QSize_R_const_QSize_R(size : QSize*, old_size : QSize*) : QResizeEvent*
    fun bg_QResizeEvent_size_(_self_ : QResizeEvent*) : QSize*
    fun bg_QResizeEvent_oldSize_(_self_ : QResizeEvent*) : QSize*
    fun bg_QCloseEvent__CONSTRUCT_() : QCloseEvent*
    fun bg_QIconDragEvent__CONSTRUCT_() : QIconDragEvent*
    fun bg_QShowEvent__CONSTRUCT_() : QShowEvent*
    fun bg_QHideEvent__CONSTRUCT_() : QHideEvent*
    fun bg_QInputMethodEvent__CONSTRUCT_() : QInputMethodEvent*
    fun bg_QInputMethodEvent_setCommitString_const_QString_R_int_int(_self_ : QInputMethodEvent*, commit_string : CrystalString, replace_from : Int32, replace_length : Int32) : Void
    fun bg_QInputMethodEvent_preeditString_(_self_ : QInputMethodEvent*) : CrystalString
    fun bg_QInputMethodEvent_commitString_(_self_ : QInputMethodEvent*) : CrystalString
    fun bg_QInputMethodEvent_replacementStart_(_self_ : QInputMethodEvent*) : Int32
    fun bg_QInputMethodEvent_replacementLength_(_self_ : QInputMethodEvent*) : Int32
    fun bg_QInputMethodQueryEvent__CONSTRUCT_Qt__InputMethodQueries(queries : InputMethodQueries) : QInputMethodQueryEvent*
    fun bg_QInputMethodQueryEvent_queries_(_self_ : QInputMethodQueryEvent*) : InputMethodQueries
    fun bg_QInputMethodQueryEvent_setValue_Qt__InputMethodQuery_const_QVariant_R(_self_ : QInputMethodQueryEvent*, query : InputMethodQuery, value : CrystalVariant) : Void
    fun bg_QInputMethodQueryEvent_value_Qt__InputMethodQuery(_self_ : QInputMethodQueryEvent*, query : InputMethodQuery) : CrystalVariant
    fun bg_QDropEvent__CONSTRUCT_const_QPointF_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos : QPointF, actions : DropActions, data : QMimeData*, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type) : QDropEvent*
    fun bg_QDropEvent_pos_(_self_ : QDropEvent*) : QPoint
    fun bg_QDropEvent_posF_(_self_ : QDropEvent*) : QPointF
    fun bg_QDropEvent_mouseButtons_(_self_ : QDropEvent*) : MouseButtons
    fun bg_QDropEvent_keyboardModifiers_(_self_ : QDropEvent*) : KeyboardModifiers
    fun bg_QDropEvent_possibleActions_(_self_ : QDropEvent*) : DropActions
    fun bg_QDropEvent_proposedAction_(_self_ : QDropEvent*) : DropAction
    fun bg_QDropEvent_acceptProposedAction_(_self_ : QDropEvent*) : Void
    fun bg_QDropEvent_dropAction_(_self_ : QDropEvent*) : DropAction
    fun bg_QDropEvent_setDropAction_Qt__DropAction(_self_ : QDropEvent*, action : DropAction) : Void
    fun bg_QDropEvent_source_(_self_ : QDropEvent*) : QObject*
    fun bg_QDropEvent_mimeData_(_self_ : QDropEvent*) : QMimeData*
    fun bg_QDragMoveEvent__CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos : QPoint, actions : DropActions, data : QMimeData*, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type) : QDragMoveEvent*
    fun bg_QDragMoveEvent_answerRect_(_self_ : QDragMoveEvent*) : QRect*
    fun bg_QDragMoveEvent_accept_(_self_ : QDragMoveEvent*) : Void
    fun bg_QDragMoveEvent_ignore_(_self_ : QDragMoveEvent*) : Void
    fun bg_QDragMoveEvent_accept_const_QRect_R(_self_ : QDragMoveEvent*, r : QRect*) : Void
    fun bg_QDragMoveEvent_ignore_const_QRect_R(_self_ : QDragMoveEvent*, r : QRect*) : Void
    fun bg_QDragEnterEvent__CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers(pos : QPoint, actions : DropActions, data : QMimeData*, buttons : MouseButtons, modifiers : KeyboardModifiers) : QDragEnterEvent*
    fun bg_QDragLeaveEvent__CONSTRUCT_() : QDragLeaveEvent*
    fun bg_QHelpEvent__CONSTRUCT_QEvent__Type_const_QPoint_R_const_QPoint_R(type : Event::Type, pos : QPoint, global_pos : QPoint) : QHelpEvent*
    fun bg_QHelpEvent_x_(_self_ : QHelpEvent*) : Int32
    fun bg_QHelpEvent_y_(_self_ : QHelpEvent*) : Int32
    fun bg_QHelpEvent_globalX_(_self_ : QHelpEvent*) : Int32
    fun bg_QHelpEvent_globalY_(_self_ : QHelpEvent*) : Int32
    fun bg_QHelpEvent_pos_(_self_ : QHelpEvent*) : QPoint
    fun bg_QHelpEvent_globalPos_(_self_ : QHelpEvent*) : QPoint
    fun bg_QStatusTipEvent__CONSTRUCT_const_QString_R(tip : CrystalString) : QStatusTipEvent*
    fun bg_QStatusTipEvent_tip_(_self_ : QStatusTipEvent*) : CrystalString
    fun bg_QWhatsThisClickedEvent__CONSTRUCT_const_QString_R(href : CrystalString) : QWhatsThisClickedEvent*
    fun bg_QWhatsThisClickedEvent_href_(_self_ : QWhatsThisClickedEvent*) : CrystalString
    fun bg_QActionEvent__CONSTRUCT_int_QAction_X_QAction_X(type : Int32, action : QAction*, before : QAction*) : QActionEvent*
    fun bg_QActionEvent_action_(_self_ : QActionEvent*) : QAction*
    fun bg_QActionEvent_before_(_self_ : QActionEvent*) : QAction*
    fun bg_QFileOpenEvent__CONSTRUCT_const_QString_R(file : CrystalString) : QFileOpenEvent*
    fun bg_QFileOpenEvent__CONSTRUCT_const_QUrl_R(url : QUrl*) : QFileOpenEvent*
    fun bg_QFileOpenEvent_file_(_self_ : QFileOpenEvent*) : CrystalString
    fun bg_QFileOpenEvent_url_(_self_ : QFileOpenEvent*) : QUrl*
    fun bg_QFileOpenEvent_openFile_QFile_R_QIODevice__OpenMode(_self_ : QFileOpenEvent*, file : QFile*, flags : IODevice::OpenMode) : Bool
    fun bg_QToolBarChangeEvent__CONSTRUCT_bool(t : Bool) : QToolBarChangeEvent*
    fun bg_QToolBarChangeEvent_toggle_(_self_ : QToolBarChangeEvent*) : Bool
    fun bg_QShortcutEvent__CONSTRUCT_const_QKeySequence_R_int_bool(key : QKeySequence*, id : Int32, ambiguous : Bool) : QShortcutEvent*
    fun bg_QShortcutEvent_key_(_self_ : QShortcutEvent*) : QKeySequence*
    fun bg_QShortcutEvent_shortcutId_(_self_ : QShortcutEvent*) : Int32
    fun bg_QShortcutEvent_isAmbiguous_(_self_ : QShortcutEvent*) : Bool
    fun bg_QScrollPrepareEvent__CONSTRUCT_const_QPointF_R(start_pos : QPointF) : QScrollPrepareEvent*
    fun bg_QScrollPrepareEvent_startPos_(_self_ : QScrollPrepareEvent*) : QPointF
    fun bg_QScrollPrepareEvent_viewportSize_(_self_ : QScrollPrepareEvent*) : QSizeF*
    fun bg_QScrollPrepareEvent_contentPosRange_(_self_ : QScrollPrepareEvent*) : QRectF*
    fun bg_QScrollPrepareEvent_contentPos_(_self_ : QScrollPrepareEvent*) : QPointF
    fun bg_QScrollPrepareEvent_setViewportSize_const_QSizeF_R(_self_ : QScrollPrepareEvent*, size : QSizeF*) : Void
    fun bg_QScrollPrepareEvent_setContentPosRange_const_QRectF_R(_self_ : QScrollPrepareEvent*, rect : QRectF*) : Void
    fun bg_QScrollPrepareEvent_setContentPos_const_QPointF_R(_self_ : QScrollPrepareEvent*, pos : QPointF) : Void
    fun bg_QScrollEvent__CONSTRUCT_const_QPointF_R_const_QPointF_R_QScrollEvent__ScrollState(content_pos : QPointF, overshoot : QPointF, scroll_state : ScrollEvent::ScrollState) : QScrollEvent*
    fun bg_QScrollEvent_contentPos_(_self_ : QScrollEvent*) : QPointF
    fun bg_QScrollEvent_overshootDistance_(_self_ : QScrollEvent*) : QPointF
    fun bg_QScrollEvent_scrollState_(_self_ : QScrollEvent*) : ScrollEvent::ScrollState
    fun bg_QScreenOrientationChangeEvent__CONSTRUCT_QScreen_X_Qt__ScreenOrientation(screen : QScreen*, orientation : ScreenOrientation) : QScreenOrientationChangeEvent*
    fun bg_QScreenOrientationChangeEvent_screen_(_self_ : QScreenOrientationChangeEvent*) : QScreen*
    fun bg_QScreenOrientationChangeEvent_orientation_(_self_ : QScreenOrientationChangeEvent*) : ScreenOrientation
    fun bg_QApplicationStateChangeEvent__CONSTRUCT_Qt__ApplicationState(state : ApplicationState) : QApplicationStateChangeEvent*
    fun bg_QApplicationStateChangeEvent_applicationState_(_self_ : QApplicationStateChangeEvent*) : ApplicationState
    fun bg_QFont__CONSTRUCT_() : QFont*
    fun bg_QFont__CONSTRUCT_const_QString_R_int_int_bool(family : CrystalString, point_size : Int32, weight : Int32, italic : Bool) : QFont*
    fun bg_QFont__CONSTRUCT_const_QFont_R_QPaintDevice_X(font : QFont*, pd : QPaintDevice*) : QFont*
    fun bg_QFont__CONSTRUCT_const_QFont_R_const_QPaintDevice_X(font : QFont*, pd : QPaintDevice*) : QFont*
    fun bg_QFont_swap_QFont_R(_self_ : QFont*, other : QFont*) : Void
    fun bg_QFont_family_(_self_ : QFont*) : CrystalString
    fun bg_QFont_setFamily_const_QString_R(_self_ : QFont*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_families_(_self_ : QFont*) : QStringList*
    fun bg_QFont_setFamilies_const_QStringList_R(_self_ : QFont*, unnamed_arg_0 : QStringList*) : Void
    fun bg_QFont_styleName_(_self_ : QFont*) : CrystalString
    fun bg_QFont_setStyleName_const_QString_R(_self_ : QFont*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_pointSize_(_self_ : QFont*) : Int32
    fun bg_QFont_setPointSize_int(_self_ : QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_pointSizeF_(_self_ : QFont*) : Float64
    fun bg_QFont_setPointSizeF_qreal(_self_ : QFont*, unnamed_arg_0 : Float64) : Void
    fun bg_QFont_pixelSize_(_self_ : QFont*) : Int32
    fun bg_QFont_setPixelSize_int(_self_ : QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_weight_(_self_ : QFont*) : Int32
    fun bg_QFont_setWeight_int(_self_ : QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_bold_(_self_ : QFont*) : Bool
    fun bg_QFont_setBold_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_setStyle_QFont__Style(_self_ : QFont*, style : Font::Style) : Void
    fun bg_QFont_style_(_self_ : QFont*) : Font::Style
    fun bg_QFont_italic_(_self_ : QFont*) : Bool
    fun bg_QFont_setItalic_bool(_self_ : QFont*, b : Bool) : Void
    fun bg_QFont_underline_(_self_ : QFont*) : Bool
    fun bg_QFont_setUnderline_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_overline_(_self_ : QFont*) : Bool
    fun bg_QFont_setOverline_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_strikeOut_(_self_ : QFont*) : Bool
    fun bg_QFont_setStrikeOut_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_fixedPitch_(_self_ : QFont*) : Bool
    fun bg_QFont_setFixedPitch_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_kerning_(_self_ : QFont*) : Bool
    fun bg_QFont_setKerning_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_styleHint_(_self_ : QFont*) : Font::StyleHint
    fun bg_QFont_styleStrategy_(_self_ : QFont*) : Font::StyleStrategy
    fun bg_QFont_setStyleHint_QFont__StyleHint_QFont__StyleStrategy(_self_ : QFont*, unnamed_arg_0 : Font::StyleHint, unnamed_arg_1 : Font::StyleStrategy) : Void
    fun bg_QFont_setStyleStrategy_QFont__StyleStrategy(_self_ : QFont*, s : Font::StyleStrategy) : Void
    fun bg_QFont_stretch_(_self_ : QFont*) : Int32
    fun bg_QFont_setStretch_int(_self_ : QFont*, unnamed_arg_0 : Int32) : Void
    fun bg_QFont_letterSpacing_(_self_ : QFont*) : Float64
    fun bg_QFont_letterSpacingType_(_self_ : QFont*) : Font::SpacingType
    fun bg_QFont_setLetterSpacing_QFont__SpacingType_qreal(_self_ : QFont*, type : Font::SpacingType, spacing : Float64) : Void
    fun bg_QFont_wordSpacing_(_self_ : QFont*) : Float64
    fun bg_QFont_setWordSpacing_qreal(_self_ : QFont*, spacing : Float64) : Void
    fun bg_QFont_setCapitalization_QFont__Capitalization(_self_ : QFont*, unnamed_arg_0 : Font::Capitalization) : Void
    fun bg_QFont_capitalization_(_self_ : QFont*) : Font::Capitalization
    fun bg_QFont_setHintingPreference_QFont__HintingPreference(_self_ : QFont*, hinting_preference : Font::HintingPreference) : Void
    fun bg_QFont_hintingPreference_(_self_ : QFont*) : Font::HintingPreference
    fun bg_QFont_rawMode_(_self_ : QFont*) : Bool
    fun bg_QFont_setRawMode_bool(_self_ : QFont*, unnamed_arg_0 : Bool) : Void
    fun bg_QFont_exactMatch_(_self_ : QFont*) : Bool
    fun bg_QFont__OPERATOR_eq_const_QFont_R(_self_ : QFont*, unnamed_arg_0 : QFont*) : Bool
    fun bg_QFont__OPERATOR_ne_const_QFont_R(_self_ : QFont*, unnamed_arg_0 : QFont*) : Bool
    fun bg_QFont__OPERATOR_lt_const_QFont_R(_self_ : QFont*, unnamed_arg_0 : QFont*) : Bool
    fun bg_QFont_isCopyOf_const_QFont_R(_self_ : QFont*, unnamed_arg_0 : QFont*) : Bool
    fun bg_QFont_key_(_self_ : QFont*) : CrystalString
    fun bg_QFont_toString_(_self_ : QFont*) : CrystalString
    fun bg_QFont_fromString_const_QString_R(_self_ : QFont*, unnamed_arg_0 : CrystalString) : Bool
    fun bg_QFont_substitute_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : CrystalString
    fun bg_QFont_substitutes_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QStringList*
    fun bg_QFont_substitutions_STATIC_() : QStringList*
    fun bg_QFont_insertSubstitution_STATIC_const_QString_R_const_QString_R(unnamed_arg_0 : CrystalString, unnamed_arg_1 : CrystalString) : Void
    fun bg_QFont_insertSubstitutions_STATIC_const_QString_R_const_QStringList_R(unnamed_arg_0 : CrystalString, unnamed_arg_1 : QStringList*) : Void
    fun bg_QFont_removeSubstitutions_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : Void
    fun bg_QFont_initialize_STATIC_() : Void
    fun bg_QFont_cleanup_STATIC_() : Void
    fun bg_QFont_cacheStatistics_STATIC_() : Void
    fun bg_QFont_defaultFamily_(_self_ : QFont*) : CrystalString
    fun bg_QFont_resolve_const_QFont_R(_self_ : QFont*, unnamed_arg_0 : QFont*) : QFont*
    fun bg_QFont_resolve_(_self_ : QFont*) : UInt32
    fun bg_QFont_resolve_uint(_self_ : QFont*, mask : UInt32) : Void
    fun bg_QFont_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QPaintDevice_devType_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_paintingActive_(_self_ : QPaintDevice*) : Bool
    fun bg_QPaintDevice_paintEngine_(_self_ : QPaintDevice*) : QPaintEngine*
    fun bg_QPaintDevice_width_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_height_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_widthMM_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_heightMM_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_logicalDpiX_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_logicalDpiY_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_physicalDpiX_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_physicalDpiY_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_devicePixelRatio_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_devicePixelRatioF_(_self_ : QPaintDevice*) : Float64
    fun bg_QPaintDevice_colorCount_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_depth_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_devicePixelRatioFScale_STATIC_() : Float64
    fun bg_QPaintDevice__CONSTRUCT_() : QPaintDevice*
    fun bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric(_self_ : QPaintDevice*, metric : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPaintDevice_initPainter_QPainter_X(_self_ : QPaintDevice*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_(_self_ : QPaintDevice*) : QPainter*
    fun bg_QPaintDevice_devType_SUPER_(_self_ : QPaintDevice*) : Int32
    fun bg_QPaintDevice_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QPaintDevice*, metric : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPaintDevice_initPainter_SUPER_QPainter_X(_self_ : QPaintDevice*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_SUPER_(_self_ : QPaintDevice*) : QPainter*
    fun bg_BgInherit_QPaintDevice_JUMPTABLE_BgJumptable_QPaintDevice_R(_self_ : QPaintDevice*, table : BgJumptable_QPaintDevice*) : Void
    fun bg_QPixelFormat__CONSTRUCT_() : QPixelFormat*
    fun bg_QPixelFormat__CONSTRUCT_QPixelFormat__ColorModel_uchar_uchar_uchar_uchar_uchar_uchar_QPixelFormat__AlphaUsage_QPixelFormat__AlphaPosition_QPixelFormat__AlphaPremultiplied_QPixelFormat__TypeInterpretation_QPixelFormat__ByteOrder_uchar(color_model : PixelFormat::ColorModel, first_size : UInt8, second_size : UInt8, third_size : UInt8, fourth_size : UInt8, fifth_size : UInt8, alpha_size : UInt8, alpha_usage : PixelFormat::AlphaUsage, alpha_position : PixelFormat::AlphaPosition, premultiplied : PixelFormat::AlphaPremultiplied, type_interpretation : PixelFormat::TypeInterpretation, byte_order : PixelFormat::ByteOrder, sub_enum : UInt8) : QPixelFormat*
    fun bg_QPixelFormat_colorModel_(_self_ : QPixelFormat*) : PixelFormat::ColorModel
    fun bg_QPixelFormat_channelCount_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_redSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_greenSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_blueSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_cyanSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_magentaSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_yellowSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_blackSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_hueSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_saturationSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_lightnessSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_brightnessSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_alphaSize_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_bitsPerPixel_(_self_ : QPixelFormat*) : UInt8
    fun bg_QPixelFormat_alphaUsage_(_self_ : QPixelFormat*) : PixelFormat::AlphaUsage
    fun bg_QPixelFormat_alphaPosition_(_self_ : QPixelFormat*) : PixelFormat::AlphaPosition
    fun bg_QPixelFormat_premultiplied_(_self_ : QPixelFormat*) : PixelFormat::AlphaPremultiplied
    fun bg_QPixelFormat_typeInterpretation_(_self_ : QPixelFormat*) : PixelFormat::TypeInterpretation
    fun bg_QPixelFormat_byteOrder_(_self_ : QPixelFormat*) : PixelFormat::ByteOrder
    fun bg_QPixelFormat_yuvLayout_(_self_ : QPixelFormat*) : PixelFormat::YUVLayout
    fun bg_QPixelFormat_subEnum_(_self_ : QPixelFormat*) : UInt8
    fun bg_QImage__CONSTRUCT_() : QImage*
    fun bg_QImage__CONSTRUCT_const_QSize_R_QImage__Format(size : QSize*, format : Image::Format) : QImage*
    fun bg_QImage__CONSTRUCT_int_int_QImage__Format(width : Int32, height : Int32, format : Image::Format) : QImage*
    fun bg_QImage__CONSTRUCT_const_char_Xconst_X(xpm : UInt8**) : QImage*
    fun bg_QImage__CONSTRUCT_const_QString_R(file_name : CrystalString) : QImage*
    fun bg_QImage__CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : QImage*
    fun bg_QImage_swap_QImage_R(_self_ : QImage*, other : QImage*) : Void
    fun bg_QImage_isNull_(_self_ : QImage*) : Bool
    fun bg_QImage_devType_(_self_ : QImage*) : Int32
    fun bg_QImage__OPERATOR_eq_const_QImage_R(_self_ : QImage*, unnamed_arg_0 : QImage*) : Bool
    fun bg_QImage__OPERATOR_ne_const_QImage_R(_self_ : QImage*, unnamed_arg_0 : QImage*) : Bool
    fun bg_QImage_detach_(_self_ : QImage*) : Void
    fun bg_QImage_isDetached_(_self_ : QImage*) : Bool
    fun bg_QImage_copy_(_self_ : QImage*) : QImage*
    fun bg_QImage_copy_const_QRect_R(_self_ : QImage*, rect : QRect*) : QImage*
    fun bg_QImage_copy_int_int_int_int(_self_ : QImage*, x : Int32, y : Int32, w : Int32, h : Int32) : QImage*
    fun bg_QImage_format_(_self_ : QImage*) : Image::Format
    fun bg_QImage_convertToFormat_QImage__Format(_self_ : QImage*, f : Image::Format) : QImage*
    fun bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, f : Image::Format, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R(_self_ : QImage*, f : Image::Format, color_table : ContainerQVectorUnsignedInt*) : QImage*
    fun bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R_Qt__ImageConversionFlags(_self_ : QImage*, f : Image::Format, color_table : ContainerQVectorUnsignedInt*, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_reinterpretAsFormat_QImage__Format(_self_ : QImage*, f : Image::Format) : Bool
    fun bg_QImage_convertTo_QImage__Format(_self_ : QImage*, f : Image::Format) : Void
    fun bg_QImage_convertTo_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, f : Image::Format, flags : ImageConversionFlags) : Void
    fun bg_QImage_width_(_self_ : QImage*) : Int32
    fun bg_QImage_height_(_self_ : QImage*) : Int32
    fun bg_QImage_size_(_self_ : QImage*) : QSize*
    fun bg_QImage_rect_(_self_ : QImage*) : QRect*
    fun bg_QImage_depth_(_self_ : QImage*) : Int32
    fun bg_QImage_colorCount_(_self_ : QImage*) : Int32
    fun bg_QImage_bitPlaneCount_(_self_ : QImage*) : Int32
    fun bg_QImage_color_int(_self_ : QImage*, i : Int32) : UInt32
    fun bg_QImage_setColor_int_QRgb(_self_ : QImage*, i : Int32, c : UInt32) : Void
    fun bg_QImage_setColorCount_int(_self_ : QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_allGray_(_self_ : QImage*) : Bool
    fun bg_QImage_isGrayscale_(_self_ : QImage*) : Bool
    fun bg_QImage_bits_(_self_ : QImage*) : UInt8*
    fun bg_QImage_constBits_(_self_ : QImage*) : UInt8*
    fun bg_QImage_sizeInBytes_(_self_ : QImage*) : LibC::SizeT
    fun bg_QImage_scanLine_int(_self_ : QImage*, unnamed_arg_0 : Int32) : UInt8*
    fun bg_QImage_constScanLine_int(_self_ : QImage*, unnamed_arg_0 : Int32) : UInt8*
    fun bg_QImage_bytesPerLine_(_self_ : QImage*) : Int32
    fun bg_QImage_valid_int_int(_self_ : QImage*, x : Int32, y : Int32) : Bool
    fun bg_QImage_valid_const_QPoint_R(_self_ : QImage*, pt : QPoint) : Bool
    fun bg_QImage_pixelIndex_int_int(_self_ : QImage*, x : Int32, y : Int32) : Int32
    fun bg_QImage_pixelIndex_const_QPoint_R(_self_ : QImage*, pt : QPoint) : Int32
    fun bg_QImage_pixel_int_int(_self_ : QImage*, x : Int32, y : Int32) : UInt32
    fun bg_QImage_pixel_const_QPoint_R(_self_ : QImage*, pt : QPoint) : UInt32
    fun bg_QImage_setPixel_int_int_uint(_self_ : QImage*, x : Int32, y : Int32, index_or_rgb : UInt32) : Void
    fun bg_QImage_setPixel_const_QPoint_R_uint(_self_ : QImage*, pt : QPoint, index_or_rgb : UInt32) : Void
    fun bg_QImage_pixelColor_int_int(_self_ : QImage*, x : Int32, y : Int32) : QColor*
    fun bg_QImage_pixelColor_const_QPoint_R(_self_ : QImage*, pt : QPoint) : QColor*
    fun bg_QImage_setPixelColor_int_int_const_QColor_R(_self_ : QImage*, x : Int32, y : Int32, c : QColor*) : Void
    fun bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(_self_ : QImage*, pt : QPoint, c : QColor*) : Void
    fun bg_QImage_colorTable_(_self_ : QImage*) : ContainerQVectorUnsignedInt*
    fun bg_QImage_setColorTable_const_QVector_QRgb_(_self_ : QImage*, colors : ContainerQVectorUnsignedInt*) : Void
    fun bg_QImage_devicePixelRatio_(_self_ : QImage*) : Float64
    fun bg_QImage_setDevicePixelRatio_qreal(_self_ : QImage*, scale_factor : Float64) : Void
    fun bg_QImage_fill_uint(_self_ : QImage*, pixel : UInt32) : Void
    fun bg_QImage_fill_const_QColor_R(_self_ : QImage*, color : QColor*) : Void
    fun bg_QImage_fill_Qt__GlobalColor(_self_ : QImage*, color : GlobalColor) : Void
    fun bg_QImage_hasAlphaChannel_(_self_ : QImage*) : Bool
    fun bg_QImage_setAlphaChannel_const_QImage_R(_self_ : QImage*, alpha_channel : QImage*) : Void
    fun bg_QImage_createAlphaMask_(_self_ : QImage*) : QImage*
    fun bg_QImage_createAlphaMask_Qt__ImageConversionFlags(_self_ : QImage*, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_createHeuristicMask_bool(_self_ : QImage*, clip_tight : Bool) : QImage*
    fun bg_QImage_createMaskFromColor_QRgb_Qt__MaskMode(_self_ : QImage*, color : UInt32, mode : MaskMode) : QImage*
    fun bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QImage*, w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : QImage*
    fun bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QImage*, s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : QImage*
    fun bg_QImage_scaledToWidth_int_Qt__TransformationMode(_self_ : QImage*, w : Int32, mode : TransformationMode) : QImage*
    fun bg_QImage_scaledToHeight_int_Qt__TransformationMode(_self_ : QImage*, h : Int32, mode : TransformationMode) : QImage*
    fun bg_QImage_mirrored_bool_bool(_self_ : QImage*, horizontally : Bool, vertically : Bool) : QImage*
    fun bg_QImage_rgbSwapped_(_self_ : QImage*) : QImage*
    fun bg_QImage_invertPixels_QImage__InvertMode(_self_ : QImage*, unnamed_arg_0 : Image::InvertMode) : Void
    fun bg_QImage_colorSpace_(_self_ : QImage*) : QColorSpace*
    fun bg_QImage_convertedToColorSpace_const_QColorSpace_R(_self_ : QImage*, unnamed_arg_0 : QColorSpace*) : QImage*
    fun bg_QImage_convertToColorSpace_const_QColorSpace_R(_self_ : QImage*, unnamed_arg_0 : QColorSpace*) : Void
    fun bg_QImage_setColorSpace_const_QColorSpace_R(_self_ : QImage*, unnamed_arg_0 : QColorSpace*) : Void
    fun bg_QImage_applyColorTransform_const_QColorTransform_R(_self_ : QImage*, transform : QColorTransform*) : Void
    fun bg_QImage_load_QIODevice_X_const_char_X(_self_ : QImage*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QImage_load_const_QString_R(_self_ : QImage*, file_name : CrystalString) : Bool
    fun bg_QImage_load_const_QString_R_const_char_X(_self_ : QImage*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QImage_loadFromData_const_uchar_X_int(_self_ : QImage*, buf : UInt8*, len : Int32) : Bool
    fun bg_QImage_loadFromData_const_uchar_X_int_const_char_X(_self_ : QImage*, buf : UInt8*, len : Int32, format : UInt8*) : Bool
    fun bg_QImage_loadFromData_const_QByteArray_R(_self_ : QImage*, data : QByteArray*) : Bool
    fun bg_QImage_loadFromData_const_QByteArray_R_const_char_X(_self_ : QImage*, data : QByteArray*, aformat : UInt8*) : Bool
    fun bg_QImage_save_const_QString_R(_self_ : QImage*, file_name : CrystalString) : Bool
    fun bg_QImage_save_const_QString_R_const_char_X(_self_ : QImage*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QImage_save_const_QString_R_const_char_X_int(_self_ : QImage*, file_name : CrystalString, format : UInt8*, quality : Int32) : Bool
    fun bg_QImage_save_QIODevice_X(_self_ : QImage*, device : QIODevice*) : Bool
    fun bg_QImage_save_QIODevice_X_const_char_X(_self_ : QImage*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QImage_save_QIODevice_X_const_char_X_int(_self_ : QImage*, device : QIODevice*, format : UInt8*, quality : Int32) : Bool
    fun bg_QImage_fromData_STATIC_const_uchar_X_int(data : UInt8*, size : Int32) : QImage*
    fun bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(data : UInt8*, size : Int32, format : UInt8*) : QImage*
    fun bg_QImage_fromData_STATIC_const_QByteArray_R(data : QByteArray*) : QImage*
    fun bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(data : QByteArray*, format : UInt8*) : QImage*
    fun bg_QImage_cacheKey_(_self_ : QImage*) : Int64
    fun bg_QImage_paintEngine_(_self_ : QImage*) : QPaintEngine*
    fun bg_QImage_dotsPerMeterX_(_self_ : QImage*) : Int32
    fun bg_QImage_dotsPerMeterY_(_self_ : QImage*) : Int32
    fun bg_QImage_setDotsPerMeterX_int(_self_ : QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_setDotsPerMeterY_int(_self_ : QImage*, unnamed_arg_0 : Int32) : Void
    fun bg_QImage_offset_(_self_ : QImage*) : QPoint
    fun bg_QImage_setOffset_const_QPoint_R(_self_ : QImage*, unnamed_arg_0 : QPoint) : Void
    fun bg_QImage_textKeys_(_self_ : QImage*) : QStringList*
    fun bg_QImage_text_(_self_ : QImage*) : CrystalString
    fun bg_QImage_text_const_QString_R(_self_ : QImage*, key : CrystalString) : CrystalString
    fun bg_QImage_setText_const_QString_R_const_QString_R(_self_ : QImage*, key : CrystalString, value : CrystalString) : Void
    fun bg_QImage_pixelFormat_(_self_ : QImage*) : QPixelFormat*
    fun bg_QImage_toPixelFormat_STATIC_QImage__Format(format : Image::Format) : QPixelFormat*
    fun bg_QImage_toImageFormat_STATIC_QPixelFormat(format : QPixelFormat*) : Image::Format
    fun bg_QImage_toCGImage_(_self_ : QImage*) : CGImage*
    fun bg_QImage_metric_QPaintDevice__PaintDeviceMetric(_self_ : QImage*, metric : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QImage_mirrored_helper_bool_bool(_self_ : QImage*, horizontal : Bool, vertical : Bool) : QImage*
    fun bg_QImage_rgbSwapped_helper_(_self_ : QImage*) : QImage*
    fun bg_QImage_mirrored_inplace_bool_bool(_self_ : QImage*, horizontal : Bool, vertical : Bool) : Void
    fun bg_QImage_rgbSwapped_inplace_(_self_ : QImage*) : Void
    fun bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, format : Image::Format, flags : ImageConversionFlags) : QImage*
    fun bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(_self_ : QImage*, format : Image::Format, flags : ImageConversionFlags) : Bool
    fun bg_QImage_smoothScaled_int_int(_self_ : QImage*, w : Int32, h : Int32) : QImage*
    fun bg_QPaintDevice_initPainter_QPainter_X(_self_ : QImage*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_(_self_ : QImage*) : QPainter*
    fun bg_QImage_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QImage_devType_SUPER_(_self_ : QImage*) : Int32
    fun bg_QImage_paintEngine_SUPER_(_self_ : QImage*) : QPaintEngine*
    fun bg_QImage_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QImage*, metric : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPaintDevice_initPainter_SUPER_QPainter_X(_self_ : QImage*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_SUPER_(_self_ : QImage*) : QPainter*
    fun bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(_self_ : QImage*, table : BgJumptable_QImage*) : Void
    fun bg_QPixmap__CONSTRUCT_() : QPixmap*
    fun bg_QPixmap__CONSTRUCT_QPlatformPixmap_X(data : QPlatformPixmap*) : QPixmap*
    fun bg_QPixmap__CONSTRUCT_int_int(w : Int32, h : Int32) : QPixmap*
    fun bg_QPixmap__CONSTRUCT_const_QSize_R(unnamed_arg_0 : QSize*) : QPixmap*
    fun bg_QPixmap__CONSTRUCT_const_QString_R(file_name : CrystalString) : QPixmap*
    fun bg_QPixmap__CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : QPixmap*
    fun bg_QPixmap__CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(file_name : CrystalString, format : UInt8*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap__CONSTRUCT_const_char_Xconst_X(xpm : UInt8**) : QPixmap*
    fun bg_QPixmap_swap_QPixmap_R(_self_ : QPixmap*, other : QPixmap*) : Void
    fun bg_QPixmap_isNull_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_devType_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_width_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_height_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_size_(_self_ : QPixmap*) : QSize*
    fun bg_QPixmap_rect_(_self_ : QPixmap*) : QRect*
    fun bg_QPixmap_depth_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_defaultDepth_STATIC_() : Int32
    fun bg_QPixmap_mask_(_self_ : QPixmap*) : QBitmap*
    fun bg_QPixmap_setMask_const_QBitmap_R(_self_ : QPixmap*, unnamed_arg_0 : QBitmap*) : Void
    fun bg_QPixmap_devicePixelRatio_(_self_ : QPixmap*) : Float64
    fun bg_QPixmap_setDevicePixelRatio_qreal(_self_ : QPixmap*, scale_factor : Float64) : Void
    fun bg_QPixmap_hasAlpha_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_hasAlphaChannel_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_createHeuristicMask_bool(_self_ : QPixmap*, clip_tight : Bool) : QBitmap*
    fun bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(_self_ : QPixmap*, mask_color : QColor*, mode : MaskMode) : QBitmap*
    fun bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QPixmap*, w : Int32, h : Int32, aspect_mode : AspectRatioMode, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(_self_ : QPixmap*, s : QSize*, aspect_mode : AspectRatioMode, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(_self_ : QPixmap*, w : Int32, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(_self_ : QPixmap*, h : Int32, mode : TransformationMode) : QPixmap*
    fun bg_QPixmap_toImage_(_self_ : QPixmap*) : QImage*
    fun bg_QPixmap_fromImage_STATIC_const_QImage_R(image : QImage*) : QPixmap*
    fun bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_fromImageReader_STATIC_QImageReader_X(image_reader : QImageReader*) : QPixmap*
    fun bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(image_reader : QImageReader*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_load_const_QString_R(_self_ : QPixmap*, file_name : CrystalString) : Bool
    fun bg_QPixmap_load_const_QString_R_const_char_X(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint(_self_ : QPixmap*, buf : UInt8*, len : UInt32) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(_self_ : QPixmap*, buf : UInt8*, len : UInt32, format : UInt8*) : Bool
    fun bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(_self_ : QPixmap*, buf : UInt8*, len : UInt32, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R(_self_ : QPixmap*, data : QByteArray*) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(_self_ : QPixmap*, data : QByteArray*, format : UInt8*) : Bool
    fun bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(_self_ : QPixmap*, data : QByteArray*, format : UInt8*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_save_const_QString_R(_self_ : QPixmap*, file_name : CrystalString) : Bool
    fun bg_QPixmap_save_const_QString_R_const_char_X(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*) : Bool
    fun bg_QPixmap_save_const_QString_R_const_char_X_int(_self_ : QPixmap*, file_name : CrystalString, format : UInt8*, quality : Int32) : Bool
    fun bg_QPixmap_save_QIODevice_X(_self_ : QPixmap*, device : QIODevice*) : Bool
    fun bg_QPixmap_save_QIODevice_X_const_char_X(_self_ : QPixmap*, device : QIODevice*, format : UInt8*) : Bool
    fun bg_QPixmap_save_QIODevice_X_const_char_X_int(_self_ : QPixmap*, device : QIODevice*, format : UInt8*, quality : Int32) : Bool
    fun bg_QPixmap_convertFromImage_const_QImage_R(_self_ : QPixmap*, img : QImage*) : Bool
    fun bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(_self_ : QPixmap*, img : QImage*, flags : ImageConversionFlags) : Bool
    fun bg_QPixmap_copy_int_int_int_int(_self_ : QPixmap*, x : Int32, y : Int32, width : Int32, height : Int32) : QPixmap*
    fun bg_QPixmap_copy_(_self_ : QPixmap*) : QPixmap*
    fun bg_QPixmap_copy_const_QRect_R(_self_ : QPixmap*, rect : QRect*) : QPixmap*
    fun bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(_self_ : QPixmap*, dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32, exposed : QRegion*) : Void
    fun bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(_self_ : QPixmap*, dx : Int32, dy : Int32, rect : QRect*, exposed : QRegion*) : Void
    fun bg_QPixmap_cacheKey_(_self_ : QPixmap*) : Int64
    fun bg_QPixmap_isDetached_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_detach_(_self_ : QPixmap*) : Void
    fun bg_QPixmap_isQBitmap_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_paintEngine_(_self_ : QPixmap*) : QPaintEngine*
    fun bg_QPixmap__OPERATOR_not_(_self_ : QPixmap*) : Bool
    fun bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(_self_ : QPixmap*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPixmap_fromImageInPlace_STATIC_QImage_R(image : QImage*) : QPixmap*
    fun bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : QPixmap*
    fun bg_QPixmap_handle_(_self_ : QPixmap*) : QPlatformPixmap*
    fun bg_QPaintDevice_initPainter_QPainter_X(_self_ : QPixmap*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_(_self_ : QPixmap*) : QPainter*
    fun bg_QPixmap_devType_SUPER_(_self_ : QPixmap*) : Int32
    fun bg_QPixmap_paintEngine_SUPER_(_self_ : QPixmap*) : QPaintEngine*
    fun bg_QPixmap_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QPixmap*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPaintDevice_initPainter_SUPER_QPainter_X(_self_ : QPixmap*, painter : QPainter*) : Void
    fun bg_QPaintDevice_sharedPainter_SUPER_(_self_ : QPixmap*) : QPainter*
    fun bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(_self_ : QPixmap*, table : BgJumptable_QPixmap*) : Void
    fun bg_QBrush__CONSTRUCT_() : QBrush*
    fun bg_QBrush__CONSTRUCT_Qt__BrushStyle(bs : BrushStyle) : QBrush*
    fun bg_QBrush__CONSTRUCT_const_QColor_R_Qt__BrushStyle(color : QColor*, bs : BrushStyle) : QBrush*
    fun bg_QBrush__CONSTRUCT_Qt__GlobalColor_Qt__BrushStyle(color : GlobalColor, bs : BrushStyle) : QBrush*
    fun bg_QBrush__CONSTRUCT_const_QColor_R_const_QPixmap_R(color : QColor*, pixmap : QPixmap*) : QBrush*
    fun bg_QBrush__CONSTRUCT_Qt__GlobalColor_const_QPixmap_R(color : GlobalColor, pixmap : QPixmap*) : QBrush*
    fun bg_QBrush__CONSTRUCT_const_QPixmap_R(pixmap : QPixmap*) : QBrush*
    fun bg_QBrush__CONSTRUCT_const_QImage_R(image : QImage*) : QBrush*
    fun bg_QBrush__CONSTRUCT_const_QGradient_R(gradient : QGradient*) : QBrush*
    fun bg_QBrush_swap_QBrush_R(_self_ : QBrush*, other : QBrush*) : Void
    fun bg_QBrush_style_(_self_ : QBrush*) : BrushStyle
    fun bg_QBrush_setStyle_Qt__BrushStyle(_self_ : QBrush*, unnamed_arg_0 : BrushStyle) : Void
    fun bg_QBrush_transform_(_self_ : QBrush*) : QTransform*
    fun bg_QBrush_setTransform_const_QTransform_R(_self_ : QBrush*, unnamed_arg_0 : QTransform*) : Void
    fun bg_QBrush_texture_(_self_ : QBrush*) : QPixmap*
    fun bg_QBrush_setTexture_const_QPixmap_R(_self_ : QBrush*, pixmap : QPixmap*) : Void
    fun bg_QBrush_textureImage_(_self_ : QBrush*) : QImage*
    fun bg_QBrush_setTextureImage_const_QImage_R(_self_ : QBrush*, image : QImage*) : Void
    fun bg_QBrush_color_(_self_ : QBrush*) : QColor*
    fun bg_QBrush_setColor_const_QColor_R(_self_ : QBrush*, color : QColor*) : Void
    fun bg_QBrush_setColor_Qt__GlobalColor(_self_ : QBrush*, color : GlobalColor) : Void
    fun bg_QBrush_gradient_(_self_ : QBrush*) : QGradient*
    fun bg_QBrush_isOpaque_(_self_ : QBrush*) : Bool
    fun bg_QBrush__OPERATOR_eq_const_QBrush_R(_self_ : QBrush*, b : QBrush*) : Bool
    fun bg_QBrush__OPERATOR_ne_const_QBrush_R(_self_ : QBrush*, b : QBrush*) : Bool
    fun bg_QBrush_isDetached_(_self_ : QBrush*) : Bool
    fun bg_QTextOption__CONSTRUCT_() : QTextOption*
    fun bg_QTextOption__CONSTRUCT_Qt__Alignment(alignment : Alignment) : QTextOption*
    fun bg_QTextOption_setAlignment_Qt__Alignment(_self_ : QTextOption*, alignment : Alignment) : Void
    fun bg_QTextOption_alignment_(_self_ : QTextOption*) : Alignment
    fun bg_QTextOption_setTextDirection_Qt__LayoutDirection(_self_ : QTextOption*, a_direction : LayoutDirection) : Void
    fun bg_QTextOption_textDirection_(_self_ : QTextOption*) : LayoutDirection
    fun bg_QTextOption_setWrapMode_QTextOption__WrapMode(_self_ : QTextOption*, wrap : TextOption::WrapMode) : Void
    fun bg_QTextOption_wrapMode_(_self_ : QTextOption*) : TextOption::WrapMode
    fun bg_QTextOption_setFlags_QTextOption__Flags(_self_ : QTextOption*, flags : TextOption::Flags) : Void
    fun bg_QTextOption_flags_(_self_ : QTextOption*) : TextOption::Flags
    fun bg_QTextOption_setTabStopDistance_qreal(_self_ : QTextOption*, tab_stop_distance : Float64) : Void
    fun bg_QTextOption_tabStopDistance_(_self_ : QTextOption*) : Float64
    fun bg_QTextOption_setTabArray_const_QList_qreal__R(_self_ : QTextOption*, tab_stops : ContainerQListQreal*) : Void
    fun bg_QTextOption_tabArray_(_self_ : QTextOption*) : ContainerQListQreal*
    fun bg_QTextOption_setUseDesignMetrics_bool(_self_ : QTextOption*, b : Bool) : Void
    fun bg_QTextOption_useDesignMetrics_(_self_ : QTextOption*) : Bool
    fun bg_QTextLength__CONSTRUCT_() : QTextLength*
    fun bg_QTextLength__CONSTRUCT_QTextLength__Type_qreal(type : TextLength::Type, value : Float64) : QTextLength*
    fun bg_QTextLength_type_(_self_ : QTextLength*) : TextLength::Type
    fun bg_QTextLength_value_qreal(_self_ : QTextLength*, maximum_length : Float64) : Float64
    fun bg_QTextLength_rawValue_(_self_ : QTextLength*) : Float64
    fun bg_QTextLength__OPERATOR_eq_const_QTextLength_R(_self_ : QTextLength*, other : QTextLength*) : Bool
    fun bg_QTextLength__OPERATOR_ne_const_QTextLength_R(_self_ : QTextLength*, other : QTextLength*) : Bool
    fun bg_QTextFormat__CONSTRUCT_() : QTextFormat*
    fun bg_QTextFormat__CONSTRUCT_int(type : Int32) : QTextFormat*
    fun bg_QTextFormat_swap_QTextFormat_R(_self_ : QTextFormat*, other : QTextFormat*) : Void
    fun bg_QTextFormat_merge_const_QTextFormat_R(_self_ : QTextFormat*, other : QTextFormat*) : Void
    fun bg_QTextFormat_isValid_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isEmpty_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_type_(_self_ : QTextFormat*) : Int32
    fun bg_QTextFormat_objectIndex_(_self_ : QTextFormat*) : Int32
    fun bg_QTextFormat_setObjectIndex_int(_self_ : QTextFormat*, object : Int32) : Void
    fun bg_QTextFormat_property_int(_self_ : QTextFormat*, property_id : Int32) : CrystalVariant
    fun bg_QTextFormat_setProperty_int_const_QVariant_R(_self_ : QTextFormat*, property_id : Int32, value : CrystalVariant) : Void
    fun bg_QTextFormat_clearProperty_int(_self_ : QTextFormat*, property_id : Int32) : Void
    fun bg_QTextFormat_hasProperty_int(_self_ : QTextFormat*, property_id : Int32) : Bool
    fun bg_QTextFormat_boolProperty_int(_self_ : QTextFormat*, property_id : Int32) : Bool
    fun bg_QTextFormat_intProperty_int(_self_ : QTextFormat*, property_id : Int32) : Int32
    fun bg_QTextFormat_doubleProperty_int(_self_ : QTextFormat*, property_id : Int32) : Float64
    fun bg_QTextFormat_stringProperty_int(_self_ : QTextFormat*, property_id : Int32) : CrystalString
    fun bg_QTextFormat_colorProperty_int(_self_ : QTextFormat*, property_id : Int32) : QColor*
    fun bg_QTextFormat_penProperty_int(_self_ : QTextFormat*, property_id : Int32) : QPen*
    fun bg_QTextFormat_brushProperty_int(_self_ : QTextFormat*, property_id : Int32) : QBrush*
    fun bg_QTextFormat_lengthProperty_int(_self_ : QTextFormat*, property_id : Int32) : QTextLength*
    fun bg_QTextFormat_lengthVectorProperty_int(_self_ : QTextFormat*, property_id : Int32) : ContainerQVectorQTextLength*
    fun bg_QTextFormat_setProperty_int_const_QVector_QTextLength__R(_self_ : QTextFormat*, property_id : Int32, lengths : ContainerQVectorQTextLength*) : Void
    fun bg_QTextFormat_propertyCount_(_self_ : QTextFormat*) : Int32
    fun bg_QTextFormat_setObjectType_int(_self_ : QTextFormat*, type : Int32) : Void
    fun bg_QTextFormat_objectType_(_self_ : QTextFormat*) : Int32
    fun bg_QTextFormat_isCharFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isBlockFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isListFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isFrameFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isImageFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isTableFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_isTableCellFormat_(_self_ : QTextFormat*) : Bool
    fun bg_QTextFormat_toBlockFormat_(_self_ : QTextFormat*) : QTextBlockFormat*
    fun bg_QTextFormat_toCharFormat_(_self_ : QTextFormat*) : QTextCharFormat*
    fun bg_QTextFormat_toListFormat_(_self_ : QTextFormat*) : QTextListFormat*
    fun bg_QTextFormat_toTableFormat_(_self_ : QTextFormat*) : QTextTableFormat*
    fun bg_QTextFormat_toFrameFormat_(_self_ : QTextFormat*) : QTextFrameFormat*
    fun bg_QTextFormat_toImageFormat_(_self_ : QTextFormat*) : QTextImageFormat*
    fun bg_QTextFormat_toTableCellFormat_(_self_ : QTextFormat*) : QTextTableCellFormat*
    fun bg_QTextFormat__OPERATOR_eq_const_QTextFormat_R(_self_ : QTextFormat*, rhs : QTextFormat*) : Bool
    fun bg_QTextFormat__OPERATOR_ne_const_QTextFormat_R(_self_ : QTextFormat*, rhs : QTextFormat*) : Bool
    fun bg_QTextFormat_setLayoutDirection_Qt__LayoutDirection(_self_ : QTextFormat*, direction : LayoutDirection) : Void
    fun bg_QTextFormat_layoutDirection_(_self_ : QTextFormat*) : LayoutDirection
    fun bg_QTextFormat_setBackground_const_QBrush_R(_self_ : QTextFormat*, brush : QBrush*) : Void
    fun bg_QTextFormat_background_(_self_ : QTextFormat*) : QBrush*
    fun bg_QTextFormat_clearBackground_(_self_ : QTextFormat*) : Void
    fun bg_QTextFormat_setForeground_const_QBrush_R(_self_ : QTextFormat*, brush : QBrush*) : Void
    fun bg_QTextFormat_foreground_(_self_ : QTextFormat*) : QBrush*
    fun bg_QTextFormat_clearForeground_(_self_ : QTextFormat*) : Void
    fun bg_QTextFormat_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTextCharFormat__CONSTRUCT_() : QTextCharFormat*
    fun bg_QTextCharFormat_isValid_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFont_const_QFont_R_QTextCharFormat__FontPropertiesInheritanceBehavior(_self_ : QTextCharFormat*, font : QFont*, behavior : TextCharFormat::FontPropertiesInheritanceBehavior) : Void
    fun bg_QTextCharFormat_setFont_const_QFont_R(_self_ : QTextCharFormat*, font : QFont*) : Void
    fun bg_QTextCharFormat_font_(_self_ : QTextCharFormat*) : QFont*
    fun bg_QTextCharFormat_setFontFamily_const_QString_R(_self_ : QTextCharFormat*, family : CrystalString) : Void
    fun bg_QTextCharFormat_fontFamily_(_self_ : QTextCharFormat*) : CrystalString
    fun bg_QTextCharFormat_setFontFamilies_const_QStringList_R(_self_ : QTextCharFormat*, families : QStringList*) : Void
    fun bg_QTextCharFormat_fontFamilies_(_self_ : QTextCharFormat*) : CrystalVariant
    fun bg_QTextCharFormat_setFontStyleName_const_QString_R(_self_ : QTextCharFormat*, style_name : CrystalString) : Void
    fun bg_QTextCharFormat_fontStyleName_(_self_ : QTextCharFormat*) : CrystalVariant
    fun bg_QTextCharFormat_setFontPointSize_qreal(_self_ : QTextCharFormat*, size : Float64) : Void
    fun bg_QTextCharFormat_fontPointSize_(_self_ : QTextCharFormat*) : Float64
    fun bg_QTextCharFormat_setFontWeight_int(_self_ : QTextCharFormat*, weight : Int32) : Void
    fun bg_QTextCharFormat_fontWeight_(_self_ : QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_setFontItalic_bool(_self_ : QTextCharFormat*, italic : Bool) : Void
    fun bg_QTextCharFormat_fontItalic_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontCapitalization_QFont__Capitalization(_self_ : QTextCharFormat*, capitalization : Font::Capitalization) : Void
    fun bg_QTextCharFormat_fontCapitalization_(_self_ : QTextCharFormat*) : Font::Capitalization
    fun bg_QTextCharFormat_setFontLetterSpacingType_QFont__SpacingType(_self_ : QTextCharFormat*, letter_spacing_type : Font::SpacingType) : Void
    fun bg_QTextCharFormat_fontLetterSpacingType_(_self_ : QTextCharFormat*) : Font::SpacingType
    fun bg_QTextCharFormat_setFontLetterSpacing_qreal(_self_ : QTextCharFormat*, spacing : Float64) : Void
    fun bg_QTextCharFormat_fontLetterSpacing_(_self_ : QTextCharFormat*) : Float64
    fun bg_QTextCharFormat_setFontWordSpacing_qreal(_self_ : QTextCharFormat*, spacing : Float64) : Void
    fun bg_QTextCharFormat_fontWordSpacing_(_self_ : QTextCharFormat*) : Float64
    fun bg_QTextCharFormat_setFontUnderline_bool(_self_ : QTextCharFormat*, underline : Bool) : Void
    fun bg_QTextCharFormat_fontUnderline_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontOverline_bool(_self_ : QTextCharFormat*, overline : Bool) : Void
    fun bg_QTextCharFormat_fontOverline_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontStrikeOut_bool(_self_ : QTextCharFormat*, strike_out : Bool) : Void
    fun bg_QTextCharFormat_fontStrikeOut_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setUnderlineColor_const_QColor_R(_self_ : QTextCharFormat*, color : QColor*) : Void
    fun bg_QTextCharFormat_underlineColor_(_self_ : QTextCharFormat*) : QColor*
    fun bg_QTextCharFormat_setFontFixedPitch_bool(_self_ : QTextCharFormat*, fixed_pitch : Bool) : Void
    fun bg_QTextCharFormat_fontFixedPitch_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setFontStretch_int(_self_ : QTextCharFormat*, factor : Int32) : Void
    fun bg_QTextCharFormat_fontStretch_(_self_ : QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_setFontStyleHint_QFont__StyleHint_QFont__StyleStrategy(_self_ : QTextCharFormat*, hint : Font::StyleHint, strategy : Font::StyleStrategy) : Void
    fun bg_QTextCharFormat_setFontStyleStrategy_QFont__StyleStrategy(_self_ : QTextCharFormat*, strategy : Font::StyleStrategy) : Void
    fun bg_QTextCharFormat_fontStyleHint_(_self_ : QTextCharFormat*) : Font::StyleHint
    fun bg_QTextCharFormat_fontStyleStrategy_(_self_ : QTextCharFormat*) : Font::StyleStrategy
    fun bg_QTextCharFormat_setFontHintingPreference_QFont__HintingPreference(_self_ : QTextCharFormat*, hinting_preference : Font::HintingPreference) : Void
    fun bg_QTextCharFormat_fontHintingPreference_(_self_ : QTextCharFormat*) : Font::HintingPreference
    fun bg_QTextCharFormat_setFontKerning_bool(_self_ : QTextCharFormat*, enable : Bool) : Void
    fun bg_QTextCharFormat_fontKerning_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setUnderlineStyle_QTextCharFormat__UnderlineStyle(_self_ : QTextCharFormat*, style : TextCharFormat::UnderlineStyle) : Void
    fun bg_QTextCharFormat_underlineStyle_(_self_ : QTextCharFormat*) : TextCharFormat::UnderlineStyle
    fun bg_QTextCharFormat_setVerticalAlignment_QTextCharFormat__VerticalAlignment(_self_ : QTextCharFormat*, alignment : TextCharFormat::VerticalAlignment) : Void
    fun bg_QTextCharFormat_verticalAlignment_(_self_ : QTextCharFormat*) : TextCharFormat::VerticalAlignment
    fun bg_QTextCharFormat_setTextOutline_const_QPen_R(_self_ : QTextCharFormat*, pen : QPen*) : Void
    fun bg_QTextCharFormat_textOutline_(_self_ : QTextCharFormat*) : QPen*
    fun bg_QTextCharFormat_setToolTip_const_QString_R(_self_ : QTextCharFormat*, tip : CrystalString) : Void
    fun bg_QTextCharFormat_toolTip_(_self_ : QTextCharFormat*) : CrystalString
    fun bg_QTextCharFormat_setAnchor_bool(_self_ : QTextCharFormat*, anchor : Bool) : Void
    fun bg_QTextCharFormat_isAnchor_(_self_ : QTextCharFormat*) : Bool
    fun bg_QTextCharFormat_setAnchorHref_const_QString_R(_self_ : QTextCharFormat*, value : CrystalString) : Void
    fun bg_QTextCharFormat_anchorHref_(_self_ : QTextCharFormat*) : CrystalString
    fun bg_QTextCharFormat_setAnchorNames_const_QStringList_R(_self_ : QTextCharFormat*, names : QStringList*) : Void
    fun bg_QTextCharFormat_anchorNames_(_self_ : QTextCharFormat*) : QStringList*
    fun bg_QTextCharFormat_setTableCellRowSpan_int(_self_ : QTextCharFormat*, table_cell_row_span : Int32) : Void
    fun bg_QTextCharFormat_tableCellRowSpan_(_self_ : QTextCharFormat*) : Int32
    fun bg_QTextCharFormat_setTableCellColumnSpan_int(_self_ : QTextCharFormat*, table_cell_column_span : Int32) : Void
    fun bg_QTextCharFormat_tableCellColumnSpan_(_self_ : QTextCharFormat*) : Int32
    fun bg_QTextCharFormat__CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : QTextCharFormat*
    fun bg_QTextBlockFormat__CONSTRUCT_() : QTextBlockFormat*
    fun bg_QTextBlockFormat_isValid_(_self_ : QTextBlockFormat*) : Bool
    fun bg_QTextBlockFormat_setAlignment_Qt__Alignment(_self_ : QTextBlockFormat*, alignment : Alignment) : Void
    fun bg_QTextBlockFormat_alignment_(_self_ : QTextBlockFormat*) : Alignment
    fun bg_QTextBlockFormat_setTopMargin_qreal(_self_ : QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_topMargin_(_self_ : QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setBottomMargin_qreal(_self_ : QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_bottomMargin_(_self_ : QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setLeftMargin_qreal(_self_ : QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_leftMargin_(_self_ : QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setRightMargin_qreal(_self_ : QTextBlockFormat*, margin : Float64) : Void
    fun bg_QTextBlockFormat_rightMargin_(_self_ : QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setTextIndent_qreal(_self_ : QTextBlockFormat*, aindent : Float64) : Void
    fun bg_QTextBlockFormat_textIndent_(_self_ : QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_setIndent_int(_self_ : QTextBlockFormat*, indent : Int32) : Void
    fun bg_QTextBlockFormat_indent_(_self_ : QTextBlockFormat*) : Int32
    fun bg_QTextBlockFormat_setHeadingLevel_int(_self_ : QTextBlockFormat*, alevel : Int32) : Void
    fun bg_QTextBlockFormat_headingLevel_(_self_ : QTextBlockFormat*) : Int32
    fun bg_QTextBlockFormat_setLineHeight_qreal_int(_self_ : QTextBlockFormat*, height : Float64, height_type : Int32) : Void
    fun bg_QTextBlockFormat_lineHeight_qreal_qreal(_self_ : QTextBlockFormat*, script_line_height : Float64, scaling : Float64) : Float64
    fun bg_QTextBlockFormat_lineHeight_(_self_ : QTextBlockFormat*) : Float64
    fun bg_QTextBlockFormat_lineHeightType_(_self_ : QTextBlockFormat*) : Int32
    fun bg_QTextBlockFormat_setNonBreakableLines_bool(_self_ : QTextBlockFormat*, b : Bool) : Void
    fun bg_QTextBlockFormat_nonBreakableLines_(_self_ : QTextBlockFormat*) : Bool
    fun bg_QTextBlockFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(_self_ : QTextBlockFormat*, flags : TextFormat::PageBreakFlags) : Void
    fun bg_QTextBlockFormat_pageBreakPolicy_(_self_ : QTextBlockFormat*) : TextFormat::PageBreakFlags
    fun bg_QTextBlockFormat_setMarker_QTextBlockFormat__MarkerType(_self_ : QTextBlockFormat*, marker : TextBlockFormat::MarkerType) : Void
    fun bg_QTextBlockFormat_marker_(_self_ : QTextBlockFormat*) : TextBlockFormat::MarkerType
    fun bg_QTextBlockFormat__CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : QTextBlockFormat*
    fun bg_QTextListFormat__CONSTRUCT_() : QTextListFormat*
    fun bg_QTextListFormat_isValid_(_self_ : QTextListFormat*) : Bool
    fun bg_QTextListFormat_setStyle_QTextListFormat__Style(_self_ : QTextListFormat*, style : TextListFormat::Style) : Void
    fun bg_QTextListFormat_style_(_self_ : QTextListFormat*) : TextListFormat::Style
    fun bg_QTextListFormat_setIndent_int(_self_ : QTextListFormat*, indent : Int32) : Void
    fun bg_QTextListFormat_indent_(_self_ : QTextListFormat*) : Int32
    fun bg_QTextListFormat_setNumberPrefix_const_QString_R(_self_ : QTextListFormat*, number_prefix : CrystalString) : Void
    fun bg_QTextListFormat_numberPrefix_(_self_ : QTextListFormat*) : CrystalString
    fun bg_QTextListFormat_setNumberSuffix_const_QString_R(_self_ : QTextListFormat*, number_suffix : CrystalString) : Void
    fun bg_QTextListFormat_numberSuffix_(_self_ : QTextListFormat*) : CrystalString
    fun bg_QTextListFormat__CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : QTextListFormat*
    fun bg_QTextFrameFormat__CONSTRUCT_() : QTextFrameFormat*
    fun bg_QTextFrameFormat_isValid_(_self_ : QTextFrameFormat*) : Bool
    fun bg_QTextFrameFormat_setPosition_QTextFrameFormat__Position(_self_ : QTextFrameFormat*, f : TextFrameFormat::Position) : Void
    fun bg_QTextFrameFormat_position_(_self_ : QTextFrameFormat*) : TextFrameFormat::Position
    fun bg_QTextFrameFormat_setBorder_qreal(_self_ : QTextFrameFormat*, border : Float64) : Void
    fun bg_QTextFrameFormat_border_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setBorderBrush_const_QBrush_R(_self_ : QTextFrameFormat*, brush : QBrush*) : Void
    fun bg_QTextFrameFormat_borderBrush_(_self_ : QTextFrameFormat*) : QBrush*
    fun bg_QTextFrameFormat_setBorderStyle_QTextFrameFormat__BorderStyle(_self_ : QTextFrameFormat*, style : TextFrameFormat::BorderStyle) : Void
    fun bg_QTextFrameFormat_borderStyle_(_self_ : QTextFrameFormat*) : TextFrameFormat::BorderStyle
    fun bg_QTextFrameFormat_setMargin_qreal(_self_ : QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_margin_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setTopMargin_qreal(_self_ : QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_topMargin_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setBottomMargin_qreal(_self_ : QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_bottomMargin_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setLeftMargin_qreal(_self_ : QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_leftMargin_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setRightMargin_qreal(_self_ : QTextFrameFormat*, margin : Float64) : Void
    fun bg_QTextFrameFormat_rightMargin_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setPadding_qreal(_self_ : QTextFrameFormat*, padding : Float64) : Void
    fun bg_QTextFrameFormat_padding_(_self_ : QTextFrameFormat*) : Float64
    fun bg_QTextFrameFormat_setWidth_qreal(_self_ : QTextFrameFormat*, width : Float64) : Void
    fun bg_QTextFrameFormat_setWidth_const_QTextLength_R(_self_ : QTextFrameFormat*, length : QTextLength*) : Void
    fun bg_QTextFrameFormat_width_(_self_ : QTextFrameFormat*) : QTextLength*
    fun bg_QTextFrameFormat_setHeight_qreal(_self_ : QTextFrameFormat*, height : Float64) : Void
    fun bg_QTextFrameFormat_setHeight_const_QTextLength_R(_self_ : QTextFrameFormat*, height : QTextLength*) : Void
    fun bg_QTextFrameFormat_height_(_self_ : QTextFrameFormat*) : QTextLength*
    fun bg_QTextFrameFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(_self_ : QTextFrameFormat*, flags : TextFormat::PageBreakFlags) : Void
    fun bg_QTextFrameFormat_pageBreakPolicy_(_self_ : QTextFrameFormat*) : TextFormat::PageBreakFlags
    fun bg_QTextFrameFormat__CONSTRUCT_const_QTextFormat_R(fmt : QTextFormat*) : QTextFrameFormat*
    fun bg_QTextCursor__CONSTRUCT_() : QTextCursor*
    fun bg_QTextCursor__CONSTRUCT_QTextDocument_X(document : QTextDocument*) : QTextCursor*
    fun bg_QTextCursor__CONSTRUCT_QTextDocumentPrivate_X_int(p : QTextDocumentPrivate*, pos : Int32) : QTextCursor*
    fun bg_QTextCursor__CONSTRUCT_QTextCursorPrivate_X(d : QTextCursorPrivate*) : QTextCursor*
    fun bg_QTextCursor__CONSTRUCT_QTextFrame_X(frame : QTextFrame*) : QTextCursor*
    fun bg_QTextCursor__CONSTRUCT_const_QTextBlock_R(block : QTextBlock*) : QTextCursor*
    fun bg_QTextCursor_swap_QTextCursor_R(_self_ : QTextCursor*, other : QTextCursor*) : Void
    fun bg_QTextCursor_isNull_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(_self_ : QTextCursor*, pos : Int32, mode : TextCursor::MoveMode) : Void
    fun bg_QTextCursor_position_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_positionInBlock_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_anchor_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_insertText_const_QString_R(_self_ : QTextCursor*, text : CrystalString) : Void
    fun bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(_self_ : QTextCursor*, text : CrystalString, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(_self_ : QTextCursor*, op : TextCursor::MoveOperation, unnamed_arg_1 : TextCursor::MoveMode, n : Int32) : Bool
    fun bg_QTextCursor_visualNavigation_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_setVisualNavigation_bool(_self_ : QTextCursor*, b : Bool) : Void
    fun bg_QTextCursor_setVerticalMovementX_int(_self_ : QTextCursor*, x : Int32) : Void
    fun bg_QTextCursor_verticalMovementX_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_setKeepPositionOnInsert_bool(_self_ : QTextCursor*, b : Bool) : Void
    fun bg_QTextCursor_keepPositionOnInsert_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_deleteChar_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_deletePreviousChar_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_select_QTextCursor__SelectionType(_self_ : QTextCursor*, selection : TextCursor::SelectionType) : Void
    fun bg_QTextCursor_hasSelection_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_hasComplexSelection_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_removeSelectedText_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_clearSelection_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_selectionStart_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_selectionEnd_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_selectedText_(_self_ : QTextCursor*) : CrystalString
    fun bg_QTextCursor_selection_(_self_ : QTextCursor*) : QTextDocumentFragment*
    fun bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(_self_ : QTextCursor*, first_row : Int32*, num_rows : Int32*, first_column : Int32*, num_columns : Int32*) : Void
    fun bg_QTextCursor_block_(_self_ : QTextCursor*) : QTextBlock*
    fun bg_QTextCursor_charFormat_(_self_ : QTextCursor*) : QTextCharFormat*
    fun bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, modifier : QTextCharFormat*) : Void
    fun bg_QTextCursor_blockFormat_(_self_ : QTextCursor*) : QTextBlockFormat*
    fun bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(_self_ : QTextCursor*, format : QTextBlockFormat*) : Void
    fun bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(_self_ : QTextCursor*, modifier : QTextBlockFormat*) : Void
    fun bg_QTextCursor_blockCharFormat_(_self_ : QTextCursor*) : QTextCharFormat*
    fun bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, format : QTextCharFormat*) : Void
    fun bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(_self_ : QTextCursor*, modifier : QTextCharFormat*) : Void
    fun bg_QTextCursor_atBlockStart_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_atBlockEnd_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_atStart_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_atEnd_(_self_ : QTextCursor*) : Bool
    fun bg_QTextCursor_insertBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(_self_ : QTextCursor*, format : QTextBlockFormat*) : Void
    fun bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(_self_ : QTextCursor*, format : QTextBlockFormat*, char_format : QTextCharFormat*) : Void
    fun bg_QTextCursor_insertList_const_QTextListFormat_R(_self_ : QTextCursor*, format : QTextListFormat*) : QTextList*
    fun bg_QTextCursor_insertList_QTextListFormat__Style(_self_ : QTextCursor*, style : TextListFormat::Style) : QTextList*
    fun bg_QTextCursor_createList_const_QTextListFormat_R(_self_ : QTextCursor*, format : QTextListFormat*) : QTextList*
    fun bg_QTextCursor_createList_QTextListFormat__Style(_self_ : QTextCursor*, style : TextListFormat::Style) : QTextList*
    fun bg_QTextCursor_currentList_(_self_ : QTextCursor*) : QTextList*
    fun bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(_self_ : QTextCursor*, rows : Int32, cols : Int32, format : QTextTableFormat*) : QTextTable*
    fun bg_QTextCursor_insertTable_int_int(_self_ : QTextCursor*, rows : Int32, cols : Int32) : QTextTable*
    fun bg_QTextCursor_currentTable_(_self_ : QTextCursor*) : QTextTable*
    fun bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(_self_ : QTextCursor*, format : QTextFrameFormat*) : QTextFrame*
    fun bg_QTextCursor_currentFrame_(_self_ : QTextCursor*) : QTextFrame*
    fun bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(_self_ : QTextCursor*, fragment : QTextDocumentFragment*) : Void
    fun bg_QTextCursor_insertHtml_const_QString_R(_self_ : QTextCursor*, html : CrystalString) : Void
    fun bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(_self_ : QTextCursor*, format : QTextImageFormat*, alignment : TextFrameFormat::Position) : Void
    fun bg_QTextCursor_insertImage_const_QTextImageFormat_R(_self_ : QTextCursor*, format : QTextImageFormat*) : Void
    fun bg_QTextCursor_insertImage_const_QString_R(_self_ : QTextCursor*, name : CrystalString) : Void
    fun bg_QTextCursor_insertImage_const_QImage_R(_self_ : QTextCursor*, image : QImage*) : Void
    fun bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(_self_ : QTextCursor*, image : QImage*, name : CrystalString) : Void
    fun bg_QTextCursor_beginEditBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_joinPreviousEditBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor_endEditBlock_(_self_ : QTextCursor*) : Void
    fun bg_QTextCursor__OPERATOR_ne_const_QTextCursor_R(_self_ : QTextCursor*, rhs : QTextCursor*) : Bool
    fun bg_QTextCursor__OPERATOR_lt_const_QTextCursor_R(_self_ : QTextCursor*, rhs : QTextCursor*) : Bool
    fun bg_QTextCursor__OPERATOR_le_const_QTextCursor_R(_self_ : QTextCursor*, rhs : QTextCursor*) : Bool
    fun bg_QTextCursor__OPERATOR_eq_const_QTextCursor_R(_self_ : QTextCursor*, rhs : QTextCursor*) : Bool
    fun bg_QTextCursor__OPERATOR_ge_const_QTextCursor_R(_self_ : QTextCursor*, rhs : QTextCursor*) : Bool
    fun bg_QTextCursor__OPERATOR_gt_const_QTextCursor_R(_self_ : QTextCursor*, rhs : QTextCursor*) : Bool
    fun bg_QTextCursor_isCopyOf_const_QTextCursor_R(_self_ : QTextCursor*, other : QTextCursor*) : Bool
    fun bg_QTextCursor_blockNumber_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_columnNumber_(_self_ : QTextCursor*) : Int32
    fun bg_QTextCursor_document_(_self_ : QTextCursor*) : QTextDocument*
    fun bg_QTextDocument_metaObject_(_self_ : QTextDocument*) : QMetaObject*
    fun bg_QTextDocument_qt_metacast_const_char_X(_self_ : QTextDocument*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTextDocument*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTextDocument_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTextDocument_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTextDocument__CONSTRUCT_QObject_X(parent : QObject*) : QTextDocument*
    fun bg_QTextDocument__CONSTRUCT_const_QString_R_QObject_X(text : CrystalString, parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_clone_QObject_X(_self_ : QTextDocument*, parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_isEmpty_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_clear_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_setUndoRedoEnabled_bool(_self_ : QTextDocument*, enable : Bool) : Void
    fun bg_QTextDocument_isUndoRedoEnabled_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_isUndoAvailable_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_isRedoAvailable_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_availableUndoSteps_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_availableRedoSteps_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_revision_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(_self_ : QTextDocument*, layout : QAbstractTextDocumentLayout*) : Void
    fun bg_QTextDocument_documentLayout_(_self_ : QTextDocument*) : QAbstractTextDocumentLayout*
    fun bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(_self_ : QTextDocument*, info : TextDocument::MetaInformation, unnamed_arg_1 : CrystalString) : Void
    fun bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(_self_ : QTextDocument*, info : TextDocument::MetaInformation) : CrystalString
    fun bg_QTextDocument_toHtml_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_toHtml_const_QByteArray_R(_self_ : QTextDocument*, encoding : QByteArray*) : CrystalString
    fun bg_QTextDocument_setHtml_const_QString_R(_self_ : QTextDocument*, html : CrystalString) : Void
    fun bg_QTextDocument_toMarkdown_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_toMarkdown_QTextDocument__MarkdownFeatures(_self_ : QTextDocument*, features : TextDocument::MarkdownFeatures) : CrystalString
    fun bg_QTextDocument_setMarkdown_const_QString_R(_self_ : QTextDocument*, markdown : CrystalString) : Void
    fun bg_QTextDocument_setMarkdown_const_QString_R_QTextDocument__MarkdownFeatures(_self_ : QTextDocument*, markdown : CrystalString, features : TextDocument::MarkdownFeatures) : Void
    fun bg_QTextDocument_toRawText_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_toPlainText_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_setPlainText_const_QString_R(_self_ : QTextDocument*, text : CrystalString) : Void
    fun bg_QTextDocument_characterAt_int(_self_ : QTextDocument*, pos : Int32) : Int32
    fun bg_QTextDocument_find_const_QString_R_int(_self_ : QTextDocument*, sub_string : CrystalString, from : Int32) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(_self_ : QTextDocument*, sub_string : CrystalString, from : Int32, options : TextDocument::FindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(_self_ : QTextDocument*, sub_string : CrystalString, cursor : QTextCursor*) : QTextCursor*
    fun bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : QTextDocument*, sub_string : CrystalString, cursor : QTextCursor*, options : TextDocument::FindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_int(_self_ : QTextDocument*, expr : QRegExp*, from : Int32) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegExp*, from : Int32, options : TextDocument::FindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(_self_ : QTextDocument*, expr : QRegExp*, cursor : QTextCursor*) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegExp*, cursor : QTextCursor*, options : TextDocument::FindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_int(_self_ : QTextDocument*, expr : QRegularExpression*, from : Int32) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegularExpression*, from : Int32, options : TextDocument::FindFlags) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(_self_ : QTextDocument*, expr : QRegularExpression*, cursor : QTextCursor*) : QTextCursor*
    fun bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(_self_ : QTextDocument*, expr : QRegularExpression*, cursor : QTextCursor*, options : TextDocument::FindFlags) : QTextCursor*
    fun bg_QTextDocument_frameAt_int(_self_ : QTextDocument*, pos : Int32) : QTextFrame*
    fun bg_QTextDocument_rootFrame_(_self_ : QTextDocument*) : QTextFrame*
    fun bg_QTextDocument_object_int(_self_ : QTextDocument*, object_index : Int32) : QTextObject*
    fun bg_QTextDocument_objectForFormat_const_QTextFormat_R(_self_ : QTextDocument*, unnamed_arg_0 : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_findBlock_int(_self_ : QTextDocument*, pos : Int32) : QTextBlock*
    fun bg_QTextDocument_findBlockByNumber_int(_self_ : QTextDocument*, block_number : Int32) : QTextBlock*
    fun bg_QTextDocument_findBlockByLineNumber_int(_self_ : QTextDocument*, block_number : Int32) : QTextBlock*
    fun bg_QTextDocument_begin_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_end_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_firstBlock_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_lastBlock_(_self_ : QTextDocument*) : QTextBlock*
    fun bg_QTextDocument_setPageSize_const_QSizeF_R(_self_ : QTextDocument*, size : QSizeF*) : Void
    fun bg_QTextDocument_pageSize_(_self_ : QTextDocument*) : QSizeF*
    fun bg_QTextDocument_setDefaultFont_const_QFont_R(_self_ : QTextDocument*, font : QFont*) : Void
    fun bg_QTextDocument_defaultFont_(_self_ : QTextDocument*) : QFont*
    fun bg_QTextDocument_pageCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_isModified_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_print_QPagedPaintDevice_X(_self_ : QTextDocument*, printer : QPagedPaintDevice*) : Void
    fun bg_QTextDocument_resource_int_const_QUrl_R(_self_ : QTextDocument*, type : Int32, name : QUrl*) : CrystalVariant
    fun bg_QTextDocument_addResource_int_const_QUrl_R_const_QVariant_R(_self_ : QTextDocument*, type : Int32, name : QUrl*, resource : CrystalVariant) : Void
    fun bg_QTextDocument_allFormats_(_self_ : QTextDocument*) : ContainerQVectorQTextFormat*
    fun bg_QTextDocument_markContentsDirty_int_int(_self_ : QTextDocument*, from : Int32, length : Int32) : Void
    fun bg_QTextDocument_setUseDesignMetrics_bool(_self_ : QTextDocument*, b : Bool) : Void
    fun bg_QTextDocument_useDesignMetrics_(_self_ : QTextDocument*) : Bool
    fun bg_QTextDocument_drawContents_QPainter_X(_self_ : QTextDocument*, painter : QPainter*) : Void
    fun bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(_self_ : QTextDocument*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QTextDocument_setTextWidth_qreal(_self_ : QTextDocument*, width : Float64) : Void
    fun bg_QTextDocument_textWidth_(_self_ : QTextDocument*) : Float64
    fun bg_QTextDocument_idealWidth_(_self_ : QTextDocument*) : Float64
    fun bg_QTextDocument_indentWidth_(_self_ : QTextDocument*) : Float64
    fun bg_QTextDocument_setIndentWidth_qreal(_self_ : QTextDocument*, width : Float64) : Void
    fun bg_QTextDocument_documentMargin_(_self_ : QTextDocument*) : Float64
    fun bg_QTextDocument_setDocumentMargin_qreal(_self_ : QTextDocument*, margin : Float64) : Void
    fun bg_QTextDocument_adjustSize_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_size_(_self_ : QTextDocument*) : QSizeF*
    fun bg_QTextDocument_blockCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_lineCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_characterCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_setDefaultStyleSheet_const_QString_R(_self_ : QTextDocument*, sheet : CrystalString) : Void
    fun bg_QTextDocument_defaultStyleSheet_(_self_ : QTextDocument*) : CrystalString
    fun bg_QTextDocument_undo_QTextCursor_X(_self_ : QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_redo_QTextCursor_X(_self_ : QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(_self_ : QTextDocument*, history_to_clear : TextDocument::Stacks) : Void
    fun bg_QTextDocument_maximumBlockCount_(_self_ : QTextDocument*) : Int32
    fun bg_QTextDocument_setMaximumBlockCount_int(_self_ : QTextDocument*, maximum : Int32) : Void
    fun bg_QTextDocument_defaultTextOption_(_self_ : QTextDocument*) : QTextOption*
    fun bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(_self_ : QTextDocument*, option : QTextOption*) : Void
    fun bg_QTextDocument_baseUrl_(_self_ : QTextDocument*) : QUrl*
    fun bg_QTextDocument_setBaseUrl_const_QUrl_R(_self_ : QTextDocument*, url : QUrl*) : Void
    fun bg_QTextDocument_defaultCursorMoveStyle_(_self_ : QTextDocument*) : CursorMoveStyle
    fun bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(_self_ : QTextDocument*, style : CursorMoveStyle) : Void
    fun bg_QTextDocument_contentsChange_int_int_int(_self_ : QTextDocument*, from : Int32, chars_removed : Int32, chars_added : Int32) : Void
    fun bg_QTextDocument_contentsChanged_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_undoAvailable_bool(_self_ : QTextDocument*, unnamed_arg_0 : Bool) : Void
    fun bg_QTextDocument_redoAvailable_bool(_self_ : QTextDocument*, unnamed_arg_0 : Bool) : Void
    fun bg_QTextDocument_undoCommandAdded_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_modificationChanged_bool(_self_ : QTextDocument*, m : Bool) : Void
    fun bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(_self_ : QTextDocument*, cursor : QTextCursor*) : Void
    fun bg_QTextDocument_blockCountChanged_int(_self_ : QTextDocument*, new_block_count : Int32) : Void
    fun bg_QTextDocument_baseUrlChanged_const_QUrl_R(_self_ : QTextDocument*, url : QUrl*) : Void
    fun bg_QTextDocument_documentLayoutChanged_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_undo_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_redo_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(_self_ : QTextDocument*, unnamed_arg_0 : QAbstractUndoItem*) : Void
    fun bg_QTextDocument_setModified_bool(_self_ : QTextDocument*, m : Bool) : Void
    fun bg_QTextDocument_createObject_const_QTextFormat_R(_self_ : QTextDocument*, f : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_loadResource_int_const_QUrl_R(_self_ : QTextDocument*, type : Int32, name : QUrl*) : CrystalVariant
    fun bg_QTextDocument__CONSTRUCT_QTextDocumentPrivate_R_QObject_X(dd : QTextDocumentPrivate*, parent : QObject*) : QTextDocument*
    fun bg_QTextDocument_docHandle_(_self_ : QTextDocument*) : QTextDocumentPrivate*
    fun bg_QObject_event_QEvent_X(_self_ : QTextDocument*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QTextDocument*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QTextDocument*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QTextDocument*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QTextDocument*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QTextDocument*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QTextDocument*, signal : QMetaMethod*) : Void
    fun bg_QTextDocument_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTextDocument_CONNECT_contentsChange_CrystalProc_void__int__int__int_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_contentsChanged_CrystalProc_void_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_undoAvailable_CrystalProc_void__bool_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_redoAvailable_CrystalProc_void__bool_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_undoCommandAdded_CrystalProc_void_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_modificationChanged_CrystalProc_void__bool_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_cursorPositionChanged_CrystalProc_void__const_QTextCursor_R_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_blockCountChanged_CrystalProc_void__int_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_baseUrlChanged_CrystalProc_void__const_QUrl_R_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_CONNECT_documentLayoutChanged_CrystalProc_void_(_self_ : QTextDocument*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextDocument_clear_SUPER_(_self_ : QTextDocument*) : Void
    fun bg_QTextDocument_createObject_SUPER_const_QTextFormat_R(_self_ : QTextDocument*, f : QTextFormat*) : QTextObject*
    fun bg_QTextDocument_loadResource_SUPER_int_const_QUrl_R(_self_ : QTextDocument*, type : Int32, name : QUrl*) : CrystalVariant
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QTextDocument*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QTextDocument*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QTextDocument*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QTextDocument*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QTextDocument*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QTextDocument*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QTextDocument*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QTextDocument_JUMPTABLE_BgJumptable_QTextDocument_R(_self_ : QTextDocument*, table : BgJumptable_QTextDocument*) : Void
    fun bg_QPalette__CONSTRUCT_() : QPalette*
    fun bg_QPalette__CONSTRUCT_const_QColor_R(button : QColor*) : QPalette*
    fun bg_QPalette__CONSTRUCT_Qt__GlobalColor(button : GlobalColor) : QPalette*
    fun bg_QPalette__CONSTRUCT_const_QColor_R_const_QColor_R(button : QColor*, window : QColor*) : QPalette*
    fun bg_QPalette__CONSTRUCT_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(window_text : QBrush*, button : QBrush*, light : QBrush*, dark : QBrush*, mid : QBrush*, text : QBrush*, bright_text : QBrush*, base : QBrush*, window : QBrush*) : QPalette*
    fun bg_QPalette__CONSTRUCT_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R(window_text : QColor*, window : QColor*, light : QColor*, dark : QColor*, mid : QColor*, text : QColor*, base : QColor*) : QPalette*
    fun bg_QPalette_swap_QPalette_R(_self_ : QPalette*, other : QPalette*) : Void
    fun bg_QPalette_currentColorGroup_(_self_ : QPalette*) : Palette::ColorGroup
    fun bg_QPalette_setCurrentColorGroup_QPalette__ColorGroup(_self_ : QPalette*, cg : Palette::ColorGroup) : Void
    fun bg_QPalette_color_QPalette__ColorGroup_QPalette__ColorRole(_self_ : QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole) : QColor*
    fun bg_QPalette_brush_QPalette__ColorGroup_QPalette__ColorRole(_self_ : QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole) : QBrush*
    fun bg_QPalette_setColor_QPalette__ColorGroup_QPalette__ColorRole_const_QColor_R(_self_ : QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole, color : QColor*) : Void
    fun bg_QPalette_setColor_QPalette__ColorRole_const_QColor_R(_self_ : QPalette*, cr : Palette::ColorRole, color : QColor*) : Void
    fun bg_QPalette_setBrush_QPalette__ColorRole_const_QBrush_R(_self_ : QPalette*, cr : Palette::ColorRole, brush : QBrush*) : Void
    fun bg_QPalette_isBrushSet_QPalette__ColorGroup_QPalette__ColorRole(_self_ : QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole) : Bool
    fun bg_QPalette_setBrush_QPalette__ColorGroup_QPalette__ColorRole_const_QBrush_R(_self_ : QPalette*, cg : Palette::ColorGroup, cr : Palette::ColorRole, brush : QBrush*) : Void
    fun bg_QPalette_setColorGroup_QPalette__ColorGroup_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(_self_ : QPalette*, cr : Palette::ColorGroup, window_text : QBrush*, button : QBrush*, light : QBrush*, dark : QBrush*, mid : QBrush*, text : QBrush*, bright_text : QBrush*, base : QBrush*, window : QBrush*) : Void
    fun bg_QPalette_isEqual_QPalette__ColorGroup_QPalette__ColorGroup(_self_ : QPalette*, cr1 : Palette::ColorGroup, cr2 : Palette::ColorGroup) : Bool
    fun bg_QPalette_color_QPalette__ColorRole(_self_ : QPalette*, cr : Palette::ColorRole) : QColor*
    fun bg_QPalette_brush_QPalette__ColorRole(_self_ : QPalette*, cr : Palette::ColorRole) : QBrush*
    fun bg_QPalette_windowText_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_button_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_light_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_dark_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_mid_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_text_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_base_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_alternateBase_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_toolTipBase_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_toolTipText_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_window_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_midlight_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_brightText_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_buttonText_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_shadow_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_highlight_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_highlightedText_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_link_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_linkVisited_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette_placeholderText_(_self_ : QPalette*) : QBrush*
    fun bg_QPalette__OPERATOR_eq_const_QPalette_R(_self_ : QPalette*, p : QPalette*) : Bool
    fun bg_QPalette__OPERATOR_ne_const_QPalette_R(_self_ : QPalette*, p : QPalette*) : Bool
    fun bg_QPalette_isCopyOf_const_QPalette_R(_self_ : QPalette*, p : QPalette*) : Bool
    fun bg_QPalette_cacheKey_(_self_ : QPalette*) : Int64
    fun bg_QPalette_resolve_const_QPalette_R(_self_ : QPalette*, unnamed_arg_0 : QPalette*) : QPalette*
    fun bg_QPalette_resolve_(_self_ : QPalette*) : UInt32
    fun bg_QPalette_resolve_uint(_self_ : QPalette*, mask : UInt32) : Void
    fun bg_QPalette_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QSurface_surfaceClass_(_self_ : QSurface*) : Surface::SurfaceClass
    fun bg_QSurface_format_(_self_ : QSurface*) : QSurfaceFormat*
    fun bg_QSurface_surfaceHandle_(_self_ : QSurface*) : QPlatformSurface*
    fun bg_QSurface_surfaceType_(_self_ : QSurface*) : Surface::SurfaceType
    fun bg_QSurface_supportsOpenGL_(_self_ : QSurface*) : Bool
    fun bg_QSurface_size_(_self_ : QSurface*) : QSize*
    fun bg_QSurface__CONSTRUCT_QSurface__SurfaceClass(type : Surface::SurfaceClass) : QSurface*
    fun bg_QSurface_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_BgInherit_QSurface_JUMPTABLE_BgJumptable_QSurface_R(_self_ : QSurface*, table : BgJumptable_QSurface*) : Void
    fun bg_QIcon__CONSTRUCT_() : QIcon*
    fun bg_QIcon__CONSTRUCT_const_QPixmap_R(pixmap : QPixmap*) : QIcon*
    fun bg_QIcon__CONSTRUCT_const_QString_R(file_name : CrystalString) : QIcon*
    fun bg_QIcon__CONSTRUCT_QIconEngine_X(engine : QIconEngine*) : QIcon*
    fun bg_QIcon_swap_QIcon_R(_self_ : QIcon*, other : QIcon*) : Void
    fun bg_QIcon_pixmap_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : QIcon*, size : QSize*, mode : Icon::Mode, state : Icon::State) : QPixmap*
    fun bg_QIcon_pixmap_int_int_QIcon__Mode_QIcon__State(_self_ : QIcon*, w : Int32, h : Int32, mode : Icon::Mode, state : Icon::State) : QPixmap*
    fun bg_QIcon_pixmap_int_QIcon__Mode_QIcon__State(_self_ : QIcon*, extent : Int32, mode : Icon::Mode, state : Icon::State) : QPixmap*
    fun bg_QIcon_pixmap_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : QIcon*, window : QWindow*, size : QSize*, mode : Icon::Mode, state : Icon::State) : QPixmap*
    fun bg_QIcon_actualSize_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : QIcon*, size : QSize*, mode : Icon::Mode, state : Icon::State) : QSize*
    fun bg_QIcon_actualSize_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : QIcon*, window : QWindow*, size : QSize*, mode : Icon::Mode, state : Icon::State) : QSize*
    fun bg_QIcon_name_(_self_ : QIcon*) : CrystalString
    fun bg_QIcon_paint_QPainter_X_const_QRect_R(_self_ : QIcon*, painter : QPainter*, rect : QRect*) : Void
    fun bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment(_self_ : QIcon*, painter : QPainter*, rect : QRect*, alignment : Alignment) : Void
    fun bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode(_self_ : QIcon*, painter : QPainter*, rect : QRect*, alignment : Alignment, mode : Icon::Mode) : Void
    fun bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode_QIcon__State(_self_ : QIcon*, painter : QPainter*, rect : QRect*, alignment : Alignment, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int(_self_ : QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment(_self_ : QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode(_self_ : QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode) : Void
    fun bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode_QIcon__State(_self_ : QIcon*, painter : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_isNull_(_self_ : QIcon*) : Bool
    fun bg_QIcon_isDetached_(_self_ : QIcon*) : Bool
    fun bg_QIcon_detach_(_self_ : QIcon*) : Void
    fun bg_QIcon_cacheKey_(_self_ : QIcon*) : Int64
    fun bg_QIcon_addPixmap_const_QPixmap_R_QIcon__Mode_QIcon__State(_self_ : QIcon*, pixmap : QPixmap*, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_addFile_const_QString_R(_self_ : QIcon*, file_name : CrystalString) : Void
    fun bg_QIcon_addFile_const_QString_R_const_QSize_R(_self_ : QIcon*, file_name : CrystalString, size : QSize*) : Void
    fun bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode(_self_ : QIcon*, file_name : CrystalString, size : QSize*, mode : Icon::Mode) : Void
    fun bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode_QIcon__State(_self_ : QIcon*, file_name : CrystalString, size : QSize*, mode : Icon::Mode, state : Icon::State) : Void
    fun bg_QIcon_availableSizes_QIcon__Mode_QIcon__State(_self_ : QIcon*, mode : Icon::Mode, state : Icon::State) : ContainerQListQSize*
    fun bg_QIcon_setIsMask_bool(_self_ : QIcon*, is_mask : Bool) : Void
    fun bg_QIcon_isMask_(_self_ : QIcon*) : Bool
    fun bg_QIcon_fromTheme_STATIC_const_QString_R(name : CrystalString) : QIcon*
    fun bg_QIcon_fromTheme_STATIC_const_QString_R_const_QIcon_R(name : CrystalString, fallback : QIcon*) : QIcon*
    fun bg_QIcon_hasThemeIcon_STATIC_const_QString_R(name : CrystalString) : Bool
    fun bg_QIcon_themeSearchPaths_STATIC_() : QStringList*
    fun bg_QIcon_setThemeSearchPaths_STATIC_const_QStringList_R(searchpath : QStringList*) : Void
    fun bg_QIcon_fallbackSearchPaths_STATIC_() : QStringList*
    fun bg_QIcon_setFallbackSearchPaths_STATIC_const_QStringList_R(paths : QStringList*) : Void
    fun bg_QIcon_themeName_STATIC_() : CrystalString
    fun bg_QIcon_setThemeName_STATIC_const_QString_R(path : CrystalString) : Void
    fun bg_QIcon_fallbackThemeName_STATIC_() : CrystalString
    fun bg_QIcon_setFallbackThemeName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QCursor__CONSTRUCT_() : QCursor*
    fun bg_QCursor__CONSTRUCT_Qt__CursorShape(shape : CursorShape) : QCursor*
    fun bg_QCursor__CONSTRUCT_const_QBitmap_R_const_QBitmap_R_int_int(bitmap : QBitmap*, mask : QBitmap*, hot_x : Int32, hot_y : Int32) : QCursor*
    fun bg_QCursor__CONSTRUCT_const_QPixmap_R_int_int(pixmap : QPixmap*, hot_x : Int32, hot_y : Int32) : QCursor*
    fun bg_QCursor_swap_QCursor_R(_self_ : QCursor*, other : QCursor*) : Void
    fun bg_QCursor_shape_(_self_ : QCursor*) : CursorShape
    fun bg_QCursor_setShape_Qt__CursorShape(_self_ : QCursor*, new_shape : CursorShape) : Void
    fun bg_QCursor_pixmap_(_self_ : QCursor*) : QPixmap*
    fun bg_QCursor_hotSpot_(_self_ : QCursor*) : QPoint
    fun bg_QCursor_pos_STATIC_() : QPoint
    fun bg_QCursor_pos_STATIC_const_QScreen_X(screen : QScreen*) : QPoint
    fun bg_QCursor_setPos_STATIC_int_int(x : Int32, y : Int32) : Void
    fun bg_QCursor_setPos_STATIC_QScreen_X_int_int(screen : QScreen*, x : Int32, y : Int32) : Void
    fun bg_QCursor_setPos_STATIC_const_QPoint_R(p : QPoint) : Void
    fun bg_QCursor_setPos_STATIC_QScreen_X_const_QPoint_R(screen : QScreen*, p : QPoint) : Void
    fun bg_QCursor__OPERATOR_eq_const_QCursor_R(_self_ : QCursor*, rhs : QCursor*) : Bool
    fun bg_QCursor__OPERATOR_ne_const_QCursor_R(_self_ : QCursor*, rhs : QCursor*) : Bool
    fun bg_QWindow_metaObject_(_self_ : QWindow*) : QMetaObject*
    fun bg_QWindow_qt_metacast_const_char_X(_self_ : QWindow*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QWindow*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QWindow_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QWindow_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QWindow_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QWindow__CONSTRUCT_QScreen_X(screen : QScreen*) : QWindow*
    fun bg_QWindow__CONSTRUCT_QWindow_X(parent : QWindow*) : QWindow*
    fun bg_QWindow_setSurfaceType_QSurface__SurfaceType(_self_ : QWindow*, surface_type : Surface::SurfaceType) : Void
    fun bg_QWindow_surfaceType_(_self_ : QWindow*) : Surface::SurfaceType
    fun bg_QWindow_isVisible_(_self_ : QWindow*) : Bool
    fun bg_QWindow_visibility_(_self_ : QWindow*) : Window::Visibility
    fun bg_QWindow_setVisibility_QWindow__Visibility(_self_ : QWindow*, v : Window::Visibility) : Void
    fun bg_QWindow_create_(_self_ : QWindow*) : Void
    fun bg_QWindow_winId_(_self_ : QWindow*) : UInt32
    fun bg_QWindow_parent_QWindow__AncestorMode(_self_ : QWindow*, mode : Window::AncestorMode) : QWindow*
    fun bg_QWindow_parent_(_self_ : QWindow*) : QWindow*
    fun bg_QWindow_setParent_QWindow_X(_self_ : QWindow*, parent : QWindow*) : Void
    fun bg_QWindow_isTopLevel_(_self_ : QWindow*) : Bool
    fun bg_QWindow_isModal_(_self_ : QWindow*) : Bool
    fun bg_QWindow_modality_(_self_ : QWindow*) : WindowModality
    fun bg_QWindow_setModality_Qt__WindowModality(_self_ : QWindow*, modality : WindowModality) : Void
    fun bg_QWindow_setFormat_const_QSurfaceFormat_R(_self_ : QWindow*, format : QSurfaceFormat*) : Void
    fun bg_QWindow_format_(_self_ : QWindow*) : QSurfaceFormat*
    fun bg_QWindow_requestedFormat_(_self_ : QWindow*) : QSurfaceFormat*
    fun bg_QWindow_setFlags_Qt__WindowFlags(_self_ : QWindow*, flags : WindowFlags) : Void
    fun bg_QWindow_flags_(_self_ : QWindow*) : WindowFlags
    fun bg_QWindow_setFlag_Qt__WindowType_bool(_self_ : QWindow*, unnamed_arg_0 : WindowType, on : Bool) : Void
    fun bg_QWindow_type_(_self_ : QWindow*) : WindowType
    fun bg_QWindow_title_(_self_ : QWindow*) : CrystalString
    fun bg_QWindow_setOpacity_qreal(_self_ : QWindow*, level : Float64) : Void
    fun bg_QWindow_opacity_(_self_ : QWindow*) : Float64
    fun bg_QWindow_setMask_const_QRegion_R(_self_ : QWindow*, region : QRegion*) : Void
    fun bg_QWindow_mask_(_self_ : QWindow*) : QRegion*
    fun bg_QWindow_isActive_(_self_ : QWindow*) : Bool
    fun bg_QWindow_reportContentOrientationChange_Qt__ScreenOrientation(_self_ : QWindow*, orientation : ScreenOrientation) : Void
    fun bg_QWindow_contentOrientation_(_self_ : QWindow*) : ScreenOrientation
    fun bg_QWindow_devicePixelRatio_(_self_ : QWindow*) : Float64
    fun bg_QWindow_windowState_(_self_ : QWindow*) : WindowState
    fun bg_QWindow_windowStates_(_self_ : QWindow*) : WindowStates
    fun bg_QWindow_setWindowState_Qt__WindowState(_self_ : QWindow*, state : WindowState) : Void
    fun bg_QWindow_setWindowStates_Qt__WindowStates(_self_ : QWindow*, states : WindowStates) : Void
    fun bg_QWindow_setTransientParent_QWindow_X(_self_ : QWindow*, parent : QWindow*) : Void
    fun bg_QWindow_transientParent_(_self_ : QWindow*) : QWindow*
    fun bg_QWindow_isAncestorOf_const_QWindow_X_QWindow__AncestorMode(_self_ : QWindow*, child : QWindow*, mode : Window::AncestorMode) : Bool
    fun bg_QWindow_isExposed_(_self_ : QWindow*) : Bool
    fun bg_QWindow_minimumWidth_(_self_ : QWindow*) : Int32
    fun bg_QWindow_minimumHeight_(_self_ : QWindow*) : Int32
    fun bg_QWindow_maximumWidth_(_self_ : QWindow*) : Int32
    fun bg_QWindow_maximumHeight_(_self_ : QWindow*) : Int32
    fun bg_QWindow_minimumSize_(_self_ : QWindow*) : QSize*
    fun bg_QWindow_maximumSize_(_self_ : QWindow*) : QSize*
    fun bg_QWindow_baseSize_(_self_ : QWindow*) : QSize*
    fun bg_QWindow_sizeIncrement_(_self_ : QWindow*) : QSize*
    fun bg_QWindow_setMinimumSize_const_QSize_R(_self_ : QWindow*, size : QSize*) : Void
    fun bg_QWindow_setMaximumSize_const_QSize_R(_self_ : QWindow*, size : QSize*) : Void
    fun bg_QWindow_setBaseSize_const_QSize_R(_self_ : QWindow*, size : QSize*) : Void
    fun bg_QWindow_setSizeIncrement_const_QSize_R(_self_ : QWindow*, size : QSize*) : Void
    fun bg_QWindow_geometry_(_self_ : QWindow*) : QRect*
    fun bg_QWindow_frameMargins_(_self_ : QWindow*) : QMargins*
    fun bg_QWindow_frameGeometry_(_self_ : QWindow*) : QRect*
    fun bg_QWindow_framePosition_(_self_ : QWindow*) : QPoint
    fun bg_QWindow_setFramePosition_const_QPoint_R(_self_ : QWindow*, point : QPoint) : Void
    fun bg_QWindow_width_(_self_ : QWindow*) : Int32
    fun bg_QWindow_height_(_self_ : QWindow*) : Int32
    fun bg_QWindow_x_(_self_ : QWindow*) : Int32
    fun bg_QWindow_y_(_self_ : QWindow*) : Int32
    fun bg_QWindow_size_(_self_ : QWindow*) : QSize*
    fun bg_QWindow_position_(_self_ : QWindow*) : QPoint
    fun bg_QWindow_setPosition_const_QPoint_R(_self_ : QWindow*, pt : QPoint) : Void
    fun bg_QWindow_setPosition_int_int(_self_ : QWindow*, posx : Int32, posy : Int32) : Void
    fun bg_QWindow_resize_const_QSize_R(_self_ : QWindow*, new_size : QSize*) : Void
    fun bg_QWindow_resize_int_int(_self_ : QWindow*, w : Int32, h : Int32) : Void
    fun bg_QWindow_setFilePath_const_QString_R(_self_ : QWindow*, file_path : CrystalString) : Void
    fun bg_QWindow_filePath_(_self_ : QWindow*) : CrystalString
    fun bg_QWindow_setIcon_const_QIcon_R(_self_ : QWindow*, icon : QIcon*) : Void
    fun bg_QWindow_icon_(_self_ : QWindow*) : QIcon*
    fun bg_QWindow_destroy_(_self_ : QWindow*) : Void
    fun bg_QWindow_handle_(_self_ : QWindow*) : QPlatformWindow*
    fun bg_QWindow_setKeyboardGrabEnabled_bool(_self_ : QWindow*, grab : Bool) : Bool
    fun bg_QWindow_setMouseGrabEnabled_bool(_self_ : QWindow*, grab : Bool) : Bool
    fun bg_QWindow_screen_(_self_ : QWindow*) : QScreen*
    fun bg_QWindow_setScreen_QScreen_X(_self_ : QWindow*, screen : QScreen*) : Void
    fun bg_QWindow_accessibleRoot_(_self_ : QWindow*) : QAccessibleInterface*
    fun bg_QWindow_focusObject_(_self_ : QWindow*) : QObject*
    fun bg_QWindow_mapToGlobal_const_QPoint_R(_self_ : QWindow*, pos : QPoint) : QPoint
    fun bg_QWindow_mapFromGlobal_const_QPoint_R(_self_ : QWindow*, pos : QPoint) : QPoint
    fun bg_QWindow_cursor_(_self_ : QWindow*) : QCursor*
    fun bg_QWindow_setCursor_const_QCursor_R(_self_ : QWindow*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWindow_unsetCursor_(_self_ : QWindow*) : Void
    fun bg_QWindow_fromWinId_STATIC_WId(id : UInt32) : QWindow*
    fun bg_QWindow_requestActivate_(_self_ : QWindow*) : Void
    fun bg_QWindow_setVisible_bool(_self_ : QWindow*, visible : Bool) : Void
    fun bg_QWindow_show_(_self_ : QWindow*) : Void
    fun bg_QWindow_hide_(_self_ : QWindow*) : Void
    fun bg_QWindow_showMinimized_(_self_ : QWindow*) : Void
    fun bg_QWindow_showMaximized_(_self_ : QWindow*) : Void
    fun bg_QWindow_showFullScreen_(_self_ : QWindow*) : Void
    fun bg_QWindow_showNormal_(_self_ : QWindow*) : Void
    fun bg_QWindow_close_(_self_ : QWindow*) : Bool
    fun bg_QWindow_raise_(_self_ : QWindow*) : Void
    fun bg_QWindow_lower_(_self_ : QWindow*) : Void
    fun bg_QWindow_startSystemResize_Qt__Edges(_self_ : QWindow*, edges : Edges) : Bool
    fun bg_QWindow_startSystemMove_(_self_ : QWindow*) : Bool
    fun bg_QWindow_setTitle_const_QString_R(_self_ : QWindow*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWindow_setX_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_setY_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_setWidth_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_setHeight_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_setGeometry_int_int_int_int(_self_ : QWindow*, posx : Int32, posy : Int32, w : Int32, h : Int32) : Void
    fun bg_QWindow_setGeometry_const_QRect_R(_self_ : QWindow*, rect : QRect*) : Void
    fun bg_QWindow_setMinimumWidth_int(_self_ : QWindow*, w : Int32) : Void
    fun bg_QWindow_setMinimumHeight_int(_self_ : QWindow*, h : Int32) : Void
    fun bg_QWindow_setMaximumWidth_int(_self_ : QWindow*, w : Int32) : Void
    fun bg_QWindow_setMaximumHeight_int(_self_ : QWindow*, h : Int32) : Void
    fun bg_QWindow_alert_int(_self_ : QWindow*, msec : Int32) : Void
    fun bg_QWindow_requestUpdate_(_self_ : QWindow*) : Void
    fun bg_QWindow_screenChanged_QScreen_X(_self_ : QWindow*, screen : QScreen*) : Void
    fun bg_QWindow_modalityChanged_Qt__WindowModality(_self_ : QWindow*, modality : WindowModality) : Void
    fun bg_QWindow_windowStateChanged_Qt__WindowState(_self_ : QWindow*, window_state : WindowState) : Void
    fun bg_QWindow_windowTitleChanged_const_QString_R(_self_ : QWindow*, title : CrystalString) : Void
    fun bg_QWindow_xChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_yChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_widthChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_heightChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_minimumWidthChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_minimumHeightChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_maximumWidthChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_maximumHeightChanged_int(_self_ : QWindow*, arg : Int32) : Void
    fun bg_QWindow_visibleChanged_bool(_self_ : QWindow*, arg : Bool) : Void
    fun bg_QWindow_visibilityChanged_QWindow__Visibility(_self_ : QWindow*, visibility : Window::Visibility) : Void
    fun bg_QWindow_activeChanged_(_self_ : QWindow*) : Void
    fun bg_QWindow_contentOrientationChanged_Qt__ScreenOrientation(_self_ : QWindow*, orientation : ScreenOrientation) : Void
    fun bg_QWindow_focusObjectChanged_QObject_X(_self_ : QWindow*, object : QObject*) : Void
    fun bg_QWindow_opacityChanged_qreal(_self_ : QWindow*, opacity : Float64) : Void
    fun bg_QWindow_transientParentChanged_QWindow_X(_self_ : QWindow*, transient_parent : QWindow*) : Void
    fun bg_QWindow_exposeEvent_QExposeEvent_X(_self_ : QWindow*, unnamed_arg_0 : QExposeEvent*) : Void
    fun bg_QWindow_resizeEvent_QResizeEvent_X(_self_ : QWindow*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QWindow_moveEvent_QMoveEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMoveEvent*) : Void
    fun bg_QWindow_focusInEvent_QFocusEvent_X(_self_ : QWindow*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QWindow_focusOutEvent_QFocusEvent_X(_self_ : QWindow*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QWindow_showEvent_QShowEvent_X(_self_ : QWindow*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QWindow_hideEvent_QHideEvent_X(_self_ : QWindow*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QWindow_event_QEvent_X(_self_ : QWindow*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWindow_keyPressEvent_QKeyEvent_X(_self_ : QWindow*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QWindow_keyReleaseEvent_QKeyEvent_X(_self_ : QWindow*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QWindow_mousePressEvent_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_mouseReleaseEvent_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_mouseMoveEvent_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_wheelEvent_QWheelEvent_X(_self_ : QWindow*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QWindow_touchEvent_QTouchEvent_X(_self_ : QWindow*, unnamed_arg_0 : QTouchEvent*) : Void
    fun bg_QWindow_tabletEvent_QTabletEvent_X(_self_ : QWindow*, unnamed_arg_0 : QTabletEvent*) : Void
    fun bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QWindow*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWindow__CONSTRUCT_QWindowPrivate_R_QWindow_X(dd : QWindowPrivate*, parent : QWindow*) : QWindow*
    fun bg_QWindow_AS_Surface_(_self_ : QWindow*) : QSurface*
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QWindow*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QWindow*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QWindow*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QWindow*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QWindow*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QWindow*, signal : QMetaMethod*) : Void
    fun bg_QSurface_surfaceHandle_(_self_ : QWindow*) : QPlatformSurface*
    fun bg_QWindow_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QWindow_CONNECT_screenChanged_CrystalProc_void__QScreen_X_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_modalityChanged_CrystalProc_void__Qt__WindowModality_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_windowStateChanged_CrystalProc_void__Qt__WindowState_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_windowTitleChanged_CrystalProc_void__const_QString_R_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_xChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_yChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_widthChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_heightChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_minimumWidthChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_minimumHeightChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_maximumWidthChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_maximumHeightChanged_CrystalProc_void__int_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_visibleChanged_CrystalProc_void__bool_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_visibilityChanged_CrystalProc_void__QWindow__Visibility_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_activeChanged_CrystalProc_void_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_contentOrientationChanged_CrystalProc_void__Qt__ScreenOrientation_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_focusObjectChanged_CrystalProc_void__QObject_X_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_opacityChanged_CrystalProc_void__qreal_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_CONNECT_transientParentChanged_CrystalProc_void__QWindow_X_(_self_ : QWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWindow_surfaceType_SUPER_(_self_ : QWindow*) : Surface::SurfaceType
    fun bg_QWindow_format_SUPER_(_self_ : QWindow*) : QSurfaceFormat*
    fun bg_QWindow_size_SUPER_(_self_ : QWindow*) : QSize*
    fun bg_QWindow_accessibleRoot_SUPER_(_self_ : QWindow*) : QAccessibleInterface*
    fun bg_QWindow_focusObject_SUPER_(_self_ : QWindow*) : QObject*
    fun bg_QWindow_exposeEvent_SUPER_QExposeEvent_X(_self_ : QWindow*, unnamed_arg_0 : QExposeEvent*) : Void
    fun bg_QWindow_resizeEvent_SUPER_QResizeEvent_X(_self_ : QWindow*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QWindow_moveEvent_SUPER_QMoveEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMoveEvent*) : Void
    fun bg_QWindow_focusInEvent_SUPER_QFocusEvent_X(_self_ : QWindow*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QWindow_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QWindow*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QWindow_showEvent_SUPER_QShowEvent_X(_self_ : QWindow*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QWindow_hideEvent_SUPER_QHideEvent_X(_self_ : QWindow*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QWindow_event_SUPER_QEvent_X(_self_ : QWindow*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWindow_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QWindow*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QWindow_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QWindow*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QWindow_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QWindow*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QWindow_wheelEvent_SUPER_QWheelEvent_X(_self_ : QWindow*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QWindow_touchEvent_SUPER_QTouchEvent_X(_self_ : QWindow*, unnamed_arg_0 : QTouchEvent*) : Void
    fun bg_QWindow_tabletEvent_SUPER_QTabletEvent_X(_self_ : QWindow*, unnamed_arg_0 : QTabletEvent*) : Void
    fun bg_QWindow_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QWindow*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QWindow*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QWindow*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QWindow*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QWindow*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QWindow*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QWindow*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QWindow_JUMPTABLE_BgJumptable_QWindow_R(_self_ : QWindow*, table : BgJumptable_QWindow*) : Void
    fun bg_QBitmap__CONSTRUCT_() : QBitmap*
    fun bg_QBitmap__CONSTRUCT_const_QPixmap_R(unnamed_arg_0 : QPixmap*) : QBitmap*
    fun bg_QBitmap__CONSTRUCT_int_int(w : Int32, h : Int32) : QBitmap*
    fun bg_QBitmap__CONSTRUCT_const_QSize_R(unnamed_arg_0 : QSize*) : QBitmap*
    fun bg_QBitmap__CONSTRUCT_const_QString_R(file_name : CrystalString) : QBitmap*
    fun bg_QBitmap__CONSTRUCT_const_QString_R_const_char_X(file_name : CrystalString, format : UInt8*) : QBitmap*
    fun bg_QBitmap_swap_QBitmap_R(_self_ : QBitmap*, other : QBitmap*) : Void
    fun bg_QBitmap_clear_(_self_ : QBitmap*) : Void
    fun bg_QBitmap_fromImage_STATIC_const_QImage_R(image : QImage*) : QBitmap*
    fun bg_QBitmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image : QImage*, flags : ImageConversionFlags) : QBitmap*
    fun bg_QBitmap_fromData_STATIC_const_QSize_R_const_uchar_X_QImage__Format(size : QSize*, bits : UInt8*, mono_format : Image::Format) : QBitmap*
    fun bg_QPixmap_devType_(_self_ : QBitmap*) : Int32
    fun bg_QPixmap_paintEngine_(_self_ : QBitmap*) : QPaintEngine*
    fun bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(_self_ : QBitmap*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QPixmap_devType_SUPER_(_self_ : QBitmap*) : Int32
    fun bg_QPixmap_paintEngine_SUPER_(_self_ : QBitmap*) : QPaintEngine*
    fun bg_QPixmap_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QBitmap*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(_self_ : QBitmap*, table : BgJumptable_QBitmap*) : Void
    fun bg_QDesktopServices_openUrl_STATIC_const_QUrl_R(url : QUrl*) : Bool
    fun bg_QDesktopServices_setUrlHandler_STATIC_const_QString_R_QObject_X_const_char_X(scheme : CrystalString, receiver : QObject*, method : UInt8*) : Void
    fun bg_QDesktopServices_unsetUrlHandler_STATIC_const_QString_R(scheme : CrystalString) : Void
    fun bg_QDesktopServices__CONSTRUCT_() : QDesktopServices*
    fun bg_QDrag_metaObject_(_self_ : QDrag*) : QMetaObject*
    fun bg_QDrag_qt_metacast_const_char_X(_self_ : QDrag*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDrag*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDrag_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDrag_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDrag_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDrag__CONSTRUCT_QObject_X(drag_source : QObject*) : QDrag*
    fun bg_QDrag_setMimeData_QMimeData_X(_self_ : QDrag*, data : QMimeData*) : Void
    fun bg_QDrag_mimeData_(_self_ : QDrag*) : QMimeData*
    fun bg_QDrag_setPixmap_const_QPixmap_R(_self_ : QDrag*, unnamed_arg_0 : QPixmap*) : Void
    fun bg_QDrag_pixmap_(_self_ : QDrag*) : QPixmap*
    fun bg_QDrag_setHotSpot_const_QPoint_R(_self_ : QDrag*, hotspot : QPoint) : Void
    fun bg_QDrag_hotSpot_(_self_ : QDrag*) : QPoint
    fun bg_QDrag_source_(_self_ : QDrag*) : QObject*
    fun bg_QDrag_target_(_self_ : QDrag*) : QObject*
    fun bg_QDrag_exec_(_self_ : QDrag*) : DropAction
    fun bg_QDrag_exec_Qt__DropActions(_self_ : QDrag*, supported_actions : DropActions) : DropAction
    fun bg_QDrag_exec_Qt__DropActions_Qt__DropAction(_self_ : QDrag*, supported_actions : DropActions, default_action : DropAction) : DropAction
    fun bg_QDrag_setDragCursor_const_QPixmap_R_Qt__DropAction(_self_ : QDrag*, cursor : QPixmap*, action : DropAction) : Void
    fun bg_QDrag_dragCursor_Qt__DropAction(_self_ : QDrag*, action : DropAction) : QPixmap*
    fun bg_QDrag_supportedActions_(_self_ : QDrag*) : DropActions
    fun bg_QDrag_defaultAction_(_self_ : QDrag*) : DropAction
    fun bg_QDrag_cancel_STATIC_() : Void
    fun bg_QDrag_actionChanged_Qt__DropAction(_self_ : QDrag*, action : DropAction) : Void
    fun bg_QDrag_targetChanged_QObject_X(_self_ : QDrag*, new_target : QObject*) : Void
    fun bg_QObject_event_QEvent_X(_self_ : QDrag*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QDrag*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QDrag*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QDrag*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QDrag*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QDrag*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QDrag*, signal : QMetaMethod*) : Void
    fun bg_QDrag_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDrag_CONNECT_actionChanged_CrystalProc_void__Qt__DropAction_(_self_ : QDrag*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDrag_CONNECT_targetChanged_CrystalProc_void__QObject_X_(_self_ : QDrag*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QDrag*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QDrag*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QDrag*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QDrag*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QDrag*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QDrag*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QDrag*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QDrag_JUMPTABLE_BgJumptable_QDrag_R(_self_ : QDrag*, table : BgJumptable_QDrag*) : Void
    fun bg_QFontMetrics__CONSTRUCT_const_QFont_R(unnamed_arg_0 : QFont*) : QFontMetrics*
    fun bg_QFontMetrics__CONSTRUCT_const_QFont_R_QPaintDevice_X(font : QFont*, pd : QPaintDevice*) : QFontMetrics*
    fun bg_QFontMetrics_swap_QFontMetrics_R(_self_ : QFontMetrics*, other : QFontMetrics*) : Void
    fun bg_QFontMetrics_ascent_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_capHeight_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_descent_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_height_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_leading_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_lineSpacing_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_minLeftBearing_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_minRightBearing_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_maxWidth_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_xHeight_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_averageCharWidth_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_inFont_QChar(_self_ : QFontMetrics*, unnamed_arg_0 : Int32) : Bool
    fun bg_QFontMetrics_inFontUcs4_uint(_self_ : QFontMetrics*, ucs4 : UInt32) : Bool
    fun bg_QFontMetrics_leftBearing_QChar(_self_ : QFontMetrics*, unnamed_arg_0 : Int32) : Int32
    fun bg_QFontMetrics_rightBearing_QChar(_self_ : QFontMetrics*, unnamed_arg_0 : Int32) : Int32
    fun bg_QFontMetrics_horizontalAdvance_const_QString_R_int(_self_ : QFontMetrics*, unnamed_arg_0 : CrystalString, len : Int32) : Int32
    fun bg_QFontMetrics_horizontalAdvance_QChar(_self_ : QFontMetrics*, unnamed_arg_0 : Int32) : Int32
    fun bg_QFontMetrics_boundingRect_QChar(_self_ : QFontMetrics*, unnamed_arg_0 : Int32) : QRect*
    fun bg_QFontMetrics_boundingRect_const_QString_R(_self_ : QFontMetrics*, text : CrystalString) : QRect*
    fun bg_QFontMetrics_boundingRect_const_QRect_R_int_const_QString_R_int_int_X(_self_ : QFontMetrics*, r : QRect*, flags : Int32, text : CrystalString, tabstops : Int32, tabarray : Int32*) : QRect*
    fun bg_QFontMetrics_boundingRect_int_int_int_int_int_const_QString_R_int_int_X(_self_ : QFontMetrics*, x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : CrystalString, tabstops : Int32, tabarray : Int32*) : QRect*
    fun bg_QFontMetrics_size_int_const_QString_R_int_int_X(_self_ : QFontMetrics*, flags : Int32, str : CrystalString, tabstops : Int32, tabarray : Int32*) : QSize*
    fun bg_QFontMetrics_tightBoundingRect_const_QString_R(_self_ : QFontMetrics*, text : CrystalString) : QRect*
    fun bg_QFontMetrics_elidedText_const_QString_R_Qt__TextElideMode_int_int(_self_ : QFontMetrics*, text : CrystalString, mode : TextElideMode, width : Int32, flags : Int32) : CrystalString
    fun bg_QFontMetrics_underlinePos_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_overlinePos_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_strikeOutPos_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_lineWidth_(_self_ : QFontMetrics*) : Int32
    fun bg_QFontMetrics_fontDpi_(_self_ : QFontMetrics*) : Float64
    fun bg_QFontMetrics__OPERATOR_eq_const_QFontMetrics_R(_self_ : QFontMetrics*, other : QFontMetrics*) : Bool
    fun bg_QFontMetrics__OPERATOR_ne_const_QFontMetrics_R(_self_ : QFontMetrics*, other : QFontMetrics*) : Bool
    fun bg_QGuiApplication_metaObject_(_self_ : QGuiApplication*) : QMetaObject*
    fun bg_QGuiApplication_qt_metacast_const_char_X(_self_ : QGuiApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGuiApplication*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGuiApplication_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGuiApplication__CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : QGuiApplication*
    fun bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QGuiApplication_applicationDisplayName_STATIC_() : CrystalString
    fun bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(name : CrystalString) : Void
    fun bg_QGuiApplication_desktopFileName_STATIC_() : CrystalString
    fun bg_QGuiApplication_allWindows_STATIC_() : QWindowList*
    fun bg_QGuiApplication_topLevelWindows_STATIC_() : QWindowList*
    fun bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(pos : QPoint) : QWindow*
    fun bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(icon : QIcon*) : Void
    fun bg_QGuiApplication_windowIcon_STATIC_() : QIcon*
    fun bg_QGuiApplication_platformName_STATIC_() : CrystalString
    fun bg_QGuiApplication_modalWindow_STATIC_() : QWindow*
    fun bg_QGuiApplication_focusWindow_STATIC_() : QWindow*
    fun bg_QGuiApplication_focusObject_STATIC_() : QObject*
    fun bg_QGuiApplication_primaryScreen_STATIC_() : QScreen*
    fun bg_QGuiApplication_screens_STATIC_() : ContainerQListQScreenX*
    fun bg_QGuiApplication_screenAt_STATIC_const_QPoint_R(point : QPoint) : QScreen*
    fun bg_QGuiApplication_devicePixelRatio_(_self_ : QGuiApplication*) : Float64
    fun bg_QGuiApplication_overrideCursor_STATIC_() : QCursor*
    fun bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0 : QCursor*) : Void
    fun bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0 : QCursor*) : Void
    fun bg_QGuiApplication_restoreOverrideCursor_STATIC_() : Void
    fun bg_QGuiApplication_font_STATIC_() : QFont*
    fun bg_QGuiApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0 : QFont*) : Void
    fun bg_QGuiApplication_clipboard_STATIC_() : QClipboard*
    fun bg_QGuiApplication_palette_STATIC_() : QPalette*
    fun bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(pal : QPalette*) : Void
    fun bg_QGuiApplication_keyboardModifiers_STATIC_() : KeyboardModifiers
    fun bg_QGuiApplication_queryKeyboardModifiers_STATIC_() : KeyboardModifiers
    fun bg_QGuiApplication_mouseButtons_STATIC_() : MouseButtons
    fun bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(direction : LayoutDirection) : Void
    fun bg_QGuiApplication_layoutDirection_STATIC_() : LayoutDirection
    fun bg_QGuiApplication_isRightToLeft_STATIC_() : Bool
    fun bg_QGuiApplication_isLeftToRight_STATIC_() : Bool
    fun bg_QGuiApplication_styleHints_STATIC_() : QStyleHints*
    fun bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(on : Bool) : Void
    fun bg_QGuiApplication_desktopSettingsAware_STATIC_() : Bool
    fun bg_QGuiApplication_inputMethod_STATIC_() : QInputMethod*
    fun bg_QGuiApplication_platformNativeInterface_STATIC_() : QPlatformNativeInterface*
    fun bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(quit : Bool) : Void
    fun bg_QGuiApplication_quitOnLastWindowClosed_STATIC_() : Bool
    fun bg_QGuiApplication_applicationState_STATIC_() : ApplicationState
    fun bg_QGuiApplication_setHighDpiScaleFactorRoundingPolicy_STATIC_Qt__HighDpiScaleFactorRoundingPolicy(policy : HighDpiScaleFactorRoundingPolicy) : Void
    fun bg_QGuiApplication_highDpiScaleFactorRoundingPolicy_STATIC_() : HighDpiScaleFactorRoundingPolicy
    fun bg_QGuiApplication_exec_STATIC_() : Int32
    fun bg_QGuiApplication_notify_QObject_X_QEvent_X(_self_ : QGuiApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QGuiApplication_isSessionRestored_(_self_ : QGuiApplication*) : Bool
    fun bg_QGuiApplication_sessionId_(_self_ : QGuiApplication*) : CrystalString
    fun bg_QGuiApplication_sessionKey_(_self_ : QGuiApplication*) : CrystalString
    fun bg_QGuiApplication_isSavingSession_(_self_ : QGuiApplication*) : Bool
    fun bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_() : Bool
    fun bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(unnamed_arg_0 : Bool) : Void
    fun bg_QGuiApplication_sync_STATIC_() : Void
    fun bg_QGuiApplication_fontDatabaseChanged_(_self_ : QGuiApplication*) : Void
    fun bg_QGuiApplication_screenAdded_QScreen_X(_self_ : QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_screenRemoved_QScreen_X(_self_ : QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_primaryScreenChanged_QScreen_X(_self_ : QGuiApplication*, screen : QScreen*) : Void
    fun bg_QGuiApplication_lastWindowClosed_(_self_ : QGuiApplication*) : Void
    fun bg_QGuiApplication_focusObjectChanged_QObject_X(_self_ : QGuiApplication*, focus_object : QObject*) : Void
    fun bg_QGuiApplication_focusWindowChanged_QWindow_X(_self_ : QGuiApplication*, focus_window : QWindow*) : Void
    fun bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(_self_ : QGuiApplication*, state : ApplicationState) : Void
    fun bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(_self_ : QGuiApplication*, direction : LayoutDirection) : Void
    fun bg_QGuiApplication_commitDataRequest_QSessionManager_R(_self_ : QGuiApplication*, session_manager : QSessionManager*) : Void
    fun bg_QGuiApplication_saveStateRequest_QSessionManager_R(_self_ : QGuiApplication*, session_manager : QSessionManager*) : Void
    fun bg_QGuiApplication_paletteChanged_const_QPalette_R(_self_ : QGuiApplication*, pal : QPalette*) : Void
    fun bg_QGuiApplication_applicationDisplayNameChanged_(_self_ : QGuiApplication*) : Void
    fun bg_QGuiApplication_fontChanged_const_QFont_R(_self_ : QGuiApplication*, font : QFont*) : Void
    fun bg_QGuiApplication_event_QEvent_X(_self_ : QGuiApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : QGuiApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QGuiApplication__CONSTRUCT_QGuiApplicationPrivate_R(p : QGuiApplicationPrivate*) : QGuiApplication*
    fun bg_QGuiApplication_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGuiApplication_CONNECT_fontDatabaseChanged_CrystalProc_void_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_screenAdded_CrystalProc_void__QScreen_X_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_screenRemoved_CrystalProc_void__QScreen_X_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_primaryScreenChanged_CrystalProc_void__QScreen_X_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_lastWindowClosed_CrystalProc_void_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_focusObjectChanged_CrystalProc_void__QObject_X_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_focusWindowChanged_CrystalProc_void__QWindow_X_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_applicationStateChanged_CrystalProc_void__Qt__ApplicationState_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_layoutDirectionChanged_CrystalProc_void__Qt__LayoutDirection_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_commitDataRequest_CrystalProc_void__QSessionManager_R_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_saveStateRequest_CrystalProc_void__QSessionManager_R_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_paletteChanged_CrystalProc_void__const_QPalette_R_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_applicationDisplayNameChanged_CrystalProc_void_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_CONNECT_fontChanged_CrystalProc_void__const_QFont_R_(_self_ : QGuiApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGuiApplication_notify_SUPER_QObject_X_QEvent_X(_self_ : QGuiApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QGuiApplication_event_SUPER_QEvent_X(_self_ : QGuiApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QGuiApplication_compressEvent_SUPER_QEvent_X_QObject_X_QPostEventList_X(_self_ : QGuiApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_BgInherit_QGuiApplication_JUMPTABLE_BgJumptable_QGuiApplication_R(_self_ : QGuiApplication*, table : BgJumptable_QGuiApplication*) : Void
    fun bg_QPainter__CONSTRUCT_() : QPainter*
    fun bg_QPainter__CONSTRUCT_QPaintDevice_X(unnamed_arg_0 : QPaintDevice*) : QPainter*
    fun bg_QPainter_device_(_self_ : QPainter*) : QPaintDevice*
    fun bg_QPainter_begin_QPaintDevice_X(_self_ : QPainter*, unnamed_arg_0 : QPaintDevice*) : Bool
    fun bg_QPainter_end_(_self_ : QPainter*) : Bool
    fun bg_QPainter_isActive_(_self_ : QPainter*) : Bool
    fun bg_QPainter_setCompositionMode_QPainter__CompositionMode(_self_ : QPainter*, mode : Painter::CompositionMode) : Void
    fun bg_QPainter_compositionMode_(_self_ : QPainter*) : Painter::CompositionMode
    fun bg_QPainter_font_(_self_ : QPainter*) : QFont*
    fun bg_QPainter_setFont_const_QFont_R(_self_ : QPainter*, f : QFont*) : Void
    fun bg_QPainter_fontMetrics_(_self_ : QPainter*) : QFontMetrics*
    fun bg_QPainter_fontInfo_(_self_ : QPainter*) : QFontInfo*
    fun bg_QPainter_setPen_const_QColor_R(_self_ : QPainter*, color : QColor*) : Void
    fun bg_QPainter_setPen_const_QPen_R(_self_ : QPainter*, pen : QPen*) : Void
    fun bg_QPainter_setPen_Qt__PenStyle(_self_ : QPainter*, style : PenStyle) : Void
    fun bg_QPainter_pen_(_self_ : QPainter*) : QPen*
    fun bg_QPainter_setBrush_const_QBrush_R(_self_ : QPainter*, brush : QBrush*) : Void
    fun bg_QPainter_setBrush_Qt__BrushStyle(_self_ : QPainter*, style : BrushStyle) : Void
    fun bg_QPainter_brush_(_self_ : QPainter*) : QBrush*
    fun bg_QPainter_setBackgroundMode_Qt__BGMode(_self_ : QPainter*, mode : BgMode) : Void
    fun bg_QPainter_backgroundMode_(_self_ : QPainter*) : BgMode
    fun bg_QPainter_brushOrigin_(_self_ : QPainter*) : QPoint
    fun bg_QPainter_setBrushOrigin_int_int(_self_ : QPainter*, x : Int32, y : Int32) : Void
    fun bg_QPainter_setBrushOrigin_const_QPoint_R(_self_ : QPainter*, unnamed_arg_0 : QPoint) : Void
    fun bg_QPainter_setBrushOrigin_const_QPointF_R(_self_ : QPainter*, unnamed_arg_0 : QPointF) : Void
    fun bg_QPainter_setBackground_const_QBrush_R(_self_ : QPainter*, bg : QBrush*) : Void
    fun bg_QPainter_background_(_self_ : QPainter*) : QBrush*
    fun bg_QPainter_opacity_(_self_ : QPainter*) : Float64
    fun bg_QPainter_setOpacity_qreal(_self_ : QPainter*, opacity : Float64) : Void
    fun bg_QPainter_clipRegion_(_self_ : QPainter*) : QRegion*
    fun bg_QPainter_clipPath_(_self_ : QPainter*) : QPainterPath*
    fun bg_QPainter_setClipRect_const_QRectF_R_Qt__ClipOperation(_self_ : QPainter*, unnamed_arg_0 : QRectF*, op : ClipOperation) : Void
    fun bg_QPainter_setClipRect_const_QRect_R_Qt__ClipOperation(_self_ : QPainter*, unnamed_arg_0 : QRect*, op : ClipOperation) : Void
    fun bg_QPainter_setClipRect_int_int_int_int_Qt__ClipOperation(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, op : ClipOperation) : Void
    fun bg_QPainter_setClipRegion_const_QRegion_R_Qt__ClipOperation(_self_ : QPainter*, unnamed_arg_0 : QRegion*, op : ClipOperation) : Void
    fun bg_QPainter_setClipPath_const_QPainterPath_R_Qt__ClipOperation(_self_ : QPainter*, path : QPainterPath*, op : ClipOperation) : Void
    fun bg_QPainter_setClipping_bool(_self_ : QPainter*, enable : Bool) : Void
    fun bg_QPainter_hasClipping_(_self_ : QPainter*) : Bool
    fun bg_QPainter_clipBoundingRect_(_self_ : QPainter*) : QRectF*
    fun bg_QPainter_save_(_self_ : QPainter*) : Void
    fun bg_QPainter_restore_(_self_ : QPainter*) : Void
    fun bg_QPainter_setTransform_const_QTransform_R_bool(_self_ : QPainter*, transform : QTransform*, combine : Bool) : Void
    fun bg_QPainter_transform_(_self_ : QPainter*) : QTransform*
    fun bg_QPainter_deviceTransform_(_self_ : QPainter*) : QTransform*
    fun bg_QPainter_resetTransform_(_self_ : QPainter*) : Void
    fun bg_QPainter_setWorldTransform_const_QTransform_R_bool(_self_ : QPainter*, matrix : QTransform*, combine : Bool) : Void
    fun bg_QPainter_worldTransform_(_self_ : QPainter*) : QTransform*
    fun bg_QPainter_combinedTransform_(_self_ : QPainter*) : QTransform*
    fun bg_QPainter_setWorldMatrixEnabled_bool(_self_ : QPainter*, enabled : Bool) : Void
    fun bg_QPainter_worldMatrixEnabled_(_self_ : QPainter*) : Bool
    fun bg_QPainter_scale_qreal_qreal(_self_ : QPainter*, sx : Float64, sy : Float64) : Void
    fun bg_QPainter_shear_qreal_qreal(_self_ : QPainter*, sh : Float64, sv : Float64) : Void
    fun bg_QPainter_rotate_qreal(_self_ : QPainter*, a : Float64) : Void
    fun bg_QPainter_translate_const_QPointF_R(_self_ : QPainter*, offset : QPointF) : Void
    fun bg_QPainter_translate_const_QPoint_R(_self_ : QPainter*, offset : QPoint) : Void
    fun bg_QPainter_translate_qreal_qreal(_self_ : QPainter*, dx : Float64, dy : Float64) : Void
    fun bg_QPainter_window_(_self_ : QPainter*) : QRect*
    fun bg_QPainter_setWindow_const_QRect_R(_self_ : QPainter*, window : QRect*) : Void
    fun bg_QPainter_setWindow_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_viewport_(_self_ : QPainter*) : QRect*
    fun bg_QPainter_setViewport_const_QRect_R(_self_ : QPainter*, viewport : QRect*) : Void
    fun bg_QPainter_setViewport_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_setViewTransformEnabled_bool(_self_ : QPainter*, enable : Bool) : Void
    fun bg_QPainter_viewTransformEnabled_(_self_ : QPainter*) : Bool
    fun bg_QPainter_strokePath_const_QPainterPath_R_const_QPen_R(_self_ : QPainter*, path : QPainterPath*, pen : QPen*) : Void
    fun bg_QPainter_fillPath_const_QPainterPath_R_const_QBrush_R(_self_ : QPainter*, path : QPainterPath*, brush : QBrush*) : Void
    fun bg_QPainter_drawPath_const_QPainterPath_R(_self_ : QPainter*, path : QPainterPath*) : Void
    fun bg_QPainter_drawPoint_const_QPointF_R(_self_ : QPainter*, pt : QPointF) : Void
    fun bg_QPainter_drawPoint_const_QPoint_R(_self_ : QPainter*, p : QPoint) : Void
    fun bg_QPainter_drawPoint_int_int(_self_ : QPainter*, x : Int32, y : Int32) : Void
    fun bg_QPainter_drawPoints_const_QPolygonF_R(_self_ : QPainter*, points : QPolygonF*) : Void
    fun bg_QPainter_drawPoints_const_QPolygon_R(_self_ : QPainter*, points : QPolygon*) : Void
    fun bg_QPainter_drawLine_const_QLineF_R(_self_ : QPainter*, line : QLineF*) : Void
    fun bg_QPainter_drawLine_const_QLine_R(_self_ : QPainter*, line : QLine*) : Void
    fun bg_QPainter_drawLine_int_int_int_int(_self_ : QPainter*, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
    fun bg_QPainter_drawLine_const_QPoint_R_const_QPoint_R(_self_ : QPainter*, p1 : QPoint, p2 : QPoint) : Void
    fun bg_QPainter_drawLine_const_QPointF_R_const_QPointF_R(_self_ : QPainter*, p1 : QPointF, p2 : QPointF) : Void
    fun bg_QPainter_drawLines_const_QLineF_X_int(_self_ : QPainter*, lines : QLineF*, line_count : Int32) : Void
    fun bg_QPainter_drawLines_const_QVector_QLineF__R(_self_ : QPainter*, lines : ContainerQVectorQLineF*) : Void
    fun bg_QPainter_drawLines_const_QVector_QPointF__R(_self_ : QPainter*, point_pairs : ContainerQVectorQPointF*) : Void
    fun bg_QPainter_drawLines_const_QLine_X_int(_self_ : QPainter*, lines : QLine*, line_count : Int32) : Void
    fun bg_QPainter_drawLines_const_QVector_QLine__R(_self_ : QPainter*, lines : ContainerQVectorQLine*) : Void
    fun bg_QPainter_drawLines_const_QVector_QPoint__R(_self_ : QPainter*, point_pairs : ContainerQVectorQPoint*) : Void
    fun bg_QPainter_drawRect_const_QRectF_R(_self_ : QPainter*, rect : QRectF*) : Void
    fun bg_QPainter_drawRect_int_int_int_int(_self_ : QPainter*, x1 : Int32, y1 : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_drawRect_const_QRect_R(_self_ : QPainter*, rect : QRect*) : Void
    fun bg_QPainter_drawRects_const_QRectF_X_int(_self_ : QPainter*, rects : QRectF*, rect_count : Int32) : Void
    fun bg_QPainter_drawRects_const_QVector_QRectF__R(_self_ : QPainter*, rectangles : ContainerQVectorQRectF*) : Void
    fun bg_QPainter_drawRects_const_QRect_X_int(_self_ : QPainter*, rects : QRect*, rect_count : Int32) : Void
    fun bg_QPainter_drawRects_const_QVector_QRect__R(_self_ : QPainter*, rectangles : ContainerQVectorQRect*) : Void
    fun bg_QPainter_drawEllipse_const_QRectF_R(_self_ : QPainter*, r : QRectF*) : Void
    fun bg_QPainter_drawEllipse_const_QRect_R(_self_ : QPainter*, r : QRect*) : Void
    fun bg_QPainter_drawEllipse_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_drawEllipse_const_QPointF_R_qreal_qreal(_self_ : QPainter*, center : QPointF, rx : Float64, ry : Float64) : Void
    fun bg_QPainter_drawEllipse_const_QPoint_R_int_int(_self_ : QPainter*, center : QPoint, rx : Int32, ry : Int32) : Void
    fun bg_QPainter_drawPolyline_const_QPolygonF_R(_self_ : QPainter*, polyline : QPolygonF*) : Void
    fun bg_QPainter_drawPolyline_const_QPolygon_R(_self_ : QPainter*, polygon : QPolygon*) : Void
    fun bg_QPainter_drawPolygon_const_QPolygonF_R_Qt__FillRule(_self_ : QPainter*, polygon : QPolygonF*, fill_rule : FillRule) : Void
    fun bg_QPainter_drawPolygon_const_QPolygon_R_Qt__FillRule(_self_ : QPainter*, polygon : QPolygon*, fill_rule : FillRule) : Void
    fun bg_QPainter_drawConvexPolygon_const_QPolygonF_R(_self_ : QPainter*, polygon : QPolygonF*) : Void
    fun bg_QPainter_drawConvexPolygon_const_QPolygon_R(_self_ : QPainter*, polygon : QPolygon*) : Void
    fun bg_QPainter_drawArc_const_QRectF_R_int_int(_self_ : QPainter*, rect : QRectF*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawArc_const_QRect_R_int_int(_self_ : QPainter*, unnamed_arg_0 : QRect*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawArc_int_int_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawPie_const_QRectF_R_int_int(_self_ : QPainter*, rect : QRectF*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawPie_int_int_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawPie_const_QRect_R_int_int(_self_ : QPainter*, unnamed_arg_0 : QRect*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawChord_const_QRectF_R_int_int(_self_ : QPainter*, rect : QRectF*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawChord_int_int_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawChord_const_QRect_R_int_int(_self_ : QPainter*, unnamed_arg_0 : QRect*, a : Int32, alen : Int32) : Void
    fun bg_QPainter_drawRoundedRect_const_QRectF_R_qreal_qreal_Qt__SizeMode(_self_ : QPainter*, rect : QRectF*, x_radius : Float64, y_radius : Float64, mode : SizeMode) : Void
    fun bg_QPainter_drawRoundedRect_int_int_int_int_qreal_qreal_Qt__SizeMode(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, x_radius : Float64, y_radius : Float64, mode : SizeMode) : Void
    fun bg_QPainter_drawRoundedRect_const_QRect_R_qreal_qreal_Qt__SizeMode(_self_ : QPainter*, rect : QRect*, x_radius : Float64, y_radius : Float64, mode : SizeMode) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R(_self_ : QPainter*, rect : QRectF*, pm : QPixmap*) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R_const_QPointF_R(_self_ : QPainter*, rect : QRectF*, pm : QPixmap*, offset : QPointF) : Void
    fun bg_QPainter_drawTiledPixmap_int_int_int_int_const_QPixmap_R_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : QPixmap*, sx : Int32, sy : Int32) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R(_self_ : QPainter*, unnamed_arg_0 : QRect*, unnamed_arg_1 : QPixmap*) : Void
    fun bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R_const_QPoint_R(_self_ : QPainter*, unnamed_arg_0 : QRect*, unnamed_arg_1 : QPixmap*, unnamed_arg_2 : QPoint) : Void
    fun bg_QPainter_drawPicture_const_QPointF_R_const_QPicture_R(_self_ : QPainter*, p : QPointF, picture : QPicture*) : Void
    fun bg_QPainter_drawPicture_int_int_const_QPicture_R(_self_ : QPainter*, x : Int32, y : Int32, picture : QPicture*) : Void
    fun bg_QPainter_drawPicture_const_QPoint_R_const_QPicture_R(_self_ : QPainter*, p : QPoint, picture : QPicture*) : Void
    fun bg_QPainter_drawPixmap_const_QRectF_R_const_QPixmap_R_const_QRectF_R(_self_ : QPainter*, target_rect : QRectF*, pixmap : QPixmap*, source_rect : QRectF*) : Void
    fun bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R_const_QRect_R(_self_ : QPainter*, target_rect : QRect*, pixmap : QPixmap*, source_rect : QRect*) : Void
    fun bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, pm : QPixmap*, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
    fun bg_QPainter_drawPixmap_int_int_const_QPixmap_R_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, pm : QPixmap*, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
    fun bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R_const_QRectF_R(_self_ : QPainter*, p : QPointF, pm : QPixmap*, sr : QRectF*) : Void
    fun bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R_const_QRect_R(_self_ : QPainter*, p : QPoint, pm : QPixmap*, sr : QRect*) : Void
    fun bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R(_self_ : QPainter*, p : QPointF, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R(_self_ : QPainter*, p : QPoint, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_int_int_const_QPixmap_R(_self_ : QPainter*, x : Int32, y : Int32, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R(_self_ : QPainter*, r : QRect*, pm : QPixmap*) : Void
    fun bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, pm : QPixmap*) : Void
    fun bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R(_self_ : QPainter*, target_rect : QRectF*, image : QImage*, source_rect : QRectF*) : Void
    fun bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(_self_ : QPainter*, target_rect : QRectF*, image : QImage*, source_rect : QRectF*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R(_self_ : QPainter*, target_rect : QRect*, image : QImage*, source_rect : QRect*) : Void
    fun bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(_self_ : QPainter*, target_rect : QRect*, image : QImage*, source_rect : QRect*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R(_self_ : QPainter*, p : QPointF, image : QImage*, sr : QRectF*) : Void
    fun bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(_self_ : QPainter*, p : QPointF, image : QImage*, sr : QRectF*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R(_self_ : QPainter*, p : QPoint, image : QImage*, sr : QRect*) : Void
    fun bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(_self_ : QPainter*, p : QPoint, image : QImage*, sr : QRect*, flags : ImageConversionFlags) : Void
    fun bg_QPainter_drawImage_const_QRectF_R_const_QImage_R(_self_ : QPainter*, r : QRectF*, image : QImage*) : Void
    fun bg_QPainter_drawImage_const_QRect_R_const_QImage_R(_self_ : QPainter*, r : QRect*, image : QImage*) : Void
    fun bg_QPainter_drawImage_const_QPointF_R_const_QImage_R(_self_ : QPainter*, p : QPointF, image : QImage*) : Void
    fun bg_QPainter_drawImage_const_QPoint_R_const_QImage_R(_self_ : QPainter*, p : QPoint, image : QImage*) : Void
    fun bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, image : QImage*, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
    fun bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int_Qt__ImageConversionFlags(_self_ : QPainter*, x : Int32, y : Int32, image : QImage*, sx : Int32, sy : Int32, sw : Int32, sh : Int32, flags : ImageConversionFlags) : Void
    fun bg_QPainter_setLayoutDirection_Qt__LayoutDirection(_self_ : QPainter*, direction : LayoutDirection) : Void
    fun bg_QPainter_layoutDirection_(_self_ : QPainter*) : LayoutDirection
    fun bg_QPainter_drawGlyphRun_const_QPointF_R_const_QGlyphRun_R(_self_ : QPainter*, position : QPointF, glyph_run : QGlyphRun*) : Void
    fun bg_QPainter_drawStaticText_const_QPointF_R_const_QStaticText_R(_self_ : QPainter*, top_left_position : QPointF, static_text : QStaticText*) : Void
    fun bg_QPainter_drawStaticText_const_QPoint_R_const_QStaticText_R(_self_ : QPainter*, top_left_position : QPoint, static_text : QStaticText*) : Void
    fun bg_QPainter_drawStaticText_int_int_const_QStaticText_R(_self_ : QPainter*, left : Int32, top : Int32, static_text : QStaticText*) : Void
    fun bg_QPainter_drawText_const_QPointF_R_const_QString_R(_self_ : QPainter*, p : QPointF, s : CrystalString) : Void
    fun bg_QPainter_drawText_const_QPoint_R_const_QString_R(_self_ : QPainter*, p : QPoint, s : CrystalString) : Void
    fun bg_QPainter_drawText_int_int_const_QString_R(_self_ : QPainter*, x : Int32, y : Int32, s : CrystalString) : Void
    fun bg_QPainter_drawText_const_QPointF_R_const_QString_R_int_int(_self_ : QPainter*, p : QPointF, str : CrystalString, tf : Int32, justification_padding : Int32) : Void
    fun bg_QPainter_drawText_const_QRectF_R_int_const_QString_R_QRectF_X(_self_ : QPainter*, r : QRectF*, flags : Int32, text : CrystalString, br : QRectF*) : Void
    fun bg_QPainter_drawText_const_QRect_R_int_const_QString_R_QRect_X(_self_ : QPainter*, r : QRect*, flags : Int32, text : CrystalString, br : QRect*) : Void
    fun bg_QPainter_drawText_int_int_int_int_int_const_QString_R_QRect_X(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : CrystalString, br : QRect*) : Void
    fun bg_QPainter_drawText_const_QRectF_R_const_QString_R(_self_ : QPainter*, r : QRectF*, text : CrystalString) : Void
    fun bg_QPainter_drawText_const_QRectF_R_const_QString_R_const_QTextOption_R(_self_ : QPainter*, r : QRectF*, text : CrystalString, o : QTextOption*) : Void
    fun bg_QPainter_boundingRect_const_QRectF_R_int_const_QString_R(_self_ : QPainter*, rect : QRectF*, flags : Int32, text : CrystalString) : QRectF*
    fun bg_QPainter_boundingRect_const_QRect_R_int_const_QString_R(_self_ : QPainter*, rect : QRect*, flags : Int32, text : CrystalString) : QRect*
    fun bg_QPainter_boundingRect_int_int_int_int_int_const_QString_R(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : CrystalString) : QRect*
    fun bg_QPainter_boundingRect_const_QRectF_R_const_QString_R(_self_ : QPainter*, rect : QRectF*, text : CrystalString) : QRectF*
    fun bg_QPainter_boundingRect_const_QRectF_R_const_QString_R_const_QTextOption_R(_self_ : QPainter*, rect : QRectF*, text : CrystalString, o : QTextOption*) : QRectF*
    fun bg_QPainter_drawTextItem_const_QPointF_R_const_QTextItem_R(_self_ : QPainter*, p : QPointF, ti : QTextItem*) : Void
    fun bg_QPainter_drawTextItem_int_int_const_QTextItem_R(_self_ : QPainter*, x : Int32, y : Int32, ti : QTextItem*) : Void
    fun bg_QPainter_drawTextItem_const_QPoint_R_const_QTextItem_R(_self_ : QPainter*, p : QPoint, ti : QTextItem*) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_const_QBrush_R(_self_ : QPainter*, unnamed_arg_0 : QRectF*, unnamed_arg_1 : QBrush*) : Void
    fun bg_QPainter_fillRect_int_int_int_int_const_QBrush_R(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : QBrush*) : Void
    fun bg_QPainter_fillRect_const_QRect_R_const_QBrush_R(_self_ : QPainter*, unnamed_arg_0 : QRect*, unnamed_arg_1 : QBrush*) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_const_QColor_R(_self_ : QPainter*, unnamed_arg_0 : QRectF*, color : QColor*) : Void
    fun bg_QPainter_fillRect_int_int_int_int_const_QColor_R(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, color : QColor*) : Void
    fun bg_QPainter_fillRect_const_QRect_R_const_QColor_R(_self_ : QPainter*, unnamed_arg_0 : QRect*, color : QColor*) : Void
    fun bg_QPainter_fillRect_int_int_int_int_Qt__GlobalColor(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, c : GlobalColor) : Void
    fun bg_QPainter_fillRect_const_QRect_R_Qt__GlobalColor(_self_ : QPainter*, r : QRect*, c : GlobalColor) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_Qt__GlobalColor(_self_ : QPainter*, r : QRectF*, c : GlobalColor) : Void
    fun bg_QPainter_fillRect_int_int_int_int_Qt__BrushStyle(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, style : BrushStyle) : Void
    fun bg_QPainter_fillRect_const_QRect_R_Qt__BrushStyle(_self_ : QPainter*, r : QRect*, style : BrushStyle) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_Qt__BrushStyle(_self_ : QPainter*, r : QRectF*, style : BrushStyle) : Void
    fun bg_QPainter_fillRect_int_int_int_int_QGradient__Preset(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32, preset : Gradient::Preset) : Void
    fun bg_QPainter_fillRect_const_QRect_R_QGradient__Preset(_self_ : QPainter*, r : QRect*, preset : Gradient::Preset) : Void
    fun bg_QPainter_fillRect_const_QRectF_R_QGradient__Preset(_self_ : QPainter*, r : QRectF*, preset : Gradient::Preset) : Void
    fun bg_QPainter_eraseRect_const_QRectF_R(_self_ : QPainter*, unnamed_arg_0 : QRectF*) : Void
    fun bg_QPainter_eraseRect_int_int_int_int(_self_ : QPainter*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QPainter_eraseRect_const_QRect_R(_self_ : QPainter*, unnamed_arg_0 : QRect*) : Void
    fun bg_QPainter_setRenderHint_QPainter__RenderHint_bool(_self_ : QPainter*, hint : Painter::RenderHint, on : Bool) : Void
    fun bg_QPainter_setRenderHints_QPainter__RenderHints_bool(_self_ : QPainter*, hints : Painter::RenderHints, on : Bool) : Void
    fun bg_QPainter_renderHints_(_self_ : QPainter*) : Painter::RenderHints
    fun bg_QPainter_testRenderHint_QPainter__RenderHint(_self_ : QPainter*, hint : Painter::RenderHint) : Bool
    fun bg_QPainter_paintEngine_(_self_ : QPainter*) : QPaintEngine*
    fun bg_QPainter_beginNativePainting_(_self_ : QPainter*) : Void
    fun bg_QPainter_endNativePainting_(_self_ : QPainter*) : Void
    fun bg_QPainter_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QScreen_metaObject_(_self_ : QScreen*) : QMetaObject*
    fun bg_QScreen_qt_metacast_const_char_X(_self_ : QScreen*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QScreen*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QScreen_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QScreen_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QScreen_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QScreen_handle_(_self_ : QScreen*) : QPlatformScreen*
    fun bg_QScreen_name_(_self_ : QScreen*) : CrystalString
    fun bg_QScreen_manufacturer_(_self_ : QScreen*) : CrystalString
    fun bg_QScreen_model_(_self_ : QScreen*) : CrystalString
    fun bg_QScreen_serialNumber_(_self_ : QScreen*) : CrystalString
    fun bg_QScreen_depth_(_self_ : QScreen*) : Int32
    fun bg_QScreen_size_(_self_ : QScreen*) : QSize*
    fun bg_QScreen_geometry_(_self_ : QScreen*) : QRect*
    fun bg_QScreen_physicalSize_(_self_ : QScreen*) : QSizeF*
    fun bg_QScreen_physicalDotsPerInchX_(_self_ : QScreen*) : Float64
    fun bg_QScreen_physicalDotsPerInchY_(_self_ : QScreen*) : Float64
    fun bg_QScreen_physicalDotsPerInch_(_self_ : QScreen*) : Float64
    fun bg_QScreen_logicalDotsPerInchX_(_self_ : QScreen*) : Float64
    fun bg_QScreen_logicalDotsPerInchY_(_self_ : QScreen*) : Float64
    fun bg_QScreen_logicalDotsPerInch_(_self_ : QScreen*) : Float64
    fun bg_QScreen_devicePixelRatio_(_self_ : QScreen*) : Float64
    fun bg_QScreen_availableSize_(_self_ : QScreen*) : QSize*
    fun bg_QScreen_availableGeometry_(_self_ : QScreen*) : QRect*
    fun bg_QScreen_virtualSiblings_(_self_ : QScreen*) : ContainerQListQScreenX*
    fun bg_QScreen_virtualSiblingAt_QPoint(_self_ : QScreen*, point : QPoint) : QScreen*
    fun bg_QScreen_virtualSize_(_self_ : QScreen*) : QSize*
    fun bg_QScreen_virtualGeometry_(_self_ : QScreen*) : QRect*
    fun bg_QScreen_availableVirtualSize_(_self_ : QScreen*) : QSize*
    fun bg_QScreen_availableVirtualGeometry_(_self_ : QScreen*) : QRect*
    fun bg_QScreen_primaryOrientation_(_self_ : QScreen*) : ScreenOrientation
    fun bg_QScreen_orientation_(_self_ : QScreen*) : ScreenOrientation
    fun bg_QScreen_nativeOrientation_(_self_ : QScreen*) : ScreenOrientation
    fun bg_QScreen_orientationUpdateMask_(_self_ : QScreen*) : ScreenOrientations
    fun bg_QScreen_setOrientationUpdateMask_Qt__ScreenOrientations(_self_ : QScreen*, mask : ScreenOrientations) : Void
    fun bg_QScreen_angleBetween_Qt__ScreenOrientation_Qt__ScreenOrientation(_self_ : QScreen*, a : ScreenOrientation, b : ScreenOrientation) : Int32
    fun bg_QScreen_transformBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(_self_ : QScreen*, a : ScreenOrientation, b : ScreenOrientation, target : QRect*) : QTransform*
    fun bg_QScreen_mapBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(_self_ : QScreen*, a : ScreenOrientation, b : ScreenOrientation, rect : QRect*) : QRect*
    fun bg_QScreen_isPortrait_Qt__ScreenOrientation(_self_ : QScreen*, orientation : ScreenOrientation) : Bool
    fun bg_QScreen_isLandscape_Qt__ScreenOrientation(_self_ : QScreen*, orientation : ScreenOrientation) : Bool
    fun bg_QScreen_grabWindow_WId_int_int_int_int(_self_ : QScreen*, window : UInt32, x : Int32, y : Int32, w : Int32, h : Int32) : QPixmap*
    fun bg_QScreen_refreshRate_(_self_ : QScreen*) : Float64
    fun bg_QScreen_geometryChanged_const_QRect_R(_self_ : QScreen*, geometry : QRect*) : Void
    fun bg_QScreen_availableGeometryChanged_const_QRect_R(_self_ : QScreen*, geometry : QRect*) : Void
    fun bg_QScreen_physicalSizeChanged_const_QSizeF_R(_self_ : QScreen*, size : QSizeF*) : Void
    fun bg_QScreen_physicalDotsPerInchChanged_qreal(_self_ : QScreen*, dpi : Float64) : Void
    fun bg_QScreen_logicalDotsPerInchChanged_qreal(_self_ : QScreen*, dpi : Float64) : Void
    fun bg_QScreen_virtualGeometryChanged_const_QRect_R(_self_ : QScreen*, rect : QRect*) : Void
    fun bg_QScreen_primaryOrientationChanged_Qt__ScreenOrientation(_self_ : QScreen*, orientation : ScreenOrientation) : Void
    fun bg_QScreen_orientationChanged_Qt__ScreenOrientation(_self_ : QScreen*, orientation : ScreenOrientation) : Void
    fun bg_QScreen_refreshRateChanged_qreal(_self_ : QScreen*, refresh_rate : Float64) : Void
    fun bg_QObject_event_QEvent_X(_self_ : QScreen*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QScreen*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QScreen*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QScreen*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QScreen*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QScreen*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QScreen*, signal : QMetaMethod*) : Void
    fun bg_QScreen_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QScreen_CONNECT_geometryChanged_CrystalProc_void__const_QRect_R_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_availableGeometryChanged_CrystalProc_void__const_QRect_R_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_physicalSizeChanged_CrystalProc_void__const_QSizeF_R_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_physicalDotsPerInchChanged_CrystalProc_void__qreal_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_logicalDotsPerInchChanged_CrystalProc_void__qreal_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_virtualGeometryChanged_CrystalProc_void__const_QRect_R_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_primaryOrientationChanged_CrystalProc_void__Qt__ScreenOrientation_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_orientationChanged_CrystalProc_void__Qt__ScreenOrientation_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QScreen_CONNECT_refreshRateChanged_CrystalProc_void__qreal_(_self_ : QScreen*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QScreen*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QScreen*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QScreen*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QScreen*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QScreen*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QScreen*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QScreen*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QScreen_JUMPTABLE_BgJumptable_QScreen_R(_self_ : QScreen*, table : BgJumptable_QScreen*) : Void
    fun bg_QSizePolicy__CONSTRUCT_() : QSizePolicy*
    fun bg_QSizePolicy__CONSTRUCT_QSizePolicy__Policy_QSizePolicy__Policy_QSizePolicy__ControlType(horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy, type : SizePolicy::ControlType) : QSizePolicy*
    fun bg_QSizePolicy_horizontalPolicy_(_self_ : QSizePolicy*) : SizePolicy::Policy
    fun bg_QSizePolicy_verticalPolicy_(_self_ : QSizePolicy*) : SizePolicy::Policy
    fun bg_QSizePolicy_controlType_(_self_ : QSizePolicy*) : SizePolicy::ControlType
    fun bg_QSizePolicy_setHorizontalPolicy_QSizePolicy__Policy(_self_ : QSizePolicy*, d : SizePolicy::Policy) : Void
    fun bg_QSizePolicy_setVerticalPolicy_QSizePolicy__Policy(_self_ : QSizePolicy*, d : SizePolicy::Policy) : Void
    fun bg_QSizePolicy_setControlType_QSizePolicy__ControlType(_self_ : QSizePolicy*, type : SizePolicy::ControlType) : Void
    fun bg_QSizePolicy_expandingDirections_(_self_ : QSizePolicy*) : Orientations
    fun bg_QSizePolicy_setHeightForWidth_bool(_self_ : QSizePolicy*, b : Bool) : Void
    fun bg_QSizePolicy_hasHeightForWidth_(_self_ : QSizePolicy*) : Bool
    fun bg_QSizePolicy_setWidthForHeight_bool(_self_ : QSizePolicy*, b : Bool) : Void
    fun bg_QSizePolicy_hasWidthForHeight_(_self_ : QSizePolicy*) : Bool
    fun bg_QSizePolicy__OPERATOR_eq_const_QSizePolicy_R(_self_ : QSizePolicy*, s : QSizePolicy*) : Bool
    fun bg_QSizePolicy__OPERATOR_ne_const_QSizePolicy_R(_self_ : QSizePolicy*, s : QSizePolicy*) : Bool
    fun bg_QSizePolicy_horizontalStretch_(_self_ : QSizePolicy*) : Int32
    fun bg_QSizePolicy_verticalStretch_(_self_ : QSizePolicy*) : Int32
    fun bg_QSizePolicy_setHorizontalStretch_int(_self_ : QSizePolicy*, stretch_factor : Int32) : Void
    fun bg_QSizePolicy_setVerticalStretch_int(_self_ : QSizePolicy*, stretch_factor : Int32) : Void
    fun bg_QSizePolicy_retainSizeWhenHidden_(_self_ : QSizePolicy*) : Bool
    fun bg_QSizePolicy_setRetainSizeWhenHidden_bool(_self_ : QSizePolicy*, retain_size : Bool) : Void
    fun bg_QSizePolicy_transpose_(_self_ : QSizePolicy*) : Void
    fun bg_QSizePolicy_transposed_(_self_ : QSizePolicy*) : QSizePolicy*
    fun bg_QSizePolicy_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QWidget_metaObject_(_self_ : QWidget*) : QMetaObject*
    fun bg_QWidget_qt_metacast_const_char_X(_self_ : QWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QWidget__CONSTRUCT_QWidget_X(parent : QWidget*) : QWidget*
    fun bg_QWidget__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QWidget*
    fun bg_QWidget_devType_(_self_ : QWidget*) : Int32
    fun bg_QWidget_winId_(_self_ : QWidget*) : UInt32
    fun bg_QWidget_createWinId_(_self_ : QWidget*) : Void
    fun bg_QWidget_internalWinId_(_self_ : QWidget*) : UInt32
    fun bg_QWidget_effectiveWinId_(_self_ : QWidget*) : UInt32
    fun bg_QWidget_style_(_self_ : QWidget*) : QStyle*
    fun bg_QWidget_setStyle_QStyle_X(_self_ : QWidget*, unnamed_arg_0 : QStyle*) : Void
    fun bg_QWidget_isTopLevel_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isWindow_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isModal_(_self_ : QWidget*) : Bool
    fun bg_QWidget_windowModality_(_self_ : QWidget*) : WindowModality
    fun bg_QWidget_setWindowModality_Qt__WindowModality(_self_ : QWidget*, window_modality : WindowModality) : Void
    fun bg_QWidget_isEnabled_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isEnabledTo_const_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Bool
    fun bg_QWidget_setEnabled_bool(_self_ : QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_setDisabled_bool(_self_ : QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_setWindowModified_bool(_self_ : QWidget*, unnamed_arg_0 : Bool) : Void
    fun bg_QWidget_frameGeometry_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_geometry_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_normalGeometry_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_x_(_self_ : QWidget*) : Int32
    fun bg_QWidget_y_(_self_ : QWidget*) : Int32
    fun bg_QWidget_pos_(_self_ : QWidget*) : QPoint
    fun bg_QWidget_frameSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_size_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_width_(_self_ : QWidget*) : Int32
    fun bg_QWidget_height_(_self_ : QWidget*) : Int32
    fun bg_QWidget_rect_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_childrenRect_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_childrenRegion_(_self_ : QWidget*) : QRegion*
    fun bg_QWidget_minimumSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_maximumSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_minimumWidth_(_self_ : QWidget*) : Int32
    fun bg_QWidget_minimumHeight_(_self_ : QWidget*) : Int32
    fun bg_QWidget_maximumWidth_(_self_ : QWidget*) : Int32
    fun bg_QWidget_maximumHeight_(_self_ : QWidget*) : Int32
    fun bg_QWidget_setMinimumSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setMinimumSize_int_int(_self_ : QWidget*, minw : Int32, minh : Int32) : Void
    fun bg_QWidget_setMaximumSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setMaximumSize_int_int(_self_ : QWidget*, maxw : Int32, maxh : Int32) : Void
    fun bg_QWidget_setMinimumWidth_int(_self_ : QWidget*, minw : Int32) : Void
    fun bg_QWidget_setMinimumHeight_int(_self_ : QWidget*, minh : Int32) : Void
    fun bg_QWidget_setMaximumWidth_int(_self_ : QWidget*, maxw : Int32) : Void
    fun bg_QWidget_setMaximumHeight_int(_self_ : QWidget*, maxh : Int32) : Void
    fun bg_QWidget_sizeIncrement_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_setSizeIncrement_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setSizeIncrement_int_int(_self_ : QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_baseSize_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_setBaseSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setBaseSize_int_int(_self_ : QWidget*, basew : Int32, baseh : Int32) : Void
    fun bg_QWidget_setFixedSize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setFixedSize_int_int(_self_ : QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_setFixedWidth_int(_self_ : QWidget*, w : Int32) : Void
    fun bg_QWidget_setFixedHeight_int(_self_ : QWidget*, h : Int32) : Void
    fun bg_QWidget_mapToGlobal_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint) : QPoint
    fun bg_QWidget_mapFromGlobal_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint) : QPoint
    fun bg_QWidget_mapToParent_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint) : QPoint
    fun bg_QWidget_mapFromParent_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint) : QPoint
    fun bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QWidget*, unnamed_arg_1 : QPoint) : QPoint
    fun bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QWidget*, unnamed_arg_1 : QPoint) : QPoint
    fun bg_QWidget_window_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_nativeParentWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_topLevelWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_palette_(_self_ : QWidget*) : QPalette*
    fun bg_QWidget_setPalette_const_QPalette_R(_self_ : QWidget*, unnamed_arg_0 : QPalette*) : Void
    fun bg_QWidget_setBackgroundRole_QPalette__ColorRole(_self_ : QWidget*, unnamed_arg_0 : Palette::ColorRole) : Void
    fun bg_QWidget_backgroundRole_(_self_ : QWidget*) : Palette::ColorRole
    fun bg_QWidget_setForegroundRole_QPalette__ColorRole(_self_ : QWidget*, unnamed_arg_0 : Palette::ColorRole) : Void
    fun bg_QWidget_foregroundRole_(_self_ : QWidget*) : Palette::ColorRole
    fun bg_QWidget_font_(_self_ : QWidget*) : QFont*
    fun bg_QWidget_setFont_const_QFont_R(_self_ : QWidget*, unnamed_arg_0 : QFont*) : Void
    fun bg_QWidget_fontMetrics_(_self_ : QWidget*) : QFontMetrics*
    fun bg_QWidget_fontInfo_(_self_ : QWidget*) : QFontInfo*
    fun bg_QWidget_cursor_(_self_ : QWidget*) : QCursor*
    fun bg_QWidget_setCursor_const_QCursor_R(_self_ : QWidget*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWidget_unsetCursor_(_self_ : QWidget*) : Void
    fun bg_QWidget_setMouseTracking_bool(_self_ : QWidget*, enable : Bool) : Void
    fun bg_QWidget_hasMouseTracking_(_self_ : QWidget*) : Bool
    fun bg_QWidget_underMouse_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setTabletTracking_bool(_self_ : QWidget*, enable : Bool) : Void
    fun bg_QWidget_hasTabletTracking_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setMask_const_QBitmap_R(_self_ : QWidget*, unnamed_arg_0 : QBitmap*) : Void
    fun bg_QWidget_setMask_const_QRegion_R(_self_ : QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_mask_(_self_ : QWidget*) : QRegion*
    fun bg_QWidget_clearMask_(_self_ : QWidget*) : Void
    fun bg_QWidget_render_QPaintDevice_X(_self_ : QWidget*, target : QPaintDevice*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R(_self_ : QWidget*, target : QPaintDevice*, target_offset : QPoint) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(_self_ : QWidget*, target : QPaintDevice*, target_offset : QPoint, source_region : QRegion*) : Void
    fun bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(_self_ : QWidget*, target : QPaintDevice*, target_offset : QPoint, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
    fun bg_QWidget_render_QPainter_X(_self_ : QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R(_self_ : QWidget*, painter : QPainter*, target_offset : QPoint) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(_self_ : QWidget*, painter : QPainter*, target_offset : QPoint, source_region : QRegion*) : Void
    fun bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(_self_ : QWidget*, painter : QPainter*, target_offset : QPoint, source_region : QRegion*, render_flags : Widget::RenderFlags) : Void
    fun bg_QWidget_grab_(_self_ : QWidget*) : QPixmap*
    fun bg_QWidget_grab_const_QRect_R(_self_ : QWidget*, rectangle : QRect*) : QPixmap*
    fun bg_QWidget_graphicsEffect_(_self_ : QWidget*) : QGraphicsEffect*
    fun bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(_self_ : QWidget*, effect : QGraphicsEffect*) : Void
    fun bg_QWidget_grabGesture_Qt__GestureType(_self_ : QWidget*, type : GestureType) : Void
    fun bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(_self_ : QWidget*, type : GestureType, flags : GestureFlags) : Void
    fun bg_QWidget_ungrabGesture_Qt__GestureType(_self_ : QWidget*, type : GestureType) : Void
    fun bg_QWidget_setWindowTitle_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_setStyleSheet_const_QString_R(_self_ : QWidget*, style_sheet : CrystalString) : Void
    fun bg_QWidget_styleSheet_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_windowTitle_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowIcon_const_QIcon_R(_self_ : QWidget*, icon : QIcon*) : Void
    fun bg_QWidget_windowIcon_(_self_ : QWidget*) : QIcon*
    fun bg_QWidget_setWindowIconText_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_windowIconText_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowRole_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_windowRole_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowFilePath_const_QString_R(_self_ : QWidget*, file_path : CrystalString) : Void
    fun bg_QWidget_windowFilePath_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWindowOpacity_qreal(_self_ : QWidget*, level : Float64) : Void
    fun bg_QWidget_windowOpacity_(_self_ : QWidget*) : Float64
    fun bg_QWidget_isWindowModified_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setToolTip_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_toolTip_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setToolTipDuration_int(_self_ : QWidget*, msec : Int32) : Void
    fun bg_QWidget_toolTipDuration_(_self_ : QWidget*) : Int32
    fun bg_QWidget_setStatusTip_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_statusTip_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setWhatsThis_const_QString_R(_self_ : QWidget*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QWidget_whatsThis_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_accessibleName_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setAccessibleName_const_QString_R(_self_ : QWidget*, name : CrystalString) : Void
    fun bg_QWidget_accessibleDescription_(_self_ : QWidget*) : CrystalString
    fun bg_QWidget_setAccessibleDescription_const_QString_R(_self_ : QWidget*, description : CrystalString) : Void
    fun bg_QWidget_setLayoutDirection_Qt__LayoutDirection(_self_ : QWidget*, direction : LayoutDirection) : Void
    fun bg_QWidget_layoutDirection_(_self_ : QWidget*) : LayoutDirection
    fun bg_QWidget_unsetLayoutDirection_(_self_ : QWidget*) : Void
    fun bg_QWidget_setLocale_const_QLocale_R(_self_ : QWidget*, locale : QLocale*) : Void
    fun bg_QWidget_locale_(_self_ : QWidget*) : QLocale*
    fun bg_QWidget_unsetLocale_(_self_ : QWidget*) : Void
    fun bg_QWidget_isRightToLeft_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isLeftToRight_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setFocus_(_self_ : QWidget*) : Void
    fun bg_QWidget_isActiveWindow_(_self_ : QWidget*) : Bool
    fun bg_QWidget_activateWindow_(_self_ : QWidget*) : Void
    fun bg_QWidget_clearFocus_(_self_ : QWidget*) : Void
    fun bg_QWidget_setFocus_Qt__FocusReason(_self_ : QWidget*, reason : FocusReason) : Void
    fun bg_QWidget_focusPolicy_(_self_ : QWidget*) : FocusPolicy
    fun bg_QWidget_setFocusPolicy_Qt__FocusPolicy(_self_ : QWidget*, policy : FocusPolicy) : Void
    fun bg_QWidget_hasFocus_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(unnamed_arg_0 : QWidget*, unnamed_arg_1 : QWidget*) : Void
    fun bg_QWidget_setFocusProxy_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_focusProxy_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_contextMenuPolicy_(_self_ : QWidget*) : ContextMenuPolicy
    fun bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(_self_ : QWidget*, policy : ContextMenuPolicy) : Void
    fun bg_QWidget_grabMouse_(_self_ : QWidget*) : Void
    fun bg_QWidget_grabMouse_const_QCursor_R(_self_ : QWidget*, unnamed_arg_0 : QCursor*) : Void
    fun bg_QWidget_releaseMouse_(_self_ : QWidget*) : Void
    fun bg_QWidget_grabKeyboard_(_self_ : QWidget*) : Void
    fun bg_QWidget_releaseKeyboard_(_self_ : QWidget*) : Void
    fun bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(_self_ : QWidget*, key : QKeySequence*, context : ShortcutContext) : Int32
    fun bg_QWidget_releaseShortcut_int(_self_ : QWidget*, id : Int32) : Void
    fun bg_QWidget_setShortcutEnabled_int_bool(_self_ : QWidget*, id : Int32, enable : Bool) : Void
    fun bg_QWidget_setShortcutAutoRepeat_int_bool(_self_ : QWidget*, id : Int32, enable : Bool) : Void
    fun bg_QWidget_mouseGrabber_STATIC_() : QWidget*
    fun bg_QWidget_keyboardGrabber_STATIC_() : QWidget*
    fun bg_QWidget_updatesEnabled_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setUpdatesEnabled_bool(_self_ : QWidget*, enable : Bool) : Void
    fun bg_QWidget_graphicsProxyWidget_(_self_ : QWidget*) : QGraphicsProxyWidget*
    fun bg_QWidget_update_(_self_ : QWidget*) : Void
    fun bg_QWidget_repaint_(_self_ : QWidget*) : Void
    fun bg_QWidget_update_int_int_int_int(_self_ : QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_update_const_QRect_R(_self_ : QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_update_const_QRegion_R(_self_ : QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_repaint_int_int_int_int(_self_ : QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_repaint_const_QRect_R(_self_ : QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_repaint_const_QRegion_R(_self_ : QWidget*, unnamed_arg_0 : QRegion*) : Void
    fun bg_QWidget_setVisible_bool(_self_ : QWidget*, visible : Bool) : Void
    fun bg_QWidget_setHidden_bool(_self_ : QWidget*, hidden : Bool) : Void
    fun bg_QWidget_show_(_self_ : QWidget*) : Void
    fun bg_QWidget_hide_(_self_ : QWidget*) : Void
    fun bg_QWidget_showMinimized_(_self_ : QWidget*) : Void
    fun bg_QWidget_showMaximized_(_self_ : QWidget*) : Void
    fun bg_QWidget_showFullScreen_(_self_ : QWidget*) : Void
    fun bg_QWidget_showNormal_(_self_ : QWidget*) : Void
    fun bg_QWidget_close_(_self_ : QWidget*) : Bool
    fun bg_QWidget_raise_(_self_ : QWidget*) : Void
    fun bg_QWidget_lower_(_self_ : QWidget*) : Void
    fun bg_QWidget_stackUnder_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_move_int_int(_self_ : QWidget*, x : Int32, y : Int32) : Void
    fun bg_QWidget_move_const_QPoint_R(_self_ : QWidget*, unnamed_arg_0 : QPoint) : Void
    fun bg_QWidget_resize_int_int(_self_ : QWidget*, w : Int32, h : Int32) : Void
    fun bg_QWidget_resize_const_QSize_R(_self_ : QWidget*, unnamed_arg_0 : QSize*) : Void
    fun bg_QWidget_setGeometry_int_int_int_int(_self_ : QWidget*, x : Int32, y : Int32, w : Int32, h : Int32) : Void
    fun bg_QWidget_setGeometry_const_QRect_R(_self_ : QWidget*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidget_saveGeometry_(_self_ : QWidget*) : QByteArray*
    fun bg_QWidget_restoreGeometry_const_QByteArray_R(_self_ : QWidget*, geometry : QByteArray*) : Bool
    fun bg_QWidget_adjustSize_(_self_ : QWidget*) : Void
    fun bg_QWidget_isVisible_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isVisibleTo_const_QWidget_X(_self_ : QWidget*, unnamed_arg_0 : QWidget*) : Bool
    fun bg_QWidget_isHidden_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isMinimized_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isMaximized_(_self_ : QWidget*) : Bool
    fun bg_QWidget_isFullScreen_(_self_ : QWidget*) : Bool
    fun bg_QWidget_windowState_(_self_ : QWidget*) : WindowStates
    fun bg_QWidget_setWindowState_Qt__WindowStates(_self_ : QWidget*, state : WindowStates) : Void
    fun bg_QWidget_overrideWindowState_Qt__WindowStates(_self_ : QWidget*, state : WindowStates) : Void
    fun bg_QWidget_sizeHint_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_sizePolicy_(_self_ : QWidget*) : QSizePolicy*
    fun bg_QWidget_setSizePolicy_QSizePolicy(_self_ : QWidget*, unnamed_arg_0 : QSizePolicy*) : Void
    fun bg_QWidget_setSizePolicy_QSizePolicy__Policy_QSizePolicy__Policy(_self_ : QWidget*, horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : QWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QWidget*) : Bool
    fun bg_QWidget_visibleRegion_(_self_ : QWidget*) : QRegion*
    fun bg_QWidget_setContentsMargins_int_int_int_int(_self_ : QWidget*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QWidget_setContentsMargins_const_QMargins_R(_self_ : QWidget*, margins : QMargins*) : Void
    fun bg_QWidget_contentsMargins_(_self_ : QWidget*) : QMargins*
    fun bg_QWidget_contentsRect_(_self_ : QWidget*) : QRect*
    fun bg_QWidget_layout_(_self_ : QWidget*) : QLayout*
    fun bg_QWidget_setLayout_QLayout_X(_self_ : QWidget*, unnamed_arg_0 : QLayout*) : Void
    fun bg_QWidget_updateGeometry_(_self_ : QWidget*) : Void
    fun bg_QWidget_setParent_QWidget_X(_self_ : QWidget*, parent : QWidget*) : Void
    fun bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(_self_ : QWidget*, parent : QWidget*, f : WindowFlags) : Void
    fun bg_QWidget_scroll_int_int(_self_ : QWidget*, dx : Int32, dy : Int32) : Void
    fun bg_QWidget_scroll_int_int_const_QRect_R(_self_ : QWidget*, dx : Int32, dy : Int32, unnamed_arg_2 : QRect*) : Void
    fun bg_QWidget_focusWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_nextInFocusChain_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_previousInFocusChain_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_acceptDrops_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setAcceptDrops_bool(_self_ : QWidget*, on : Bool) : Void
    fun bg_QWidget_addAction_QAction_X(_self_ : QWidget*, action : QAction*) : Void
    fun bg_QWidget_addActions_QList_QAction_X_(_self_ : QWidget*, actions : ContainerQListQActionX*) : Void
    fun bg_QWidget_insertActions_QAction_X_QList_QAction_X_(_self_ : QWidget*, before : QAction*, actions : ContainerQListQActionX*) : Void
    fun bg_QWidget_insertAction_QAction_X_QAction_X(_self_ : QWidget*, before : QAction*, action : QAction*) : Void
    fun bg_QWidget_removeAction_QAction_X(_self_ : QWidget*, action : QAction*) : Void
    fun bg_QWidget_actions_(_self_ : QWidget*) : ContainerQListQActionX*
    fun bg_QWidget_parentWidget_(_self_ : QWidget*) : QWidget*
    fun bg_QWidget_setWindowFlags_Qt__WindowFlags(_self_ : QWidget*, type : WindowFlags) : Void
    fun bg_QWidget_windowFlags_(_self_ : QWidget*) : WindowFlags
    fun bg_QWidget_setWindowFlag_Qt__WindowType_bool(_self_ : QWidget*, unnamed_arg_0 : WindowType, on : Bool) : Void
    fun bg_QWidget_overrideWindowFlags_Qt__WindowFlags(_self_ : QWidget*, type : WindowFlags) : Void
    fun bg_QWidget_windowType_(_self_ : QWidget*) : WindowType
    fun bg_QWidget_find_STATIC_WId(unnamed_arg_0 : UInt32) : QWidget*
    fun bg_QWidget_childAt_int_int(_self_ : QWidget*, x : Int32, y : Int32) : QWidget*
    fun bg_QWidget_childAt_const_QPoint_R(_self_ : QWidget*, p : QPoint) : QWidget*
    fun bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(_self_ : QWidget*, unnamed_arg_0 : WidgetAttribute, on : Bool) : Void
    fun bg_QWidget_testAttribute_Qt__WidgetAttribute(_self_ : QWidget*, unnamed_arg_0 : WidgetAttribute) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QWidget*) : QPaintEngine*
    fun bg_QWidget_ensurePolished_(_self_ : QWidget*) : Void
    fun bg_QWidget_isAncestorOf_const_QWidget_X(_self_ : QWidget*, child : QWidget*) : Bool
    fun bg_QWidget_autoFillBackground_(_self_ : QWidget*) : Bool
    fun bg_QWidget_setAutoFillBackground_bool(_self_ : QWidget*, enabled : Bool) : Void
    fun bg_QWidget_backingStore_(_self_ : QWidget*) : QBackingStore*
    fun bg_QWidget_windowHandle_(_self_ : QWidget*) : QWindow*
    fun bg_QWidget_screen_(_self_ : QWidget*) : QScreen*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(window : QWindow*, parent : QWidget*) : QWidget*
    fun bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(window : QWindow*, parent : QWidget*, flags : WindowFlags) : QWidget*
    fun bg_QWidget_windowTitleChanged_const_QString_R(_self_ : QWidget*, title : CrystalString) : Void
    fun bg_QWidget_windowIconChanged_const_QIcon_R(_self_ : QWidget*, icon : QIcon*) : Void
    fun bg_QWidget_windowIconTextChanged_const_QString_R(_self_ : QWidget*, icon_text : CrystalString) : Void
    fun bg_QWidget_customContextMenuRequested_const_QPoint_R(_self_ : QWidget*, pos : QPoint) : Void
    fun bg_QWidget_event_QEvent_X(_self_ : QWidget*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : QWidget*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QWidget*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_inputMethodHints_(_self_ : QWidget*) : InputMethodHints
    fun bg_QWidget_setInputMethodHints_Qt__InputMethodHints(_self_ : QWidget*, hints : InputMethodHints) : Void
    fun bg_QWidget_updateMicroFocus_(_self_ : QWidget*) : Void
    fun bg_QWidget_create_WId_bool_bool(_self_ : QWidget*, unnamed_arg_0 : UInt32, initialize_window : Bool, destroy_old_window : Bool) : Void
    fun bg_QWidget_destroy_bool_bool(_self_ : QWidget*, destroy_window : Bool, destroy_sub_windows : Bool) : Void
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QWidget*, next_ : Bool) : Bool
    fun bg_QWidget_focusNextChild_(_self_ : QWidget*) : Bool
    fun bg_QWidget_focusPreviousChild_(_self_ : QWidget*) : Bool
    fun bg_QWidget__CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(d : QWidgetPrivate*, parent : QWidget*, f : WindowFlags) : QWidget*
    fun bg_QWidget_AS_PaintDevice_(_self_ : QWidget*) : QPaintDevice*
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QWidget*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QWidget*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QWidget*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QWidget*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QWidget*, signal : QMetaMethod*) : Void
    fun bg_QWidget_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QWidget_CONNECT_windowTitleChanged_CrystalProc_void__const_QString_R_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_CONNECT_windowIconChanged_CrystalProc_void__const_QIcon_R_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_CONNECT_windowIconTextChanged_CrystalProc_void__const_QString_R_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_CONNECT_customContextMenuRequested_CrystalProc_void__const_QPoint_R_(_self_ : QWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QWidget_devType_SUPER_(_self_ : QWidget*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QWidget*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QWidget*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QWidget*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QWidget*) : QPaintEngine*
    fun bg_QWidget_event_SUPER_QEvent_X(_self_ : QWidget*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QWidget*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QWidget*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_SUPER_QEvent_X(_self_ : QWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QWidget*, next_ : Bool) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QWidget*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QWidget*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QWidget*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QWidget*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QWidget*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QWidget*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QWidget_JUMPTABLE_BgJumptable_QWidget_R(_self_ : QWidget*, table : BgJumptable_QWidget*) : Void
    fun bg_QAbstractButton_metaObject_(_self_ : QAbstractButton*) : QMetaObject*
    fun bg_QAbstractButton_qt_metacast_const_char_X(_self_ : QAbstractButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractButton_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractButton__CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractButton*
    fun bg_QAbstractButton_setText_const_QString_R(_self_ : QAbstractButton*, text : CrystalString) : Void
    fun bg_QAbstractButton_text_(_self_ : QAbstractButton*) : CrystalString
    fun bg_QAbstractButton_setIcon_const_QIcon_R(_self_ : QAbstractButton*, icon : QIcon*) : Void
    fun bg_QAbstractButton_icon_(_self_ : QAbstractButton*) : QIcon*
    fun bg_QAbstractButton_iconSize_(_self_ : QAbstractButton*) : QSize*
    fun bg_QAbstractButton_setShortcut_const_QKeySequence_R(_self_ : QAbstractButton*, key : QKeySequence*) : Void
    fun bg_QAbstractButton_shortcut_(_self_ : QAbstractButton*) : QKeySequence*
    fun bg_QAbstractButton_setCheckable_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_isCheckable_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_isChecked_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_setDown_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_isDown_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_setAutoRepeat_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_autoRepeat_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_setAutoRepeatDelay_int(_self_ : QAbstractButton*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractButton_autoRepeatDelay_(_self_ : QAbstractButton*) : Int32
    fun bg_QAbstractButton_setAutoRepeatInterval_int(_self_ : QAbstractButton*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractButton_autoRepeatInterval_(_self_ : QAbstractButton*) : Int32
    fun bg_QAbstractButton_setAutoExclusive_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_autoExclusive_(_self_ : QAbstractButton*) : Bool
    fun bg_QAbstractButton_group_(_self_ : QAbstractButton*) : QButtonGroup*
    fun bg_QAbstractButton_setIconSize_const_QSize_R(_self_ : QAbstractButton*, size : QSize*) : Void
    fun bg_QAbstractButton_animateClick_int(_self_ : QAbstractButton*, msec : Int32) : Void
    fun bg_QAbstractButton_click_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_toggle_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_setChecked_bool(_self_ : QAbstractButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractButton_pressed_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_released_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_clicked_bool(_self_ : QAbstractButton*, checked : Bool) : Void
    fun bg_QAbstractButton_toggled_bool(_self_ : QAbstractButton*, checked : Bool) : Void
    fun bg_QAbstractButton_paintEvent_QPaintEvent_X(_self_ : QAbstractButton*, e : QPaintEvent*) : Void
    fun bg_QAbstractButton_hitButton_const_QPoint_R(_self_ : QAbstractButton*, pos : QPoint) : Bool
    fun bg_QAbstractButton_checkStateSet_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_nextCheckState_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_event_QEvent_X(_self_ : QAbstractButton*, e : QEvent*) : Bool
    fun bg_QAbstractButton_keyPressEvent_QKeyEvent_X(_self_ : QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_QFocusEvent_X(_self_ : QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_QFocusEvent_X(_self_ : QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_QEvent_X(_self_ : QAbstractButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_QTimerEvent_X(_self_ : QAbstractButton*, e : QTimerEvent*) : Void
    fun bg_QAbstractButton__CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(dd : QAbstractButtonPrivate*, parent : QWidget*) : QAbstractButton*
    fun bg_QWidget_devType_(_self_ : QAbstractButton*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QAbstractButton*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QAbstractButton*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QAbstractButton*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QAbstractButton*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QAbstractButton*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QAbstractButton*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QAbstractButton*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QAbstractButton*, event : QWheelEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QAbstractButton*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QAbstractButton*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QAbstractButton*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QAbstractButton*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QAbstractButton*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QAbstractButton*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QAbstractButton*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QAbstractButton*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QAbstractButton*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QAbstractButton*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QAbstractButton*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QAbstractButton*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QAbstractButton*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QAbstractButton*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QAbstractButton*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QAbstractButton*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QAbstractButton*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QAbstractButton*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QAbstractButton*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QAbstractButton*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QAbstractButton*, next_ : Bool) : Bool
    fun bg_QAbstractButton_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractButton_CONNECT_pressed_CrystalProc_void_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_CONNECT_released_CrystalProc_void_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_CONNECT_clicked_CrystalProc_void__bool_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_CONNECT_toggled_CrystalProc_void__bool_(_self_ : QAbstractButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractButton_hitButton_SUPER_const_QPoint_R(_self_ : QAbstractButton*, pos : QPoint) : Bool
    fun bg_QAbstractButton_checkStateSet_SUPER_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_nextCheckState_SUPER_(_self_ : QAbstractButton*) : Void
    fun bg_QAbstractButton_event_SUPER_QEvent_X(_self_ : QAbstractButton*, e : QEvent*) : Bool
    fun bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QAbstractButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QAbstractButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(_self_ : QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QAbstractButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_SUPER_QEvent_X(_self_ : QAbstractButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractButton*, e : QTimerEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QAbstractButton*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QAbstractButton*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QAbstractButton*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QAbstractButton*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QAbstractButton*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QAbstractButton*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QAbstractButton*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QAbstractButton*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QAbstractButton*, event : QWheelEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QAbstractButton*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QAbstractButton*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QAbstractButton*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QAbstractButton*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QAbstractButton*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QAbstractButton*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QAbstractButton*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QAbstractButton*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QAbstractButton*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QAbstractButton*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QAbstractButton*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QAbstractButton*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QAbstractButton*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QAbstractButton*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QAbstractButton*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QAbstractButton*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QAbstractButton*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QAbstractButton*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QAbstractButton*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QAbstractButton*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QAbstractButton*, next_ : Bool) : Bool
    fun bg_BgInherit_QAbstractButton_JUMPTABLE_BgJumptable_QAbstractButton_R(_self_ : QAbstractButton*, table : BgJumptable_QAbstractButton*) : Void
    fun bg_QAbstractSpinBox_metaObject_(_self_ : QAbstractSpinBox*) : QMetaObject*
    fun bg_QAbstractSpinBox_qt_metacast_const_char_X(_self_ : QAbstractSpinBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractSpinBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractSpinBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractSpinBox__CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractSpinBox*
    fun bg_QAbstractSpinBox_buttonSymbols_(_self_ : QAbstractSpinBox*) : AbstractSpinBox::ButtonSymbols
    fun bg_QAbstractSpinBox_setButtonSymbols_QAbstractSpinBox__ButtonSymbols(_self_ : QAbstractSpinBox*, bs : AbstractSpinBox::ButtonSymbols) : Void
    fun bg_QAbstractSpinBox_setCorrectionMode_QAbstractSpinBox__CorrectionMode(_self_ : QAbstractSpinBox*, cm : AbstractSpinBox::CorrectionMode) : Void
    fun bg_QAbstractSpinBox_correctionMode_(_self_ : QAbstractSpinBox*) : AbstractSpinBox::CorrectionMode
    fun bg_QAbstractSpinBox_hasAcceptableInput_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_text_(_self_ : QAbstractSpinBox*) : CrystalString
    fun bg_QAbstractSpinBox_specialValueText_(_self_ : QAbstractSpinBox*) : CrystalString
    fun bg_QAbstractSpinBox_setSpecialValueText_const_QString_R(_self_ : QAbstractSpinBox*, txt : CrystalString) : Void
    fun bg_QAbstractSpinBox_wrapping_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setWrapping_bool(_self_ : QAbstractSpinBox*, w : Bool) : Void
    fun bg_QAbstractSpinBox_setReadOnly_bool(_self_ : QAbstractSpinBox*, r : Bool) : Void
    fun bg_QAbstractSpinBox_isReadOnly_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setKeyboardTracking_bool(_self_ : QAbstractSpinBox*, kt : Bool) : Void
    fun bg_QAbstractSpinBox_keyboardTracking_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setAlignment_Qt__Alignment(_self_ : QAbstractSpinBox*, flag : Alignment) : Void
    fun bg_QAbstractSpinBox_alignment_(_self_ : QAbstractSpinBox*) : Alignment
    fun bg_QAbstractSpinBox_setFrame_bool(_self_ : QAbstractSpinBox*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSpinBox_hasFrame_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setAccelerated_bool(_self_ : QAbstractSpinBox*, on : Bool) : Void
    fun bg_QAbstractSpinBox_isAccelerated_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_setGroupSeparatorShown_bool(_self_ : QAbstractSpinBox*, shown : Bool) : Void
    fun bg_QAbstractSpinBox_isGroupSeparatorShown_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QAbstractSpinBox_sizeHint_(_self_ : QAbstractSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_(_self_ : QAbstractSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_interpretText_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_event_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Bool
    fun bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(_self_ : QAbstractSpinBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_stepBy_int(_self_ : QAbstractSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_stepUp_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_stepDown_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_selectAll_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_clear_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(_self_ : QAbstractSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(_self_ : QAbstractSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(_self_ : QAbstractSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(_self_ : QAbstractSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(_self_ : QAbstractSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(_self_ : QAbstractSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(_self_ : QAbstractSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(_self_ : QAbstractSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_QHideEvent_X(_self_ : QAbstractSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(_self_ : QAbstractSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(_self_ : QAbstractSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_QShowEvent_X(_self_ : QAbstractSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_initStyleOption_QStyleOptionSpinBox_X(_self_ : QAbstractSpinBox*, option : QStyleOptionSpinBox*) : Void
    fun bg_QAbstractSpinBox_lineEdit_(_self_ : QAbstractSpinBox*) : QLineEdit*
    fun bg_QAbstractSpinBox_setLineEdit_QLineEdit_X(_self_ : QAbstractSpinBox*, edit : QLineEdit*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_(_self_ : QAbstractSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_QAbstractSpinBox_editingFinished_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox__CONSTRUCT_QAbstractSpinBoxPrivate_R_QWidget_X(dd : QAbstractSpinBoxPrivate*, parent : QWidget*) : QAbstractSpinBox*
    fun bg_QWidget_devType_(_self_ : QAbstractSpinBox*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QAbstractSpinBox*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : QAbstractSpinBox*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QAbstractSpinBox*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QAbstractSpinBox*, event : QMoveEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QAbstractSpinBox*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QAbstractSpinBox*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QAbstractSpinBox*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QAbstractSpinBox*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QAbstractSpinBox*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QAbstractSpinBox*, event : QDropEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QAbstractSpinBox*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QAbstractSpinBox*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QAbstractSpinBox*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QAbstractSpinBox*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QAbstractSpinBox*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QAbstractSpinBox*, next_ : Bool) : Bool
    fun bg_QAbstractSpinBox_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractSpinBox_CONNECT_editingFinished_CrystalProc_void_(_self_ : QAbstractSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSpinBox_sizeHint_SUPER_(_self_ : QAbstractSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_SUPER_(_self_ : QAbstractSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_event_SUPER_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Bool
    fun bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QAbstractSpinBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_stepBy_SUPER_int(_self_ : QAbstractSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_clear_SUPER_(_self_ : QAbstractSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(_self_ : QAbstractSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QAbstractSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QAbstractSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_SUPER_QWheelEvent_X(_self_ : QAbstractSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_SUPER_QFocusEvent_X(_self_ : QAbstractSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QAbstractSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QAbstractSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(_self_ : QAbstractSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(_self_ : QAbstractSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_SUPER_QPaintEvent_X(_self_ : QAbstractSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(_self_ : QAbstractSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_SUPER_(_self_ : QAbstractSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_QWidget_devType_SUPER_(_self_ : QAbstractSpinBox*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QAbstractSpinBox*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QAbstractSpinBox*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QAbstractSpinBox*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QAbstractSpinBox*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSpinBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QAbstractSpinBox*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QAbstractSpinBox*, event : QMoveEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QAbstractSpinBox*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QAbstractSpinBox*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QAbstractSpinBox*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QAbstractSpinBox*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QAbstractSpinBox*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QAbstractSpinBox*, event : QDropEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QAbstractSpinBox*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QAbstractSpinBox*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QAbstractSpinBox*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QAbstractSpinBox*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QAbstractSpinBox*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QAbstractSpinBox*, next_ : Bool) : Bool
    fun bg_BgInherit_QAbstractSpinBox_JUMPTABLE_BgJumptable_QAbstractSpinBox_R(_self_ : QAbstractSpinBox*, table : BgJumptable_QAbstractSpinBox*) : Void
    fun bg_QAbstractSlider_metaObject_(_self_ : QAbstractSlider*) : QMetaObject*
    fun bg_QAbstractSlider_qt_metacast_const_char_X(_self_ : QAbstractSlider*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractSlider*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractSlider_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractSlider__CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractSlider*
    fun bg_QAbstractSlider_orientation_(_self_ : QAbstractSlider*) : Orientation
    fun bg_QAbstractSlider_setMinimum_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_minimum_(_self_ : QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setMaximum_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_maximum_(_self_ : QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setSingleStep_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_singleStep_(_self_ : QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setPageStep_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_pageStep_(_self_ : QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setTracking_bool(_self_ : QAbstractSlider*, enable : Bool) : Void
    fun bg_QAbstractSlider_hasTracking_(_self_ : QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_setSliderDown_bool(_self_ : QAbstractSlider*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSlider_isSliderDown_(_self_ : QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_setSliderPosition_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_sliderPosition_(_self_ : QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_setInvertedAppearance_bool(_self_ : QAbstractSlider*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSlider_invertedAppearance_(_self_ : QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_setInvertedControls_bool(_self_ : QAbstractSlider*, unnamed_arg_0 : Bool) : Void
    fun bg_QAbstractSlider_invertedControls_(_self_ : QAbstractSlider*) : Bool
    fun bg_QAbstractSlider_value_(_self_ : QAbstractSlider*) : Int32
    fun bg_QAbstractSlider_triggerAction_QAbstractSlider__SliderAction(_self_ : QAbstractSlider*, action : AbstractSlider::SliderAction) : Void
    fun bg_QAbstractSlider_setValue_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Void
    fun bg_QAbstractSlider_setOrientation_Qt__Orientation(_self_ : QAbstractSlider*, unnamed_arg_0 : Orientation) : Void
    fun bg_QAbstractSlider_setRange_int_int(_self_ : QAbstractSlider*, min : Int32, max : Int32) : Void
    fun bg_QAbstractSlider_valueChanged_int(_self_ : QAbstractSlider*, value : Int32) : Void
    fun bg_QAbstractSlider_sliderPressed_(_self_ : QAbstractSlider*) : Void
    fun bg_QAbstractSlider_sliderMoved_int(_self_ : QAbstractSlider*, position : Int32) : Void
    fun bg_QAbstractSlider_sliderReleased_(_self_ : QAbstractSlider*) : Void
    fun bg_QAbstractSlider_rangeChanged_int_int(_self_ : QAbstractSlider*, min : Int32, max : Int32) : Void
    fun bg_QAbstractSlider_actionTriggered_int(_self_ : QAbstractSlider*, action : Int32) : Void
    fun bg_QAbstractSlider_event_QEvent_X(_self_ : QAbstractSlider*, e : QEvent*) : Bool
    fun bg_QAbstractSlider_setRepeatAction_QAbstractSlider__SliderAction_int_int(_self_ : QAbstractSlider*, action : AbstractSlider::SliderAction, threshold_time : Int32, repeat_time : Int32) : Void
    fun bg_QAbstractSlider_repeatAction_(_self_ : QAbstractSlider*) : AbstractSlider::SliderAction
    fun bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(_self_ : QAbstractSlider*, change : AbstractSlider::SliderChange) : Void
    fun bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(_self_ : QAbstractSlider*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_QTimerEvent_X(_self_ : QAbstractSlider*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_QWheelEvent_X(_self_ : QAbstractSlider*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_QEvent_X(_self_ : QAbstractSlider*, e : QEvent*) : Void
    fun bg_QAbstractSlider__CONSTRUCT_QAbstractSliderPrivate_R_QWidget_X(dd : QAbstractSliderPrivate*, parent : QWidget*) : QAbstractSlider*
    fun bg_QWidget_devType_(_self_ : QAbstractSlider*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QAbstractSlider*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QAbstractSlider*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QAbstractSlider*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QAbstractSlider*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QAbstractSlider*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QAbstractSlider*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QAbstractSlider*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QAbstractSlider*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QAbstractSlider*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QAbstractSlider*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : QAbstractSlider*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QAbstractSlider*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QAbstractSlider*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QAbstractSlider*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QAbstractSlider*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QAbstractSlider*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QAbstractSlider*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QAbstractSlider*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QAbstractSlider*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QAbstractSlider*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QAbstractSlider*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QAbstractSlider*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QAbstractSlider*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QAbstractSlider*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QAbstractSlider*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QAbstractSlider*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QAbstractSlider*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QAbstractSlider*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QAbstractSlider*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QAbstractSlider*, next_ : Bool) : Bool
    fun bg_QAbstractSlider_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractSlider_CONNECT_valueChanged_CrystalProc_void__int_(_self_ : QAbstractSlider*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSlider_CONNECT_sliderPressed_CrystalProc_void_(_self_ : QAbstractSlider*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSlider_CONNECT_sliderMoved_CrystalProc_void__int_(_self_ : QAbstractSlider*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSlider_CONNECT_sliderReleased_CrystalProc_void_(_self_ : QAbstractSlider*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSlider_CONNECT_rangeChanged_CrystalProc_void__int__int_(_self_ : QAbstractSlider*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSlider_CONNECT_actionTriggered_CrystalProc_void__int_(_self_ : QAbstractSlider*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractSlider_event_SUPER_QEvent_X(_self_ : QAbstractSlider*, e : QEvent*) : Bool
    fun bg_QAbstractSlider_sliderChange_SUPER_QAbstractSlider__SliderChange(_self_ : QAbstractSlider*, change : AbstractSlider::SliderChange) : Void
    fun bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QAbstractSlider*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractSlider*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_SUPER_QWheelEvent_X(_self_ : QAbstractSlider*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(_self_ : QAbstractSlider*, e : QEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QAbstractSlider*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QAbstractSlider*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QAbstractSlider*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QAbstractSlider*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QAbstractSlider*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QAbstractSlider*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QAbstractSlider*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QAbstractSlider*, event : QMouseEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QAbstractSlider*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QAbstractSlider*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QAbstractSlider*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QAbstractSlider*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QAbstractSlider*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QAbstractSlider*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QAbstractSlider*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QAbstractSlider*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QAbstractSlider*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QAbstractSlider*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QAbstractSlider*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QAbstractSlider*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QAbstractSlider*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QAbstractSlider*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QAbstractSlider*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QAbstractSlider*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QAbstractSlider*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QAbstractSlider*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QAbstractSlider*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QAbstractSlider*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QAbstractSlider*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QAbstractSlider*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QAbstractSlider*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QAbstractSlider*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QAbstractSlider*, next_ : Bool) : Bool
    fun bg_BgInherit_QAbstractSlider_JUMPTABLE_BgJumptable_QAbstractSlider_R(_self_ : QAbstractSlider*, table : BgJumptable_QAbstractSlider*) : Void
    fun bg_QSlider_metaObject_(_self_ : QSlider*) : QMetaObject*
    fun bg_QSlider_qt_metacast_const_char_X(_self_ : QSlider*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QSlider*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSlider_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QSlider_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QSlider_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QSlider__CONSTRUCT_QWidget_X(parent : QWidget*) : QSlider*
    fun bg_QSlider__CONSTRUCT_Qt__Orientation_QWidget_X(orientation : Orientation, parent : QWidget*) : QSlider*
    fun bg_QSlider_sizeHint_(_self_ : QSlider*) : QSize*
    fun bg_QSlider_minimumSizeHint_(_self_ : QSlider*) : QSize*
    fun bg_QSlider_setTickPosition_QSlider__TickPosition(_self_ : QSlider*, position : Slider::TickPosition) : Void
    fun bg_QSlider_tickPosition_(_self_ : QSlider*) : Slider::TickPosition
    fun bg_QSlider_setTickInterval_int(_self_ : QSlider*, ti : Int32) : Void
    fun bg_QSlider_tickInterval_(_self_ : QSlider*) : Int32
    fun bg_QSlider_event_QEvent_X(_self_ : QSlider*, event : QEvent*) : Bool
    fun bg_QSlider_paintEvent_QPaintEvent_X(_self_ : QSlider*, ev : QPaintEvent*) : Void
    fun bg_QSlider_mousePressEvent_QMouseEvent_X(_self_ : QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_mouseReleaseEvent_QMouseEvent_X(_self_ : QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_mouseMoveEvent_QMouseEvent_X(_self_ : QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_initStyleOption_QStyleOptionSlider_X(_self_ : QSlider*, option : QStyleOptionSlider*) : Void
    fun bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(_self_ : QSlider*, change : AbstractSlider::SliderChange) : Void
    fun bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(_self_ : QSlider*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_QTimerEvent_X(_self_ : QSlider*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_QWheelEvent_X(_self_ : QSlider*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_QEvent_X(_self_ : QSlider*, e : QEvent*) : Void
    fun bg_QSlider_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QSlider_sizeHint_SUPER_(_self_ : QSlider*) : QSize*
    fun bg_QSlider_minimumSizeHint_SUPER_(_self_ : QSlider*) : QSize*
    fun bg_QSlider_event_SUPER_QEvent_X(_self_ : QSlider*, event : QEvent*) : Bool
    fun bg_QSlider_paintEvent_SUPER_QPaintEvent_X(_self_ : QSlider*, ev : QPaintEvent*) : Void
    fun bg_QSlider_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QSlider*, ev : QMouseEvent*) : Void
    fun bg_QSlider_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QSlider*, ev : QMouseEvent*) : Void
    fun bg_QAbstractSlider_sliderChange_SUPER_QAbstractSlider__SliderChange(_self_ : QSlider*, change : AbstractSlider::SliderChange) : Void
    fun bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QSlider*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(_self_ : QSlider*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_SUPER_QWheelEvent_X(_self_ : QSlider*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(_self_ : QSlider*, e : QEvent*) : Void
    fun bg_BgInherit_QSlider_JUMPTABLE_BgJumptable_QSlider_R(_self_ : QSlider*, table : BgJumptable_QSlider*) : Void
    fun bg_QTabBar_metaObject_(_self_ : QTabBar*) : QMetaObject*
    fun bg_QTabBar_qt_metacast_const_char_X(_self_ : QTabBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTabBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTabBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTabBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTabBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTabBar__CONSTRUCT_QWidget_X(parent : QWidget*) : QTabBar*
    fun bg_QTabBar_shape_(_self_ : QTabBar*) : TabBar::Shape
    fun bg_QTabBar_setShape_QTabBar__Shape(_self_ : QTabBar*, shape : TabBar::Shape) : Void
    fun bg_QTabBar_addTab_const_QString_R(_self_ : QTabBar*, text : CrystalString) : Int32
    fun bg_QTabBar_addTab_const_QIcon_R_const_QString_R(_self_ : QTabBar*, icon : QIcon*, text : CrystalString) : Int32
    fun bg_QTabBar_insertTab_int_const_QString_R(_self_ : QTabBar*, index : Int32, text : CrystalString) : Int32
    fun bg_QTabBar_insertTab_int_const_QIcon_R_const_QString_R(_self_ : QTabBar*, index : Int32, icon : QIcon*, text : CrystalString) : Int32
    fun bg_QTabBar_removeTab_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_moveTab_int_int(_self_ : QTabBar*, from : Int32, to : Int32) : Void
    fun bg_QTabBar_isTabEnabled_int(_self_ : QTabBar*, index : Int32) : Bool
    fun bg_QTabBar_setTabEnabled_int_bool(_self_ : QTabBar*, index : Int32, enabled : Bool) : Void
    fun bg_QTabBar_isTabVisible_int(_self_ : QTabBar*, index : Int32) : Bool
    fun bg_QTabBar_setTabVisible_int_bool(_self_ : QTabBar*, index : Int32, visible : Bool) : Void
    fun bg_QTabBar_tabText_int(_self_ : QTabBar*, index : Int32) : CrystalString
    fun bg_QTabBar_setTabText_int_const_QString_R(_self_ : QTabBar*, index : Int32, text : CrystalString) : Void
    fun bg_QTabBar_tabTextColor_int(_self_ : QTabBar*, index : Int32) : QColor*
    fun bg_QTabBar_setTabTextColor_int_const_QColor_R(_self_ : QTabBar*, index : Int32, color : QColor*) : Void
    fun bg_QTabBar_tabIcon_int(_self_ : QTabBar*, index : Int32) : QIcon*
    fun bg_QTabBar_setTabIcon_int_const_QIcon_R(_self_ : QTabBar*, index : Int32, icon : QIcon*) : Void
    fun bg_QTabBar_elideMode_(_self_ : QTabBar*) : TextElideMode
    fun bg_QTabBar_setElideMode_Qt__TextElideMode(_self_ : QTabBar*, mode : TextElideMode) : Void
    fun bg_QTabBar_setTabToolTip_int_const_QString_R(_self_ : QTabBar*, index : Int32, tip : CrystalString) : Void
    fun bg_QTabBar_tabToolTip_int(_self_ : QTabBar*, index : Int32) : CrystalString
    fun bg_QTabBar_setTabWhatsThis_int_const_QString_R(_self_ : QTabBar*, index : Int32, text : CrystalString) : Void
    fun bg_QTabBar_tabWhatsThis_int(_self_ : QTabBar*, index : Int32) : CrystalString
    fun bg_QTabBar_setTabData_int_const_QVariant_R(_self_ : QTabBar*, index : Int32, data : CrystalVariant) : Void
    fun bg_QTabBar_tabData_int(_self_ : QTabBar*, index : Int32) : CrystalVariant
    fun bg_QTabBar_tabRect_int(_self_ : QTabBar*, index : Int32) : QRect*
    fun bg_QTabBar_tabAt_const_QPoint_R(_self_ : QTabBar*, pos : QPoint) : Int32
    fun bg_QTabBar_currentIndex_(_self_ : QTabBar*) : Int32
    fun bg_QTabBar_count_(_self_ : QTabBar*) : Int32
    fun bg_QTabBar_sizeHint_(_self_ : QTabBar*) : QSize*
    fun bg_QTabBar_minimumSizeHint_(_self_ : QTabBar*) : QSize*
    fun bg_QTabBar_setDrawBase_bool(_self_ : QTabBar*, draw_the_base : Bool) : Void
    fun bg_QTabBar_drawBase_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_iconSize_(_self_ : QTabBar*) : QSize*
    fun bg_QTabBar_setIconSize_const_QSize_R(_self_ : QTabBar*, size : QSize*) : Void
    fun bg_QTabBar_usesScrollButtons_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setUsesScrollButtons_bool(_self_ : QTabBar*, use_buttons : Bool) : Void
    fun bg_QTabBar_tabsClosable_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setTabsClosable_bool(_self_ : QTabBar*, closable : Bool) : Void
    fun bg_QTabBar_setTabButton_int_QTabBar__ButtonPosition_QWidget_X(_self_ : QTabBar*, index : Int32, position : TabBar::ButtonPosition, widget : QWidget*) : Void
    fun bg_QTabBar_tabButton_int_QTabBar__ButtonPosition(_self_ : QTabBar*, index : Int32, position : TabBar::ButtonPosition) : QWidget*
    fun bg_QTabBar_selectionBehaviorOnRemove_(_self_ : QTabBar*) : TabBar::SelectionBehavior
    fun bg_QTabBar_setSelectionBehaviorOnRemove_QTabBar__SelectionBehavior(_self_ : QTabBar*, behavior : TabBar::SelectionBehavior) : Void
    fun bg_QTabBar_expanding_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setExpanding_bool(_self_ : QTabBar*, enabled : Bool) : Void
    fun bg_QTabBar_isMovable_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setMovable_bool(_self_ : QTabBar*, movable : Bool) : Void
    fun bg_QTabBar_documentMode_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setDocumentMode_bool(_self_ : QTabBar*, set : Bool) : Void
    fun bg_QTabBar_autoHide_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setAutoHide_bool(_self_ : QTabBar*, hide : Bool) : Void
    fun bg_QTabBar_changeCurrentOnDrag_(_self_ : QTabBar*) : Bool
    fun bg_QTabBar_setChangeCurrentOnDrag_bool(_self_ : QTabBar*, change : Bool) : Void
    fun bg_QTabBar_accessibleTabName_int(_self_ : QTabBar*, index : Int32) : CrystalString
    fun bg_QTabBar_setAccessibleTabName_int_const_QString_R(_self_ : QTabBar*, index : Int32, name : CrystalString) : Void
    fun bg_QTabBar_setCurrentIndex_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_currentChanged_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabCloseRequested_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabMoved_int_int(_self_ : QTabBar*, from : Int32, to : Int32) : Void
    fun bg_QTabBar_tabBarClicked_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabBarDoubleClicked_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabSizeHint_int(_self_ : QTabBar*, index : Int32) : QSize*
    fun bg_QTabBar_minimumTabSizeHint_int(_self_ : QTabBar*, index : Int32) : QSize*
    fun bg_QTabBar_tabInserted_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabRemoved_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabLayoutChange_(_self_ : QTabBar*) : Void
    fun bg_QTabBar_event_QEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QTabBar_resizeEvent_QResizeEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabBar_showEvent_QShowEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabBar_hideEvent_QHideEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QTabBar_paintEvent_QPaintEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabBar_mousePressEvent_QMouseEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_mouseMoveEvent_QMouseEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_mouseReleaseEvent_QMouseEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_wheelEvent_QWheelEvent_X(_self_ : QTabBar*, event : QWheelEvent*) : Void
    fun bg_QTabBar_keyPressEvent_QKeyEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabBar_changeEvent_QEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabBar_timerEvent_QTimerEvent_X(_self_ : QTabBar*, event : QTimerEvent*) : Void
    fun bg_QTabBar_initStyleOption_QStyleOptionTab_X_int(_self_ : QTabBar*, option : QStyleOptionTab*, tab_index : Int32) : Void
    fun bg_QWidget_devType_(_self_ : QTabBar*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QTabBar*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : QTabBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QTabBar*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QTabBar*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QTabBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QTabBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QTabBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QTabBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QTabBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QTabBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QTabBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QTabBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QTabBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QTabBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QTabBar*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QTabBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QTabBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QTabBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QTabBar*, event : QDropEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QTabBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QTabBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QTabBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QTabBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QTabBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QTabBar*, next_ : Bool) : Bool
    fun bg_QTabBar_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTabBar_CONNECT_currentChanged_CrystalProc_void__int_(_self_ : QTabBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabBar_CONNECT_tabCloseRequested_CrystalProc_void__int_(_self_ : QTabBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabBar_CONNECT_tabMoved_CrystalProc_void__int__int_(_self_ : QTabBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabBar_CONNECT_tabBarClicked_CrystalProc_void__int_(_self_ : QTabBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabBar_CONNECT_tabBarDoubleClicked_CrystalProc_void__int_(_self_ : QTabBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabBar_sizeHint_SUPER_(_self_ : QTabBar*) : QSize*
    fun bg_QTabBar_minimumSizeHint_SUPER_(_self_ : QTabBar*) : QSize*
    fun bg_QTabBar_tabSizeHint_SUPER_int(_self_ : QTabBar*, index : Int32) : QSize*
    fun bg_QTabBar_minimumTabSizeHint_SUPER_int(_self_ : QTabBar*, index : Int32) : QSize*
    fun bg_QTabBar_tabInserted_SUPER_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabRemoved_SUPER_int(_self_ : QTabBar*, index : Int32) : Void
    fun bg_QTabBar_tabLayoutChange_SUPER_(_self_ : QTabBar*) : Void
    fun bg_QTabBar_event_SUPER_QEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QTabBar_resizeEvent_SUPER_QResizeEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabBar_showEvent_SUPER_QShowEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabBar_hideEvent_SUPER_QHideEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QTabBar_paintEvent_SUPER_QPaintEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabBar_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QTabBar_wheelEvent_SUPER_QWheelEvent_X(_self_ : QTabBar*, event : QWheelEvent*) : Void
    fun bg_QTabBar_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabBar_changeEvent_SUPER_QEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabBar_timerEvent_SUPER_QTimerEvent_X(_self_ : QTabBar*, event : QTimerEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QTabBar*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QTabBar*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QTabBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QTabBar*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QTabBar*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QTabBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QTabBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QTabBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QTabBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QTabBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QTabBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QTabBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QTabBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QTabBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QTabBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QTabBar*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QTabBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QTabBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QTabBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QTabBar*, event : QDropEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QTabBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QTabBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QTabBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QTabBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QTabBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QTabBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QTabBar*, next_ : Bool) : Bool
    fun bg_BgInherit_QTabBar_JUMPTABLE_BgJumptable_QTabBar_R(_self_ : QTabBar*, table : BgJumptable_QTabBar*) : Void
    fun bg_QTabWidget_metaObject_(_self_ : QTabWidget*) : QMetaObject*
    fun bg_QTabWidget_qt_metacast_const_char_X(_self_ : QTabWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTabWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTabWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTabWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTabWidget__CONSTRUCT_QWidget_X(parent : QWidget*) : QTabWidget*
    fun bg_QTabWidget_addTab_QWidget_X_const_QString_R(_self_ : QTabWidget*, widget : QWidget*, unnamed_arg_1 : CrystalString) : Int32
    fun bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(_self_ : QTabWidget*, widget : QWidget*, icon : QIcon*, label : CrystalString) : Int32
    fun bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(_self_ : QTabWidget*, index : Int32, widget : QWidget*, unnamed_arg_2 : CrystalString) : Int32
    fun bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(_self_ : QTabWidget*, index : Int32, widget : QWidget*, icon : QIcon*, label : CrystalString) : Int32
    fun bg_QTabWidget_removeTab_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_isTabEnabled_int(_self_ : QTabWidget*, index : Int32) : Bool
    fun bg_QTabWidget_setTabEnabled_int_bool(_self_ : QTabWidget*, index : Int32, enabled : Bool) : Void
    fun bg_QTabWidget_isTabVisible_int(_self_ : QTabWidget*, index : Int32) : Bool
    fun bg_QTabWidget_setTabVisible_int_bool(_self_ : QTabWidget*, index : Int32, visible : Bool) : Void
    fun bg_QTabWidget_tabText_int(_self_ : QTabWidget*, index : Int32) : CrystalString
    fun bg_QTabWidget_setTabText_int_const_QString_R(_self_ : QTabWidget*, index : Int32, text : CrystalString) : Void
    fun bg_QTabWidget_tabIcon_int(_self_ : QTabWidget*, index : Int32) : QIcon*
    fun bg_QTabWidget_setTabIcon_int_const_QIcon_R(_self_ : QTabWidget*, index : Int32, icon : QIcon*) : Void
    fun bg_QTabWidget_setTabToolTip_int_const_QString_R(_self_ : QTabWidget*, index : Int32, tip : CrystalString) : Void
    fun bg_QTabWidget_tabToolTip_int(_self_ : QTabWidget*, index : Int32) : CrystalString
    fun bg_QTabWidget_setTabWhatsThis_int_const_QString_R(_self_ : QTabWidget*, index : Int32, text : CrystalString) : Void
    fun bg_QTabWidget_tabWhatsThis_int(_self_ : QTabWidget*, index : Int32) : CrystalString
    fun bg_QTabWidget_currentIndex_(_self_ : QTabWidget*) : Int32
    fun bg_QTabWidget_currentWidget_(_self_ : QTabWidget*) : QWidget*
    fun bg_QTabWidget_widget_int(_self_ : QTabWidget*, index : Int32) : QWidget*
    fun bg_QTabWidget_indexOf_QWidget_X(_self_ : QTabWidget*, widget : QWidget*) : Int32
    fun bg_QTabWidget_count_(_self_ : QTabWidget*) : Int32
    fun bg_QTabWidget_tabPosition_(_self_ : QTabWidget*) : TabWidget::TabPosition
    fun bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(_self_ : QTabWidget*, position : TabWidget::TabPosition) : Void
    fun bg_QTabWidget_tabsClosable_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setTabsClosable_bool(_self_ : QTabWidget*, closeable : Bool) : Void
    fun bg_QTabWidget_isMovable_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setMovable_bool(_self_ : QTabWidget*, movable : Bool) : Void
    fun bg_QTabWidget_tabShape_(_self_ : QTabWidget*) : TabWidget::TabShape
    fun bg_QTabWidget_setTabShape_QTabWidget__TabShape(_self_ : QTabWidget*, s : TabWidget::TabShape) : Void
    fun bg_QTabWidget_sizeHint_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_minimumSizeHint_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_heightForWidth_int(_self_ : QTabWidget*, width : Int32) : Int32
    fun bg_QTabWidget_hasHeightForWidth_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(_self_ : QTabWidget*, w : QWidget*, corner : Corner) : Void
    fun bg_QTabWidget_cornerWidget_Qt__Corner(_self_ : QTabWidget*, corner : Corner) : QWidget*
    fun bg_QTabWidget_elideMode_(_self_ : QTabWidget*) : TextElideMode
    fun bg_QTabWidget_setElideMode_Qt__TextElideMode(_self_ : QTabWidget*, mode : TextElideMode) : Void
    fun bg_QTabWidget_iconSize_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_setIconSize_const_QSize_R(_self_ : QTabWidget*, size : QSize*) : Void
    fun bg_QTabWidget_usesScrollButtons_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setUsesScrollButtons_bool(_self_ : QTabWidget*, use_buttons : Bool) : Void
    fun bg_QTabWidget_documentMode_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setDocumentMode_bool(_self_ : QTabWidget*, set : Bool) : Void
    fun bg_QTabWidget_tabBarAutoHide_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_setTabBarAutoHide_bool(_self_ : QTabWidget*, enabled : Bool) : Void
    fun bg_QTabWidget_clear_(_self_ : QTabWidget*) : Void
    fun bg_QTabWidget_tabBar_(_self_ : QTabWidget*) : QTabBar*
    fun bg_QTabWidget_setCurrentIndex_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_setCurrentWidget_QWidget_X(_self_ : QTabWidget*, widget : QWidget*) : Void
    fun bg_QTabWidget_currentChanged_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabCloseRequested_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabBarClicked_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabBarDoubleClicked_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabInserted_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabRemoved_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_showEvent_QShowEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabWidget_resizeEvent_QResizeEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabWidget_keyPressEvent_QKeyEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabWidget_paintEvent_QPaintEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabWidget_setTabBar_QTabBar_X(_self_ : QTabWidget*, unnamed_arg_0 : QTabBar*) : Void
    fun bg_QTabWidget_changeEvent_QEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabWidget_event_QEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(_self_ : QTabWidget*, option : QStyleOptionTabWidgetFrame*) : Void
    fun bg_QWidget_devType_(_self_ : QTabWidget*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QTabWidget*, visible : Bool) : Void
    fun bg_QWidget_paintEngine_(_self_ : QTabWidget*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QTabWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QTabWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QTabWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QTabWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QTabWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QTabWidget*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QTabWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QTabWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QTabWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QTabWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QTabWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QTabWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QTabWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QTabWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QTabWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QTabWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QTabWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QTabWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QTabWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QTabWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QTabWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QTabWidget*, next_ : Bool) : Bool
    fun bg_QTabWidget_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTabWidget_CONNECT_currentChanged_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_CONNECT_tabCloseRequested_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_CONNECT_tabBarClicked_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_CONNECT_tabBarDoubleClicked_CrystalProc_void__int_(_self_ : QTabWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTabWidget_sizeHint_SUPER_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_minimumSizeHint_SUPER_(_self_ : QTabWidget*) : QSize*
    fun bg_QTabWidget_heightForWidth_SUPER_int(_self_ : QTabWidget*, width : Int32) : Int32
    fun bg_QTabWidget_hasHeightForWidth_SUPER_(_self_ : QTabWidget*) : Bool
    fun bg_QTabWidget_tabInserted_SUPER_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_tabRemoved_SUPER_int(_self_ : QTabWidget*, index : Int32) : Void
    fun bg_QTabWidget_showEvent_SUPER_QShowEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTabWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QTabWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QTabWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QTabWidget_changeEvent_SUPER_QEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QTabWidget_event_SUPER_QEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QTabWidget*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QTabWidget*, visible : Bool) : Void
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QTabWidget*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QTabWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QTabWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QTabWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QTabWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QTabWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QTabWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QTabWidget*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QTabWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QTabWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QTabWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QTabWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QTabWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QTabWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QTabWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QTabWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QTabWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QTabWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QTabWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QTabWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QTabWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QTabWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QTabWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QTabWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QTabWidget*, next_ : Bool) : Bool
    fun bg_BgInherit_QTabWidget_JUMPTABLE_BgJumptable_QTabWidget_R(_self_ : QTabWidget*, table : BgJumptable_QTabWidget*) : Void
    fun bg_QFrame_metaObject_(_self_ : QFrame*) : QMetaObject*
    fun bg_QFrame_qt_metacast_const_char_X(_self_ : QFrame*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QFrame*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QFrame_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFrame_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFrame__CONSTRUCT_QWidget_X(parent : QWidget*) : QFrame*
    fun bg_QFrame__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QFrame*
    fun bg_QFrame_frameStyle_(_self_ : QFrame*) : Int32
    fun bg_QFrame_setFrameStyle_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_frameWidth_(_self_ : QFrame*) : Int32
    fun bg_QFrame_sizeHint_(_self_ : QFrame*) : QSize*
    fun bg_QFrame_frameShape_(_self_ : QFrame*) : Frame::Shape
    fun bg_QFrame_setFrameShape_QFrame__Shape(_self_ : QFrame*, unnamed_arg_0 : Frame::Shape) : Void
    fun bg_QFrame_frameShadow_(_self_ : QFrame*) : Frame::Shadow
    fun bg_QFrame_setFrameShadow_QFrame__Shadow(_self_ : QFrame*, unnamed_arg_0 : Frame::Shadow) : Void
    fun bg_QFrame_lineWidth_(_self_ : QFrame*) : Int32
    fun bg_QFrame_setLineWidth_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_midLineWidth_(_self_ : QFrame*) : Int32
    fun bg_QFrame_setMidLineWidth_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Void
    fun bg_QFrame_frameRect_(_self_ : QFrame*) : QRect*
    fun bg_QFrame_setFrameRect_const_QRect_R(_self_ : QFrame*, unnamed_arg_0 : QRect*) : Void
    fun bg_QFrame_event_QEvent_X(_self_ : QFrame*, e : QEvent*) : Bool
    fun bg_QFrame_paintEvent_QPaintEvent_X(_self_ : QFrame*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QFrame_changeEvent_QEvent_X(_self_ : QFrame*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QFrame_drawFrame_QPainter_X(_self_ : QFrame*, unnamed_arg_0 : QPainter*) : Void
    fun bg_QFrame__CONSTRUCT_QFramePrivate_R_QWidget_X(dd : QFramePrivate*, parent : QWidget*) : QFrame*
    fun bg_QFrame__CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(dd : QFramePrivate*, parent : QWidget*, f : WindowFlags) : QFrame*
    fun bg_QFrame_initStyleOption_QStyleOptionFrame_X(_self_ : QFrame*, option : QStyleOptionFrame*) : Void
    fun bg_QWidget_devType_(_self_ : QFrame*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QFrame*, visible : Bool) : Void
    fun bg_QWidget_minimumSizeHint_(_self_ : QFrame*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QFrame*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QFrame*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QFrame*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QFrame*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QFrame*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QFrame*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QFrame*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QFrame*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QFrame*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QFrame*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QFrame*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QFrame*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QFrame*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QFrame*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QFrame*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QFrame*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QFrame*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QFrame*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QFrame*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QFrame*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QFrame*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QFrame*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QFrame*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QFrame*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QFrame*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QFrame*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QFrame*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QFrame*, next_ : Bool) : Bool
    fun bg_QFrame_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QFrame_sizeHint_SUPER_(_self_ : QFrame*) : QSize*
    fun bg_QFrame_event_SUPER_QEvent_X(_self_ : QFrame*, e : QEvent*) : Bool
    fun bg_QFrame_paintEvent_SUPER_QPaintEvent_X(_self_ : QFrame*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QFrame_changeEvent_SUPER_QEvent_X(_self_ : QFrame*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QFrame*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QFrame*, visible : Bool) : Void
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QFrame*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QFrame*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QFrame*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QFrame*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QFrame*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QFrame*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QFrame*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QFrame*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QFrame*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QFrame*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QFrame*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QFrame*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QFrame*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QFrame*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QFrame*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QFrame*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QFrame*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QFrame*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QFrame*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QFrame*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QFrame*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QFrame*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QFrame*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QFrame*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QFrame*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QFrame*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QFrame*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QFrame*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QFrame*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QFrame*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QFrame*, next_ : Bool) : Bool
    fun bg_BgInherit_QFrame_JUMPTABLE_BgJumptable_QFrame_R(_self_ : QFrame*, table : BgJumptable_QFrame*) : Void
    fun bg_QStyleOptionGraphicsItem__CONSTRUCT_() : QStyleOptionGraphicsItem*
    fun bg_QStyleOptionGraphicsItem_levelOfDetailFromTransform_STATIC_const_QTransform_R(world_transform : QTransform*) : Float64
    fun bg_QStyleOptionGraphicsItem__CONSTRUCT_int(version : Int32) : QStyleOptionGraphicsItem*
    fun bg_QStyleOptionGraphicsItem_exposedRect_GETTER_(_self_ : QStyleOptionGraphicsItem*) : QRectF*
    fun bg_QStyleOptionGraphicsItem_exposedRect_SETTER_QRectF(_self_ : QStyleOptionGraphicsItem*, exposed_rect : QRectF*) : Void
    fun bg_QStyleOptionGraphicsItem_matrix_GETTER_(_self_ : QStyleOptionGraphicsItem*) : QMatrix*
    fun bg_QStyleOptionGraphicsItem_matrix_SETTER_QMatrix(_self_ : QStyleOptionGraphicsItem*, matrix : QMatrix*) : Void
    fun bg_QStyleOptionGraphicsItem_levelOfDetail_GETTER_(_self_ : QStyleOptionGraphicsItem*) : Float64
    fun bg_QStyleOptionGraphicsItem_levelOfDetail_SETTER_qreal(_self_ : QStyleOptionGraphicsItem*, level_of_detail : Float64) : Void
    fun bg_QAbstractItemDelegate_metaObject_(_self_ : QAbstractItemDelegate*) : QMetaObject*
    fun bg_QAbstractItemDelegate_qt_metacast_const_char_X(_self_ : QAbstractItemDelegate*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractItemDelegate*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractItemDelegate_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractItemDelegate_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractItemDelegate_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractItemDelegate__CONSTRUCT_QObject_X(parent : QObject*) : QAbstractItemDelegate*
    fun bg_QAbstractItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, painter : QPainter*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, option : QStyleOptionViewItem*, index : QModelIndex*) : QSize*
    fun bg_QAbstractItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, parent : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : QWidget*
    fun bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, model : QAbstractItemModel*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, event : QEvent*, model : QAbstractItemModel*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, event : QHelpEvent*, view : QAbstractItemView*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_paintingRoles_(_self_ : QAbstractItemDelegate*) : ContainerQVectorInt*
    fun bg_QAbstractItemDelegate_commitData_QWidget_X(_self_ : QAbstractItemDelegate*, editor : QWidget*) : Void
    fun bg_QAbstractItemDelegate_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint(_self_ : QAbstractItemDelegate*, editor : QWidget*, hint : AbstractItemDelegate::EndEditHint) : Void
    fun bg_QAbstractItemDelegate_sizeHintChanged_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, unnamed_arg_0 : QModelIndex*) : Void
    fun bg_QObject_event_QEvent_X(_self_ : QAbstractItemDelegate*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QAbstractItemDelegate*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QAbstractItemDelegate*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QAbstractItemDelegate*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QAbstractItemDelegate*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QAbstractItemDelegate*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QAbstractItemDelegate*, signal : QMetaMethod*) : Void
    fun bg_QAbstractItemDelegate_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractItemDelegate_CONNECT_commitData_CrystalProc_void__QWidget_X_(_self_ : QAbstractItemDelegate*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemDelegate_CONNECT_closeEditor_CrystalProc_void__QWidget_X__QAbstractItemDelegate__EndEditHint_(_self_ : QAbstractItemDelegate*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemDelegate_CONNECT_sizeHintChanged_CrystalProc_void__const_QModelIndex_R_(_self_ : QAbstractItemDelegate*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemDelegate_createEditor_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, parent : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : QWidget*
    fun bg_QAbstractItemDelegate_destroyEditor_SUPER_QWidget_X_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_setEditorData_SUPER_QWidget_X_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_setModelData_SUPER_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, model : QAbstractItemModel*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_updateEditorGeometry_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, editor : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_editorEvent_SUPER_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, event : QEvent*, model : QAbstractItemModel*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_helpEvent_SUPER_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QAbstractItemDelegate*, event : QHelpEvent*, view : QAbstractItemView*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_paintingRoles_SUPER_(_self_ : QAbstractItemDelegate*) : ContainerQVectorInt*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QAbstractItemDelegate*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QAbstractItemDelegate*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractItemDelegate*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QAbstractItemDelegate*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QAbstractItemDelegate*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QAbstractItemDelegate*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QAbstractItemDelegate*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QAbstractItemDelegate_JUMPTABLE_BgJumptable_QAbstractItemDelegate_R(_self_ : QAbstractItemDelegate*, table : BgJumptable_QAbstractItemDelegate*) : Void
    fun bg_QAbstractScrollArea_metaObject_(_self_ : QAbstractScrollArea*) : QMetaObject*
    fun bg_QAbstractScrollArea_qt_metacast_const_char_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractScrollArea*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractScrollArea__CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractScrollArea*
    fun bg_QAbstractScrollArea_verticalScrollBarPolicy_(_self_ : QAbstractScrollArea*) : ScrollBarPolicy
    fun bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(_self_ : QAbstractScrollArea*, unnamed_arg_0 : ScrollBarPolicy) : Void
    fun bg_QAbstractScrollArea_verticalScrollBar_(_self_ : QAbstractScrollArea*) : QScrollBar*
    fun bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(_self_ : QAbstractScrollArea*, scrollbar : QScrollBar*) : Void
    fun bg_QAbstractScrollArea_horizontalScrollBarPolicy_(_self_ : QAbstractScrollArea*) : ScrollBarPolicy
    fun bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(_self_ : QAbstractScrollArea*, unnamed_arg_0 : ScrollBarPolicy) : Void
    fun bg_QAbstractScrollArea_horizontalScrollBar_(_self_ : QAbstractScrollArea*) : QScrollBar*
    fun bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(_self_ : QAbstractScrollArea*, scrollbar : QScrollBar*) : Void
    fun bg_QAbstractScrollArea_cornerWidget_(_self_ : QAbstractScrollArea*) : QWidget*
    fun bg_QAbstractScrollArea_setCornerWidget_QWidget_X(_self_ : QAbstractScrollArea*, widget : QWidget*) : Void
    fun bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(_self_ : QAbstractScrollArea*, widget : QWidget*, alignment : Alignment) : Void
    fun bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(_self_ : QAbstractScrollArea*, alignment : Alignment) : QWidgetList*
    fun bg_QAbstractScrollArea_viewport_(_self_ : QAbstractScrollArea*) : QWidget*
    fun bg_QAbstractScrollArea_setViewport_QWidget_X(_self_ : QAbstractScrollArea*, widget : QWidget*) : Void
    fun bg_QAbstractScrollArea_maximumViewportSize_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_QWidget_X(_self_ : QAbstractScrollArea*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_sizeAdjustPolicy_(_self_ : QAbstractScrollArea*) : AbstractScrollArea::SizeAdjustPolicy
    fun bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(_self_ : QAbstractScrollArea*, policy : AbstractScrollArea::SizeAdjustPolicy) : Void
    fun bg_QAbstractScrollArea__CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(dd : QAbstractScrollAreaPrivate*, parent : QWidget*) : QAbstractScrollArea*
    fun bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(_self_ : QAbstractScrollArea*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(_self_ : QAbstractScrollArea*, margins : QMargins*) : Void
    fun bg_QAbstractScrollArea_viewportMargins_(_self_ : QAbstractScrollArea*) : QMargins*
    fun bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_event_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportEvent_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragMoveEvent*) : Void
    fun bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragLeaveEvent*) : Void
    fun bg_QAbstractScrollArea_dropEvent_QDropEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QAbstractScrollArea_scrollContentsBy_int_int(_self_ : QAbstractScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QAbstractScrollArea_viewportSizeHint_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QFrame_changeEvent_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QAbstractScrollArea_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractScrollArea_minimumSizeHint_SUPER_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_SUPER_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(_self_ : QAbstractScrollArea*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_event_SUPER_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportEvent_SUPER_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_resizeEvent_SUPER_QResizeEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QAbstractScrollArea_paintEvent_SUPER_QPaintEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_SUPER_QWheelEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QAbstractScrollArea_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragMoveEvent*) : Void
    fun bg_QAbstractScrollArea_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDragLeaveEvent*) : Void
    fun bg_QAbstractScrollArea_dropEvent_SUPER_QDropEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QAbstractScrollArea_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QAbstractScrollArea_scrollContentsBy_SUPER_int_int(_self_ : QAbstractScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QAbstractScrollArea_viewportSizeHint_SUPER_(_self_ : QAbstractScrollArea*) : QSize*
    fun bg_QFrame_changeEvent_SUPER_QEvent_X(_self_ : QAbstractScrollArea*, unnamed_arg_0 : QEvent*) : Void
    fun bg_BgInherit_QAbstractScrollArea_JUMPTABLE_BgJumptable_QAbstractScrollArea_R(_self_ : QAbstractScrollArea*, table : BgJumptable_QAbstractScrollArea*) : Void
    fun bg_QAbstractItemView_metaObject_(_self_ : QAbstractItemView*) : QMetaObject*
    fun bg_QAbstractItemView_qt_metacast_const_char_X(_self_ : QAbstractItemView*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAbstractItemView_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAbstractItemView*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAbstractItemView_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAbstractItemView_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAbstractItemView_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAbstractItemView__CONSTRUCT_QWidget_X(parent : QWidget*) : QAbstractItemView*
    fun bg_QAbstractItemView_setModel_QAbstractItemModel_X(_self_ : QAbstractItemView*, model : QAbstractItemModel*) : Void
    fun bg_QAbstractItemView_model_(_self_ : QAbstractItemView*) : QAbstractItemModel*
    fun bg_QAbstractItemView_setSelectionModel_QItemSelectionModel_X(_self_ : QAbstractItemView*, selection_model : QItemSelectionModel*) : Void
    fun bg_QAbstractItemView_selectionModel_(_self_ : QAbstractItemView*) : QItemSelectionModel*
    fun bg_QAbstractItemView_setItemDelegate_QAbstractItemDelegate_X(_self_ : QAbstractItemView*, delegate : QAbstractItemDelegate*) : Void
    fun bg_QAbstractItemView_itemDelegate_(_self_ : QAbstractItemView*) : QAbstractItemDelegate*
    fun bg_QAbstractItemView_setSelectionMode_QAbstractItemView__SelectionMode(_self_ : QAbstractItemView*, mode : AbstractItemDelegate::SelectionMode) : Void
    fun bg_QAbstractItemView_selectionMode_(_self_ : QAbstractItemView*) : AbstractItemDelegate::SelectionMode
    fun bg_QAbstractItemView_setSelectionBehavior_QAbstractItemView__SelectionBehavior(_self_ : QAbstractItemView*, behavior : AbstractItemDelegate::SelectionBehavior) : Void
    fun bg_QAbstractItemView_selectionBehavior_(_self_ : QAbstractItemView*) : AbstractItemDelegate::SelectionBehavior
    fun bg_QAbstractItemView_currentIndex_(_self_ : QAbstractItemView*) : QModelIndex*
    fun bg_QAbstractItemView_rootIndex_(_self_ : QAbstractItemView*) : QModelIndex*
    fun bg_QAbstractItemView_setEditTriggers_QAbstractItemView__EditTriggers(_self_ : QAbstractItemView*, triggers : AbstractItemDelegate::EditTriggers) : Void
    fun bg_QAbstractItemView_editTriggers_(_self_ : QAbstractItemView*) : AbstractItemDelegate::EditTriggers
    fun bg_QAbstractItemView_setVerticalScrollMode_QAbstractItemView__ScrollMode(_self_ : QAbstractItemView*, mode : AbstractItemDelegate::ScrollMode) : Void
    fun bg_QAbstractItemView_verticalScrollMode_(_self_ : QAbstractItemView*) : AbstractItemDelegate::ScrollMode
    fun bg_QAbstractItemView_resetVerticalScrollMode_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_setHorizontalScrollMode_QAbstractItemView__ScrollMode(_self_ : QAbstractItemView*, mode : AbstractItemDelegate::ScrollMode) : Void
    fun bg_QAbstractItemView_horizontalScrollMode_(_self_ : QAbstractItemView*) : AbstractItemDelegate::ScrollMode
    fun bg_QAbstractItemView_resetHorizontalScrollMode_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_setAutoScroll_bool(_self_ : QAbstractItemView*, enable : Bool) : Void
    fun bg_QAbstractItemView_hasAutoScroll_(_self_ : QAbstractItemView*) : Bool
    fun bg_QAbstractItemView_setAutoScrollMargin_int(_self_ : QAbstractItemView*, margin : Int32) : Void
    fun bg_QAbstractItemView_autoScrollMargin_(_self_ : QAbstractItemView*) : Int32
    fun bg_QAbstractItemView_setTabKeyNavigation_bool(_self_ : QAbstractItemView*, enable : Bool) : Void
    fun bg_QAbstractItemView_tabKeyNavigation_(_self_ : QAbstractItemView*) : Bool
    fun bg_QAbstractItemView_setDropIndicatorShown_bool(_self_ : QAbstractItemView*, enable : Bool) : Void
    fun bg_QAbstractItemView_showDropIndicator_(_self_ : QAbstractItemView*) : Bool
    fun bg_QAbstractItemView_setDragEnabled_bool(_self_ : QAbstractItemView*, enable : Bool) : Void
    fun bg_QAbstractItemView_dragEnabled_(_self_ : QAbstractItemView*) : Bool
    fun bg_QAbstractItemView_setDragDropOverwriteMode_bool(_self_ : QAbstractItemView*, overwrite : Bool) : Void
    fun bg_QAbstractItemView_dragDropOverwriteMode_(_self_ : QAbstractItemView*) : Bool
    fun bg_QAbstractItemView_setDragDropMode_QAbstractItemView__DragDropMode(_self_ : QAbstractItemView*, behavior : AbstractItemDelegate::DragDropMode) : Void
    fun bg_QAbstractItemView_dragDropMode_(_self_ : QAbstractItemView*) : AbstractItemDelegate::DragDropMode
    fun bg_QAbstractItemView_setDefaultDropAction_Qt__DropAction(_self_ : QAbstractItemView*, drop_action : DropAction) : Void
    fun bg_QAbstractItemView_defaultDropAction_(_self_ : QAbstractItemView*) : DropAction
    fun bg_QAbstractItemView_setAlternatingRowColors_bool(_self_ : QAbstractItemView*, enable : Bool) : Void
    fun bg_QAbstractItemView_alternatingRowColors_(_self_ : QAbstractItemView*) : Bool
    fun bg_QAbstractItemView_setIconSize_const_QSize_R(_self_ : QAbstractItemView*, size : QSize*) : Void
    fun bg_QAbstractItemView_iconSize_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractItemView_setTextElideMode_Qt__TextElideMode(_self_ : QAbstractItemView*, mode : TextElideMode) : Void
    fun bg_QAbstractItemView_textElideMode_(_self_ : QAbstractItemView*) : TextElideMode
    fun bg_QAbstractItemView_keyboardSearch_const_QString_R(_self_ : QAbstractItemView*, search : CrystalString) : Void
    fun bg_QAbstractItemView_visualRect_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : QRect*
    fun bg_QAbstractItemView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint(_self_ : QAbstractItemView*, index : QModelIndex*, hint : AbstractItemDelegate::ScrollHint) : Void
    fun bg_QAbstractItemView_indexAt_const_QPoint_R(_self_ : QAbstractItemView*, point : QPoint) : QModelIndex*
    fun bg_QAbstractItemView_sizeHintForIndex_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : QSize*
    fun bg_QAbstractItemView_sizeHintForRow_int(_self_ : QAbstractItemView*, row : Int32) : Int32
    fun bg_QAbstractItemView_sizeHintForColumn_int(_self_ : QAbstractItemView*, column : Int32) : Int32
    fun bg_QAbstractItemView_openPersistentEditor_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_closePersistentEditor_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_isPersistentEditorOpen_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemView_setIndexWidget_const_QModelIndex_R_QWidget_X(_self_ : QAbstractItemView*, index : QModelIndex*, widget : QWidget*) : Void
    fun bg_QAbstractItemView_indexWidget_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : QWidget*
    fun bg_QAbstractItemView_setItemDelegateForRow_int_QAbstractItemDelegate_X(_self_ : QAbstractItemView*, row : Int32, delegate : QAbstractItemDelegate*) : Void
    fun bg_QAbstractItemView_itemDelegateForRow_int(_self_ : QAbstractItemView*, row : Int32) : QAbstractItemDelegate*
    fun bg_QAbstractItemView_setItemDelegateForColumn_int_QAbstractItemDelegate_X(_self_ : QAbstractItemView*, column : Int32, delegate : QAbstractItemDelegate*) : Void
    fun bg_QAbstractItemView_itemDelegateForColumn_int(_self_ : QAbstractItemView*, column : Int32) : QAbstractItemDelegate*
    fun bg_QAbstractItemView_itemDelegate_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : QAbstractItemDelegate*
    fun bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery(_self_ : QAbstractItemView*, query : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractItemView_reset_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_setRootIndex_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_doItemsLayout_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_selectAll_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_edit_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_clearSelection_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_setCurrentIndex_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_scrollToTop_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_scrollToBottom_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_update_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R(_self_ : QAbstractItemView*, top_left : QModelIndex*, bottom_right : QModelIndex*) : Void
    fun bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(_self_ : QAbstractItemView*, top_left : QModelIndex*, bottom_right : QModelIndex*, roles : ContainerQVectorInt*) : Void
    fun bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int(_self_ : QAbstractItemView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int(_self_ : QAbstractItemView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R(_self_ : QAbstractItemView*, selected : QItemSelection*, deselected : QItemSelection*) : Void
    fun bg_QAbstractItemView_currentChanged_const_QModelIndex_R_const_QModelIndex_R(_self_ : QAbstractItemView*, current : QModelIndex*, previous : QModelIndex*) : Void
    fun bg_QAbstractItemView_updateEditorData_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_updateEditorGeometries_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_updateGeometries_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_verticalScrollbarAction_int(_self_ : QAbstractItemView*, action : Int32) : Void
    fun bg_QAbstractItemView_horizontalScrollbarAction_int(_self_ : QAbstractItemView*, action : Int32) : Void
    fun bg_QAbstractItemView_verticalScrollbarValueChanged_int(_self_ : QAbstractItemView*, value : Int32) : Void
    fun bg_QAbstractItemView_horizontalScrollbarValueChanged_int(_self_ : QAbstractItemView*, value : Int32) : Void
    fun bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint(_self_ : QAbstractItemView*, editor : QWidget*, hint : AbstractItemDelegate::EndEditHint) : Void
    fun bg_QAbstractItemView_commitData_QWidget_X(_self_ : QAbstractItemView*, editor : QWidget*) : Void
    fun bg_QAbstractItemView_editorDestroyed_QObject_X(_self_ : QAbstractItemView*, editor : QObject*) : Void
    fun bg_QAbstractItemView_pressed_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_clicked_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_doubleClicked_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_activated_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_entered_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_viewportEntered_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_iconSizeChanged_const_QSize_R(_self_ : QAbstractItemView*, size : QSize*) : Void
    fun bg_QAbstractItemView__CONSTRUCT_QAbstractItemViewPrivate_R_QWidget_X(unnamed_arg_0 : QAbstractItemViewPrivate*, parent : QWidget*) : QAbstractItemView*
    fun bg_QAbstractItemView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(_self_ : QAbstractItemView*, cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : QModelIndex*
    fun bg_QAbstractItemView_horizontalOffset_(_self_ : QAbstractItemView*) : Int32
    fun bg_QAbstractItemView_verticalOffset_(_self_ : QAbstractItemView*) : Int32
    fun bg_QAbstractItemView_isIndexHidden_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags(_self_ : QAbstractItemView*, rect : QRect*, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QAbstractItemView_visualRegionForSelection_const_QItemSelection_R(_self_ : QAbstractItemView*, selection : QItemSelection*) : QRegion*
    fun bg_QAbstractItemView_selectedIndexes_(_self_ : QAbstractItemView*) : QModelIndexList*
    fun bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(_self_ : QAbstractItemView*, index : QModelIndex*, trigger : AbstractItemDelegate::EditTrigger, event : QEvent*) : Bool
    fun bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X(_self_ : QAbstractItemView*, index : QModelIndex*, event : QEvent*) : ItemSelectionModel::SelectionFlags
    fun bg_QAbstractItemView_startDrag_Qt__DropActions(_self_ : QAbstractItemView*, supported_actions : DropActions) : Void
    fun bg_QAbstractItemView_viewOptions_(_self_ : QAbstractItemView*) : QStyleOptionViewItem*
    fun bg_QAbstractItemView_state_(_self_ : QAbstractItemView*) : AbstractItemDelegate::State
    fun bg_QAbstractItemView_setState_QAbstractItemView__State(_self_ : QAbstractItemView*, state : AbstractItemDelegate::State) : Void
    fun bg_QAbstractItemView_scheduleDelayedItemsLayout_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_executeDelayedItemsLayout_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_setDirtyRegion_const_QRegion_R(_self_ : QAbstractItemView*, region : QRegion*) : Void
    fun bg_QAbstractItemView_scrollDirtyRegion_int_int(_self_ : QAbstractItemView*, dx : Int32, dy : Int32) : Void
    fun bg_QAbstractItemView_dirtyRegionOffset_(_self_ : QAbstractItemView*) : QPoint
    fun bg_QAbstractItemView_startAutoScroll_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_stopAutoScroll_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_doAutoScroll_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_focusNextPrevChild_bool(_self_ : QAbstractItemView*, next_ : Bool) : Bool
    fun bg_QAbstractItemView_event_QEvent_X(_self_ : QAbstractItemView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_viewportEvent_QEvent_X(_self_ : QAbstractItemView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_mousePressEvent_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X(_self_ : QAbstractItemView*, event : QDragEnterEvent*) : Void
    fun bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X(_self_ : QAbstractItemView*, event : QDragMoveEvent*) : Void
    fun bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QAbstractItemView*, event : QDragLeaveEvent*) : Void
    fun bg_QAbstractItemView_dropEvent_QDropEvent_X(_self_ : QAbstractItemView*, event : QDropEvent*) : Void
    fun bg_QAbstractItemView_focusInEvent_QFocusEvent_X(_self_ : QAbstractItemView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_focusOutEvent_QFocusEvent_X(_self_ : QAbstractItemView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_keyPressEvent_QKeyEvent_X(_self_ : QAbstractItemView*, event : QKeyEvent*) : Void
    fun bg_QAbstractItemView_resizeEvent_QResizeEvent_X(_self_ : QAbstractItemView*, event : QResizeEvent*) : Void
    fun bg_QAbstractItemView_timerEvent_QTimerEvent_X(_self_ : QAbstractItemView*, event : QTimerEvent*) : Void
    fun bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X(_self_ : QAbstractItemView*, event : QInputMethodEvent*) : Void
    fun bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X(_self_ : QAbstractItemView*, object : QObject*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_dropIndicatorPosition_(_self_ : QAbstractItemView*) : AbstractItemDelegate::DropIndicatorPosition
    fun bg_QAbstractItemView_viewportSizeHint_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_QWidget_X(_self_ : QAbstractItemView*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(_self_ : QAbstractItemView*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(_self_ : QAbstractItemView*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(_self_ : QAbstractItemView*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_scrollContentsBy_int_int(_self_ : QAbstractItemView*, dx : Int32, dy : Int32) : Void
    fun bg_QAbstractItemView_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAbstractItemView_CONNECT_pressed_CrystalProc_void__const_QModelIndex_R_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_CONNECT_clicked_CrystalProc_void__const_QModelIndex_R_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_CONNECT_doubleClicked_CrystalProc_void__const_QModelIndex_R_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_CONNECT_activated_CrystalProc_void__const_QModelIndex_R_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_CONNECT_entered_CrystalProc_void__const_QModelIndex_R_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_CONNECT_viewportEntered_CrystalProc_void_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(_self_ : QAbstractItemView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAbstractItemView_setModel_SUPER_QAbstractItemModel_X(_self_ : QAbstractItemView*, model : QAbstractItemModel*) : Void
    fun bg_QAbstractItemView_setSelectionModel_SUPER_QItemSelectionModel_X(_self_ : QAbstractItemView*, selection_model : QItemSelectionModel*) : Void
    fun bg_QAbstractItemView_keyboardSearch_SUPER_const_QString_R(_self_ : QAbstractItemView*, search : CrystalString) : Void
    fun bg_QAbstractItemView_sizeHintForRow_SUPER_int(_self_ : QAbstractItemView*, row : Int32) : Int32
    fun bg_QAbstractItemView_sizeHintForColumn_SUPER_int(_self_ : QAbstractItemView*, column : Int32) : Int32
    fun bg_QAbstractItemView_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QAbstractItemView*, query : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractItemView_reset_SUPER_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_setRootIndex_SUPER_const_QModelIndex_R(_self_ : QAbstractItemView*, index : QModelIndex*) : Void
    fun bg_QAbstractItemView_doItemsLayout_SUPER_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_selectAll_SUPER_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_dataChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(_self_ : QAbstractItemView*, top_left : QModelIndex*, bottom_right : QModelIndex*, roles : ContainerQVectorInt*) : Void
    fun bg_QAbstractItemView_rowsInserted_SUPER_const_QModelIndex_R_int_int(_self_ : QAbstractItemView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_rowsAboutToBeRemoved_SUPER_const_QModelIndex_R_int_int(_self_ : QAbstractItemView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_selectionChanged_SUPER_const_QItemSelection_R_const_QItemSelection_R(_self_ : QAbstractItemView*, selected : QItemSelection*, deselected : QItemSelection*) : Void
    fun bg_QAbstractItemView_currentChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R(_self_ : QAbstractItemView*, current : QModelIndex*, previous : QModelIndex*) : Void
    fun bg_QAbstractItemView_updateEditorData_SUPER_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_updateEditorGeometries_SUPER_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_updateGeometries_SUPER_(_self_ : QAbstractItemView*) : Void
    fun bg_QAbstractItemView_verticalScrollbarAction_SUPER_int(_self_ : QAbstractItemView*, action : Int32) : Void
    fun bg_QAbstractItemView_horizontalScrollbarAction_SUPER_int(_self_ : QAbstractItemView*, action : Int32) : Void
    fun bg_QAbstractItemView_verticalScrollbarValueChanged_SUPER_int(_self_ : QAbstractItemView*, value : Int32) : Void
    fun bg_QAbstractItemView_horizontalScrollbarValueChanged_SUPER_int(_self_ : QAbstractItemView*, value : Int32) : Void
    fun bg_QAbstractItemView_closeEditor_SUPER_QWidget_X_QAbstractItemDelegate__EndEditHint(_self_ : QAbstractItemView*, editor : QWidget*, hint : AbstractItemDelegate::EndEditHint) : Void
    fun bg_QAbstractItemView_commitData_SUPER_QWidget_X(_self_ : QAbstractItemView*, editor : QWidget*) : Void
    fun bg_QAbstractItemView_editorDestroyed_SUPER_QObject_X(_self_ : QAbstractItemView*, editor : QObject*) : Void
    fun bg_QAbstractItemView_selectedIndexes_SUPER_(_self_ : QAbstractItemView*) : QModelIndexList*
    fun bg_QAbstractItemView_edit_SUPER_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(_self_ : QAbstractItemView*, index : QModelIndex*, trigger : AbstractItemDelegate::EditTrigger, event : QEvent*) : Bool
    fun bg_QAbstractItemView_selectionCommand_SUPER_const_QModelIndex_R_const_QEvent_X(_self_ : QAbstractItemView*, index : QModelIndex*, event : QEvent*) : ItemSelectionModel::SelectionFlags
    fun bg_QAbstractItemView_startDrag_SUPER_Qt__DropActions(_self_ : QAbstractItemView*, supported_actions : DropActions) : Void
    fun bg_QAbstractItemView_viewOptions_SUPER_(_self_ : QAbstractItemView*) : QStyleOptionViewItem*
    fun bg_QAbstractItemView_focusNextPrevChild_SUPER_bool(_self_ : QAbstractItemView*, next_ : Bool) : Bool
    fun bg_QAbstractItemView_event_SUPER_QEvent_X(_self_ : QAbstractItemView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_viewportEvent_SUPER_QEvent_X(_self_ : QAbstractItemView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QAbstractItemView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QAbstractItemView*, event : QDragEnterEvent*) : Void
    fun bg_QAbstractItemView_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QAbstractItemView*, event : QDragMoveEvent*) : Void
    fun bg_QAbstractItemView_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QAbstractItemView*, event : QDragLeaveEvent*) : Void
    fun bg_QAbstractItemView_dropEvent_SUPER_QDropEvent_X(_self_ : QAbstractItemView*, event : QDropEvent*) : Void
    fun bg_QAbstractItemView_focusInEvent_SUPER_QFocusEvent_X(_self_ : QAbstractItemView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QAbstractItemView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QAbstractItemView*, event : QKeyEvent*) : Void
    fun bg_QAbstractItemView_resizeEvent_SUPER_QResizeEvent_X(_self_ : QAbstractItemView*, event : QResizeEvent*) : Void
    fun bg_QAbstractItemView_timerEvent_SUPER_QTimerEvent_X(_self_ : QAbstractItemView*, event : QTimerEvent*) : Void
    fun bg_QAbstractItemView_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QAbstractItemView*, event : QInputMethodEvent*) : Void
    fun bg_QAbstractItemView_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QAbstractItemView*, object : QObject*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_viewportSizeHint_SUPER_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_SUPER_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_SUPER_(_self_ : QAbstractItemView*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(_self_ : QAbstractItemView*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_paintEvent_SUPER_QPaintEvent_X(_self_ : QAbstractItemView*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_SUPER_QWheelEvent_X(_self_ : QAbstractItemView*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QAbstractItemView*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_scrollContentsBy_SUPER_int_int(_self_ : QAbstractItemView*, dx : Int32, dy : Int32) : Void
    fun bg_BgInherit_QAbstractItemView_JUMPTABLE_BgJumptable_QAbstractItemView_R(_self_ : QAbstractItemView*, table : BgJumptable_QAbstractItemView*) : Void
    fun bg_QAction_metaObject_(_self_ : QAction*) : QMetaObject*
    fun bg_QAction_qt_metacast_const_char_X(_self_ : QAction*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QAction*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QAction_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QAction_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QAction_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QAction__CONSTRUCT_QObject_X(parent : QObject*) : QAction*
    fun bg_QAction__CONSTRUCT_const_QString_R_QObject_X(text : CrystalString, parent : QObject*) : QAction*
    fun bg_QAction__CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(icon : QIcon*, text : CrystalString, parent : QObject*) : QAction*
    fun bg_QAction_setActionGroup_QActionGroup_X(_self_ : QAction*, group : QActionGroup*) : Void
    fun bg_QAction_actionGroup_(_self_ : QAction*) : QActionGroup*
    fun bg_QAction_setIcon_const_QIcon_R(_self_ : QAction*, icon : QIcon*) : Void
    fun bg_QAction_icon_(_self_ : QAction*) : QIcon*
    fun bg_QAction_setText_const_QString_R(_self_ : QAction*, text : CrystalString) : Void
    fun bg_QAction_text_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setIconText_const_QString_R(_self_ : QAction*, text : CrystalString) : Void
    fun bg_QAction_iconText_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setToolTip_const_QString_R(_self_ : QAction*, tip : CrystalString) : Void
    fun bg_QAction_toolTip_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setStatusTip_const_QString_R(_self_ : QAction*, status_tip : CrystalString) : Void
    fun bg_QAction_statusTip_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setWhatsThis_const_QString_R(_self_ : QAction*, what : CrystalString) : Void
    fun bg_QAction_whatsThis_(_self_ : QAction*) : CrystalString
    fun bg_QAction_setPriority_QAction__Priority(_self_ : QAction*, priority : Action::Priority) : Void
    fun bg_QAction_priority_(_self_ : QAction*) : Action::Priority
    fun bg_QAction_menu_(_self_ : QAction*) : QMenu*
    fun bg_QAction_setMenu_QMenu_X(_self_ : QAction*, menu : QMenu*) : Void
    fun bg_QAction_setSeparator_bool(_self_ : QAction*, b : Bool) : Void
    fun bg_QAction_isSeparator_(_self_ : QAction*) : Bool
    fun bg_QAction_setShortcut_const_QKeySequence_R(_self_ : QAction*, shortcut : QKeySequence*) : Void
    fun bg_QAction_shortcut_(_self_ : QAction*) : QKeySequence*
    fun bg_QAction_setShortcuts_const_QList_QKeySequence__R(_self_ : QAction*, shortcuts : ContainerQListQKeySequence*) : Void
    fun bg_QAction_setShortcuts_QKeySequence__StandardKey(_self_ : QAction*, unnamed_arg_0 : KeySequence::StandardKey) : Void
    fun bg_QAction_shortcuts_(_self_ : QAction*) : ContainerQListQKeySequence*
    fun bg_QAction_setShortcutContext_Qt__ShortcutContext(_self_ : QAction*, context : ShortcutContext) : Void
    fun bg_QAction_shortcutContext_(_self_ : QAction*) : ShortcutContext
    fun bg_QAction_setAutoRepeat_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_autoRepeat_(_self_ : QAction*) : Bool
    fun bg_QAction_setFont_const_QFont_R(_self_ : QAction*, font : QFont*) : Void
    fun bg_QAction_font_(_self_ : QAction*) : QFont*
    fun bg_QAction_setCheckable_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_isCheckable_(_self_ : QAction*) : Bool
    fun bg_QAction_data_(_self_ : QAction*) : CrystalVariant
    fun bg_QAction_setData_const_QVariant_R(_self_ : QAction*, var : CrystalVariant) : Void
    fun bg_QAction_isChecked_(_self_ : QAction*) : Bool
    fun bg_QAction_isEnabled_(_self_ : QAction*) : Bool
    fun bg_QAction_isVisible_(_self_ : QAction*) : Bool
    fun bg_QAction_activate_QAction__ActionEvent(_self_ : QAction*, event : Action::Event) : Void
    fun bg_QAction_showStatusText_QWidget_X(_self_ : QAction*, widget : QWidget*) : Bool
    fun bg_QAction_setMenuRole_QAction__MenuRole(_self_ : QAction*, menu_role : Action::MenuRole) : Void
    fun bg_QAction_menuRole_(_self_ : QAction*) : Action::MenuRole
    fun bg_QAction_setIconVisibleInMenu_bool(_self_ : QAction*, visible : Bool) : Void
    fun bg_QAction_isIconVisibleInMenu_(_self_ : QAction*) : Bool
    fun bg_QAction_setShortcutVisibleInContextMenu_bool(_self_ : QAction*, show : Bool) : Void
    fun bg_QAction_isShortcutVisibleInContextMenu_(_self_ : QAction*) : Bool
    fun bg_QAction_parentWidget_(_self_ : QAction*) : QWidget*
    fun bg_QAction_associatedWidgets_(_self_ : QAction*) : ContainerQListQWidgetX*
    fun bg_QAction_associatedGraphicsWidgets_(_self_ : QAction*) : ContainerQListQGraphicsWidgetX*
    fun bg_QAction_event_QEvent_X(_self_ : QAction*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAction__CONSTRUCT_QActionPrivate_R_QObject_X(dd : QActionPrivate*, parent : QObject*) : QAction*
    fun bg_QAction_trigger_(_self_ : QAction*) : Void
    fun bg_QAction_hover_(_self_ : QAction*) : Void
    fun bg_QAction_setChecked_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_toggle_(_self_ : QAction*) : Void
    fun bg_QAction_setEnabled_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_setDisabled_bool(_self_ : QAction*, b : Bool) : Void
    fun bg_QAction_setVisible_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QAction_changed_(_self_ : QAction*) : Void
    fun bg_QAction_triggered_bool(_self_ : QAction*, checked : Bool) : Void
    fun bg_QAction_hovered_(_self_ : QAction*) : Void
    fun bg_QAction_toggled_bool(_self_ : QAction*, unnamed_arg_0 : Bool) : Void
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QAction*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QAction*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QAction*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QAction*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QAction*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QAction*, signal : QMetaMethod*) : Void
    fun bg_QAction_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QAction_CONNECT_changed_CrystalProc_void_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_CONNECT_triggered_CrystalProc_void__bool_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_CONNECT_hovered_CrystalProc_void_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_CONNECT_toggled_CrystalProc_void__bool_(_self_ : QAction*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QAction_event_SUPER_QEvent_X(_self_ : QAction*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QAction*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QAction*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QAction*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QAction*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QAction*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QAction*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QAction_JUMPTABLE_BgJumptable_QAction_R(_self_ : QAction*, table : BgJumptable_QAction*) : Void
    fun bg_QApplication_metaObject_(_self_ : QApplication*) : QMetaObject*
    fun bg_QApplication_qt_metacast_const_char_X(_self_ : QApplication*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QApplication*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QApplication_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QApplication_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QApplication__CONSTRUCT_int_R_char_XX_int(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32) : QApplication*
    fun bg_QApplication_style_STATIC_() : QStyle*
    fun bg_QApplication_setStyle_STATIC_QStyle_X(unnamed_arg_0 : QStyle*) : Void
    fun bg_QApplication_setStyle_STATIC_const_QString_R(unnamed_arg_0 : CrystalString) : QStyle*
    fun bg_QApplication_palette_STATIC_const_QWidget_X(unnamed_arg_0 : QWidget*) : QPalette*
    fun bg_QApplication_palette_STATIC_const_char_X(class_name : UInt8*) : QPalette*
    fun bg_QApplication_setPalette_STATIC_const_QPalette_R(unnamed_arg_0 : QPalette*) : Void
    fun bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(unnamed_arg_0 : QPalette*, class_name : UInt8*) : Void
    fun bg_QApplication_font_STATIC_() : QFont*
    fun bg_QApplication_font_STATIC_const_QWidget_X(unnamed_arg_0 : QWidget*) : QFont*
    fun bg_QApplication_font_STATIC_const_char_X(class_name : UInt8*) : QFont*
    fun bg_QApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0 : QFont*) : Void
    fun bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(unnamed_arg_0 : QFont*, class_name : UInt8*) : Void
    fun bg_QApplication_fontMetrics_STATIC_() : QFontMetrics*
    fun bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(icon : QIcon*) : Void
    fun bg_QApplication_windowIcon_STATIC_() : QIcon*
    fun bg_QApplication_allWidgets_STATIC_() : QWidgetList*
    fun bg_QApplication_topLevelWidgets_STATIC_() : QWidgetList*
    fun bg_QApplication_desktop_STATIC_() : QDesktopWidget*
    fun bg_QApplication_activePopupWidget_STATIC_() : QWidget*
    fun bg_QApplication_activeModalWidget_STATIC_() : QWidget*
    fun bg_QApplication_focusWidget_STATIC_() : QWidget*
    fun bg_QApplication_activeWindow_STATIC_() : QWidget*
    fun bg_QApplication_setActiveWindow_STATIC_QWidget_X(act : QWidget*) : Void
    fun bg_QApplication_widgetAt_STATIC_const_QPoint_R(p : QPoint) : QWidget*
    fun bg_QApplication_widgetAt_STATIC_int_int(x : Int32, y : Int32) : QWidget*
    fun bg_QApplication_topLevelAt_STATIC_const_QPoint_R(p : QPoint) : QWidget*
    fun bg_QApplication_topLevelAt_STATIC_int_int(x : Int32, y : Int32) : QWidget*
    fun bg_QApplication_beep_STATIC_() : Void
    fun bg_QApplication_alert_STATIC_QWidget_X_int(widget : QWidget*, duration : Int32) : Void
    fun bg_QApplication_setCursorFlashTime_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_cursorFlashTime_STATIC_() : Int32
    fun bg_QApplication_setDoubleClickInterval_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_doubleClickInterval_STATIC_() : Int32
    fun bg_QApplication_setKeyboardInputInterval_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_keyboardInputInterval_STATIC_() : Int32
    fun bg_QApplication_setWheelScrollLines_STATIC_int(unnamed_arg_0 : Int32) : Void
    fun bg_QApplication_wheelScrollLines_STATIC_() : Int32
    fun bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(unnamed_arg_0 : QSize*) : Void
    fun bg_QApplication_globalStrut_STATIC_() : QSize*
    fun bg_QApplication_setStartDragTime_STATIC_int(ms : Int32) : Void
    fun bg_QApplication_startDragTime_STATIC_() : Int32
    fun bg_QApplication_setStartDragDistance_STATIC_int(l : Int32) : Void
    fun bg_QApplication_startDragDistance_STATIC_() : Int32
    fun bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0 : UIEffect) : Bool
    fun bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(unnamed_arg_0 : UIEffect, enable : Bool) : Void
    fun bg_QApplication_exec_STATIC_() : Int32
    fun bg_QApplication_notify_QObject_X_QEvent_X(_self_ : QApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QApplication_focusChanged_QWidget_X_QWidget_X(_self_ : QApplication*, old : QWidget*, now : QWidget*) : Void
    fun bg_QApplication_styleSheet_(_self_ : QApplication*) : CrystalString
    fun bg_QApplication_setStyleSheet_const_QString_R(_self_ : QApplication*, sheet : CrystalString) : Void
    fun bg_QApplication_setAutoSipEnabled_const_bool(_self_ : QApplication*, enabled : Bool) : Void
    fun bg_QApplication_autoSipEnabled_(_self_ : QApplication*) : Bool
    fun bg_QApplication_closeAllWindows_STATIC_() : Void
    fun bg_QApplication_aboutQt_STATIC_() : Void
    fun bg_QApplication_event_QEvent_X(_self_ : QApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(_self_ : QApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_QApplication_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QApplication_CONNECT_focusChanged_CrystalProc_void__QWidget_X__QWidget_X_(_self_ : QApplication*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QApplication_notify_SUPER_QObject_X_QEvent_X(_self_ : QApplication*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QApplication_event_SUPER_QEvent_X(_self_ : QApplication*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QApplication_compressEvent_SUPER_QEvent_X_QObject_X_QPostEventList_X(_self_ : QApplication*, unnamed_arg_0 : QEvent*, receiver : QObject*, unnamed_arg_2 : QPostEventList*) : Bool
    fun bg_BgInherit_QApplication_JUMPTABLE_BgJumptable_QApplication_R(_self_ : QApplication*, table : BgJumptable_QApplication*) : Void
    fun bg_QLayoutItem__CONSTRUCT_() : QLayoutItem*
    fun bg_QLayoutItem__CONSTRUCT_Qt__Alignment(alignment : Alignment) : QLayoutItem*
    fun bg_QLayoutItem_sizeHint_(_self_ : QLayoutItem*) : QSize*
    fun bg_QLayoutItem_minimumSize_(_self_ : QLayoutItem*) : QSize*
    fun bg_QLayoutItem_maximumSize_(_self_ : QLayoutItem*) : QSize*
    fun bg_QLayoutItem_expandingDirections_(_self_ : QLayoutItem*) : Orientations
    fun bg_QLayoutItem_setGeometry_const_QRect_R(_self_ : QLayoutItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayoutItem_geometry_(_self_ : QLayoutItem*) : QRect*
    fun bg_QLayoutItem_isEmpty_(_self_ : QLayoutItem*) : Bool
    fun bg_QLayoutItem_hasHeightForWidth_(_self_ : QLayoutItem*) : Bool
    fun bg_QLayoutItem_heightForWidth_int(_self_ : QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_int(_self_ : QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_(_self_ : QLayoutItem*) : Void
    fun bg_QLayoutItem_widget_(_self_ : QLayoutItem*) : QWidget*
    fun bg_QLayoutItem_layout_(_self_ : QLayoutItem*) : QLayout*
    fun bg_QLayoutItem_spacerItem_(_self_ : QLayoutItem*) : QSpacerItem*
    fun bg_QLayoutItem_alignment_(_self_ : QLayoutItem*) : Alignment
    fun bg_QLayoutItem_setAlignment_Qt__Alignment(_self_ : QLayoutItem*, a : Alignment) : Void
    fun bg_QLayoutItem_controlTypes_(_self_ : QLayoutItem*) : SizePolicy::ControlTypes
    fun bg_QLayoutItem_hasHeightForWidth_SUPER_(_self_ : QLayoutItem*) : Bool
    fun bg_QLayoutItem_heightForWidth_SUPER_int(_self_ : QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_SUPER_int(_self_ : QLayoutItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_SUPER_(_self_ : QLayoutItem*) : Void
    fun bg_QLayoutItem_widget_SUPER_(_self_ : QLayoutItem*) : QWidget*
    fun bg_QLayoutItem_layout_SUPER_(_self_ : QLayoutItem*) : QLayout*
    fun bg_QLayoutItem_spacerItem_SUPER_(_self_ : QLayoutItem*) : QSpacerItem*
    fun bg_QLayoutItem_controlTypes_SUPER_(_self_ : QLayoutItem*) : SizePolicy::ControlTypes
    fun bg_BgInherit_QLayoutItem_JUMPTABLE_BgJumptable_QLayoutItem_R(_self_ : QLayoutItem*, table : BgJumptable_QLayoutItem*) : Void
    fun bg_QSpacerItem__CONSTRUCT_int_int_QSizePolicy__Policy_QSizePolicy__Policy(w : Int32, h : Int32, h_data : SizePolicy::Policy, v_data : SizePolicy::Policy) : QSpacerItem*
    fun bg_QSpacerItem_changeSize_int_int_QSizePolicy__Policy_QSizePolicy__Policy(_self_ : QSpacerItem*, w : Int32, h : Int32, h_data : SizePolicy::Policy, v_data : SizePolicy::Policy) : Void
    fun bg_QSpacerItem_sizeHint_(_self_ : QSpacerItem*) : QSize*
    fun bg_QSpacerItem_minimumSize_(_self_ : QSpacerItem*) : QSize*
    fun bg_QSpacerItem_maximumSize_(_self_ : QSpacerItem*) : QSize*
    fun bg_QSpacerItem_expandingDirections_(_self_ : QSpacerItem*) : Orientations
    fun bg_QSpacerItem_isEmpty_(_self_ : QSpacerItem*) : Bool
    fun bg_QSpacerItem_setGeometry_const_QRect_R(_self_ : QSpacerItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QSpacerItem_geometry_(_self_ : QSpacerItem*) : QRect*
    fun bg_QSpacerItem_spacerItem_(_self_ : QSpacerItem*) : QSpacerItem*
    fun bg_QSpacerItem_sizePolicy_(_self_ : QSpacerItem*) : QSizePolicy*
    fun bg_QLayoutItem_hasHeightForWidth_(_self_ : QSpacerItem*) : Bool
    fun bg_QLayoutItem_heightForWidth_int(_self_ : QSpacerItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_int(_self_ : QSpacerItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_(_self_ : QSpacerItem*) : Void
    fun bg_QLayoutItem_widget_(_self_ : QSpacerItem*) : QWidget*
    fun bg_QLayoutItem_layout_(_self_ : QSpacerItem*) : QLayout*
    fun bg_QLayoutItem_controlTypes_(_self_ : QSpacerItem*) : SizePolicy::ControlTypes
    fun bg_QSpacerItem_sizeHint_SUPER_(_self_ : QSpacerItem*) : QSize*
    fun bg_QSpacerItem_minimumSize_SUPER_(_self_ : QSpacerItem*) : QSize*
    fun bg_QSpacerItem_maximumSize_SUPER_(_self_ : QSpacerItem*) : QSize*
    fun bg_QSpacerItem_expandingDirections_SUPER_(_self_ : QSpacerItem*) : Orientations
    fun bg_QSpacerItem_isEmpty_SUPER_(_self_ : QSpacerItem*) : Bool
    fun bg_QSpacerItem_setGeometry_SUPER_const_QRect_R(_self_ : QSpacerItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QSpacerItem_geometry_SUPER_(_self_ : QSpacerItem*) : QRect*
    fun bg_QSpacerItem_spacerItem_SUPER_(_self_ : QSpacerItem*) : QSpacerItem*
    fun bg_QLayoutItem_hasHeightForWidth_SUPER_(_self_ : QSpacerItem*) : Bool
    fun bg_QLayoutItem_heightForWidth_SUPER_int(_self_ : QSpacerItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_SUPER_int(_self_ : QSpacerItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_SUPER_(_self_ : QSpacerItem*) : Void
    fun bg_QLayoutItem_widget_SUPER_(_self_ : QSpacerItem*) : QWidget*
    fun bg_QLayoutItem_layout_SUPER_(_self_ : QSpacerItem*) : QLayout*
    fun bg_QLayoutItem_controlTypes_SUPER_(_self_ : QSpacerItem*) : SizePolicy::ControlTypes
    fun bg_BgInherit_QSpacerItem_JUMPTABLE_BgJumptable_QSpacerItem_R(_self_ : QSpacerItem*, table : BgJumptable_QSpacerItem*) : Void
    fun bg_QWidgetItem__CONSTRUCT_QWidget_X(w : QWidget*) : QWidgetItem*
    fun bg_QWidgetItem_sizeHint_(_self_ : QWidgetItem*) : QSize*
    fun bg_QWidgetItem_minimumSize_(_self_ : QWidgetItem*) : QSize*
    fun bg_QWidgetItem_maximumSize_(_self_ : QWidgetItem*) : QSize*
    fun bg_QWidgetItem_expandingDirections_(_self_ : QWidgetItem*) : Orientations
    fun bg_QWidgetItem_isEmpty_(_self_ : QWidgetItem*) : Bool
    fun bg_QWidgetItem_setGeometry_const_QRect_R(_self_ : QWidgetItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidgetItem_geometry_(_self_ : QWidgetItem*) : QRect*
    fun bg_QWidgetItem_widget_(_self_ : QWidgetItem*) : QWidget*
    fun bg_QWidgetItem_hasHeightForWidth_(_self_ : QWidgetItem*) : Bool
    fun bg_QWidgetItem_heightForWidth_int(_self_ : QWidgetItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidgetItem_controlTypes_(_self_ : QWidgetItem*) : SizePolicy::ControlTypes
    fun bg_QLayoutItem_minimumHeightForWidth_int(_self_ : QWidgetItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_(_self_ : QWidgetItem*) : Void
    fun bg_QLayoutItem_layout_(_self_ : QWidgetItem*) : QLayout*
    fun bg_QLayoutItem_spacerItem_(_self_ : QWidgetItem*) : QSpacerItem*
    fun bg_QWidgetItem_sizeHint_SUPER_(_self_ : QWidgetItem*) : QSize*
    fun bg_QWidgetItem_minimumSize_SUPER_(_self_ : QWidgetItem*) : QSize*
    fun bg_QWidgetItem_maximumSize_SUPER_(_self_ : QWidgetItem*) : QSize*
    fun bg_QWidgetItem_expandingDirections_SUPER_(_self_ : QWidgetItem*) : Orientations
    fun bg_QWidgetItem_isEmpty_SUPER_(_self_ : QWidgetItem*) : Bool
    fun bg_QWidgetItem_setGeometry_SUPER_const_QRect_R(_self_ : QWidgetItem*, unnamed_arg_0 : QRect*) : Void
    fun bg_QWidgetItem_geometry_SUPER_(_self_ : QWidgetItem*) : QRect*
    fun bg_QWidgetItem_widget_SUPER_(_self_ : QWidgetItem*) : QWidget*
    fun bg_QWidgetItem_hasHeightForWidth_SUPER_(_self_ : QWidgetItem*) : Bool
    fun bg_QWidgetItem_heightForWidth_SUPER_int(_self_ : QWidgetItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidgetItem_controlTypes_SUPER_(_self_ : QWidgetItem*) : SizePolicy::ControlTypes
    fun bg_QLayoutItem_minimumHeightForWidth_SUPER_int(_self_ : QWidgetItem*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_invalidate_SUPER_(_self_ : QWidgetItem*) : Void
    fun bg_QLayoutItem_layout_SUPER_(_self_ : QWidgetItem*) : QLayout*
    fun bg_QLayoutItem_spacerItem_SUPER_(_self_ : QWidgetItem*) : QSpacerItem*
    fun bg_BgInherit_QWidgetItem_JUMPTABLE_BgJumptable_QWidgetItem_R(_self_ : QWidgetItem*, table : BgJumptable_QWidgetItem*) : Void
    fun bg_QLayout_metaObject_(_self_ : QLayout*) : QMetaObject*
    fun bg_QLayout_qt_metacast_const_char_X(_self_ : QLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLayout__CONSTRUCT_QWidget_X(parent : QWidget*) : QLayout*
    fun bg_QLayout__CONSTRUCT_() : QLayout*
    fun bg_QLayout_margin_(_self_ : QLayout*) : Int32
    fun bg_QLayout_setMargin_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QLayout_spacing_(_self_ : QLayout*) : Int32
    fun bg_QLayout_setSpacing_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QLayout_setContentsMargins_int_int_int_int(_self_ : QLayout*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QLayout_setContentsMargins_const_QMargins_R(_self_ : QLayout*, margins : QMargins*) : Void
    fun bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(_self_ : QLayout*, left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
    fun bg_QLayout_contentsMargins_(_self_ : QLayout*) : QMargins*
    fun bg_QLayout_contentsRect_(_self_ : QLayout*) : QRect*
    fun bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(_self_ : QLayout*, w : QWidget*, alignment : Alignment) : Bool
    fun bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(_self_ : QLayout*, l : QLayout*, alignment : Alignment) : Bool
    fun bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(_self_ : QLayout*, unnamed_arg_0 : Layout::SizeConstraint) : Void
    fun bg_QLayout_sizeConstraint_(_self_ : QLayout*) : Layout::SizeConstraint
    fun bg_QLayout_setMenuBar_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_menuBar_(_self_ : QLayout*) : QWidget*
    fun bg_QLayout_parentWidget_(_self_ : QLayout*) : QWidget*
    fun bg_QLayout_invalidate_(_self_ : QLayout*) : Void
    fun bg_QLayout_geometry_(_self_ : QLayout*) : QRect*
    fun bg_QLayout_activate_(_self_ : QLayout*) : Bool
    fun bg_QLayout_update_(_self_ : QLayout*) : Void
    fun bg_QLayout_addWidget_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_addItem_QLayoutItem_X(_self_ : QLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_removeWidget_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_removeItem_QLayoutItem_X(_self_ : QLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_expandingDirections_(_self_ : QLayout*) : Orientations
    fun bg_QLayout_minimumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_maximumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_setGeometry_const_QRect_R(_self_ : QLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayout_itemAt_int(_self_ : QLayout*, index : Int32) : QLayoutItem*
    fun bg_QLayout_takeAt_int(_self_ : QLayout*, index : Int32) : QLayoutItem*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : QLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_indexOf_QLayoutItem_X(_self_ : QLayout*, unnamed_arg_0 : QLayoutItem*) : Int32
    fun bg_QLayout_count_(_self_ : QLayout*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : QLayout*) : Bool
    fun bg_QLayout_controlTypes_(_self_ : QLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_replaceWidget_QWidget_X_QWidget_X(_self_ : QLayout*, from : QWidget*, to : QWidget*) : QLayoutItem*
    fun bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(_self_ : QLayout*, from : QWidget*, to : QWidget*, options : FindChildOptions) : QLayoutItem*
    fun bg_QLayout_totalHeightForWidth_int(_self_ : QLayout*, w : Int32) : Int32
    fun bg_QLayout_totalMinimumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_totalMaximumSize_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_totalSizeHint_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_layout_(_self_ : QLayout*) : QLayout*
    fun bg_QLayout_setEnabled_bool(_self_ : QLayout*, unnamed_arg_0 : Bool) : Void
    fun bg_QLayout_isEnabled_(_self_ : QLayout*) : Bool
    fun bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(w : QWidget*, s : QSize*) : QSize*
    fun bg_QLayout_widgetEvent_QEvent_X(_self_ : QLayout*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : QLayout*, e : QChildEvent*) : Void
    fun bg_QLayout_addChildLayout_QLayout_X(_self_ : QLayout*, l : QLayout*) : Void
    fun bg_QLayout_addChildWidget_QWidget_X(_self_ : QLayout*, w : QWidget*) : Void
    fun bg_QLayout_adoptLayout_QLayout_X(_self_ : QLayout*, layout : QLayout*) : Bool
    fun bg_QLayout_alignmentRect_const_QRect_R(_self_ : QLayout*, unnamed_arg_0 : QRect*) : QRect*
    fun bg_QLayout__CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(d : QLayoutPrivate*, unnamed_arg_1 : QLayout*, unnamed_arg_2 : QWidget*) : QLayout*
    fun bg_QLayout_AS_LayoutItem_(_self_ : QLayout*) : QLayoutItem*
    fun bg_QObject_event_QEvent_X(_self_ : QLayout*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QLayout*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QLayout*, event : QTimerEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QLayout*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QLayout*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QLayout*, signal : QMetaMethod*) : Void
    fun bg_QLayoutItem_sizeHint_(_self_ : QLayout*) : QSize*
    fun bg_QLayoutItem_hasHeightForWidth_(_self_ : QLayout*) : Bool
    fun bg_QLayoutItem_heightForWidth_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_widget_(_self_ : QLayout*) : QWidget*
    fun bg_QLayoutItem_spacerItem_(_self_ : QLayout*) : QSpacerItem*
    fun bg_QLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QLayout_invalidate_SUPER_(_self_ : QLayout*) : Void
    fun bg_QLayout_geometry_SUPER_(_self_ : QLayout*) : QRect*
    fun bg_QLayout_expandingDirections_SUPER_(_self_ : QLayout*) : Orientations
    fun bg_QLayout_minimumSize_SUPER_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_maximumSize_SUPER_(_self_ : QLayout*) : QSize*
    fun bg_QLayout_setGeometry_SUPER_const_QRect_R(_self_ : QLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayout_indexOf_SUPER_QWidget_X(_self_ : QLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_SUPER_(_self_ : QLayout*) : Bool
    fun bg_QLayout_controlTypes_SUPER_(_self_ : QLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_SUPER_(_self_ : QLayout*) : QLayout*
    fun bg_QLayout_childEvent_SUPER_QChildEvent_X(_self_ : QLayout*, e : QChildEvent*) : Void
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QLayout*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QLayout*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QLayout*, event : QTimerEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QLayout*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QLayout*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QLayout*, signal : QMetaMethod*) : Void
    fun bg_QLayoutItem_hasHeightForWidth_SUPER_(_self_ : QLayout*) : Bool
    fun bg_QLayoutItem_heightForWidth_SUPER_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_minimumHeightForWidth_SUPER_int(_self_ : QLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLayoutItem_widget_SUPER_(_self_ : QLayout*) : QWidget*
    fun bg_QLayoutItem_spacerItem_SUPER_(_self_ : QLayout*) : QSpacerItem*
    fun bg_BgInherit_QLayout_JUMPTABLE_BgJumptable_QLayout_R(_self_ : QLayout*, table : BgJumptable_QLayout*) : Void
    fun bg_QGridLayout_metaObject_(_self_ : QGridLayout*) : QMetaObject*
    fun bg_QGridLayout_qt_metacast_const_char_X(_self_ : QGridLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGridLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGridLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGridLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGridLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGridLayout__CONSTRUCT_QWidget_X(parent : QWidget*) : QGridLayout*
    fun bg_QGridLayout__CONSTRUCT_() : QGridLayout*
    fun bg_QGridLayout_sizeHint_(_self_ : QGridLayout*) : QSize*
    fun bg_QGridLayout_minimumSize_(_self_ : QGridLayout*) : QSize*
    fun bg_QGridLayout_maximumSize_(_self_ : QGridLayout*) : QSize*
    fun bg_QGridLayout_setHorizontalSpacing_int(_self_ : QGridLayout*, spacing : Int32) : Void
    fun bg_QGridLayout_horizontalSpacing_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_setVerticalSpacing_int(_self_ : QGridLayout*, spacing : Int32) : Void
    fun bg_QGridLayout_verticalSpacing_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_setSpacing_int(_self_ : QGridLayout*, spacing : Int32) : Void
    fun bg_QGridLayout_spacing_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_setRowStretch_int_int(_self_ : QGridLayout*, row : Int32, stretch : Int32) : Void
    fun bg_QGridLayout_setColumnStretch_int_int(_self_ : QGridLayout*, column : Int32, stretch : Int32) : Void
    fun bg_QGridLayout_rowStretch_int(_self_ : QGridLayout*, row : Int32) : Int32
    fun bg_QGridLayout_columnStretch_int(_self_ : QGridLayout*, column : Int32) : Int32
    fun bg_QGridLayout_setRowMinimumHeight_int_int(_self_ : QGridLayout*, row : Int32, min_size : Int32) : Void
    fun bg_QGridLayout_setColumnMinimumWidth_int_int(_self_ : QGridLayout*, column : Int32, min_size : Int32) : Void
    fun bg_QGridLayout_rowMinimumHeight_int(_self_ : QGridLayout*, row : Int32) : Int32
    fun bg_QGridLayout_columnMinimumWidth_int(_self_ : QGridLayout*, column : Int32) : Int32
    fun bg_QGridLayout_columnCount_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_rowCount_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_cellRect_int_int(_self_ : QGridLayout*, row : Int32, column : Int32) : QRect*
    fun bg_QGridLayout_hasHeightForWidth_(_self_ : QGridLayout*) : Bool
    fun bg_QGridLayout_heightForWidth_int(_self_ : QGridLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QGridLayout_minimumHeightForWidth_int(_self_ : QGridLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QGridLayout_expandingDirections_(_self_ : QGridLayout*) : Orientations
    fun bg_QGridLayout_invalidate_(_self_ : QGridLayout*) : Void
    fun bg_QGridLayout_addWidget_QWidget_X(_self_ : QGridLayout*, w : QWidget*) : Void
    fun bg_QGridLayout_addWidget_QWidget_X_int_int(_self_ : QGridLayout*, unnamed_arg_0 : QWidget*, row : Int32, column : Int32) : Void
    fun bg_QGridLayout_addWidget_QWidget_X_int_int_Qt__Alignment(_self_ : QGridLayout*, unnamed_arg_0 : QWidget*, row : Int32, column : Int32, unnamed_arg_3 : Alignment) : Void
    fun bg_QGridLayout_addWidget_QWidget_X_int_int_int_int(_self_ : QGridLayout*, unnamed_arg_0 : QWidget*, row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
    fun bg_QGridLayout_addWidget_QWidget_X_int_int_int_int_Qt__Alignment(_self_ : QGridLayout*, unnamed_arg_0 : QWidget*, row : Int32, column : Int32, row_span : Int32, column_span : Int32, unnamed_arg_5 : Alignment) : Void
    fun bg_QGridLayout_addLayout_QLayout_X_int_int(_self_ : QGridLayout*, unnamed_arg_0 : QLayout*, row : Int32, column : Int32) : Void
    fun bg_QGridLayout_addLayout_QLayout_X_int_int_Qt__Alignment(_self_ : QGridLayout*, unnamed_arg_0 : QLayout*, row : Int32, column : Int32, unnamed_arg_3 : Alignment) : Void
    fun bg_QGridLayout_addLayout_QLayout_X_int_int_int_int(_self_ : QGridLayout*, unnamed_arg_0 : QLayout*, row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
    fun bg_QGridLayout_addLayout_QLayout_X_int_int_int_int_Qt__Alignment(_self_ : QGridLayout*, unnamed_arg_0 : QLayout*, row : Int32, column : Int32, row_span : Int32, column_span : Int32, unnamed_arg_5 : Alignment) : Void
    fun bg_QGridLayout_setOriginCorner_Qt__Corner(_self_ : QGridLayout*, unnamed_arg_0 : Corner) : Void
    fun bg_QGridLayout_originCorner_(_self_ : QGridLayout*) : Corner
    fun bg_QGridLayout_itemAt_int(_self_ : QGridLayout*, index : Int32) : QLayoutItem*
    fun bg_QGridLayout_itemAtPosition_int_int(_self_ : QGridLayout*, row : Int32, column : Int32) : QLayoutItem*
    fun bg_QGridLayout_takeAt_int(_self_ : QGridLayout*, index : Int32) : QLayoutItem*
    fun bg_QGridLayout_count_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_setGeometry_const_QRect_R(_self_ : QGridLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QGridLayout_addItem_QLayoutItem_X_int_int_int_int(_self_ : QGridLayout*, item : QLayoutItem*, row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
    fun bg_QGridLayout_addItem_QLayoutItem_X_int_int_int_int_Qt__Alignment(_self_ : QGridLayout*, item : QLayoutItem*, row : Int32, column : Int32, row_span : Int32, column_span : Int32, unnamed_arg_5 : Alignment) : Void
    fun bg_QGridLayout_setDefaultPositioning_int_Qt__Orientation(_self_ : QGridLayout*, n : Int32, orient : Orientation) : Void
    fun bg_QGridLayout_getItemPosition_int_int_X_int_X_int_X_int_X(_self_ : QGridLayout*, idx : Int32, row : Int32*, column : Int32*, row_span : Int32*, column_span : Int32*) : Void
    fun bg_QGridLayout_addItem_QLayoutItem_X(_self_ : QGridLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_geometry_(_self_ : QGridLayout*) : QRect*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : QGridLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : QGridLayout*) : Bool
    fun bg_QLayout_controlTypes_(_self_ : QGridLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_(_self_ : QGridLayout*) : QLayout*
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : QGridLayout*, e : QChildEvent*) : Void
    fun bg_QGridLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGridLayout_sizeHint_SUPER_(_self_ : QGridLayout*) : QSize*
    fun bg_QGridLayout_minimumSize_SUPER_(_self_ : QGridLayout*) : QSize*
    fun bg_QGridLayout_maximumSize_SUPER_(_self_ : QGridLayout*) : QSize*
    fun bg_QGridLayout_hasHeightForWidth_SUPER_(_self_ : QGridLayout*) : Bool
    fun bg_QGridLayout_heightForWidth_SUPER_int(_self_ : QGridLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QGridLayout_minimumHeightForWidth_SUPER_int(_self_ : QGridLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QGridLayout_expandingDirections_SUPER_(_self_ : QGridLayout*) : Orientations
    fun bg_QGridLayout_invalidate_SUPER_(_self_ : QGridLayout*) : Void
    fun bg_QGridLayout_itemAt_SUPER_int(_self_ : QGridLayout*, index : Int32) : QLayoutItem*
    fun bg_QGridLayout_takeAt_SUPER_int(_self_ : QGridLayout*, index : Int32) : QLayoutItem*
    fun bg_QGridLayout_count_SUPER_(_self_ : QGridLayout*) : Int32
    fun bg_QGridLayout_setGeometry_SUPER_const_QRect_R(_self_ : QGridLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QGridLayout_addItem_SUPER_QLayoutItem_X(_self_ : QGridLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QLayout_geometry_SUPER_(_self_ : QGridLayout*) : QRect*
    fun bg_QLayout_indexOf_SUPER_QWidget_X(_self_ : QGridLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_SUPER_(_self_ : QGridLayout*) : Bool
    fun bg_QLayout_controlTypes_SUPER_(_self_ : QGridLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_SUPER_(_self_ : QGridLayout*) : QLayout*
    fun bg_QLayout_childEvent_SUPER_QChildEvent_X(_self_ : QGridLayout*, e : QChildEvent*) : Void
    fun bg_BgInherit_QGridLayout_JUMPTABLE_BgJumptable_QGridLayout_R(_self_ : QGridLayout*, table : BgJumptable_QGridLayout*) : Void
    fun bg_QBoxLayout_metaObject_(_self_ : QBoxLayout*) : QMetaObject*
    fun bg_QBoxLayout_qt_metacast_const_char_X(_self_ : QBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QBoxLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QBoxLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QBoxLayout__CONSTRUCT_QBoxLayout__Direction_QWidget_X(unnamed_arg_0 : BoxLayout::Direction, parent : QWidget*) : QBoxLayout*
    fun bg_QBoxLayout_direction_(_self_ : QBoxLayout*) : BoxLayout::Direction
    fun bg_QBoxLayout_setDirection_QBoxLayout__Direction(_self_ : QBoxLayout*, unnamed_arg_0 : BoxLayout::Direction) : Void
    fun bg_QBoxLayout_addSpacing_int(_self_ : QBoxLayout*, size : Int32) : Void
    fun bg_QBoxLayout_addStretch_int(_self_ : QBoxLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_addSpacerItem_QSpacerItem_X(_self_ : QBoxLayout*, spacer_item : QSpacerItem*) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X_int(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*, stretch : Int32) : Void
    fun bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*, stretch : Int32, alignment : Alignment) : Void
    fun bg_QBoxLayout_addLayout_QLayout_X_int(_self_ : QBoxLayout*, layout : QLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_addStrut_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QBoxLayout_addItem_QLayoutItem_X(_self_ : QBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_insertSpacing_int_int(_self_ : QBoxLayout*, index : Int32, size : Int32) : Void
    fun bg_QBoxLayout_insertStretch_int_int(_self_ : QBoxLayout*, index : Int32, stretch : Int32) : Void
    fun bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(_self_ : QBoxLayout*, index : Int32, spacer_item : QSpacerItem*) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X_int(_self_ : QBoxLayout*, index : Int32, widget : QWidget*, stretch : Int32) : Void
    fun bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(_self_ : QBoxLayout*, index : Int32, widget : QWidget*, stretch : Int32, alignment : Alignment) : Void
    fun bg_QBoxLayout_insertLayout_int_QLayout_X_int(_self_ : QBoxLayout*, index : Int32, layout : QLayout*, stretch : Int32) : Void
    fun bg_QBoxLayout_insertItem_int_QLayoutItem_X(_self_ : QBoxLayout*, index : Int32, unnamed_arg_1 : QLayoutItem*) : Void
    fun bg_QBoxLayout_spacing_(_self_ : QBoxLayout*) : Int32
    fun bg_QBoxLayout_setSpacing_int(_self_ : QBoxLayout*, spacing : Int32) : Void
    fun bg_QBoxLayout_setStretchFactor_QWidget_X_int(_self_ : QBoxLayout*, w : QWidget*, stretch : Int32) : Bool
    fun bg_QBoxLayout_setStretchFactor_QLayout_X_int(_self_ : QBoxLayout*, l : QLayout*, stretch : Int32) : Bool
    fun bg_QBoxLayout_setStretch_int_int(_self_ : QBoxLayout*, index : Int32, stretch : Int32) : Void
    fun bg_QBoxLayout_stretch_int(_self_ : QBoxLayout*, index : Int32) : Int32
    fun bg_QBoxLayout_sizeHint_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_(_self_ : QBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_(_self_ : QBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_(_self_ : QBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_(_self_ : QBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_const_QRect_R(_self_ : QBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayout_geometry_(_self_ : QBoxLayout*) : QRect*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : QBoxLayout*) : Bool
    fun bg_QLayout_controlTypes_(_self_ : QBoxLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_(_self_ : QBoxLayout*) : QLayout*
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : QBoxLayout*, e : QChildEvent*) : Void
    fun bg_QBoxLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QBoxLayout_addItem_SUPER_QLayoutItem_X(_self_ : QBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_sizeHint_SUPER_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_SUPER_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_SUPER_(_self_ : QBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_SUPER_(_self_ : QBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_SUPER_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_SUPER_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_SUPER_(_self_ : QBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_SUPER_(_self_ : QBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_SUPER_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_SUPER_int(_self_ : QBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_SUPER_(_self_ : QBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_SUPER_const_QRect_R(_self_ : QBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QLayout_geometry_SUPER_(_self_ : QBoxLayout*) : QRect*
    fun bg_QLayout_indexOf_SUPER_QWidget_X(_self_ : QBoxLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_SUPER_(_self_ : QBoxLayout*) : Bool
    fun bg_QLayout_controlTypes_SUPER_(_self_ : QBoxLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_SUPER_(_self_ : QBoxLayout*) : QLayout*
    fun bg_QLayout_childEvent_SUPER_QChildEvent_X(_self_ : QBoxLayout*, e : QChildEvent*) : Void
    fun bg_BgInherit_QBoxLayout_JUMPTABLE_BgJumptable_QBoxLayout_R(_self_ : QBoxLayout*, table : BgJumptable_QBoxLayout*) : Void
    fun bg_QHBoxLayout_metaObject_(_self_ : QHBoxLayout*) : QMetaObject*
    fun bg_QHBoxLayout_qt_metacast_const_char_X(_self_ : QHBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QHBoxLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QHBoxLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QHBoxLayout__CONSTRUCT_() : QHBoxLayout*
    fun bg_QHBoxLayout__CONSTRUCT_QWidget_X(parent : QWidget*) : QHBoxLayout*
    fun bg_QBoxLayout_addItem_QLayoutItem_X(_self_ : QHBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_sizeHint_(_self_ : QHBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_(_self_ : QHBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_(_self_ : QHBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_(_self_ : QHBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_(_self_ : QHBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_(_self_ : QHBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_(_self_ : QHBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_const_QRect_R(_self_ : QHBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QHBoxLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QBoxLayout_addItem_SUPER_QLayoutItem_X(_self_ : QHBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_sizeHint_SUPER_(_self_ : QHBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_SUPER_(_self_ : QHBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_SUPER_(_self_ : QHBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_SUPER_(_self_ : QHBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_SUPER_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_SUPER_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_SUPER_(_self_ : QHBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_SUPER_(_self_ : QHBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_SUPER_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_SUPER_int(_self_ : QHBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_SUPER_(_self_ : QHBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_SUPER_const_QRect_R(_self_ : QHBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_BgInherit_QHBoxLayout_JUMPTABLE_BgJumptable_QHBoxLayout_R(_self_ : QHBoxLayout*, table : BgJumptable_QHBoxLayout*) : Void
    fun bg_QVBoxLayout_metaObject_(_self_ : QVBoxLayout*) : QMetaObject*
    fun bg_QVBoxLayout_qt_metacast_const_char_X(_self_ : QVBoxLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QVBoxLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QVBoxLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QVBoxLayout__CONSTRUCT_() : QVBoxLayout*
    fun bg_QVBoxLayout__CONSTRUCT_QWidget_X(parent : QWidget*) : QVBoxLayout*
    fun bg_QBoxLayout_addItem_QLayoutItem_X(_self_ : QVBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_sizeHint_(_self_ : QVBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_(_self_ : QVBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_(_self_ : QVBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_(_self_ : QVBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_(_self_ : QVBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_(_self_ : QVBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_(_self_ : QVBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_const_QRect_R(_self_ : QVBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_QVBoxLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QBoxLayout_addItem_SUPER_QLayoutItem_X(_self_ : QVBoxLayout*, unnamed_arg_0 : QLayoutItem*) : Void
    fun bg_QBoxLayout_sizeHint_SUPER_(_self_ : QVBoxLayout*) : QSize*
    fun bg_QBoxLayout_minimumSize_SUPER_(_self_ : QVBoxLayout*) : QSize*
    fun bg_QBoxLayout_maximumSize_SUPER_(_self_ : QVBoxLayout*) : QSize*
    fun bg_QBoxLayout_hasHeightForWidth_SUPER_(_self_ : QVBoxLayout*) : Bool
    fun bg_QBoxLayout_heightForWidth_SUPER_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_minimumHeightForWidth_SUPER_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : Int32
    fun bg_QBoxLayout_expandingDirections_SUPER_(_self_ : QVBoxLayout*) : Orientations
    fun bg_QBoxLayout_invalidate_SUPER_(_self_ : QVBoxLayout*) : Void
    fun bg_QBoxLayout_itemAt_SUPER_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_takeAt_SUPER_int(_self_ : QVBoxLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QBoxLayout_count_SUPER_(_self_ : QVBoxLayout*) : Int32
    fun bg_QBoxLayout_setGeometry_SUPER_const_QRect_R(_self_ : QVBoxLayout*, unnamed_arg_0 : QRect*) : Void
    fun bg_BgInherit_QVBoxLayout_JUMPTABLE_BgJumptable_QVBoxLayout_R(_self_ : QVBoxLayout*, table : BgJumptable_QVBoxLayout*) : Void
    fun bg_QButtonGroup_metaObject_(_self_ : QButtonGroup*) : QMetaObject*
    fun bg_QButtonGroup_qt_metacast_const_char_X(_self_ : QButtonGroup*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QButtonGroup*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QButtonGroup_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QButtonGroup__CONSTRUCT_QObject_X(parent : QObject*) : QButtonGroup*
    fun bg_QButtonGroup_setExclusive_bool(_self_ : QButtonGroup*, unnamed_arg_0 : Bool) : Void
    fun bg_QButtonGroup_exclusive_(_self_ : QButtonGroup*) : Bool
    fun bg_QButtonGroup_addButton_QAbstractButton_X_int(_self_ : QButtonGroup*, unnamed_arg_0 : QAbstractButton*, id : Int32) : Void
    fun bg_QButtonGroup_removeButton_QAbstractButton_X(_self_ : QButtonGroup*, unnamed_arg_0 : QAbstractButton*) : Void
    fun bg_QButtonGroup_buttons_(_self_ : QButtonGroup*) : ContainerQListQAbstractButtonX*
    fun bg_QButtonGroup_checkedButton_(_self_ : QButtonGroup*) : QAbstractButton*
    fun bg_QButtonGroup_button_int(_self_ : QButtonGroup*, id : Int32) : QAbstractButton*
    fun bg_QButtonGroup_setId_QAbstractButton_X_int(_self_ : QButtonGroup*, button : QAbstractButton*, id : Int32) : Void
    fun bg_QButtonGroup_id_QAbstractButton_X(_self_ : QButtonGroup*, button : QAbstractButton*) : Int32
    fun bg_QButtonGroup_checkedId_(_self_ : QButtonGroup*) : Int32
    fun bg_QButtonGroup_idClicked_int(_self_ : QButtonGroup*, unnamed_arg_0 : Int32) : Void
    fun bg_QButtonGroup_idPressed_int(_self_ : QButtonGroup*, unnamed_arg_0 : Int32) : Void
    fun bg_QButtonGroup_idReleased_int(_self_ : QButtonGroup*, unnamed_arg_0 : Int32) : Void
    fun bg_QButtonGroup_idToggled_int_bool(_self_ : QButtonGroup*, unnamed_arg_0 : Int32, unnamed_arg_1 : Bool) : Void
    fun bg_QObject_event_QEvent_X(_self_ : QButtonGroup*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QButtonGroup*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QButtonGroup*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QButtonGroup*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QButtonGroup*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QButtonGroup*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QButtonGroup*, signal : QMetaMethod*) : Void
    fun bg_QButtonGroup_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QButtonGroup_CONNECT_buttonClicked_CrystalProc_void__QAbstractButton_X_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonPressed_CrystalProc_void__QAbstractButton_X_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonReleased_CrystalProc_void__QAbstractButton_X_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonToggled_CrystalProc_void__QAbstractButton_X__bool_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_idClicked_CrystalProc_void__int_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_idPressed_CrystalProc_void__int_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_idReleased_CrystalProc_void__int_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_idToggled_CrystalProc_void__int__bool_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonClicked_CrystalProc_void__int_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonPressed_CrystalProc_void__int_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonReleased_CrystalProc_void__int_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QButtonGroup_CONNECT_buttonToggled_CrystalProc_void__int__bool_(_self_ : QButtonGroup*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QButtonGroup*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QButtonGroup*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QButtonGroup*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QButtonGroup*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QButtonGroup*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QButtonGroup*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QButtonGroup*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QButtonGroup_JUMPTABLE_BgJumptable_QButtonGroup_R(_self_ : QButtonGroup*, table : BgJumptable_QButtonGroup*) : Void
    fun bg_QCheckBox_metaObject_(_self_ : QCheckBox*) : QMetaObject*
    fun bg_QCheckBox_qt_metacast_const_char_X(_self_ : QCheckBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QCheckBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QCheckBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCheckBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCheckBox__CONSTRUCT_QWidget_X(parent : QWidget*) : QCheckBox*
    fun bg_QCheckBox__CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QCheckBox*
    fun bg_QCheckBox_sizeHint_(_self_ : QCheckBox*) : QSize*
    fun bg_QCheckBox_minimumSizeHint_(_self_ : QCheckBox*) : QSize*
    fun bg_QCheckBox_setTristate_bool(_self_ : QCheckBox*, y : Bool) : Void
    fun bg_QCheckBox_isTristate_(_self_ : QCheckBox*) : Bool
    fun bg_QCheckBox_checkState_(_self_ : QCheckBox*) : CheckState
    fun bg_QCheckBox_setCheckState_Qt__CheckState(_self_ : QCheckBox*, state : CheckState) : Void
    fun bg_QCheckBox_stateChanged_int(_self_ : QCheckBox*, unnamed_arg_0 : Int32) : Void
    fun bg_QCheckBox_event_QEvent_X(_self_ : QCheckBox*, e : QEvent*) : Bool
    fun bg_QCheckBox_hitButton_const_QPoint_R(_self_ : QCheckBox*, pos : QPoint) : Bool
    fun bg_QCheckBox_checkStateSet_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_nextCheckState_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_paintEvent_QPaintEvent_X(_self_ : QCheckBox*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(_self_ : QCheckBox*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QCheckBox_initStyleOption_QStyleOptionButton_X(_self_ : QCheckBox*, option : QStyleOptionButton*) : Void
    fun bg_QAbstractButton_keyPressEvent_QKeyEvent_X(_self_ : QCheckBox*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : QCheckBox*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_QMouseEvent_X(_self_ : QCheckBox*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(_self_ : QCheckBox*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_QFocusEvent_X(_self_ : QCheckBox*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_QFocusEvent_X(_self_ : QCheckBox*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_QEvent_X(_self_ : QCheckBox*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_QTimerEvent_X(_self_ : QCheckBox*, e : QTimerEvent*) : Void
    fun bg_QCheckBox_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QCheckBox_CONNECT_stateChanged_CrystalProc_void__int_(_self_ : QCheckBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCheckBox_sizeHint_SUPER_(_self_ : QCheckBox*) : QSize*
    fun bg_QCheckBox_minimumSizeHint_SUPER_(_self_ : QCheckBox*) : QSize*
    fun bg_QCheckBox_event_SUPER_QEvent_X(_self_ : QCheckBox*, e : QEvent*) : Bool
    fun bg_QCheckBox_hitButton_SUPER_const_QPoint_R(_self_ : QCheckBox*, pos : QPoint) : Bool
    fun bg_QCheckBox_checkStateSet_SUPER_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_nextCheckState_SUPER_(_self_ : QCheckBox*) : Void
    fun bg_QCheckBox_paintEvent_SUPER_QPaintEvent_X(_self_ : QCheckBox*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QCheckBox_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QCheckBox*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QCheckBox*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QCheckBox*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QCheckBox*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QCheckBox*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(_self_ : QCheckBox*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QCheckBox*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_SUPER_QEvent_X(_self_ : QCheckBox*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(_self_ : QCheckBox*, e : QTimerEvent*) : Void
    fun bg_BgInherit_QCheckBox_JUMPTABLE_BgJumptable_QCheckBox_R(_self_ : QCheckBox*, table : BgJumptable_QCheckBox*) : Void
    fun bg_QDialog_metaObject_(_self_ : QDialog*) : QMetaObject*
    fun bg_QDialog_qt_metacast_const_char_X(_self_ : QDialog*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDialog*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDialog_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDialog_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDialog__CONSTRUCT_QWidget_X(parent : QWidget*) : QDialog*
    fun bg_QDialog__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QDialog*
    fun bg_QDialog_result_(_self_ : QDialog*) : Int32
    fun bg_QDialog_setVisible_bool(_self_ : QDialog*, visible : Bool) : Void
    fun bg_QDialog_sizeHint_(_self_ : QDialog*) : QSize*
    fun bg_QDialog_minimumSizeHint_(_self_ : QDialog*) : QSize*
    fun bg_QDialog_setSizeGripEnabled_bool(_self_ : QDialog*, unnamed_arg_0 : Bool) : Void
    fun bg_QDialog_isSizeGripEnabled_(_self_ : QDialog*) : Bool
    fun bg_QDialog_setModal_bool(_self_ : QDialog*, modal : Bool) : Void
    fun bg_QDialog_setResult_int(_self_ : QDialog*, r : Int32) : Void
    fun bg_QDialog_finished_int(_self_ : QDialog*, result : Int32) : Void
    fun bg_QDialog_accepted_(_self_ : QDialog*) : Void
    fun bg_QDialog_rejected_(_self_ : QDialog*) : Void
    fun bg_QDialog_open_(_self_ : QDialog*) : Void
    fun bg_QDialog_exec_(_self_ : QDialog*) : Int32
    fun bg_QDialog_done_int(_self_ : QDialog*, unnamed_arg_0 : Int32) : Void
    fun bg_QDialog_accept_(_self_ : QDialog*) : Void
    fun bg_QDialog_reject_(_self_ : QDialog*) : Void
    fun bg_QDialog__CONSTRUCT_QDialogPrivate_R_QWidget_X(unnamed_arg_0 : QDialogPrivate*, parent : QWidget*) : QDialog*
    fun bg_QDialog__CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(unnamed_arg_0 : QDialogPrivate*, parent : QWidget*, f : WindowFlags) : QDialog*
    fun bg_QDialog_keyPressEvent_QKeyEvent_X(_self_ : QDialog*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QDialog_closeEvent_QCloseEvent_X(_self_ : QDialog*, unnamed_arg_0 : QCloseEvent*) : Void
    fun bg_QDialog_showEvent_QShowEvent_X(_self_ : QDialog*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QDialog_resizeEvent_QResizeEvent_X(_self_ : QDialog*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QDialog_contextMenuEvent_QContextMenuEvent_X(_self_ : QDialog*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QDialog_eventFilter_QObject_X_QEvent_X(_self_ : QDialog*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QDialog_adjustPosition_QWidget_X(_self_ : QDialog*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QWidget_devType_(_self_ : QDialog*) : Int32
    fun bg_QWidget_heightForWidth_int(_self_ : QDialog*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QDialog*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QDialog*) : QPaintEngine*
    fun bg_QWidget_event_QEvent_X(_self_ : QDialog*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QDialog*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QDialog*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QDialog*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QDialog*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QDialog*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QDialog*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : QDialog*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QDialog*, event : QMoveEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QDialog*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QDialog*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QDialog*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QDialog*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QDialog*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QDialog*, event : QDropEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QDialog*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QDialog*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QDialog*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QDialog*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QDialog*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QDialog*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QDialog*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QDialog*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QDialog*, next_ : Bool) : Bool
    fun bg_QDialog_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDialog_CONNECT_finished_CrystalProc_void__int_(_self_ : QDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDialog_CONNECT_accepted_CrystalProc_void_(_self_ : QDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDialog_CONNECT_rejected_CrystalProc_void_(_self_ : QDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDialog_setVisible_SUPER_bool(_self_ : QDialog*, visible : Bool) : Void
    fun bg_QDialog_sizeHint_SUPER_(_self_ : QDialog*) : QSize*
    fun bg_QDialog_minimumSizeHint_SUPER_(_self_ : QDialog*) : QSize*
    fun bg_QDialog_open_SUPER_(_self_ : QDialog*) : Void
    fun bg_QDialog_exec_SUPER_(_self_ : QDialog*) : Int32
    fun bg_QDialog_done_SUPER_int(_self_ : QDialog*, unnamed_arg_0 : Int32) : Void
    fun bg_QDialog_accept_SUPER_(_self_ : QDialog*) : Void
    fun bg_QDialog_reject_SUPER_(_self_ : QDialog*) : Void
    fun bg_QDialog_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QDialog*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QDialog_closeEvent_SUPER_QCloseEvent_X(_self_ : QDialog*, unnamed_arg_0 : QCloseEvent*) : Void
    fun bg_QDialog_showEvent_SUPER_QShowEvent_X(_self_ : QDialog*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QDialog_resizeEvent_SUPER_QResizeEvent_X(_self_ : QDialog*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QDialog_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QDialog*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QDialog_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QDialog*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QDialog*) : Int32
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QDialog*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QDialog*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QDialog*) : QPaintEngine*
    fun bg_QWidget_event_SUPER_QEvent_X(_self_ : QDialog*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QDialog*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QDialog*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QDialog*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QDialog*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QDialog*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QDialog*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QDialog*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QDialog*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QDialog*, event : QMoveEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QDialog*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QDialog*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QDialog*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QDialog*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QDialog*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QDialog*, event : QDropEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QDialog*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QDialog*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_SUPER_QEvent_X(_self_ : QDialog*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QDialog*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QDialog*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QDialog*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QDialog*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QDialog*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QDialog*, next_ : Bool) : Bool
    fun bg_BgInherit_QDialog_JUMPTABLE_BgJumptable_QDialog_R(_self_ : QDialog*, table : BgJumptable_QDialog*) : Void
    fun bg_QComboBox_metaObject_(_self_ : QComboBox*) : QMetaObject*
    fun bg_QComboBox_qt_metacast_const_char_X(_self_ : QComboBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QComboBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QComboBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QComboBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QComboBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QComboBox__CONSTRUCT_QWidget_X(parent : QWidget*) : QComboBox*
    fun bg_QComboBox_maxVisibleItems_(_self_ : QComboBox*) : Int32
    fun bg_QComboBox_setMaxVisibleItems_int(_self_ : QComboBox*, max_items : Int32) : Void
    fun bg_QComboBox_count_(_self_ : QComboBox*) : Int32
    fun bg_QComboBox_setMaxCount_int(_self_ : QComboBox*, max : Int32) : Void
    fun bg_QComboBox_maxCount_(_self_ : QComboBox*) : Int32
    fun bg_QComboBox_duplicatesEnabled_(_self_ : QComboBox*) : Bool
    fun bg_QComboBox_setDuplicatesEnabled_bool(_self_ : QComboBox*, enable : Bool) : Void
    fun bg_QComboBox_setFrame_bool(_self_ : QComboBox*, unnamed_arg_0 : Bool) : Void
    fun bg_QComboBox_hasFrame_(_self_ : QComboBox*) : Bool
    fun bg_QComboBox_findText_const_QString_R(_self_ : QComboBox*, text : CrystalString) : Int32
    fun bg_QComboBox_findText_const_QString_R_Qt__MatchFlags(_self_ : QComboBox*, text : CrystalString, flags : MatchFlags) : Int32
    fun bg_QComboBox_findData_const_QVariant_R_int(_self_ : QComboBox*, data : CrystalVariant, role : Int32) : Int32
    fun bg_QComboBox_findData_const_QVariant_R_int_Qt__MatchFlags(_self_ : QComboBox*, data : CrystalVariant, role : Int32, flags : MatchFlags) : Int32
    fun bg_QComboBox_insertPolicy_(_self_ : QComboBox*) : ComboBox::InsertPolicy
    fun bg_QComboBox_setInsertPolicy_QComboBox__InsertPolicy(_self_ : QComboBox*, policy : ComboBox::InsertPolicy) : Void
    fun bg_QComboBox_sizeAdjustPolicy_(_self_ : QComboBox*) : ComboBox::SizeAdjustPolicy
    fun bg_QComboBox_setSizeAdjustPolicy_QComboBox__SizeAdjustPolicy(_self_ : QComboBox*, policy : ComboBox::SizeAdjustPolicy) : Void
    fun bg_QComboBox_minimumContentsLength_(_self_ : QComboBox*) : Int32
    fun bg_QComboBox_setMinimumContentsLength_int(_self_ : QComboBox*, characters : Int32) : Void
    fun bg_QComboBox_iconSize_(_self_ : QComboBox*) : QSize*
    fun bg_QComboBox_setIconSize_const_QSize_R(_self_ : QComboBox*, size : QSize*) : Void
    fun bg_QComboBox_setPlaceholderText_const_QString_R(_self_ : QComboBox*, placeholder_text : CrystalString) : Void
    fun bg_QComboBox_placeholderText_(_self_ : QComboBox*) : CrystalString
    fun bg_QComboBox_isEditable_(_self_ : QComboBox*) : Bool
    fun bg_QComboBox_setEditable_bool(_self_ : QComboBox*, editable : Bool) : Void
    fun bg_QComboBox_setLineEdit_QLineEdit_X(_self_ : QComboBox*, edit : QLineEdit*) : Void
    fun bg_QComboBox_lineEdit_(_self_ : QComboBox*) : QLineEdit*
    fun bg_QComboBox_setValidator_const_QValidator_X(_self_ : QComboBox*, v : QValidator*) : Void
    fun bg_QComboBox_validator_(_self_ : QComboBox*) : QValidator*
    fun bg_QComboBox_setCompleter_QCompleter_X(_self_ : QComboBox*, c : QCompleter*) : Void
    fun bg_QComboBox_completer_(_self_ : QComboBox*) : QCompleter*
    fun bg_QComboBox_itemDelegate_(_self_ : QComboBox*) : QAbstractItemDelegate*
    fun bg_QComboBox_setItemDelegate_QAbstractItemDelegate_X(_self_ : QComboBox*, delegate : QAbstractItemDelegate*) : Void
    fun bg_QComboBox_model_(_self_ : QComboBox*) : QAbstractItemModel*
    fun bg_QComboBox_setModel_QAbstractItemModel_X(_self_ : QComboBox*, model : QAbstractItemModel*) : Void
    fun bg_QComboBox_rootModelIndex_(_self_ : QComboBox*) : QModelIndex*
    fun bg_QComboBox_setRootModelIndex_const_QModelIndex_R(_self_ : QComboBox*, index : QModelIndex*) : Void
    fun bg_QComboBox_modelColumn_(_self_ : QComboBox*) : Int32
    fun bg_QComboBox_setModelColumn_int(_self_ : QComboBox*, visible_column : Int32) : Void
    fun bg_QComboBox_currentIndex_(_self_ : QComboBox*) : Int32
    fun bg_QComboBox_currentText_(_self_ : QComboBox*) : CrystalString
    fun bg_QComboBox_currentData_int(_self_ : QComboBox*, role : Int32) : CrystalVariant
    fun bg_QComboBox_itemText_int(_self_ : QComboBox*, index : Int32) : CrystalString
    fun bg_QComboBox_itemIcon_int(_self_ : QComboBox*, index : Int32) : QIcon*
    fun bg_QComboBox_itemData_int_int(_self_ : QComboBox*, index : Int32, role : Int32) : CrystalVariant
    fun bg_QComboBox_addItem_const_QString_R(_self_ : QComboBox*, text : CrystalString) : Void
    fun bg_QComboBox_addItem_const_QString_R_const_QVariant_R(_self_ : QComboBox*, text : CrystalString, user_data : CrystalVariant) : Void
    fun bg_QComboBox_addItem_const_QIcon_R_const_QString_R(_self_ : QComboBox*, icon : QIcon*, text : CrystalString) : Void
    fun bg_QComboBox_addItem_const_QIcon_R_const_QString_R_const_QVariant_R(_self_ : QComboBox*, icon : QIcon*, text : CrystalString, user_data : CrystalVariant) : Void
    fun bg_QComboBox_addItems_const_QStringList_R(_self_ : QComboBox*, texts : QStringList*) : Void
    fun bg_QComboBox_insertItem_int_const_QString_R(_self_ : QComboBox*, index : Int32, text : CrystalString) : Void
    fun bg_QComboBox_insertItem_int_const_QString_R_const_QVariant_R(_self_ : QComboBox*, index : Int32, text : CrystalString, user_data : CrystalVariant) : Void
    fun bg_QComboBox_insertItem_int_const_QIcon_R_const_QString_R(_self_ : QComboBox*, index : Int32, icon : QIcon*, text : CrystalString) : Void
    fun bg_QComboBox_insertItem_int_const_QIcon_R_const_QString_R_const_QVariant_R(_self_ : QComboBox*, index : Int32, icon : QIcon*, text : CrystalString, user_data : CrystalVariant) : Void
    fun bg_QComboBox_insertItems_int_const_QStringList_R(_self_ : QComboBox*, index : Int32, texts : QStringList*) : Void
    fun bg_QComboBox_insertSeparator_int(_self_ : QComboBox*, index : Int32) : Void
    fun bg_QComboBox_removeItem_int(_self_ : QComboBox*, index : Int32) : Void
    fun bg_QComboBox_setItemText_int_const_QString_R(_self_ : QComboBox*, index : Int32, text : CrystalString) : Void
    fun bg_QComboBox_setItemIcon_int_const_QIcon_R(_self_ : QComboBox*, index : Int32, icon : QIcon*) : Void
    fun bg_QComboBox_setItemData_int_const_QVariant_R_int(_self_ : QComboBox*, index : Int32, value : CrystalVariant, role : Int32) : Void
    fun bg_QComboBox_view_(_self_ : QComboBox*) : QAbstractItemView*
    fun bg_QComboBox_setView_QAbstractItemView_X(_self_ : QComboBox*, item_view : QAbstractItemView*) : Void
    fun bg_QComboBox_sizeHint_(_self_ : QComboBox*) : QSize*
    fun bg_QComboBox_minimumSizeHint_(_self_ : QComboBox*) : QSize*
    fun bg_QComboBox_showPopup_(_self_ : QComboBox*) : Void
    fun bg_QComboBox_hidePopup_(_self_ : QComboBox*) : Void
    fun bg_QComboBox_event_QEvent_X(_self_ : QComboBox*, event : QEvent*) : Bool
    fun bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery(_self_ : QComboBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery_const_QVariant_R(_self_ : QComboBox*, query : InputMethodQuery, argument : CrystalVariant) : CrystalVariant
    fun bg_QComboBox_clear_(_self_ : QComboBox*) : Void
    fun bg_QComboBox_clearEditText_(_self_ : QComboBox*) : Void
    fun bg_QComboBox_setEditText_const_QString_R(_self_ : QComboBox*, text : CrystalString) : Void
    fun bg_QComboBox_setCurrentIndex_int(_self_ : QComboBox*, index : Int32) : Void
    fun bg_QComboBox_setCurrentText_const_QString_R(_self_ : QComboBox*, text : CrystalString) : Void
    fun bg_QComboBox_editTextChanged_const_QString_R(_self_ : QComboBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QComboBox_textActivated_const_QString_R(_self_ : QComboBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QComboBox_textHighlighted_const_QString_R(_self_ : QComboBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QComboBox_currentTextChanged_const_QString_R(_self_ : QComboBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QComboBox_focusInEvent_QFocusEvent_X(_self_ : QComboBox*, e : QFocusEvent*) : Void
    fun bg_QComboBox_focusOutEvent_QFocusEvent_X(_self_ : QComboBox*, e : QFocusEvent*) : Void
    fun bg_QComboBox_changeEvent_QEvent_X(_self_ : QComboBox*, e : QEvent*) : Void
    fun bg_QComboBox_resizeEvent_QResizeEvent_X(_self_ : QComboBox*, e : QResizeEvent*) : Void
    fun bg_QComboBox_paintEvent_QPaintEvent_X(_self_ : QComboBox*, e : QPaintEvent*) : Void
    fun bg_QComboBox_showEvent_QShowEvent_X(_self_ : QComboBox*, e : QShowEvent*) : Void
    fun bg_QComboBox_hideEvent_QHideEvent_X(_self_ : QComboBox*, e : QHideEvent*) : Void
    fun bg_QComboBox_mousePressEvent_QMouseEvent_X(_self_ : QComboBox*, e : QMouseEvent*) : Void
    fun bg_QComboBox_mouseReleaseEvent_QMouseEvent_X(_self_ : QComboBox*, e : QMouseEvent*) : Void
    fun bg_QComboBox_keyPressEvent_QKeyEvent_X(_self_ : QComboBox*, e : QKeyEvent*) : Void
    fun bg_QComboBox_keyReleaseEvent_QKeyEvent_X(_self_ : QComboBox*, e : QKeyEvent*) : Void
    fun bg_QComboBox_wheelEvent_QWheelEvent_X(_self_ : QComboBox*, e : QWheelEvent*) : Void
    fun bg_QComboBox_contextMenuEvent_QContextMenuEvent_X(_self_ : QComboBox*, e : QContextMenuEvent*) : Void
    fun bg_QComboBox_inputMethodEvent_QInputMethodEvent_X(_self_ : QComboBox*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QComboBox_initStyleOption_QStyleOptionComboBox_X(_self_ : QComboBox*, option : QStyleOptionComboBox*) : Void
    fun bg_QComboBox__CONSTRUCT_QComboBoxPrivate_R_QWidget_X(unnamed_arg_0 : QComboBoxPrivate*, unnamed_arg_1 : QWidget*) : QComboBox*
    fun bg_QWidget_devType_(_self_ : QComboBox*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QComboBox*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : QComboBox*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QComboBox*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QComboBox*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QComboBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QComboBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QComboBox*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QComboBox*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QComboBox*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QComboBox*, event : QCloseEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QComboBox*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QComboBox*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QComboBox*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QComboBox*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QComboBox*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QComboBox*, event : QDropEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QComboBox*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QComboBox*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QComboBox*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QComboBox*) : QPainter*
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QComboBox*, next_ : Bool) : Bool
    fun bg_QComboBox_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QComboBox_CONNECT_editTextChanged_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_activated_CrystalProc_void__int_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_textActivated_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_highlighted_CrystalProc_void__int_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_textHighlighted_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_currentIndexChanged_CrystalProc_void__int_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_currentIndexChanged_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_currentTextChanged_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_activated_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_CONNECT_highlighted_CrystalProc_void__const_QString_R_(_self_ : QComboBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QComboBox_sizeHint_SUPER_(_self_ : QComboBox*) : QSize*
    fun bg_QComboBox_minimumSizeHint_SUPER_(_self_ : QComboBox*) : QSize*
    fun bg_QComboBox_showPopup_SUPER_(_self_ : QComboBox*) : Void
    fun bg_QComboBox_hidePopup_SUPER_(_self_ : QComboBox*) : Void
    fun bg_QComboBox_event_SUPER_QEvent_X(_self_ : QComboBox*, event : QEvent*) : Bool
    fun bg_QComboBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QComboBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QComboBox_focusInEvent_SUPER_QFocusEvent_X(_self_ : QComboBox*, e : QFocusEvent*) : Void
    fun bg_QComboBox_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QComboBox*, e : QFocusEvent*) : Void
    fun bg_QComboBox_changeEvent_SUPER_QEvent_X(_self_ : QComboBox*, e : QEvent*) : Void
    fun bg_QComboBox_resizeEvent_SUPER_QResizeEvent_X(_self_ : QComboBox*, e : QResizeEvent*) : Void
    fun bg_QComboBox_paintEvent_SUPER_QPaintEvent_X(_self_ : QComboBox*, e : QPaintEvent*) : Void
    fun bg_QComboBox_showEvent_SUPER_QShowEvent_X(_self_ : QComboBox*, e : QShowEvent*) : Void
    fun bg_QComboBox_hideEvent_SUPER_QHideEvent_X(_self_ : QComboBox*, e : QHideEvent*) : Void
    fun bg_QComboBox_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QComboBox*, e : QMouseEvent*) : Void
    fun bg_QComboBox_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QComboBox*, e : QMouseEvent*) : Void
    fun bg_QComboBox_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QComboBox*, e : QKeyEvent*) : Void
    fun bg_QComboBox_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QComboBox*, e : QKeyEvent*) : Void
    fun bg_QComboBox_wheelEvent_SUPER_QWheelEvent_X(_self_ : QComboBox*, e : QWheelEvent*) : Void
    fun bg_QComboBox_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QComboBox*, e : QContextMenuEvent*) : Void
    fun bg_QComboBox_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QComboBox*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QComboBox*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QComboBox*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QComboBox*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QComboBox*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QComboBox*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QComboBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QComboBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QComboBox*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QComboBox*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QComboBox*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QComboBox*, event : QCloseEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QComboBox*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QComboBox*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QComboBox*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QComboBox*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QComboBox*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QComboBox*, event : QDropEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QComboBox*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QComboBox*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QComboBox*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QComboBox*) : QPainter*
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QComboBox*, next_ : Bool) : Bool
    fun bg_BgInherit_QComboBox_JUMPTABLE_BgJumptable_QComboBox_R(_self_ : QComboBox*, table : BgJumptable_QComboBox*) : Void
    fun bg_QPushButton_metaObject_(_self_ : QPushButton*) : QMetaObject*
    fun bg_QPushButton_qt_metacast_const_char_X(_self_ : QPushButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QPushButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QPushButton_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QPushButton_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QPushButton__CONSTRUCT_QWidget_X(parent : QWidget*) : QPushButton*
    fun bg_QPushButton__CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QPushButton*
    fun bg_QPushButton__CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(icon : QIcon*, text : CrystalString, parent : QWidget*) : QPushButton*
    fun bg_QPushButton_sizeHint_(_self_ : QPushButton*) : QSize*
    fun bg_QPushButton_minimumSizeHint_(_self_ : QPushButton*) : QSize*
    fun bg_QPushButton_autoDefault_(_self_ : QPushButton*) : Bool
    fun bg_QPushButton_setAutoDefault_bool(_self_ : QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_isDefault_(_self_ : QPushButton*) : Bool
    fun bg_QPushButton_setDefault_bool(_self_ : QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_setMenu_QMenu_X(_self_ : QPushButton*, menu : QMenu*) : Void
    fun bg_QPushButton_menu_(_self_ : QPushButton*) : QMenu*
    fun bg_QPushButton_setFlat_bool(_self_ : QPushButton*, unnamed_arg_0 : Bool) : Void
    fun bg_QPushButton_isFlat_(_self_ : QPushButton*) : Bool
    fun bg_QPushButton_showMenu_(_self_ : QPushButton*) : Void
    fun bg_QPushButton_event_QEvent_X(_self_ : QPushButton*, e : QEvent*) : Bool
    fun bg_QPushButton_paintEvent_QPaintEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QPushButton_keyPressEvent_QKeyEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QPushButton_focusInEvent_QFocusEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_focusOutEvent_QFocusEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_initStyleOption_QStyleOptionButton_X(_self_ : QPushButton*, option : QStyleOptionButton*) : Void
    fun bg_QPushButton_hitButton_const_QPoint_R(_self_ : QPushButton*, pos : QPoint) : Bool
    fun bg_QPushButton__CONSTRUCT_QPushButtonPrivate_R_QWidget_X(dd : QPushButtonPrivate*, parent : QWidget*) : QPushButton*
    fun bg_QAbstractButton_checkStateSet_(_self_ : QPushButton*) : Void
    fun bg_QAbstractButton_nextCheckState_(_self_ : QPushButton*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : QPushButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_QMouseEvent_X(_self_ : QPushButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(_self_ : QPushButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(_self_ : QPushButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_changeEvent_QEvent_X(_self_ : QPushButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_QTimerEvent_X(_self_ : QPushButton*, e : QTimerEvent*) : Void
    fun bg_QPushButton_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QPushButton_sizeHint_SUPER_(_self_ : QPushButton*) : QSize*
    fun bg_QPushButton_minimumSizeHint_SUPER_(_self_ : QPushButton*) : QSize*
    fun bg_QPushButton_event_SUPER_QEvent_X(_self_ : QPushButton*, e : QEvent*) : Bool
    fun bg_QPushButton_paintEvent_SUPER_QPaintEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QPushButton_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QPushButton_focusInEvent_SUPER_QFocusEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QPushButton*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QPushButton_hitButton_SUPER_const_QPoint_R(_self_ : QPushButton*, pos : QPoint) : Bool
    fun bg_QAbstractButton_checkStateSet_SUPER_(_self_ : QPushButton*) : Void
    fun bg_QAbstractButton_nextCheckState_SUPER_(_self_ : QPushButton*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QPushButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QPushButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QPushButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QPushButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_changeEvent_SUPER_QEvent_X(_self_ : QPushButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(_self_ : QPushButton*, e : QTimerEvent*) : Void
    fun bg_BgInherit_QPushButton_JUMPTABLE_BgJumptable_QPushButton_R(_self_ : QPushButton*, table : BgJumptable_QPushButton*) : Void
    fun bg_QCompleter_metaObject_(_self_ : QCompleter*) : QMetaObject*
    fun bg_QCompleter_qt_metacast_const_char_X(_self_ : QCompleter*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QCompleter_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QCompleter*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QCompleter_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QCompleter_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QCompleter_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QCompleter__CONSTRUCT_QObject_X(parent : QObject*) : QCompleter*
    fun bg_QCompleter__CONSTRUCT_QAbstractItemModel_X_QObject_X(model : QAbstractItemModel*, parent : QObject*) : QCompleter*
    fun bg_QCompleter__CONSTRUCT_const_QStringList_R_QObject_X(completions : QStringList*, parent : QObject*) : QCompleter*
    fun bg_QCompleter_setWidget_QWidget_X(_self_ : QCompleter*, widget : QWidget*) : Void
    fun bg_QCompleter_widget_(_self_ : QCompleter*) : QWidget*
    fun bg_QCompleter_setModel_QAbstractItemModel_X(_self_ : QCompleter*, c : QAbstractItemModel*) : Void
    fun bg_QCompleter_model_(_self_ : QCompleter*) : QAbstractItemModel*
    fun bg_QCompleter_setCompletionMode_QCompleter__CompletionMode(_self_ : QCompleter*, mode : Completer::CompletionMode) : Void
    fun bg_QCompleter_completionMode_(_self_ : QCompleter*) : Completer::CompletionMode
    fun bg_QCompleter_setFilterMode_Qt__MatchFlags(_self_ : QCompleter*, filter_mode : MatchFlags) : Void
    fun bg_QCompleter_filterMode_(_self_ : QCompleter*) : MatchFlags
    fun bg_QCompleter_popup_(_self_ : QCompleter*) : QAbstractItemView*
    fun bg_QCompleter_setPopup_QAbstractItemView_X(_self_ : QCompleter*, popup : QAbstractItemView*) : Void
    fun bg_QCompleter_setCaseSensitivity_Qt__CaseSensitivity(_self_ : QCompleter*, case_sensitivity : CaseSensitivity) : Void
    fun bg_QCompleter_caseSensitivity_(_self_ : QCompleter*) : CaseSensitivity
    fun bg_QCompleter_setModelSorting_QCompleter__ModelSorting(_self_ : QCompleter*, sorting : Completer::ModelSorting) : Void
    fun bg_QCompleter_modelSorting_(_self_ : QCompleter*) : Completer::ModelSorting
    fun bg_QCompleter_setCompletionColumn_int(_self_ : QCompleter*, column : Int32) : Void
    fun bg_QCompleter_completionColumn_(_self_ : QCompleter*) : Int32
    fun bg_QCompleter_setCompletionRole_int(_self_ : QCompleter*, role : Int32) : Void
    fun bg_QCompleter_completionRole_(_self_ : QCompleter*) : Int32
    fun bg_QCompleter_wrapAround_(_self_ : QCompleter*) : Bool
    fun bg_QCompleter_maxVisibleItems_(_self_ : QCompleter*) : Int32
    fun bg_QCompleter_setMaxVisibleItems_int(_self_ : QCompleter*, max_items : Int32) : Void
    fun bg_QCompleter_completionCount_(_self_ : QCompleter*) : Int32
    fun bg_QCompleter_setCurrentRow_int(_self_ : QCompleter*, row : Int32) : Bool
    fun bg_QCompleter_currentRow_(_self_ : QCompleter*) : Int32
    fun bg_QCompleter_currentIndex_(_self_ : QCompleter*) : QModelIndex*
    fun bg_QCompleter_currentCompletion_(_self_ : QCompleter*) : CrystalString
    fun bg_QCompleter_completionModel_(_self_ : QCompleter*) : QAbstractItemModel*
    fun bg_QCompleter_completionPrefix_(_self_ : QCompleter*) : CrystalString
    fun bg_QCompleter_setCompletionPrefix_const_QString_R(_self_ : QCompleter*, prefix : CrystalString) : Void
    fun bg_QCompleter_complete_(_self_ : QCompleter*) : Void
    fun bg_QCompleter_complete_const_QRect_R(_self_ : QCompleter*, rect : QRect*) : Void
    fun bg_QCompleter_setWrapAround_bool(_self_ : QCompleter*, wrap : Bool) : Void
    fun bg_QCompleter_pathFromIndex_const_QModelIndex_R(_self_ : QCompleter*, index : QModelIndex*) : CrystalString
    fun bg_QCompleter_splitPath_const_QString_R(_self_ : QCompleter*, path : CrystalString) : QStringList*
    fun bg_QCompleter_eventFilter_QObject_X_QEvent_X(_self_ : QCompleter*, o : QObject*, e : QEvent*) : Bool
    fun bg_QCompleter_event_QEvent_X(_self_ : QCompleter*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QCompleter_activated_const_QString_R(_self_ : QCompleter*, text : CrystalString) : Void
    fun bg_QCompleter_activated_const_QModelIndex_R(_self_ : QCompleter*, index : QModelIndex*) : Void
    fun bg_QCompleter_highlighted_const_QString_R(_self_ : QCompleter*, text : CrystalString) : Void
    fun bg_QCompleter_highlighted_const_QModelIndex_R(_self_ : QCompleter*, index : QModelIndex*) : Void
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QCompleter*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QCompleter*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QCompleter*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QCompleter*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QCompleter*, signal : QMetaMethod*) : Void
    fun bg_QCompleter_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QCompleter_CONNECT_activated_CrystalProc_void__const_QString_R_(_self_ : QCompleter*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCompleter_CONNECT_activated_CrystalProc_void__const_QModelIndex_R_(_self_ : QCompleter*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCompleter_CONNECT_highlighted_CrystalProc_void__const_QString_R_(_self_ : QCompleter*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCompleter_CONNECT_highlighted_CrystalProc_void__const_QModelIndex_R_(_self_ : QCompleter*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QCompleter_pathFromIndex_SUPER_const_QModelIndex_R(_self_ : QCompleter*, index : QModelIndex*) : CrystalString
    fun bg_QCompleter_splitPath_SUPER_const_QString_R(_self_ : QCompleter*, path : CrystalString) : QStringList*
    fun bg_QCompleter_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QCompleter*, o : QObject*, e : QEvent*) : Bool
    fun bg_QCompleter_event_SUPER_QEvent_X(_self_ : QCompleter*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QCompleter*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QCompleter*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QCompleter*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QCompleter*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QCompleter*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QCompleter_JUMPTABLE_BgJumptable_QCompleter_R(_self_ : QCompleter*, table : BgJumptable_QCompleter*) : Void
    fun bg_QDateTimeEdit_metaObject_(_self_ : QDateTimeEdit*) : QMetaObject*
    fun bg_QDateTimeEdit_qt_metacast_const_char_X(_self_ : QDateTimeEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDateTimeEdit*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDateTimeEdit_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDateTimeEdit_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDateTimeEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDateTimeEdit__CONSTRUCT_QWidget_X(parent : QWidget*) : QDateTimeEdit*
    fun bg_QDateTimeEdit__CONSTRUCT_const_QDateTime_R_QWidget_X(dt : QDateTime*, parent : QWidget*) : QDateTimeEdit*
    fun bg_QDateTimeEdit__CONSTRUCT_const_QDate_R_QWidget_X(d : QDate*, parent : QWidget*) : QDateTimeEdit*
    fun bg_QDateTimeEdit__CONSTRUCT_const_QTime_R_QWidget_X(t : QTime*, parent : QWidget*) : QDateTimeEdit*
    fun bg_QDateTimeEdit_dateTime_(_self_ : QDateTimeEdit*) : QDateTime*
    fun bg_QDateTimeEdit_date_(_self_ : QDateTimeEdit*) : QDate*
    fun bg_QDateTimeEdit_time_(_self_ : QDateTimeEdit*) : QTime*
    fun bg_QDateTimeEdit_calendar_(_self_ : QDateTimeEdit*) : QCalendar*
    fun bg_QDateTimeEdit_setCalendar_QCalendar(_self_ : QDateTimeEdit*, calendar : QCalendar*) : Void
    fun bg_QDateTimeEdit_minimumDateTime_(_self_ : QDateTimeEdit*) : QDateTime*
    fun bg_QDateTimeEdit_clearMinimumDateTime_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_setMinimumDateTime_const_QDateTime_R(_self_ : QDateTimeEdit*, dt : QDateTime*) : Void
    fun bg_QDateTimeEdit_maximumDateTime_(_self_ : QDateTimeEdit*) : QDateTime*
    fun bg_QDateTimeEdit_clearMaximumDateTime_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_setMaximumDateTime_const_QDateTime_R(_self_ : QDateTimeEdit*, dt : QDateTime*) : Void
    fun bg_QDateTimeEdit_setDateTimeRange_const_QDateTime_R_const_QDateTime_R(_self_ : QDateTimeEdit*, min : QDateTime*, max : QDateTime*) : Void
    fun bg_QDateTimeEdit_minimumDate_(_self_ : QDateTimeEdit*) : QDate*
    fun bg_QDateTimeEdit_setMinimumDate_const_QDate_R(_self_ : QDateTimeEdit*, min : QDate*) : Void
    fun bg_QDateTimeEdit_clearMinimumDate_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_maximumDate_(_self_ : QDateTimeEdit*) : QDate*
    fun bg_QDateTimeEdit_setMaximumDate_const_QDate_R(_self_ : QDateTimeEdit*, max : QDate*) : Void
    fun bg_QDateTimeEdit_clearMaximumDate_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_setDateRange_const_QDate_R_const_QDate_R(_self_ : QDateTimeEdit*, min : QDate*, max : QDate*) : Void
    fun bg_QDateTimeEdit_minimumTime_(_self_ : QDateTimeEdit*) : QTime*
    fun bg_QDateTimeEdit_setMinimumTime_const_QTime_R(_self_ : QDateTimeEdit*, min : QTime*) : Void
    fun bg_QDateTimeEdit_clearMinimumTime_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_maximumTime_(_self_ : QDateTimeEdit*) : QTime*
    fun bg_QDateTimeEdit_setMaximumTime_const_QTime_R(_self_ : QDateTimeEdit*, max : QTime*) : Void
    fun bg_QDateTimeEdit_clearMaximumTime_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_setTimeRange_const_QTime_R_const_QTime_R(_self_ : QDateTimeEdit*, min : QTime*, max : QTime*) : Void
    fun bg_QDateTimeEdit_displayedSections_(_self_ : QDateTimeEdit*) : DateTimeEdit::Sections
    fun bg_QDateTimeEdit_currentSection_(_self_ : QDateTimeEdit*) : DateTimeEdit::Section
    fun bg_QDateTimeEdit_sectionAt_int(_self_ : QDateTimeEdit*, index : Int32) : DateTimeEdit::Section
    fun bg_QDateTimeEdit_setCurrentSection_QDateTimeEdit__Section(_self_ : QDateTimeEdit*, section : DateTimeEdit::Section) : Void
    fun bg_QDateTimeEdit_currentSectionIndex_(_self_ : QDateTimeEdit*) : Int32
    fun bg_QDateTimeEdit_setCurrentSectionIndex_int(_self_ : QDateTimeEdit*, index : Int32) : Void
    fun bg_QDateTimeEdit_calendarWidget_(_self_ : QDateTimeEdit*) : QCalendarWidget*
    fun bg_QDateTimeEdit_setCalendarWidget_QCalendarWidget_X(_self_ : QDateTimeEdit*, calendar_widget : QCalendarWidget*) : Void
    fun bg_QDateTimeEdit_sectionCount_(_self_ : QDateTimeEdit*) : Int32
    fun bg_QDateTimeEdit_setSelectedSection_QDateTimeEdit__Section(_self_ : QDateTimeEdit*, section : DateTimeEdit::Section) : Void
    fun bg_QDateTimeEdit_sectionText_QDateTimeEdit__Section(_self_ : QDateTimeEdit*, section : DateTimeEdit::Section) : CrystalString
    fun bg_QDateTimeEdit_displayFormat_(_self_ : QDateTimeEdit*) : CrystalString
    fun bg_QDateTimeEdit_setDisplayFormat_const_QString_R(_self_ : QDateTimeEdit*, format : CrystalString) : Void
    fun bg_QDateTimeEdit_calendarPopup_(_self_ : QDateTimeEdit*) : Bool
    fun bg_QDateTimeEdit_setCalendarPopup_bool(_self_ : QDateTimeEdit*, enable : Bool) : Void
    fun bg_QDateTimeEdit_timeSpec_(_self_ : QDateTimeEdit*) : TimeSpec
    fun bg_QDateTimeEdit_setTimeSpec_Qt__TimeSpec(_self_ : QDateTimeEdit*, spec : TimeSpec) : Void
    fun bg_QDateTimeEdit_sizeHint_(_self_ : QDateTimeEdit*) : QSize*
    fun bg_QDateTimeEdit_clear_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_stepBy_int(_self_ : QDateTimeEdit*, steps : Int32) : Void
    fun bg_QDateTimeEdit_event_QEvent_X(_self_ : QDateTimeEdit*, event : QEvent*) : Bool
    fun bg_QDateTimeEdit_dateTimeChanged_const_QDateTime_R(_self_ : QDateTimeEdit*, date_time : QDateTime*) : Void
    fun bg_QDateTimeEdit_timeChanged_const_QTime_R(_self_ : QDateTimeEdit*, time : QTime*) : Void
    fun bg_QDateTimeEdit_dateChanged_const_QDate_R(_self_ : QDateTimeEdit*, date : QDate*) : Void
    fun bg_QDateTimeEdit_setDateTime_const_QDateTime_R(_self_ : QDateTimeEdit*, date_time : QDateTime*) : Void
    fun bg_QDateTimeEdit_setDate_const_QDate_R(_self_ : QDateTimeEdit*, date : QDate*) : Void
    fun bg_QDateTimeEdit_setTime_const_QTime_R(_self_ : QDateTimeEdit*, time : QTime*) : Void
    fun bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X(_self_ : QDateTimeEdit*, event : QKeyEvent*) : Void
    fun bg_QDateTimeEdit_wheelEvent_QWheelEvent_X(_self_ : QDateTimeEdit*, event : QWheelEvent*) : Void
    fun bg_QDateTimeEdit_focusInEvent_QFocusEvent_X(_self_ : QDateTimeEdit*, event : QFocusEvent*) : Void
    fun bg_QDateTimeEdit_focusNextPrevChild_bool(_self_ : QDateTimeEdit*, next_ : Bool) : Bool
    fun bg_QDateTimeEdit_dateTimeFromText_const_QString_R(_self_ : QDateTimeEdit*, text : CrystalString) : QDateTime*
    fun bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R(_self_ : QDateTimeEdit*, dt : QDateTime*) : CrystalString
    fun bg_QDateTimeEdit_stepEnabled_(_self_ : QDateTimeEdit*) : AbstractSpinBox::StepEnabled
    fun bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X(_self_ : QDateTimeEdit*, event : QMouseEvent*) : Void
    fun bg_QDateTimeEdit_paintEvent_QPaintEvent_X(_self_ : QDateTimeEdit*, event : QPaintEvent*) : Void
    fun bg_QDateTimeEdit_initStyleOption_QStyleOptionSpinBox_X(_self_ : QDateTimeEdit*, option : QStyleOptionSpinBox*) : Void
    fun bg_QDateTimeEdit__CONSTRUCT_const_QVariant_R_QVariant__Type_QWidget_X(val : CrystalVariant, parser_type : VariantType, parent : QWidget*) : QDateTimeEdit*
    fun bg_QDateTimeEdit__CONSTRUCT_const_QVariant_R_QMetaType__Type_QWidget_X(val : CrystalVariant, parser_type : MetaType::Type, parent : QWidget*) : QDateTimeEdit*
    fun bg_QAbstractSpinBox_minimumSizeHint_(_self_ : QDateTimeEdit*) : QSize*
    fun bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(_self_ : QDateTimeEdit*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(_self_ : QDateTimeEdit*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(_self_ : QDateTimeEdit*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(_self_ : QDateTimeEdit*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(_self_ : QDateTimeEdit*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_QEvent_X(_self_ : QDateTimeEdit*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(_self_ : QDateTimeEdit*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_QHideEvent_X(_self_ : QDateTimeEdit*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(_self_ : QDateTimeEdit*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(_self_ : QDateTimeEdit*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(_self_ : QDateTimeEdit*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_QShowEvent_X(_self_ : QDateTimeEdit*, event : QShowEvent*) : Void
    fun bg_QDateTimeEdit_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDateTimeEdit_CONNECT_dateTimeChanged_CrystalProc_void__const_QDateTime_R_(_self_ : QDateTimeEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDateTimeEdit_CONNECT_timeChanged_CrystalProc_void__const_QTime_R_(_self_ : QDateTimeEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDateTimeEdit_CONNECT_dateChanged_CrystalProc_void__const_QDate_R_(_self_ : QDateTimeEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDateTimeEdit_sizeHint_SUPER_(_self_ : QDateTimeEdit*) : QSize*
    fun bg_QDateTimeEdit_clear_SUPER_(_self_ : QDateTimeEdit*) : Void
    fun bg_QDateTimeEdit_stepBy_SUPER_int(_self_ : QDateTimeEdit*, steps : Int32) : Void
    fun bg_QDateTimeEdit_event_SUPER_QEvent_X(_self_ : QDateTimeEdit*, event : QEvent*) : Bool
    fun bg_QDateTimeEdit_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QDateTimeEdit*, event : QKeyEvent*) : Void
    fun bg_QDateTimeEdit_wheelEvent_SUPER_QWheelEvent_X(_self_ : QDateTimeEdit*, event : QWheelEvent*) : Void
    fun bg_QDateTimeEdit_focusInEvent_SUPER_QFocusEvent_X(_self_ : QDateTimeEdit*, event : QFocusEvent*) : Void
    fun bg_QDateTimeEdit_focusNextPrevChild_SUPER_bool(_self_ : QDateTimeEdit*, next_ : Bool) : Bool
    fun bg_QDateTimeEdit_dateTimeFromText_SUPER_const_QString_R(_self_ : QDateTimeEdit*, text : CrystalString) : QDateTime*
    fun bg_QDateTimeEdit_textFromDateTime_SUPER_const_QDateTime_R(_self_ : QDateTimeEdit*, dt : QDateTime*) : CrystalString
    fun bg_QDateTimeEdit_stepEnabled_SUPER_(_self_ : QDateTimeEdit*) : AbstractSpinBox::StepEnabled
    fun bg_QDateTimeEdit_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QDateTimeEdit*, event : QMouseEvent*) : Void
    fun bg_QDateTimeEdit_paintEvent_SUPER_QPaintEvent_X(_self_ : QDateTimeEdit*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_minimumSizeHint_SUPER_(_self_ : QDateTimeEdit*) : QSize*
    fun bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QDateTimeEdit*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(_self_ : QDateTimeEdit*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QDateTimeEdit*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QDateTimeEdit*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QDateTimeEdit*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(_self_ : QDateTimeEdit*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(_self_ : QDateTimeEdit*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(_self_ : QDateTimeEdit*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QDateTimeEdit*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QDateTimeEdit*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(_self_ : QDateTimeEdit*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(_self_ : QDateTimeEdit*, event : QShowEvent*) : Void
    fun bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(_self_ : QDateTimeEdit*, table : BgJumptable_QDateTimeEdit*) : Void
    fun bg_QDesktopWidget_metaObject_(_self_ : QDesktopWidget*) : QMetaObject*
    fun bg_QDesktopWidget_qt_metacast_const_char_X(_self_ : QDesktopWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDesktopWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDesktopWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDesktopWidget__CONSTRUCT_() : QDesktopWidget*
    fun bg_QDesktopWidget_resizeEvent_QResizeEvent_X(_self_ : QDesktopWidget*, e : QResizeEvent*) : Void
    fun bg_QWidget_devType_(_self_ : QDesktopWidget*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QDesktopWidget*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QDesktopWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QDesktopWidget*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QDesktopWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QDesktopWidget*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QDesktopWidget*) : QPaintEngine*
    fun bg_QWidget_event_QEvent_X(_self_ : QDesktopWidget*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QDesktopWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QDesktopWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QDesktopWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QDesktopWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QDesktopWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QDesktopWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QDesktopWidget*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : QDesktopWidget*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QDesktopWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QDesktopWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QDesktopWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QDesktopWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QDesktopWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QDesktopWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QDesktopWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QDesktopWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QDesktopWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QDesktopWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QDesktopWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QDesktopWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QDesktopWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QDesktopWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QDesktopWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QDesktopWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QDesktopWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QDesktopWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QDesktopWidget*, next_ : Bool) : Bool
    fun bg_QDesktopWidget_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDesktopWidget_CONNECT_resized_CrystalProc_void__int_(_self_ : QDesktopWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDesktopWidget_CONNECT_workAreaResized_CrystalProc_void__int_(_self_ : QDesktopWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDesktopWidget_CONNECT_screenCountChanged_CrystalProc_void__int_(_self_ : QDesktopWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDesktopWidget_CONNECT_primaryScreenChanged_CrystalProc_void_(_self_ : QDesktopWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDesktopWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QDesktopWidget*, e : QResizeEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QDesktopWidget*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QDesktopWidget*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QDesktopWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QDesktopWidget*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QDesktopWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QDesktopWidget*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QDesktopWidget*) : QPaintEngine*
    fun bg_QWidget_event_SUPER_QEvent_X(_self_ : QDesktopWidget*, event : QEvent*) : Bool
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QDesktopWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QDesktopWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QDesktopWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QDesktopWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QDesktopWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QDesktopWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QDesktopWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QDesktopWidget*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QDesktopWidget*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QDesktopWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QDesktopWidget*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QDesktopWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QDesktopWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QDesktopWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QDesktopWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QDesktopWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QDesktopWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QDesktopWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QDesktopWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QDesktopWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QDesktopWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_SUPER_QEvent_X(_self_ : QDesktopWidget*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QDesktopWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QDesktopWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QDesktopWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QDesktopWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QDesktopWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QDesktopWidget*, next_ : Bool) : Bool
    fun bg_BgInherit_QDesktopWidget_JUMPTABLE_BgJumptable_QDesktopWidget_R(_self_ : QDesktopWidget*, table : BgJumptable_QDesktopWidget*) : Void
    fun bg_QDial_metaObject_(_self_ : QDial*) : QMetaObject*
    fun bg_QDial_qt_metacast_const_char_X(_self_ : QDial*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDial*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDial_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDial_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDial_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDial__CONSTRUCT_QWidget_X(parent : QWidget*) : QDial*
    fun bg_QDial_wrapping_(_self_ : QDial*) : Bool
    fun bg_QDial_notchSize_(_self_ : QDial*) : Int32
    fun bg_QDial_setNotchTarget_double(_self_ : QDial*, target : Float64) : Void
    fun bg_QDial_notchTarget_(_self_ : QDial*) : Float64
    fun bg_QDial_notchesVisible_(_self_ : QDial*) : Bool
    fun bg_QDial_sizeHint_(_self_ : QDial*) : QSize*
    fun bg_QDial_minimumSizeHint_(_self_ : QDial*) : QSize*
    fun bg_QDial_setNotchesVisible_bool(_self_ : QDial*, visible : Bool) : Void
    fun bg_QDial_setWrapping_bool(_self_ : QDial*, on : Bool) : Void
    fun bg_QDial_event_QEvent_X(_self_ : QDial*, e : QEvent*) : Bool
    fun bg_QDial_resizeEvent_QResizeEvent_X(_self_ : QDial*, re : QResizeEvent*) : Void
    fun bg_QDial_paintEvent_QPaintEvent_X(_self_ : QDial*, pe : QPaintEvent*) : Void
    fun bg_QDial_mousePressEvent_QMouseEvent_X(_self_ : QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_mouseReleaseEvent_QMouseEvent_X(_self_ : QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_mouseMoveEvent_QMouseEvent_X(_self_ : QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_sliderChange_QAbstractSlider__SliderChange(_self_ : QDial*, change : AbstractSlider::SliderChange) : Void
    fun bg_QDial_initStyleOption_QStyleOptionSlider_X(_self_ : QDial*, option : QStyleOptionSlider*) : Void
    fun bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(_self_ : QDial*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_QTimerEvent_X(_self_ : QDial*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_QWheelEvent_X(_self_ : QDial*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_QEvent_X(_self_ : QDial*, e : QEvent*) : Void
    fun bg_QDial_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDial_sizeHint_SUPER_(_self_ : QDial*) : QSize*
    fun bg_QDial_minimumSizeHint_SUPER_(_self_ : QDial*) : QSize*
    fun bg_QDial_event_SUPER_QEvent_X(_self_ : QDial*, e : QEvent*) : Bool
    fun bg_QDial_resizeEvent_SUPER_QResizeEvent_X(_self_ : QDial*, re : QResizeEvent*) : Void
    fun bg_QDial_paintEvent_SUPER_QPaintEvent_X(_self_ : QDial*, pe : QPaintEvent*) : Void
    fun bg_QDial_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QDial*, me : QMouseEvent*) : Void
    fun bg_QDial_sliderChange_SUPER_QAbstractSlider__SliderChange(_self_ : QDial*, change : AbstractSlider::SliderChange) : Void
    fun bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QDial*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(_self_ : QDial*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_wheelEvent_SUPER_QWheelEvent_X(_self_ : QDial*, e : QWheelEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(_self_ : QDial*, e : QEvent*) : Void
    fun bg_BgInherit_QDial_JUMPTABLE_BgJumptable_QDial_R(_self_ : QDial*, table : BgJumptable_QDial*) : Void
    fun bg_QDockWidget_metaObject_(_self_ : QDockWidget*) : QMetaObject*
    fun bg_QDockWidget_qt_metacast_const_char_X(_self_ : QDockWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDockWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDockWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDockWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDockWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDockWidget__CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : QDockWidget*
    fun bg_QDockWidget__CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(title : CrystalString, parent : QWidget*, flags : WindowFlags) : QDockWidget*
    fun bg_QDockWidget__CONSTRUCT_QWidget_X(parent : QWidget*) : QDockWidget*
    fun bg_QDockWidget__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, flags : WindowFlags) : QDockWidget*
    fun bg_QDockWidget_widget_(_self_ : QDockWidget*) : QWidget*
    fun bg_QDockWidget_setWidget_QWidget_X(_self_ : QDockWidget*, widget : QWidget*) : Void
    fun bg_QDockWidget_setFeatures_QDockWidget__DockWidgetFeatures(_self_ : QDockWidget*, features : DockWidget::Features) : Void
    fun bg_QDockWidget_features_(_self_ : QDockWidget*) : DockWidget::Features
    fun bg_QDockWidget_setFloating_bool(_self_ : QDockWidget*, floating : Bool) : Void
    fun bg_QDockWidget_isFloating_(_self_ : QDockWidget*) : Bool
    fun bg_QDockWidget_setAllowedAreas_Qt__DockWidgetAreas(_self_ : QDockWidget*, areas : DockWidgetAreas) : Void
    fun bg_QDockWidget_allowedAreas_(_self_ : QDockWidget*) : DockWidgetAreas
    fun bg_QDockWidget_setTitleBarWidget_QWidget_X(_self_ : QDockWidget*, widget : QWidget*) : Void
    fun bg_QDockWidget_titleBarWidget_(_self_ : QDockWidget*) : QWidget*
    fun bg_QDockWidget_isAreaAllowed_Qt__DockWidgetArea(_self_ : QDockWidget*, area : DockWidgetArea) : Bool
    fun bg_QDockWidget_toggleViewAction_(_self_ : QDockWidget*) : QAction*
    fun bg_QDockWidget_featuresChanged_QDockWidget__DockWidgetFeatures(_self_ : QDockWidget*, features : DockWidget::Features) : Void
    fun bg_QDockWidget_topLevelChanged_bool(_self_ : QDockWidget*, top_level : Bool) : Void
    fun bg_QDockWidget_allowedAreasChanged_Qt__DockWidgetAreas(_self_ : QDockWidget*, allowed_areas : DockWidgetAreas) : Void
    fun bg_QDockWidget_visibilityChanged_bool(_self_ : QDockWidget*, visible : Bool) : Void
    fun bg_QDockWidget_dockLocationChanged_Qt__DockWidgetArea(_self_ : QDockWidget*, area : DockWidgetArea) : Void
    fun bg_QDockWidget_changeEvent_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Void
    fun bg_QDockWidget_closeEvent_QCloseEvent_X(_self_ : QDockWidget*, event : QCloseEvent*) : Void
    fun bg_QDockWidget_paintEvent_QPaintEvent_X(_self_ : QDockWidget*, event : QPaintEvent*) : Void
    fun bg_QDockWidget_event_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Bool
    fun bg_QDockWidget_initStyleOption_QStyleOptionDockWidget_X(_self_ : QDockWidget*, option : QStyleOptionDockWidget*) : Void
    fun bg_QWidget_devType_(_self_ : QDockWidget*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QDockWidget*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QDockWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QDockWidget*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QDockWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QDockWidget*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QDockWidget*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QDockWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QDockWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QDockWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QDockWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QDockWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QDockWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QDockWidget*, event : QResizeEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QDockWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QDockWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QDockWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QDockWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QDockWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QDockWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QDockWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QDockWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QDockWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QDockWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QDockWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QDockWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QDockWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QDockWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QDockWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QDockWidget*, next_ : Bool) : Bool
    fun bg_QDockWidget_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDockWidget_CONNECT_featuresChanged_CrystalProc_void__QDockWidget__DockWidgetFeatures_(_self_ : QDockWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDockWidget_CONNECT_topLevelChanged_CrystalProc_void__bool_(_self_ : QDockWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDockWidget_CONNECT_allowedAreasChanged_CrystalProc_void__Qt__DockWidgetAreas_(_self_ : QDockWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDockWidget_CONNECT_visibilityChanged_CrystalProc_void__bool_(_self_ : QDockWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDockWidget_CONNECT_dockLocationChanged_CrystalProc_void__Qt__DockWidgetArea_(_self_ : QDockWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDockWidget_changeEvent_SUPER_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Void
    fun bg_QDockWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QDockWidget*, event : QCloseEvent*) : Void
    fun bg_QDockWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QDockWidget*, event : QPaintEvent*) : Void
    fun bg_QDockWidget_event_SUPER_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QDockWidget*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QDockWidget*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QDockWidget*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QDockWidget*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QDockWidget*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QDockWidget*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QDockWidget*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QDockWidget*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QDockWidget*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QDockWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QDockWidget*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QDockWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QDockWidget*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QDockWidget*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QDockWidget*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QDockWidget*, event : QResizeEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QDockWidget*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QDockWidget*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QDockWidget*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QDockWidget*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QDockWidget*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QDockWidget*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QDockWidget*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QDockWidget*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QDockWidget*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QDockWidget*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QDockWidget*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QDockWidget*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QDockWidget*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QDockWidget*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QDockWidget*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QDockWidget*, next_ : Bool) : Bool
    fun bg_BgInherit_QDockWidget_JUMPTABLE_BgJumptable_QDockWidget_R(_self_ : QDockWidget*, table : BgJumptable_QDockWidget*) : Void
    fun bg_QFileDialog_metaObject_(_self_ : QFileDialog*) : QMetaObject*
    fun bg_QFileDialog_qt_metacast_const_char_X(_self_ : QFileDialog*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QFileDialog*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QFileDialog_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFileDialog_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFileDialog__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QFileDialog*
    fun bg_QFileDialog__CONSTRUCT_QWidget_X(parent : QWidget*) : QFileDialog*
    fun bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QFileDialog*
    fun bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, directory : CrystalString) : QFileDialog*
    fun bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, directory : CrystalString, filter : CrystalString) : QFileDialog*
    fun bg_QFileDialog_setDirectory_const_QString_R(_self_ : QFileDialog*, directory : CrystalString) : Void
    fun bg_QFileDialog_setDirectory_const_QDir_R(_self_ : QFileDialog*, directory : QDir*) : Void
    fun bg_QFileDialog_directory_(_self_ : QFileDialog*) : QDir*
    fun bg_QFileDialog_setDirectoryUrl_const_QUrl_R(_self_ : QFileDialog*, directory : QUrl*) : Void
    fun bg_QFileDialog_directoryUrl_(_self_ : QFileDialog*) : QUrl*
    fun bg_QFileDialog_selectFile_const_QString_R(_self_ : QFileDialog*, filename : CrystalString) : Void
    fun bg_QFileDialog_selectedFiles_(_self_ : QFileDialog*) : QStringList*
    fun bg_QFileDialog_selectUrl_const_QUrl_R(_self_ : QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_selectedUrls_(_self_ : QFileDialog*) : ContainerQListQUrl*
    fun bg_QFileDialog_setNameFilter_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_setNameFilters_const_QStringList_R(_self_ : QFileDialog*, filters : QStringList*) : Void
    fun bg_QFileDialog_nameFilters_(_self_ : QFileDialog*) : QStringList*
    fun bg_QFileDialog_selectNameFilter_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_selectedMimeTypeFilter_(_self_ : QFileDialog*) : CrystalString
    fun bg_QFileDialog_selectedNameFilter_(_self_ : QFileDialog*) : CrystalString
    fun bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(_self_ : QFileDialog*, filters : QStringList*) : Void
    fun bg_QFileDialog_mimeTypeFilters_(_self_ : QFileDialog*) : QStringList*
    fun bg_QFileDialog_selectMimeTypeFilter_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_filter_(_self_ : QFileDialog*) : Dir::Filters
    fun bg_QFileDialog_setFilter_QDir__Filters(_self_ : QFileDialog*, filters : Dir::Filters) : Void
    fun bg_QFileDialog_setViewMode_QFileDialog__ViewMode(_self_ : QFileDialog*, mode : FileDialog::ViewMode) : Void
    fun bg_QFileDialog_viewMode_(_self_ : QFileDialog*) : FileDialog::ViewMode
    fun bg_QFileDialog_setFileMode_QFileDialog__FileMode(_self_ : QFileDialog*, mode : FileDialog::FileMode) : Void
    fun bg_QFileDialog_fileMode_(_self_ : QFileDialog*) : FileDialog::FileMode
    fun bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(_self_ : QFileDialog*, mode : FileDialog::AcceptMode) : Void
    fun bg_QFileDialog_acceptMode_(_self_ : QFileDialog*) : FileDialog::AcceptMode
    fun bg_QFileDialog_setReadOnly_bool(_self_ : QFileDialog*, enabled : Bool) : Void
    fun bg_QFileDialog_isReadOnly_(_self_ : QFileDialog*) : Bool
    fun bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(_self_ : QFileDialog*, urls : ContainerQListQUrl*) : Void
    fun bg_QFileDialog_sidebarUrls_(_self_ : QFileDialog*) : ContainerQListQUrl*
    fun bg_QFileDialog_saveState_(_self_ : QFileDialog*) : QByteArray*
    fun bg_QFileDialog_restoreState_const_QByteArray_R(_self_ : QFileDialog*, state : QByteArray*) : Bool
    fun bg_QFileDialog_setDefaultSuffix_const_QString_R(_self_ : QFileDialog*, suffix : CrystalString) : Void
    fun bg_QFileDialog_defaultSuffix_(_self_ : QFileDialog*) : CrystalString
    fun bg_QFileDialog_setHistory_const_QStringList_R(_self_ : QFileDialog*, paths : QStringList*) : Void
    fun bg_QFileDialog_history_(_self_ : QFileDialog*) : QStringList*
    fun bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(_self_ : QFileDialog*, delegate : QAbstractItemDelegate*) : Void
    fun bg_QFileDialog_itemDelegate_(_self_ : QFileDialog*) : QAbstractItemDelegate*
    fun bg_QFileDialog_setIconProvider_QFileIconProvider_X(_self_ : QFileDialog*, provider : QFileIconProvider*) : Void
    fun bg_QFileDialog_iconProvider_(_self_ : QFileDialog*) : QFileIconProvider*
    fun bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(_self_ : QFileDialog*, label : FileDialog::DialogLabel, text : CrystalString) : Void
    fun bg_QFileDialog_labelText_QFileDialog__DialogLabel(_self_ : QFileDialog*, label : FileDialog::DialogLabel) : CrystalString
    fun bg_QFileDialog_setSupportedSchemes_const_QStringList_R(_self_ : QFileDialog*, schemes : QStringList*) : Void
    fun bg_QFileDialog_supportedSchemes_(_self_ : QFileDialog*) : QStringList*
    fun bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(_self_ : QFileDialog*, model : QAbstractProxyModel*) : Void
    fun bg_QFileDialog_proxyModel_(_self_ : QFileDialog*) : QAbstractProxyModel*
    fun bg_QFileDialog_setOption_QFileDialog__Option_bool(_self_ : QFileDialog*, option : FileDialog::Option, on : Bool) : Void
    fun bg_QFileDialog_testOption_QFileDialog__Option(_self_ : QFileDialog*, option : FileDialog::Option) : Bool
    fun bg_QFileDialog_setOptions_QFileDialog__Options(_self_ : QFileDialog*, options : FileDialog::Options) : Void
    fun bg_QFileDialog_options_(_self_ : QFileDialog*) : FileDialog::Options
    fun bg_QFileDialog_open_QObject_X_const_char_X(_self_ : QFileDialog*, receiver : QObject*, member : UInt8*) : Void
    fun bg_QFileDialog_setVisible_bool(_self_ : QFileDialog*, visible : Bool) : Void
    fun bg_QFileDialog_fileSelected_const_QString_R(_self_ : QFileDialog*, file : CrystalString) : Void
    fun bg_QFileDialog_filesSelected_const_QStringList_R(_self_ : QFileDialog*, files : QStringList*) : Void
    fun bg_QFileDialog_currentChanged_const_QString_R(_self_ : QFileDialog*, path : CrystalString) : Void
    fun bg_QFileDialog_directoryEntered_const_QString_R(_self_ : QFileDialog*, directory : CrystalString) : Void
    fun bg_QFileDialog_urlSelected_const_QUrl_R(_self_ : QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_urlsSelected_const_QList_QUrl__R(_self_ : QFileDialog*, urls : ContainerQListQUrl*) : Void
    fun bg_QFileDialog_currentUrlChanged_const_QUrl_R(_self_ : QFileDialog*, url : QUrl*) : Void
    fun bg_QFileDialog_directoryUrlEntered_const_QUrl_R(_self_ : QFileDialog*, directory : QUrl*) : Void
    fun bg_QFileDialog_filterSelected_const_QString_R(_self_ : QFileDialog*, filter : CrystalString) : Void
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X(parent : QWidget*) : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : CrystalString
    fun bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString, filter : CrystalString) : CrystalString
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X(parent : QWidget*) : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : QUrl*
    fun bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : QUrl*
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X(parent : QWidget*) : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : CrystalString
    fun bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString, filter : CrystalString) : CrystalString
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X(parent : QWidget*) : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : QUrl*
    fun bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : QUrl*
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X(parent : QWidget*) : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : CrystalString
    fun bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(parent : QWidget*, caption : CrystalString, dir : CrystalString, options : FileDialog::Options) : CrystalString
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X(parent : QWidget*) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(parent : QWidget*, caption : CrystalString, dir : QUrl*, options : FileDialog::Options) : QUrl*
    fun bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, options : FileDialog::Options, supported_schemes : QStringList*) : QUrl*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X(parent : QWidget*) : QStringList*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : QStringList*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString) : QStringList*
    fun bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : CrystalString, filter : CrystalString) : QStringList*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X(parent : QWidget*) : ContainerQListQUrl*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(parent : QWidget*, caption : CrystalString) : ContainerQListQUrl*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent : QWidget*, caption : CrystalString, dir : QUrl*) : ContainerQListQUrl*
    fun bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent : QWidget*, caption : CrystalString, dir : QUrl*, filter : CrystalString) : ContainerQListQUrl*
    fun bg_QFileDialog_saveFileContent_STATIC_const_QByteArray_R(file_content : QByteArray*) : Void
    fun bg_QFileDialog_saveFileContent_STATIC_const_QByteArray_R_const_QString_R(file_content : QByteArray*, file_name_hint : CrystalString) : Void
    fun bg_QFileDialog__CONSTRUCT_const_QFileDialogArgs_R(args : QFileDialogArgs*) : QFileDialog*
    fun bg_QFileDialog_done_int(_self_ : QFileDialog*, result : Int32) : Void
    fun bg_QFileDialog_accept_(_self_ : QFileDialog*) : Void
    fun bg_QFileDialog_changeEvent_QEvent_X(_self_ : QFileDialog*, e : QEvent*) : Void
    fun bg_QDialog_sizeHint_(_self_ : QFileDialog*) : QSize*
    fun bg_QDialog_minimumSizeHint_(_self_ : QFileDialog*) : QSize*
    fun bg_QDialog_open_(_self_ : QFileDialog*) : Void
    fun bg_QDialog_exec_(_self_ : QFileDialog*) : Int32
    fun bg_QDialog_reject_(_self_ : QFileDialog*) : Void
    fun bg_QDialog_keyPressEvent_QKeyEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QDialog_closeEvent_QCloseEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QCloseEvent*) : Void
    fun bg_QDialog_showEvent_QShowEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QDialog_resizeEvent_QResizeEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QDialog_contextMenuEvent_QContextMenuEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QDialog_eventFilter_QObject_X_QEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QFileDialog_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QFileDialog_CONNECT_fileSelected_CrystalProc_void__const_QString_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_filesSelected_CrystalProc_void__const_QStringList_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_currentChanged_CrystalProc_void__const_QString_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_directoryEntered_CrystalProc_void__const_QString_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_urlSelected_CrystalProc_void__const_QUrl_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_urlsSelected_CrystalProc_void__const_QList_QUrl__R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_currentUrlChanged_CrystalProc_void__const_QUrl_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_directoryUrlEntered_CrystalProc_void__const_QUrl_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_CONNECT_filterSelected_CrystalProc_void__const_QString_R_(_self_ : QFileDialog*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QFileDialog_setVisible_SUPER_bool(_self_ : QFileDialog*, visible : Bool) : Void
    fun bg_QFileDialog_done_SUPER_int(_self_ : QFileDialog*, result : Int32) : Void
    fun bg_QFileDialog_accept_SUPER_(_self_ : QFileDialog*) : Void
    fun bg_QFileDialog_changeEvent_SUPER_QEvent_X(_self_ : QFileDialog*, e : QEvent*) : Void
    fun bg_QDialog_sizeHint_SUPER_(_self_ : QFileDialog*) : QSize*
    fun bg_QDialog_minimumSizeHint_SUPER_(_self_ : QFileDialog*) : QSize*
    fun bg_QDialog_open_SUPER_(_self_ : QFileDialog*) : Void
    fun bg_QDialog_exec_SUPER_(_self_ : QFileDialog*) : Int32
    fun bg_QDialog_reject_SUPER_(_self_ : QFileDialog*) : Void
    fun bg_QDialog_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QDialog_closeEvent_SUPER_QCloseEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QCloseEvent*) : Void
    fun bg_QDialog_showEvent_SUPER_QShowEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QDialog_resizeEvent_SUPER_QResizeEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QDialog_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QDialog_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QFileDialog*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(_self_ : QFileDialog*, table : BgJumptable_QFileDialog*) : Void
    fun bg_QFormLayout_metaObject_(_self_ : QFormLayout*) : QMetaObject*
    fun bg_QFormLayout_qt_metacast_const_char_X(_self_ : QFormLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QFormLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QFormLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QFormLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QFormLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QFormLayout__CONSTRUCT_QWidget_X(parent : QWidget*) : QFormLayout*
    fun bg_QFormLayout_setFieldGrowthPolicy_QFormLayout__FieldGrowthPolicy(_self_ : QFormLayout*, policy : FormLayout::FieldGrowthPolicy) : Void
    fun bg_QFormLayout_fieldGrowthPolicy_(_self_ : QFormLayout*) : FormLayout::FieldGrowthPolicy
    fun bg_QFormLayout_setRowWrapPolicy_QFormLayout__RowWrapPolicy(_self_ : QFormLayout*, policy : FormLayout::RowWrapPolicy) : Void
    fun bg_QFormLayout_rowWrapPolicy_(_self_ : QFormLayout*) : FormLayout::RowWrapPolicy
    fun bg_QFormLayout_setLabelAlignment_Qt__Alignment(_self_ : QFormLayout*, alignment : Alignment) : Void
    fun bg_QFormLayout_labelAlignment_(_self_ : QFormLayout*) : Alignment
    fun bg_QFormLayout_setFormAlignment_Qt__Alignment(_self_ : QFormLayout*, alignment : Alignment) : Void
    fun bg_QFormLayout_formAlignment_(_self_ : QFormLayout*) : Alignment
    fun bg_QFormLayout_setHorizontalSpacing_int(_self_ : QFormLayout*, spacing : Int32) : Void
    fun bg_QFormLayout_horizontalSpacing_(_self_ : QFormLayout*) : Int32
    fun bg_QFormLayout_setVerticalSpacing_int(_self_ : QFormLayout*, spacing : Int32) : Void
    fun bg_QFormLayout_verticalSpacing_(_self_ : QFormLayout*) : Int32
    fun bg_QFormLayout_spacing_(_self_ : QFormLayout*) : Int32
    fun bg_QFormLayout_setSpacing_int(_self_ : QFormLayout*, unnamed_arg_0 : Int32) : Void
    fun bg_QFormLayout_addRow_QWidget_X_QWidget_X(_self_ : QFormLayout*, label : QWidget*, field : QWidget*) : Void
    fun bg_QFormLayout_addRow_QWidget_X_QLayout_X(_self_ : QFormLayout*, label : QWidget*, field : QLayout*) : Void
    fun bg_QFormLayout_addRow_const_QString_R_QWidget_X(_self_ : QFormLayout*, label_text : CrystalString, field : QWidget*) : Void
    fun bg_QFormLayout_addRow_const_QString_R_QLayout_X(_self_ : QFormLayout*, label_text : CrystalString, field : QLayout*) : Void
    fun bg_QFormLayout_addRow_QWidget_X(_self_ : QFormLayout*, widget : QWidget*) : Void
    fun bg_QFormLayout_addRow_QLayout_X(_self_ : QFormLayout*, layout : QLayout*) : Void
    fun bg_QFormLayout_insertRow_int_QWidget_X_QWidget_X(_self_ : QFormLayout*, row : Int32, label : QWidget*, field : QWidget*) : Void
    fun bg_QFormLayout_insertRow_int_QWidget_X_QLayout_X(_self_ : QFormLayout*, row : Int32, label : QWidget*, field : QLayout*) : Void
    fun bg_QFormLayout_insertRow_int_const_QString_R_QWidget_X(_self_ : QFormLayout*, row : Int32, label_text : CrystalString, field : QWidget*) : Void
    fun bg_QFormLayout_insertRow_int_const_QString_R_QLayout_X(_self_ : QFormLayout*, row : Int32, label_text : CrystalString, field : QLayout*) : Void
    fun bg_QFormLayout_insertRow_int_QWidget_X(_self_ : QFormLayout*, row : Int32, widget : QWidget*) : Void
    fun bg_QFormLayout_insertRow_int_QLayout_X(_self_ : QFormLayout*, row : Int32, layout : QLayout*) : Void
    fun bg_QFormLayout_removeRow_int(_self_ : QFormLayout*, row : Int32) : Void
    fun bg_QFormLayout_removeRow_QWidget_X(_self_ : QFormLayout*, widget : QWidget*) : Void
    fun bg_QFormLayout_removeRow_QLayout_X(_self_ : QFormLayout*, layout : QLayout*) : Void
    fun bg_QFormLayout_setItem_int_QFormLayout__ItemRole_QLayoutItem_X(_self_ : QFormLayout*, row : Int32, role : FormLayout::ItemRole, item : QLayoutItem*) : Void
    fun bg_QFormLayout_setWidget_int_QFormLayout__ItemRole_QWidget_X(_self_ : QFormLayout*, row : Int32, role : FormLayout::ItemRole, widget : QWidget*) : Void
    fun bg_QFormLayout_setLayout_int_QFormLayout__ItemRole_QLayout_X(_self_ : QFormLayout*, row : Int32, role : FormLayout::ItemRole, layout : QLayout*) : Void
    fun bg_QFormLayout_itemAt_int_QFormLayout__ItemRole(_self_ : QFormLayout*, row : Int32, role : FormLayout::ItemRole) : QLayoutItem*
    fun bg_QFormLayout_getItemPosition_int_int_X_QFormLayout__ItemRole_X(_self_ : QFormLayout*, index : Int32, row_ptr : Int32*, role_ptr : FormLayout::ItemRole*) : Void
    fun bg_QFormLayout_getWidgetPosition_QWidget_X_int_X_QFormLayout__ItemRole_X(_self_ : QFormLayout*, widget : QWidget*, row_ptr : Int32*, role_ptr : FormLayout::ItemRole*) : Void
    fun bg_QFormLayout_getLayoutPosition_QLayout_X_int_X_QFormLayout__ItemRole_X(_self_ : QFormLayout*, layout : QLayout*, row_ptr : Int32*, role_ptr : FormLayout::ItemRole*) : Void
    fun bg_QFormLayout_labelForField_QWidget_X(_self_ : QFormLayout*, field : QWidget*) : QWidget*
    fun bg_QFormLayout_labelForField_QLayout_X(_self_ : QFormLayout*, field : QLayout*) : QWidget*
    fun bg_QFormLayout_addItem_QLayoutItem_X(_self_ : QFormLayout*, item : QLayoutItem*) : Void
    fun bg_QFormLayout_itemAt_int(_self_ : QFormLayout*, index : Int32) : QLayoutItem*
    fun bg_QFormLayout_takeAt_int(_self_ : QFormLayout*, index : Int32) : QLayoutItem*
    fun bg_QFormLayout_setGeometry_const_QRect_R(_self_ : QFormLayout*, rect : QRect*) : Void
    fun bg_QFormLayout_minimumSize_(_self_ : QFormLayout*) : QSize*
    fun bg_QFormLayout_sizeHint_(_self_ : QFormLayout*) : QSize*
    fun bg_QFormLayout_invalidate_(_self_ : QFormLayout*) : Void
    fun bg_QFormLayout_hasHeightForWidth_(_self_ : QFormLayout*) : Bool
    fun bg_QFormLayout_heightForWidth_int(_self_ : QFormLayout*, width : Int32) : Int32
    fun bg_QFormLayout_expandingDirections_(_self_ : QFormLayout*) : Orientations
    fun bg_QFormLayout_count_(_self_ : QFormLayout*) : Int32
    fun bg_QFormLayout_rowCount_(_self_ : QFormLayout*) : Int32
    fun bg_QLayout_geometry_(_self_ : QFormLayout*) : QRect*
    fun bg_QLayout_maximumSize_(_self_ : QFormLayout*) : QSize*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : QFormLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : QFormLayout*) : Bool
    fun bg_QLayout_controlTypes_(_self_ : QFormLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_(_self_ : QFormLayout*) : QLayout*
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : QFormLayout*, e : QChildEvent*) : Void
    fun bg_QFormLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QFormLayout_addItem_SUPER_QLayoutItem_X(_self_ : QFormLayout*, item : QLayoutItem*) : Void
    fun bg_QFormLayout_itemAt_SUPER_int(_self_ : QFormLayout*, index : Int32) : QLayoutItem*
    fun bg_QFormLayout_takeAt_SUPER_int(_self_ : QFormLayout*, index : Int32) : QLayoutItem*
    fun bg_QFormLayout_setGeometry_SUPER_const_QRect_R(_self_ : QFormLayout*, rect : QRect*) : Void
    fun bg_QFormLayout_minimumSize_SUPER_(_self_ : QFormLayout*) : QSize*
    fun bg_QFormLayout_sizeHint_SUPER_(_self_ : QFormLayout*) : QSize*
    fun bg_QFormLayout_invalidate_SUPER_(_self_ : QFormLayout*) : Void
    fun bg_QFormLayout_hasHeightForWidth_SUPER_(_self_ : QFormLayout*) : Bool
    fun bg_QFormLayout_heightForWidth_SUPER_int(_self_ : QFormLayout*, width : Int32) : Int32
    fun bg_QFormLayout_expandingDirections_SUPER_(_self_ : QFormLayout*) : Orientations
    fun bg_QFormLayout_count_SUPER_(_self_ : QFormLayout*) : Int32
    fun bg_QLayout_geometry_SUPER_(_self_ : QFormLayout*) : QRect*
    fun bg_QLayout_maximumSize_SUPER_(_self_ : QFormLayout*) : QSize*
    fun bg_QLayout_indexOf_SUPER_QWidget_X(_self_ : QFormLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_SUPER_(_self_ : QFormLayout*) : Bool
    fun bg_QLayout_controlTypes_SUPER_(_self_ : QFormLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_SUPER_(_self_ : QFormLayout*) : QLayout*
    fun bg_QLayout_childEvent_SUPER_QChildEvent_X(_self_ : QFormLayout*, e : QChildEvent*) : Void
    fun bg_BgInherit_QFormLayout_JUMPTABLE_BgJumptable_QFormLayout_R(_self_ : QFormLayout*, table : BgJumptable_QFormLayout*) : Void
    fun bg_QGesture_metaObject_(_self_ : QGesture*) : QMetaObject*
    fun bg_QGesture_qt_metacast_const_char_X(_self_ : QGesture*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGesture*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGesture_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGesture_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGesture_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGesture__CONSTRUCT_QObject_X(parent : QObject*) : QGesture*
    fun bg_QGesture_gestureType_(_self_ : QGesture*) : GestureType
    fun bg_QGesture_state_(_self_ : QGesture*) : GestureState
    fun bg_QGesture_hotSpot_(_self_ : QGesture*) : QPointF
    fun bg_QGesture_setHotSpot_const_QPointF_R(_self_ : QGesture*, value : QPointF) : Void
    fun bg_QGesture_hasHotSpot_(_self_ : QGesture*) : Bool
    fun bg_QGesture_unsetHotSpot_(_self_ : QGesture*) : Void
    fun bg_QGesture_setGestureCancelPolicy_QGesture__GestureCancelPolicy(_self_ : QGesture*, policy : Gesture::GestureCancelPolicy) : Void
    fun bg_QGesture_gestureCancelPolicy_(_self_ : QGesture*) : Gesture::GestureCancelPolicy
    fun bg_QGesture__CONSTRUCT_QGesturePrivate_R_QObject_X(dd : QGesturePrivate*, parent : QObject*) : QGesture*
    fun bg_QObject_event_QEvent_X(_self_ : QGesture*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QGesture*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QGesture*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QGesture*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QGesture*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QGesture*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QGesture*, signal : QMetaMethod*) : Void
    fun bg_QGesture_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QGesture*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QGesture*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QGesture*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QGesture*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QGesture*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QGesture*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QGesture*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QGesture_JUMPTABLE_BgJumptable_QGesture_R(_self_ : QGesture*, table : BgJumptable_QGesture*) : Void
    fun bg_QGestureEvent__CONSTRUCT_const_QList_QGesture_X__R(gestures : ContainerQListQGestureX*) : QGestureEvent*
    fun bg_QGestureEvent_gestures_(_self_ : QGestureEvent*) : ContainerQListQGestureX*
    fun bg_QGestureEvent_gesture_Qt__GestureType(_self_ : QGestureEvent*, type : GestureType) : QGesture*
    fun bg_QGestureEvent_activeGestures_(_self_ : QGestureEvent*) : ContainerQListQGestureX*
    fun bg_QGestureEvent_canceledGestures_(_self_ : QGestureEvent*) : ContainerQListQGestureX*
    fun bg_QGestureEvent_setAccepted_QGesture_X_bool(_self_ : QGestureEvent*, unnamed_arg_0 : QGesture*, unnamed_arg_1 : Bool) : Void
    fun bg_QGestureEvent_accept_QGesture_X(_self_ : QGestureEvent*, unnamed_arg_0 : QGesture*) : Void
    fun bg_QGestureEvent_ignore_QGesture_X(_self_ : QGestureEvent*, unnamed_arg_0 : QGesture*) : Void
    fun bg_QGestureEvent_isAccepted_QGesture_X(_self_ : QGestureEvent*, unnamed_arg_0 : QGesture*) : Bool
    fun bg_QGestureEvent_setAccepted_Qt__GestureType_bool(_self_ : QGestureEvent*, unnamed_arg_0 : GestureType, unnamed_arg_1 : Bool) : Void
    fun bg_QGestureEvent_accept_Qt__GestureType(_self_ : QGestureEvent*, unnamed_arg_0 : GestureType) : Void
    fun bg_QGestureEvent_ignore_Qt__GestureType(_self_ : QGestureEvent*, unnamed_arg_0 : GestureType) : Void
    fun bg_QGestureEvent_isAccepted_Qt__GestureType(_self_ : QGestureEvent*, unnamed_arg_0 : GestureType) : Bool
    fun bg_QGestureEvent_setWidget_QWidget_X(_self_ : QGestureEvent*, widget : QWidget*) : Void
    fun bg_QGestureEvent_widget_(_self_ : QGestureEvent*) : QWidget*
    fun bg_QGestureEvent_mapToGraphicsScene_const_QPointF_R(_self_ : QGestureEvent*, gesture_point : QPointF) : QPointF
    fun bg_QGraphicsItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_scene_(_self_ : QGraphicsItem*) : QGraphicsScene*
    fun bg_QGraphicsItem_parentItem_(_self_ : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_topLevelItem_(_self_ : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_parentObject_(_self_ : QGraphicsItem*) : QGraphicsObject*
    fun bg_QGraphicsItem_parentWidget_(_self_ : QGraphicsItem*) : QGraphicsWidget*
    fun bg_QGraphicsItem_topLevelWidget_(_self_ : QGraphicsItem*) : QGraphicsWidget*
    fun bg_QGraphicsItem_window_(_self_ : QGraphicsItem*) : QGraphicsWidget*
    fun bg_QGraphicsItem_panel_(_self_ : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_setParentItem_QGraphicsItem_X(_self_ : QGraphicsItem*, parent : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_childItems_(_self_ : QGraphicsItem*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsItem_isWidget_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isWindow_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isPanel_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_toGraphicsObject_(_self_ : QGraphicsItem*) : QGraphicsObject*
    fun bg_QGraphicsItem_group_(_self_ : QGraphicsItem*) : QGraphicsItemGroup*
    fun bg_QGraphicsItem_setGroup_QGraphicsItemGroup_X(_self_ : QGraphicsItem*, group : QGraphicsItemGroup*) : Void
    fun bg_QGraphicsItem_flags_(_self_ : QGraphicsItem*) : GraphicsItem::Flags
    fun bg_QGraphicsItem_setFlag_QGraphicsItem__GraphicsItemFlag_bool(_self_ : QGraphicsItem*, flag : GraphicsItem::Flag, enabled : Bool) : Void
    fun bg_QGraphicsItem_setFlags_QGraphicsItem__GraphicsItemFlags(_self_ : QGraphicsItem*, flags : GraphicsItem::Flags) : Void
    fun bg_QGraphicsItem_cacheMode_(_self_ : QGraphicsItem*) : GraphicsItem::CacheMode
    fun bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode(_self_ : QGraphicsItem*, mode : GraphicsItem::CacheMode) : Void
    fun bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode_const_QSize_R(_self_ : QGraphicsItem*, mode : GraphicsItem::CacheMode, cache_size : QSize*) : Void
    fun bg_QGraphicsItem_panelModality_(_self_ : QGraphicsItem*) : GraphicsItem::PanelModality
    fun bg_QGraphicsItem_setPanelModality_QGraphicsItem__PanelModality(_self_ : QGraphicsItem*, panel_modality : GraphicsItem::PanelModality) : Void
    fun bg_QGraphicsItem_isBlockedByModalPanel_QGraphicsItem_XX(_self_ : QGraphicsItem*, blocking_panel : QGraphicsItem**) : Bool
    fun bg_QGraphicsItem_toolTip_(_self_ : QGraphicsItem*) : CrystalString
    fun bg_QGraphicsItem_setToolTip_const_QString_R(_self_ : QGraphicsItem*, tool_tip : CrystalString) : Void
    fun bg_QGraphicsItem_cursor_(_self_ : QGraphicsItem*) : QCursor*
    fun bg_QGraphicsItem_setCursor_const_QCursor_R(_self_ : QGraphicsItem*, cursor : QCursor*) : Void
    fun bg_QGraphicsItem_hasCursor_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_unsetCursor_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_isVisible_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isVisibleTo_const_QGraphicsItem_X(_self_ : QGraphicsItem*, parent : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setVisible_bool(_self_ : QGraphicsItem*, visible : Bool) : Void
    fun bg_QGraphicsItem_hide_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_show_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_isEnabled_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setEnabled_bool(_self_ : QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_isSelected_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setSelected_bool(_self_ : QGraphicsItem*, selected : Bool) : Void
    fun bg_QGraphicsItem_acceptDrops_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setAcceptDrops_bool(_self_ : QGraphicsItem*, on : Bool) : Void
    fun bg_QGraphicsItem_opacity_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_effectiveOpacity_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setOpacity_qreal(_self_ : QGraphicsItem*, opacity : Float64) : Void
    fun bg_QGraphicsItem_graphicsEffect_(_self_ : QGraphicsItem*) : QGraphicsEffect*
    fun bg_QGraphicsItem_setGraphicsEffect_QGraphicsEffect_X(_self_ : QGraphicsItem*, effect : QGraphicsEffect*) : Void
    fun bg_QGraphicsItem_acceptedMouseButtons_(_self_ : QGraphicsItem*) : MouseButtons
    fun bg_QGraphicsItem_setAcceptedMouseButtons_Qt__MouseButtons(_self_ : QGraphicsItem*, buttons : MouseButtons) : Void
    fun bg_QGraphicsItem_acceptHoverEvents_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setAcceptHoverEvents_bool(_self_ : QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_acceptTouchEvents_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setAcceptTouchEvents_bool(_self_ : QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_filtersChildEvents_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setFiltersChildEvents_bool(_self_ : QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_handlesChildEvents_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setHandlesChildEvents_bool(_self_ : QGraphicsItem*, enabled : Bool) : Void
    fun bg_QGraphicsItem_isActive_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setActive_bool(_self_ : QGraphicsItem*, active : Bool) : Void
    fun bg_QGraphicsItem_hasFocus_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_setFocus_Qt__FocusReason(_self_ : QGraphicsItem*, focus_reason : FocusReason) : Void
    fun bg_QGraphicsItem_clearFocus_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_focusProxy_(_self_ : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_setFocusProxy_QGraphicsItem_X(_self_ : QGraphicsItem*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_focusItem_(_self_ : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_focusScopeItem_(_self_ : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_grabMouse_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_ungrabMouse_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_grabKeyboard_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_ungrabKeyboard_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_pos_(_self_ : QGraphicsItem*) : QPointF
    fun bg_QGraphicsItem_x_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setX_qreal(_self_ : QGraphicsItem*, x : Float64) : Void
    fun bg_QGraphicsItem_y_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setY_qreal(_self_ : QGraphicsItem*, y : Float64) : Void
    fun bg_QGraphicsItem_scenePos_(_self_ : QGraphicsItem*) : QPointF
    fun bg_QGraphicsItem_setPos_const_QPointF_R(_self_ : QGraphicsItem*, pos : QPointF) : Void
    fun bg_QGraphicsItem_setPos_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64) : Void
    fun bg_QGraphicsItem_moveBy_qreal_qreal(_self_ : QGraphicsItem*, dx : Float64, dy : Float64) : Void
    fun bg_QGraphicsItem_ensureVisible_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_ensureVisible_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : Void
    fun bg_QGraphicsItem_ensureVisible_const_QRectF_R_int(_self_ : QGraphicsItem*, rect : QRectF*, xmargin : Int32) : Void
    fun bg_QGraphicsItem_ensureVisible_const_QRectF_R_int_int(_self_ : QGraphicsItem*, rect : QRectF*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsItem_ensureVisible_qreal_qreal_qreal_qreal_int_int(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsItem_transform_(_self_ : QGraphicsItem*) : QTransform*
    fun bg_QGraphicsItem_sceneTransform_(_self_ : QGraphicsItem*) : QTransform*
    fun bg_QGraphicsItem_deviceTransform_const_QTransform_R(_self_ : QGraphicsItem*, viewport_transform : QTransform*) : QTransform*
    fun bg_QGraphicsItem_itemTransform_const_QGraphicsItem_X_bool_X(_self_ : QGraphicsItem*, other : QGraphicsItem*, ok : Bool*) : QTransform*
    fun bg_QGraphicsItem_setTransform_const_QTransform_R_bool(_self_ : QGraphicsItem*, matrix : QTransform*, combine : Bool) : Void
    fun bg_QGraphicsItem_resetTransform_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_setRotation_qreal(_self_ : QGraphicsItem*, angle : Float64) : Void
    fun bg_QGraphicsItem_rotation_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setScale_qreal(_self_ : QGraphicsItem*, scale : Float64) : Void
    fun bg_QGraphicsItem_scale_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_transformations_(_self_ : QGraphicsItem*) : ContainerQListQGraphicsTransformX*
    fun bg_QGraphicsItem_setTransformations_const_QList_QGraphicsTransform_X__R(_self_ : QGraphicsItem*, transformations : ContainerQListQGraphicsTransformX*) : Void
    fun bg_QGraphicsItem_transformOriginPoint_(_self_ : QGraphicsItem*) : QPointF
    fun bg_QGraphicsItem_setTransformOriginPoint_const_QPointF_R(_self_ : QGraphicsItem*, origin : QPointF) : Void
    fun bg_QGraphicsItem_setTransformOriginPoint_qreal_qreal(_self_ : QGraphicsItem*, ax : Float64, ay : Float64) : Void
    fun bg_QGraphicsItem_advance_int(_self_ : QGraphicsItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_zValue_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setZValue_qreal(_self_ : QGraphicsItem*, z : Float64) : Void
    fun bg_QGraphicsItem_stackBefore_const_QGraphicsItem_X(_self_ : QGraphicsItem*, sibling : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_boundingRect_(_self_ : QGraphicsItem*) : QRectF*
    fun bg_QGraphicsItem_childrenBoundingRect_(_self_ : QGraphicsItem*) : QRectF*
    fun bg_QGraphicsItem_sceneBoundingRect_(_self_ : QGraphicsItem*) : QRectF*
    fun bg_QGraphicsItem_shape_(_self_ : QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_isClipped_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_clipPath_(_self_ : QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_contains_const_QPointF_R(_self_ : QGraphicsItem*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidingItems_Qt__ItemSelectionMode(_self_ : QGraphicsItem*, mode : ItemSelectionMode) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsItem_isObscured_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_isObscured_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : Bool
    fun bg_QGraphicsItem_isObscured_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Bool
    fun bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_opaqueArea_(_self_ : QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_boundingRegion_const_QTransform_R(_self_ : QGraphicsItem*, item_to_device_transform : QTransform*) : QRegion*
    fun bg_QGraphicsItem_boundingRegionGranularity_(_self_ : QGraphicsItem*) : Float64
    fun bg_QGraphicsItem_setBoundingRegionGranularity_qreal(_self_ : QGraphicsItem*, granularity : Float64) : Void
    fun bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsItem_update_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_update_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : Void
    fun bg_QGraphicsItem_update_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, width : Float64, height : Float64) : Void
    fun bg_QGraphicsItem_scroll_qreal_qreal(_self_ : QGraphicsItem*, dx : Float64, dy : Float64) : Void
    fun bg_QGraphicsItem_scroll_qreal_qreal_const_QRectF_R(_self_ : QGraphicsItem*, dx : Float64, dy : Float64, rect : QRectF*) : Void
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPointF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, point : QPointF) : QPointF
    fun bg_QGraphicsItem_mapToParent_const_QPointF_R(_self_ : QGraphicsItem*, point : QPointF) : QPointF
    fun bg_QGraphicsItem_mapToScene_const_QPointF_R(_self_ : QGraphicsItem*, point : QPointF) : QPointF
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToParent_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToScene_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : QRectF*
    fun bg_QGraphicsItem_mapRectToParent_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QRectF*
    fun bg_QGraphicsItem_mapRectToScene_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QRectF*
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPolygonF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToParent_const_QPolygonF_R(_self_ : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToScene_const_QPolygonF_R(_self_ : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPainterPath_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapToParent_const_QPainterPath_R(_self_ : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapToScene_const_QPainterPath_R(_self_ : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPointF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, point : QPointF) : QPointF
    fun bg_QGraphicsItem_mapFromParent_const_QPointF_R(_self_ : QGraphicsItem*, point : QPointF) : QPointF
    fun bg_QGraphicsItem_mapFromScene_const_QPointF_R(_self_ : QGraphicsItem*, point : QPointF) : QPointF
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromParent_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromScene_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QPolygonF*
    fun bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_const_QRectF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, rect : QRectF*) : QRectF*
    fun bg_QGraphicsItem_mapRectFromParent_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QRectF*
    fun bg_QGraphicsItem_mapRectFromScene_const_QRectF_R(_self_ : QGraphicsItem*, rect : QRectF*) : QRectF*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPolygonF_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromParent_const_QPolygonF_R(_self_ : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromScene_const_QPolygonF_R(_self_ : QGraphicsItem*, polygon : QPolygonF*) : QPolygonF*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPainterPath_R(_self_ : QGraphicsItem*, item : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapFromParent_const_QPainterPath_R(_self_ : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapFromScene_const_QPainterPath_R(_self_ : QGraphicsItem*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal(_self_ : QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64) : QPointF
    fun bg_QGraphicsItem_mapToParent_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64) : QPointF
    fun bg_QGraphicsItem_mapToScene_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64) : QPointF
    fun bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapToParent_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapToScene_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QRectF*
    fun bg_QGraphicsItem_mapRectToParent_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QRectF*
    fun bg_QGraphicsItem_mapRectToScene_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QRectF*
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal(_self_ : QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64) : QPointF
    fun bg_QGraphicsItem_mapFromParent_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64) : QPointF
    fun bg_QGraphicsItem_mapFromScene_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64) : QPointF
    fun bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapFromParent_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapFromScene_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygonF*
    fun bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, item : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QRectF*
    fun bg_QGraphicsItem_mapRectFromParent_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QRectF*
    fun bg_QGraphicsItem_mapRectFromScene_qreal_qreal_qreal_qreal(_self_ : QGraphicsItem*, x : Float64, y : Float64, w : Float64, h : Float64) : QRectF*
    fun bg_QGraphicsItem_isAncestorOf_const_QGraphicsItem_X(_self_ : QGraphicsItem*, child : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_commonAncestorItem_const_QGraphicsItem_X(_self_ : QGraphicsItem*, other : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_isUnderMouse_(_self_ : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_data_int(_self_ : QGraphicsItem*, key : Int32) : CrystalVariant
    fun bg_QGraphicsItem_setData_int_const_QVariant_R(_self_ : QGraphicsItem*, key : Int32, value : CrystalVariant) : Void
    fun bg_QGraphicsItem_inputMethodHints_(_self_ : QGraphicsItem*) : InputMethodHints
    fun bg_QGraphicsItem_setInputMethodHints_Qt__InputMethodHints(_self_ : QGraphicsItem*, hints : InputMethodHints) : Void
    fun bg_QGraphicsItem_type_(_self_ : QGraphicsItem*) : Int32
    fun bg_QGraphicsItem_installSceneEventFilter_QGraphicsItem_X(_self_ : QGraphicsItem*, filter_item : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_removeSceneEventFilter_QGraphicsItem_X(_self_ : QGraphicsItem*, filter_item : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_updateMicroFocus_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_QEvent_X(_self_ : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_QFocusEvent_X(_self_ : QGraphicsItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(_self_ : QGraphicsItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(_self_ : QGraphicsItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(_self_ : QGraphicsItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGraphicsItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsItem*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsItem_extension_const_QVariant_R(_self_ : QGraphicsItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem__CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd : QGraphicsItemPrivate*, parent : QGraphicsItem*) : QGraphicsItem*
    fun bg_QGraphicsItem_addToIndex_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_removeFromIndex_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_prepareGeometryChange_(_self_ : QGraphicsItem*) : Void
    fun bg_QGraphicsItem_advance_SUPER_int(_self_ : QGraphicsItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_shape_SUPER_(_self_ : QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsItem*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_opaqueArea_SUPER_(_self_ : QGraphicsItem*) : QPainterPath*
    fun bg_QGraphicsItem_type_SUPER_(_self_ : QGraphicsItem*) : Int32
    fun bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(_self_ : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGraphicsItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGraphicsItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsItem*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsItem_JUMPTABLE_BgJumptable_QGraphicsItem_R(_self_ : QGraphicsItem*, table : BgJumptable_QGraphicsItem*) : Void
    fun bg_QGraphicsObject_metaObject_(_self_ : QGraphicsObject*) : QMetaObject*
    fun bg_QGraphicsObject_qt_metacast_const_char_X(_self_ : QGraphicsObject*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGraphicsObject*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsObject_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGraphicsObject__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsObject*
    fun bg_QGraphicsObject_grabGesture_Qt__GestureType(_self_ : QGraphicsObject*, type : GestureType) : Void
    fun bg_QGraphicsObject_grabGesture_Qt__GestureType_Qt__GestureFlags(_self_ : QGraphicsObject*, type : GestureType, flags : GestureFlags) : Void
    fun bg_QGraphicsObject_ungrabGesture_Qt__GestureType(_self_ : QGraphicsObject*, type : GestureType) : Void
    fun bg_QGraphicsObject_updateMicroFocus_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_parentChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_opacityChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_visibleChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_enabledChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_xChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_yChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_zChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_rotationChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_scaleChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_childrenChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_widthChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject_heightChanged_(_self_ : QGraphicsObject*) : Void
    fun bg_QGraphicsObject__CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd : QGraphicsItemPrivate*, parent : QGraphicsItem*) : QGraphicsObject*
    fun bg_QGraphicsObject_event_QEvent_X(_self_ : QGraphicsObject*, ev : QEvent*) : Bool
    fun bg_QGraphicsObject_AS_GraphicsItem_(_self_ : QGraphicsObject*) : QGraphicsItem*
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QGraphicsObject*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QGraphicsObject*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QGraphicsObject*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QGraphicsObject*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QGraphicsObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QGraphicsObject*, signal : QMetaMethod*) : Void
    fun bg_QGraphicsItem_advance_int(_self_ : QGraphicsObject*, phase : Int32) : Void
    fun bg_QGraphicsItem_boundingRect_(_self_ : QGraphicsObject*) : QRectF*
    fun bg_QGraphicsItem_shape_(_self_ : QGraphicsObject*) : QPainterPath*
    fun bg_QGraphicsItem_contains_const_QPointF_R(_self_ : QGraphicsObject*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsObject*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsObject*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsObject*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_opaqueArea_(_self_ : QGraphicsObject*) : QPainterPath*
    fun bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsObject*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsItem_type_(_self_ : QGraphicsObject*) : Int32
    fun bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsObject*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_QEvent_X(_self_ : QGraphicsObject*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_QFocusEvent_X(_self_ : QGraphicsObject*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsObject*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(_self_ : QGraphicsObject*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(_self_ : QGraphicsObject*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(_self_ : QGraphicsObject*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGraphicsObject*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsObject*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsObject*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsObject*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsItem_extension_const_QVariant_R(_self_ : QGraphicsObject*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsObject_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGraphicsObject_CONNECT_parentChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_opacityChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_visibleChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_enabledChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_xChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_yChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_zChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_rotationChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_scaleChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_childrenChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_widthChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_CONNECT_heightChanged_CrystalProc_void_(_self_ : QGraphicsObject*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsObject_event_SUPER_QEvent_X(_self_ : QGraphicsObject*, ev : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QGraphicsObject*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QGraphicsObject*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QGraphicsObject*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QGraphicsObject*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QGraphicsObject*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QGraphicsObject*, signal : QMetaMethod*) : Void
    fun bg_QGraphicsItem_advance_SUPER_int(_self_ : QGraphicsObject*, phase : Int32) : Void
    fun bg_QGraphicsItem_shape_SUPER_(_self_ : QGraphicsObject*) : QPainterPath*
    fun bg_QGraphicsItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsObject*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsObject*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsObject*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsObject*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsItem_opaqueArea_SUPER_(_self_ : QGraphicsObject*) : QPainterPath*
    fun bg_QGraphicsItem_type_SUPER_(_self_ : QGraphicsObject*) : Int32
    fun bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsObject*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(_self_ : QGraphicsObject*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsObject*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsObject*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsObject*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsObject*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsObject*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGraphicsObject*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGraphicsObject*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsObject*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsObject*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsObject*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsObject*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsObject_JUMPTABLE_BgJumptable_QGraphicsObject_R(_self_ : QGraphicsObject*, table : BgJumptable_QGraphicsObject*) : Void
    fun bg_QAbstractGraphicsShapeItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QAbstractGraphicsShapeItem*
    fun bg_QAbstractGraphicsShapeItem_pen_(_self_ : QAbstractGraphicsShapeItem*) : QPen*
    fun bg_QAbstractGraphicsShapeItem_setPen_const_QPen_R(_self_ : QAbstractGraphicsShapeItem*, pen : QPen*) : Void
    fun bg_QAbstractGraphicsShapeItem_brush_(_self_ : QAbstractGraphicsShapeItem*) : QBrush*
    fun bg_QAbstractGraphicsShapeItem_setBrush_const_QBrush_R(_self_ : QAbstractGraphicsShapeItem*, brush : QBrush*) : Void
    fun bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QAbstractGraphicsShapeItem*, item : QGraphicsItem*) : Bool
    fun bg_QAbstractGraphicsShapeItem_opaqueArea_(_self_ : QAbstractGraphicsShapeItem*) : QPainterPath*
    fun bg_QAbstractGraphicsShapeItem__CONSTRUCT_QAbstractGraphicsShapeItemPrivate_R_QGraphicsItem_X(dd : QAbstractGraphicsShapeItemPrivate*, parent : QGraphicsItem*) : QAbstractGraphicsShapeItem*
    fun bg_QGraphicsItem_advance_int(_self_ : QAbstractGraphicsShapeItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_boundingRect_(_self_ : QAbstractGraphicsShapeItem*) : QRectF*
    fun bg_QGraphicsItem_shape_(_self_ : QAbstractGraphicsShapeItem*) : QPainterPath*
    fun bg_QGraphicsItem_contains_const_QPointF_R(_self_ : QAbstractGraphicsShapeItem*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QAbstractGraphicsShapeItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QAbstractGraphicsShapeItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QAbstractGraphicsShapeItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsItem_type_(_self_ : QAbstractGraphicsShapeItem*) : Int32
    fun bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(_self_ : QAbstractGraphicsShapeItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_QEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_QFocusEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(_self_ : QAbstractGraphicsShapeItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QAbstractGraphicsShapeItem*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(_self_ : QAbstractGraphicsShapeItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QAbstractGraphicsShapeItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsItem_extension_const_QVariant_R(_self_ : QAbstractGraphicsShapeItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QAbstractGraphicsShapeItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QAbstractGraphicsShapeItem*, item : QGraphicsItem*) : Bool
    fun bg_QAbstractGraphicsShapeItem_opaqueArea_SUPER_(_self_ : QAbstractGraphicsShapeItem*) : QPainterPath*
    fun bg_QGraphicsItem_advance_SUPER_int(_self_ : QAbstractGraphicsShapeItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_shape_SUPER_(_self_ : QAbstractGraphicsShapeItem*) : QPainterPath*
    fun bg_QGraphicsItem_contains_SUPER_const_QPointF_R(_self_ : QAbstractGraphicsShapeItem*, point : QPointF) : Bool
    fun bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QAbstractGraphicsShapeItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QAbstractGraphicsShapeItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_type_SUPER_(_self_ : QAbstractGraphicsShapeItem*) : Int32
    fun bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(_self_ : QAbstractGraphicsShapeItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QAbstractGraphicsShapeItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QAbstractGraphicsShapeItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QAbstractGraphicsShapeItem*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QAbstractGraphicsShapeItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QAbstractGraphicsShapeItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsItem_extension_SUPER_const_QVariant_R(_self_ : QAbstractGraphicsShapeItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QAbstractGraphicsShapeItem_JUMPTABLE_BgJumptable_QAbstractGraphicsShapeItem_R(_self_ : QAbstractGraphicsShapeItem*, table : BgJumptable_QAbstractGraphicsShapeItem*) : Void
    fun bg_QGraphicsPathItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsPathItem*
    fun bg_QGraphicsPathItem__CONSTRUCT_const_QPainterPath_R_QGraphicsItem_X(path : QPainterPath*, parent : QGraphicsItem*) : QGraphicsPathItem*
    fun bg_QGraphicsPathItem_path_(_self_ : QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_setPath_const_QPainterPath_R(_self_ : QGraphicsPathItem*, path : QPainterPath*) : Void
    fun bg_QGraphicsPathItem_boundingRect_(_self_ : QGraphicsPathItem*) : QRectF*
    fun bg_QGraphicsPathItem_shape_(_self_ : QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_contains_const_QPointF_R(_self_ : QGraphicsPathItem*, point : QPointF) : Bool
    fun bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsPathItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsPathItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPathItem_opaqueArea_(_self_ : QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_type_(_self_ : QGraphicsPathItem*) : Int32
    fun bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsPathItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsPathItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsPathItem_extension_const_QVariant_R(_self_ : QGraphicsPathItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsPathItem_boundingRect_SUPER_(_self_ : QGraphicsPathItem*) : QRectF*
    fun bg_QGraphicsPathItem_shape_SUPER_(_self_ : QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsPathItem*, point : QPointF) : Bool
    fun bg_QGraphicsPathItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsPathItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPathItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsPathItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPathItem_opaqueArea_SUPER_(_self_ : QGraphicsPathItem*) : QPainterPath*
    fun bg_QGraphicsPathItem_type_SUPER_(_self_ : QGraphicsPathItem*) : Int32
    fun bg_QGraphicsPathItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsPathItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPathItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsPathItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsPathItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsPathItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsPathItem_JUMPTABLE_BgJumptable_QGraphicsPathItem_R(_self_ : QGraphicsPathItem*, table : BgJumptable_QGraphicsPathItem*) : Void
    fun bg_QGraphicsRectItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsRectItem*
    fun bg_QGraphicsRectItem__CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect : QRectF*, parent : QGraphicsItem*) : QGraphicsRectItem*
    fun bg_QGraphicsRectItem__CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x : Float64, y : Float64, w : Float64, h : Float64, parent : QGraphicsItem*) : QGraphicsRectItem*
    fun bg_QGraphicsRectItem_rect_(_self_ : QGraphicsRectItem*) : QRectF*
    fun bg_QGraphicsRectItem_setRect_const_QRectF_R(_self_ : QGraphicsRectItem*, rect : QRectF*) : Void
    fun bg_QGraphicsRectItem_setRect_qreal_qreal_qreal_qreal(_self_ : QGraphicsRectItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsRectItem_boundingRect_(_self_ : QGraphicsRectItem*) : QRectF*
    fun bg_QGraphicsRectItem_shape_(_self_ : QGraphicsRectItem*) : QPainterPath*
    fun bg_QGraphicsRectItem_contains_const_QPointF_R(_self_ : QGraphicsRectItem*, point : QPointF) : Bool
    fun bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsRectItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsRectItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsRectItem_opaqueArea_(_self_ : QGraphicsRectItem*) : QPainterPath*
    fun bg_QGraphicsRectItem_type_(_self_ : QGraphicsRectItem*) : Int32
    fun bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsRectItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsRectItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsRectItem_extension_const_QVariant_R(_self_ : QGraphicsRectItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsRectItem_boundingRect_SUPER_(_self_ : QGraphicsRectItem*) : QRectF*
    fun bg_QGraphicsRectItem_shape_SUPER_(_self_ : QGraphicsRectItem*) : QPainterPath*
    fun bg_QGraphicsRectItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsRectItem*, point : QPointF) : Bool
    fun bg_QGraphicsRectItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsRectItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsRectItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsRectItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsRectItem_opaqueArea_SUPER_(_self_ : QGraphicsRectItem*) : QPainterPath*
    fun bg_QGraphicsRectItem_type_SUPER_(_self_ : QGraphicsRectItem*) : Int32
    fun bg_QGraphicsRectItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsRectItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsRectItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsRectItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsRectItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsRectItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsRectItem_JUMPTABLE_BgJumptable_QGraphicsRectItem_R(_self_ : QGraphicsRectItem*, table : BgJumptable_QGraphicsRectItem*) : Void
    fun bg_QGraphicsEllipseItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsEllipseItem*
    fun bg_QGraphicsEllipseItem__CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect : QRectF*, parent : QGraphicsItem*) : QGraphicsEllipseItem*
    fun bg_QGraphicsEllipseItem__CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x : Float64, y : Float64, w : Float64, h : Float64, parent : QGraphicsItem*) : QGraphicsEllipseItem*
    fun bg_QGraphicsEllipseItem_rect_(_self_ : QGraphicsEllipseItem*) : QRectF*
    fun bg_QGraphicsEllipseItem_setRect_const_QRectF_R(_self_ : QGraphicsEllipseItem*, rect : QRectF*) : Void
    fun bg_QGraphicsEllipseItem_setRect_qreal_qreal_qreal_qreal(_self_ : QGraphicsEllipseItem*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsEllipseItem_startAngle_(_self_ : QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_setStartAngle_int(_self_ : QGraphicsEllipseItem*, angle : Int32) : Void
    fun bg_QGraphicsEllipseItem_spanAngle_(_self_ : QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_setSpanAngle_int(_self_ : QGraphicsEllipseItem*, angle : Int32) : Void
    fun bg_QGraphicsEllipseItem_boundingRect_(_self_ : QGraphicsEllipseItem*) : QRectF*
    fun bg_QGraphicsEllipseItem_shape_(_self_ : QGraphicsEllipseItem*) : QPainterPath*
    fun bg_QGraphicsEllipseItem_contains_const_QPointF_R(_self_ : QGraphicsEllipseItem*, point : QPointF) : Bool
    fun bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsEllipseItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsEllipseItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsEllipseItem_opaqueArea_(_self_ : QGraphicsEllipseItem*) : QPainterPath*
    fun bg_QGraphicsEllipseItem_type_(_self_ : QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsEllipseItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsEllipseItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsEllipseItem_extension_const_QVariant_R(_self_ : QGraphicsEllipseItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsEllipseItem_boundingRect_SUPER_(_self_ : QGraphicsEllipseItem*) : QRectF*
    fun bg_QGraphicsEllipseItem_shape_SUPER_(_self_ : QGraphicsEllipseItem*) : QPainterPath*
    fun bg_QGraphicsEllipseItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsEllipseItem*, point : QPointF) : Bool
    fun bg_QGraphicsEllipseItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsEllipseItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsEllipseItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsEllipseItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsEllipseItem_opaqueArea_SUPER_(_self_ : QGraphicsEllipseItem*) : QPainterPath*
    fun bg_QGraphicsEllipseItem_type_SUPER_(_self_ : QGraphicsEllipseItem*) : Int32
    fun bg_QGraphicsEllipseItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsEllipseItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsEllipseItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsEllipseItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsEllipseItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsEllipseItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsEllipseItem_JUMPTABLE_BgJumptable_QGraphicsEllipseItem_R(_self_ : QGraphicsEllipseItem*, table : BgJumptable_QGraphicsEllipseItem*) : Void
    fun bg_QGraphicsPolygonItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsPolygonItem*
    fun bg_QGraphicsPolygonItem__CONSTRUCT_const_QPolygonF_R_QGraphicsItem_X(polygon : QPolygonF*, parent : QGraphicsItem*) : QGraphicsPolygonItem*
    fun bg_QGraphicsPolygonItem_polygon_(_self_ : QGraphicsPolygonItem*) : QPolygonF*
    fun bg_QGraphicsPolygonItem_setPolygon_const_QPolygonF_R(_self_ : QGraphicsPolygonItem*, polygon : QPolygonF*) : Void
    fun bg_QGraphicsPolygonItem_fillRule_(_self_ : QGraphicsPolygonItem*) : FillRule
    fun bg_QGraphicsPolygonItem_setFillRule_Qt__FillRule(_self_ : QGraphicsPolygonItem*, rule : FillRule) : Void
    fun bg_QGraphicsPolygonItem_boundingRect_(_self_ : QGraphicsPolygonItem*) : QRectF*
    fun bg_QGraphicsPolygonItem_shape_(_self_ : QGraphicsPolygonItem*) : QPainterPath*
    fun bg_QGraphicsPolygonItem_contains_const_QPointF_R(_self_ : QGraphicsPolygonItem*, point : QPointF) : Bool
    fun bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsPolygonItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsPolygonItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPolygonItem_opaqueArea_(_self_ : QGraphicsPolygonItem*) : QPainterPath*
    fun bg_QGraphicsPolygonItem_type_(_self_ : QGraphicsPolygonItem*) : Int32
    fun bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsPolygonItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsPolygonItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsPolygonItem_extension_const_QVariant_R(_self_ : QGraphicsPolygonItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsPolygonItem_boundingRect_SUPER_(_self_ : QGraphicsPolygonItem*) : QRectF*
    fun bg_QGraphicsPolygonItem_shape_SUPER_(_self_ : QGraphicsPolygonItem*) : QPainterPath*
    fun bg_QGraphicsPolygonItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsPolygonItem*, point : QPointF) : Bool
    fun bg_QGraphicsPolygonItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsPolygonItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPolygonItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsPolygonItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPolygonItem_opaqueArea_SUPER_(_self_ : QGraphicsPolygonItem*) : QPainterPath*
    fun bg_QGraphicsPolygonItem_type_SUPER_(_self_ : QGraphicsPolygonItem*) : Int32
    fun bg_QGraphicsPolygonItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsPolygonItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPolygonItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsPolygonItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsPolygonItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsPolygonItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsPolygonItem_JUMPTABLE_BgJumptable_QGraphicsPolygonItem_R(_self_ : QGraphicsPolygonItem*, table : BgJumptable_QGraphicsPolygonItem*) : Void
    fun bg_QGraphicsPixmapItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsPixmapItem*
    fun bg_QGraphicsPixmapItem__CONSTRUCT_const_QPixmap_R_QGraphicsItem_X(pixmap : QPixmap*, parent : QGraphicsItem*) : QGraphicsPixmapItem*
    fun bg_QGraphicsPixmapItem_pixmap_(_self_ : QGraphicsPixmapItem*) : QPixmap*
    fun bg_QGraphicsPixmapItem_setPixmap_const_QPixmap_R(_self_ : QGraphicsPixmapItem*, pixmap : QPixmap*) : Void
    fun bg_QGraphicsPixmapItem_transformationMode_(_self_ : QGraphicsPixmapItem*) : TransformationMode
    fun bg_QGraphicsPixmapItem_setTransformationMode_Qt__TransformationMode(_self_ : QGraphicsPixmapItem*, mode : TransformationMode) : Void
    fun bg_QGraphicsPixmapItem_offset_(_self_ : QGraphicsPixmapItem*) : QPointF
    fun bg_QGraphicsPixmapItem_setOffset_const_QPointF_R(_self_ : QGraphicsPixmapItem*, offset : QPointF) : Void
    fun bg_QGraphicsPixmapItem_setOffset_qreal_qreal(_self_ : QGraphicsPixmapItem*, x : Float64, y : Float64) : Void
    fun bg_QGraphicsPixmapItem_boundingRect_(_self_ : QGraphicsPixmapItem*) : QRectF*
    fun bg_QGraphicsPixmapItem_shape_(_self_ : QGraphicsPixmapItem*) : QPainterPath*
    fun bg_QGraphicsPixmapItem_contains_const_QPointF_R(_self_ : QGraphicsPixmapItem*, point : QPointF) : Bool
    fun bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsPixmapItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsPixmapItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPixmapItem_opaqueArea_(_self_ : QGraphicsPixmapItem*) : QPainterPath*
    fun bg_QGraphicsPixmapItem_type_(_self_ : QGraphicsPixmapItem*) : Int32
    fun bg_QGraphicsPixmapItem_shapeMode_(_self_ : QGraphicsPixmapItem*) : GraphicsPixmapItem::ShapeMode
    fun bg_QGraphicsPixmapItem_setShapeMode_QGraphicsPixmapItem__ShapeMode(_self_ : QGraphicsPixmapItem*, mode : GraphicsPixmapItem::ShapeMode) : Void
    fun bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsPixmapItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsPixmapItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsPixmapItem_extension_const_QVariant_R(_self_ : QGraphicsPixmapItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_advance_int(_self_ : QGraphicsPixmapItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsPixmapItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsPixmapItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsPixmapItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_QEvent_X(_self_ : QGraphicsPixmapItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_QFocusEvent_X(_self_ : QGraphicsPixmapItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsPixmapItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(_self_ : QGraphicsPixmapItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(_self_ : QGraphicsPixmapItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(_self_ : QGraphicsPixmapItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGraphicsPixmapItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsPixmapItem*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsPixmapItem_boundingRect_SUPER_(_self_ : QGraphicsPixmapItem*) : QRectF*
    fun bg_QGraphicsPixmapItem_shape_SUPER_(_self_ : QGraphicsPixmapItem*) : QPainterPath*
    fun bg_QGraphicsPixmapItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsPixmapItem*, point : QPointF) : Bool
    fun bg_QGraphicsPixmapItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsPixmapItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsPixmapItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsPixmapItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsPixmapItem_opaqueArea_SUPER_(_self_ : QGraphicsPixmapItem*) : QPainterPath*
    fun bg_QGraphicsPixmapItem_type_SUPER_(_self_ : QGraphicsPixmapItem*) : Int32
    fun bg_QGraphicsPixmapItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsPixmapItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsPixmapItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsPixmapItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsPixmapItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsPixmapItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsItem_advance_SUPER_int(_self_ : QGraphicsPixmapItem*, phase : Int32) : Void
    fun bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsPixmapItem*, other : QGraphicsItem*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsPixmapItem*, path : QPainterPath*, mode : ItemSelectionMode) : Bool
    fun bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsPixmapItem*, watched : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(_self_ : QGraphicsPixmapItem*, event : QEvent*) : Bool
    fun bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsPixmapItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsPixmapItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsPixmapItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsPixmapItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsPixmapItem*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGraphicsPixmapItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGraphicsPixmapItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsPixmapItem*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsPixmapItem_JUMPTABLE_BgJumptable_QGraphicsPixmapItem_R(_self_ : QGraphicsPixmapItem*, table : BgJumptable_QGraphicsPixmapItem*) : Void
    fun bg_QGraphicsTextItem_metaObject_(_self_ : QGraphicsTextItem*) : QMetaObject*
    fun bg_QGraphicsTextItem_qt_metacast_const_char_X(_self_ : QGraphicsTextItem*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGraphicsTextItem*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsTextItem_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGraphicsTextItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsTextItem*
    fun bg_QGraphicsTextItem__CONSTRUCT_const_QString_R_QGraphicsItem_X(text : CrystalString, parent : QGraphicsItem*) : QGraphicsTextItem*
    fun bg_QGraphicsTextItem_toHtml_(_self_ : QGraphicsTextItem*) : CrystalString
    fun bg_QGraphicsTextItem_setHtml_const_QString_R(_self_ : QGraphicsTextItem*, html : CrystalString) : Void
    fun bg_QGraphicsTextItem_toPlainText_(_self_ : QGraphicsTextItem*) : CrystalString
    fun bg_QGraphicsTextItem_setPlainText_const_QString_R(_self_ : QGraphicsTextItem*, text : CrystalString) : Void
    fun bg_QGraphicsTextItem_font_(_self_ : QGraphicsTextItem*) : QFont*
    fun bg_QGraphicsTextItem_setFont_const_QFont_R(_self_ : QGraphicsTextItem*, font : QFont*) : Void
    fun bg_QGraphicsTextItem_setDefaultTextColor_const_QColor_R(_self_ : QGraphicsTextItem*, c : QColor*) : Void
    fun bg_QGraphicsTextItem_defaultTextColor_(_self_ : QGraphicsTextItem*) : QColor*
    fun bg_QGraphicsTextItem_boundingRect_(_self_ : QGraphicsTextItem*) : QRectF*
    fun bg_QGraphicsTextItem_shape_(_self_ : QGraphicsTextItem*) : QPainterPath*
    fun bg_QGraphicsTextItem_contains_const_QPointF_R(_self_ : QGraphicsTextItem*, point : QPointF) : Bool
    fun bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsTextItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsTextItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsTextItem_opaqueArea_(_self_ : QGraphicsTextItem*) : QPainterPath*
    fun bg_QGraphicsTextItem_type_(_self_ : QGraphicsTextItem*) : Int32
    fun bg_QGraphicsTextItem_setTextWidth_qreal(_self_ : QGraphicsTextItem*, width : Float64) : Void
    fun bg_QGraphicsTextItem_textWidth_(_self_ : QGraphicsTextItem*) : Float64
    fun bg_QGraphicsTextItem_adjustSize_(_self_ : QGraphicsTextItem*) : Void
    fun bg_QGraphicsTextItem_setDocument_QTextDocument_X(_self_ : QGraphicsTextItem*, document : QTextDocument*) : Void
    fun bg_QGraphicsTextItem_document_(_self_ : QGraphicsTextItem*) : QTextDocument*
    fun bg_QGraphicsTextItem_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : QGraphicsTextItem*, flags : TextInteractionFlags) : Void
    fun bg_QGraphicsTextItem_textInteractionFlags_(_self_ : QGraphicsTextItem*) : TextInteractionFlags
    fun bg_QGraphicsTextItem_setTabChangesFocus_bool(_self_ : QGraphicsTextItem*, b : Bool) : Void
    fun bg_QGraphicsTextItem_tabChangesFocus_(_self_ : QGraphicsTextItem*) : Bool
    fun bg_QGraphicsTextItem_setOpenExternalLinks_bool(_self_ : QGraphicsTextItem*, open : Bool) : Void
    fun bg_QGraphicsTextItem_openExternalLinks_(_self_ : QGraphicsTextItem*) : Bool
    fun bg_QGraphicsTextItem_setTextCursor_const_QTextCursor_R(_self_ : QGraphicsTextItem*, cursor : QTextCursor*) : Void
    fun bg_QGraphicsTextItem_textCursor_(_self_ : QGraphicsTextItem*) : QTextCursor*
    fun bg_QGraphicsTextItem_linkActivated_const_QString_R(_self_ : QGraphicsTextItem*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QGraphicsTextItem_linkHovered_const_QString_R(_self_ : QGraphicsTextItem*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QGraphicsTextItem_sceneEvent_QEvent_X(_self_ : QGraphicsTextItem*, event : QEvent*) : Bool
    fun bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(_self_ : QGraphicsTextItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(_self_ : QGraphicsTextItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(_self_ : QGraphicsTextItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsTextItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(_self_ : QGraphicsTextItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGraphicsTextItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsTextItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsTextItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsTextItem_extension_const_QVariant_R(_self_ : QGraphicsTextItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsObject_event_QEvent_X(_self_ : QGraphicsTextItem*, ev : QEvent*) : Bool
    fun bg_QGraphicsTextItem_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGraphicsTextItem_CONNECT_linkActivated_CrystalProc_void__const_QString_R_(_self_ : QGraphicsTextItem*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsTextItem_CONNECT_linkHovered_CrystalProc_void__const_QString_R_(_self_ : QGraphicsTextItem*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsTextItem_boundingRect_SUPER_(_self_ : QGraphicsTextItem*) : QRectF*
    fun bg_QGraphicsTextItem_shape_SUPER_(_self_ : QGraphicsTextItem*) : QPainterPath*
    fun bg_QGraphicsTextItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsTextItem*, point : QPointF) : Bool
    fun bg_QGraphicsTextItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsTextItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsTextItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsTextItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsTextItem_opaqueArea_SUPER_(_self_ : QGraphicsTextItem*) : QPainterPath*
    fun bg_QGraphicsTextItem_type_SUPER_(_self_ : QGraphicsTextItem*) : Int32
    fun bg_QGraphicsTextItem_sceneEvent_SUPER_QEvent_X(_self_ : QGraphicsTextItem*, event : QEvent*) : Bool
    fun bg_QGraphicsTextItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsTextItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsTextItem_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsTextItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsTextItem_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsTextItem*, event : QKeyEvent*) : Void
    fun bg_QGraphicsTextItem_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsTextItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsTextItem_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsTextItem*, event : QFocusEvent*) : Void
    fun bg_QGraphicsTextItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsTextItem_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGraphicsTextItem*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsTextItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsTextItem*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsTextItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGraphicsTextItem*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsTextItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsTextItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsTextItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsTextItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsTextItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsTextItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsObject_event_SUPER_QEvent_X(_self_ : QGraphicsTextItem*, ev : QEvent*) : Bool
    fun bg_BgInherit_QGraphicsTextItem_JUMPTABLE_BgJumptable_QGraphicsTextItem_R(_self_ : QGraphicsTextItem*, table : BgJumptable_QGraphicsTextItem*) : Void
    fun bg_QGraphicsSimpleTextItem__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsSimpleTextItem*
    fun bg_QGraphicsSimpleTextItem__CONSTRUCT_const_QString_R_QGraphicsItem_X(text : CrystalString, parent : QGraphicsItem*) : QGraphicsSimpleTextItem*
    fun bg_QGraphicsSimpleTextItem_setText_const_QString_R(_self_ : QGraphicsSimpleTextItem*, text : CrystalString) : Void
    fun bg_QGraphicsSimpleTextItem_text_(_self_ : QGraphicsSimpleTextItem*) : CrystalString
    fun bg_QGraphicsSimpleTextItem_setFont_const_QFont_R(_self_ : QGraphicsSimpleTextItem*, font : QFont*) : Void
    fun bg_QGraphicsSimpleTextItem_font_(_self_ : QGraphicsSimpleTextItem*) : QFont*
    fun bg_QGraphicsSimpleTextItem_boundingRect_(_self_ : QGraphicsSimpleTextItem*) : QRectF*
    fun bg_QGraphicsSimpleTextItem_shape_(_self_ : QGraphicsSimpleTextItem*) : QPainterPath*
    fun bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(_self_ : QGraphicsSimpleTextItem*, point : QPointF) : Bool
    fun bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsSimpleTextItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(_self_ : QGraphicsSimpleTextItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsSimpleTextItem_opaqueArea_(_self_ : QGraphicsSimpleTextItem*) : QPainterPath*
    fun bg_QGraphicsSimpleTextItem_type_(_self_ : QGraphicsSimpleTextItem*) : Int32
    fun bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(_self_ : QGraphicsSimpleTextItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsSimpleTextItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsSimpleTextItem_extension_const_QVariant_R(_self_ : QGraphicsSimpleTextItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsSimpleTextItem_boundingRect_SUPER_(_self_ : QGraphicsSimpleTextItem*) : QRectF*
    fun bg_QGraphicsSimpleTextItem_shape_SUPER_(_self_ : QGraphicsSimpleTextItem*) : QPainterPath*
    fun bg_QGraphicsSimpleTextItem_contains_SUPER_const_QPointF_R(_self_ : QGraphicsSimpleTextItem*, point : QPointF) : Bool
    fun bg_QGraphicsSimpleTextItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsSimpleTextItem*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsSimpleTextItem_isObscuredBy_SUPER_const_QGraphicsItem_X(_self_ : QGraphicsSimpleTextItem*, item : QGraphicsItem*) : Bool
    fun bg_QGraphicsSimpleTextItem_opaqueArea_SUPER_(_self_ : QGraphicsSimpleTextItem*) : QPainterPath*
    fun bg_QGraphicsSimpleTextItem_type_SUPER_(_self_ : QGraphicsSimpleTextItem*) : Int32
    fun bg_QGraphicsSimpleTextItem_supportsExtension_SUPER_QGraphicsItem__Extension(_self_ : QGraphicsSimpleTextItem*, extension : GraphicsItem::Extension) : Bool
    fun bg_QGraphicsSimpleTextItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(_self_ : QGraphicsSimpleTextItem*, extension : GraphicsItem::Extension, variant : CrystalVariant) : Void
    fun bg_QGraphicsSimpleTextItem_extension_SUPER_const_QVariant_R(_self_ : QGraphicsSimpleTextItem*, variant : CrystalVariant) : CrystalVariant
    fun bg_BgInherit_QGraphicsSimpleTextItem_JUMPTABLE_BgJumptable_QGraphicsSimpleTextItem_R(_self_ : QGraphicsSimpleTextItem*, table : BgJumptable_QGraphicsSimpleTextItem*) : Void
    fun bg_QGraphicsWidget_metaObject_(_self_ : QGraphicsWidget*) : QMetaObject*
    fun bg_QGraphicsWidget_qt_metacast_const_char_X(_self_ : QGraphicsWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGraphicsWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGraphicsWidget__CONSTRUCT_QGraphicsItem_X(parent : QGraphicsItem*) : QGraphicsWidget*
    fun bg_QGraphicsWidget__CONSTRUCT_QGraphicsItem_X_Qt__WindowFlags(parent : QGraphicsItem*, w_flags : WindowFlags) : QGraphicsWidget*
    fun bg_QGraphicsWidget_layout_(_self_ : QGraphicsWidget*) : QGraphicsLayout*
    fun bg_QGraphicsWidget_setLayout_QGraphicsLayout_X(_self_ : QGraphicsWidget*, layout : QGraphicsLayout*) : Void
    fun bg_QGraphicsWidget_adjustSize_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_layoutDirection_(_self_ : QGraphicsWidget*) : LayoutDirection
    fun bg_QGraphicsWidget_setLayoutDirection_Qt__LayoutDirection(_self_ : QGraphicsWidget*, direction : LayoutDirection) : Void
    fun bg_QGraphicsWidget_unsetLayoutDirection_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_style_(_self_ : QGraphicsWidget*) : QStyle*
    fun bg_QGraphicsWidget_setStyle_QStyle_X(_self_ : QGraphicsWidget*, style : QStyle*) : Void
    fun bg_QGraphicsWidget_font_(_self_ : QGraphicsWidget*) : QFont*
    fun bg_QGraphicsWidget_setFont_const_QFont_R(_self_ : QGraphicsWidget*, font : QFont*) : Void
    fun bg_QGraphicsWidget_palette_(_self_ : QGraphicsWidget*) : QPalette*
    fun bg_QGraphicsWidget_setPalette_const_QPalette_R(_self_ : QGraphicsWidget*, palette : QPalette*) : Void
    fun bg_QGraphicsWidget_autoFillBackground_(_self_ : QGraphicsWidget*) : Bool
    fun bg_QGraphicsWidget_setAutoFillBackground_bool(_self_ : QGraphicsWidget*, enabled : Bool) : Void
    fun bg_QGraphicsWidget_resize_const_QSizeF_R(_self_ : QGraphicsWidget*, size : QSizeF*) : Void
    fun bg_QGraphicsWidget_resize_qreal_qreal(_self_ : QGraphicsWidget*, w : Float64, h : Float64) : Void
    fun bg_QGraphicsWidget_size_(_self_ : QGraphicsWidget*) : QSizeF*
    fun bg_QGraphicsWidget_setGeometry_const_QRectF_R(_self_ : QGraphicsWidget*, rect : QRectF*) : Void
    fun bg_QGraphicsWidget_setGeometry_qreal_qreal_qreal_qreal(_self_ : QGraphicsWidget*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsWidget_rect_(_self_ : QGraphicsWidget*) : QRectF*
    fun bg_QGraphicsWidget_setContentsMargins_qreal_qreal_qreal_qreal(_self_ : QGraphicsWidget*, left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
    fun bg_QGraphicsWidget_setContentsMargins_QMarginsF(_self_ : QGraphicsWidget*, margins : QMarginsF*) : Void
    fun bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QGraphicsWidget*, left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
    fun bg_QGraphicsWidget_setWindowFrameMargins_qreal_qreal_qreal_qreal(_self_ : QGraphicsWidget*, left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
    fun bg_QGraphicsWidget_setWindowFrameMargins_QMarginsF(_self_ : QGraphicsWidget*, margins : QMarginsF*) : Void
    fun bg_QGraphicsWidget_getWindowFrameMargins_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QGraphicsWidget*, left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
    fun bg_QGraphicsWidget_unsetWindowFrameMargins_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_windowFrameGeometry_(_self_ : QGraphicsWidget*) : QRectF*
    fun bg_QGraphicsWidget_windowFrameRect_(_self_ : QGraphicsWidget*) : QRectF*
    fun bg_QGraphicsWidget_windowFlags_(_self_ : QGraphicsWidget*) : WindowFlags
    fun bg_QGraphicsWidget_windowType_(_self_ : QGraphicsWidget*) : WindowType
    fun bg_QGraphicsWidget_setWindowFlags_Qt__WindowFlags(_self_ : QGraphicsWidget*, w_flags : WindowFlags) : Void
    fun bg_QGraphicsWidget_isActiveWindow_(_self_ : QGraphicsWidget*) : Bool
    fun bg_QGraphicsWidget_setWindowTitle_const_QString_R(_self_ : QGraphicsWidget*, title : CrystalString) : Void
    fun bg_QGraphicsWidget_windowTitle_(_self_ : QGraphicsWidget*) : CrystalString
    fun bg_QGraphicsWidget_focusPolicy_(_self_ : QGraphicsWidget*) : FocusPolicy
    fun bg_QGraphicsWidget_setFocusPolicy_Qt__FocusPolicy(_self_ : QGraphicsWidget*, policy : FocusPolicy) : Void
    fun bg_QGraphicsWidget_setTabOrder_STATIC_QGraphicsWidget_X_QGraphicsWidget_X(first : QGraphicsWidget*, second : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_focusWidget_(_self_ : QGraphicsWidget*) : QGraphicsWidget*
    fun bg_QGraphicsWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(_self_ : QGraphicsWidget*, sequence : QKeySequence*, context : ShortcutContext) : Int32
    fun bg_QGraphicsWidget_releaseShortcut_int(_self_ : QGraphicsWidget*, id : Int32) : Void
    fun bg_QGraphicsWidget_setShortcutEnabled_int_bool(_self_ : QGraphicsWidget*, id : Int32, enabled : Bool) : Void
    fun bg_QGraphicsWidget_setShortcutAutoRepeat_int_bool(_self_ : QGraphicsWidget*, id : Int32, enabled : Bool) : Void
    fun bg_QGraphicsWidget_addAction_QAction_X(_self_ : QGraphicsWidget*, action : QAction*) : Void
    fun bg_QGraphicsWidget_addActions_QList_QAction_X_(_self_ : QGraphicsWidget*, actions : ContainerQListQActionX*) : Void
    fun bg_QGraphicsWidget_insertActions_QAction_X_QList_QAction_X_(_self_ : QGraphicsWidget*, before : QAction*, actions : ContainerQListQActionX*) : Void
    fun bg_QGraphicsWidget_insertAction_QAction_X_QAction_X(_self_ : QGraphicsWidget*, before : QAction*, action : QAction*) : Void
    fun bg_QGraphicsWidget_removeAction_QAction_X(_self_ : QGraphicsWidget*, action : QAction*) : Void
    fun bg_QGraphicsWidget_actions_(_self_ : QGraphicsWidget*) : ContainerQListQActionX*
    fun bg_QGraphicsWidget_setAttribute_Qt__WidgetAttribute_bool(_self_ : QGraphicsWidget*, attribute : WidgetAttribute, on : Bool) : Void
    fun bg_QGraphicsWidget_testAttribute_Qt__WidgetAttribute(_self_ : QGraphicsWidget*, attribute : WidgetAttribute) : Bool
    fun bg_QGraphicsWidget_type_(_self_ : QGraphicsWidget*) : Int32
    fun bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsWidget*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsWidget*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsWidget_boundingRect_(_self_ : QGraphicsWidget*) : QRectF*
    fun bg_QGraphicsWidget_shape_(_self_ : QGraphicsWidget*) : QPainterPath*
    fun bg_QGraphicsWidget_geometryChanged_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_layoutChanged_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_close_(_self_ : QGraphicsWidget*) : Bool
    fun bg_QGraphicsWidget_initStyleOption_QStyleOption_X(_self_ : QGraphicsWidget*, option : QStyleOption*) : Void
    fun bg_QGraphicsWidget_sizeHint_Qt__SizeHint(_self_ : QGraphicsWidget*, which : SizeHint) : QSizeF*
    fun bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(_self_ : QGraphicsWidget*, which : SizeHint, constraint : QSizeF*) : QSizeF*
    fun bg_QGraphicsWidget_updateGeometry_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsWidget*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R(_self_ : QGraphicsWidget*, property_name : CrystalString, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsWidget_sceneEvent_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Bool
    fun bg_QGraphicsWidget_windowFrameEvent_QEvent_X(_self_ : QGraphicsWidget*, e : QEvent*) : Bool
    fun bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(_self_ : QGraphicsWidget*, pos : QPointF) : WindowFrameSection
    fun bg_QGraphicsWidget_event_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Bool
    fun bg_QGraphicsWidget_changeEvent_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_closeEvent_QCloseEvent_X(_self_ : QGraphicsWidget*, event : QCloseEvent*) : Void
    fun bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(_self_ : QGraphicsWidget*, event : QFocusEvent*) : Void
    fun bg_QGraphicsWidget_focusNextPrevChild_bool(_self_ : QGraphicsWidget*, next_ : Bool) : Bool
    fun bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsWidget*, event : QFocusEvent*) : Void
    fun bg_QGraphicsWidget_hideEvent_QHideEvent_X(_self_ : QGraphicsWidget*, event : QHideEvent*) : Void
    fun bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneMoveEvent*) : Void
    fun bg_QGraphicsWidget_polishEvent_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneResizeEvent*) : Void
    fun bg_QGraphicsWidget_showEvent_QShowEvent_X(_self_ : QGraphicsWidget*, event : QShowEvent*) : Void
    fun bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsWidget_grabMouseEvent_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget__CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X(unnamed_arg_0 : QGraphicsWidgetPrivate*, parent : QGraphicsItem*) : QGraphicsWidget*
    fun bg_QGraphicsWidget__CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X_Qt__WindowFlags(unnamed_arg_0 : QGraphicsWidgetPrivate*, parent : QGraphicsItem*, w_flags : WindowFlags) : QGraphicsWidget*
    fun bg_QGraphicsWidget_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGraphicsWidget_CONNECT_geometryChanged_CrystalProc_void_(_self_ : QGraphicsWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsWidget_CONNECT_layoutChanged_CrystalProc_void_(_self_ : QGraphicsWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsWidget_setGeometry_SUPER_const_QRectF_R(_self_ : QGraphicsWidget*, rect : QRectF*) : Void
    fun bg_QGraphicsWidget_getContentsMargins_SUPER_qreal_X_qreal_X_qreal_X_qreal_X(_self_ : QGraphicsWidget*, left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
    fun bg_QGraphicsWidget_type_SUPER_(_self_ : QGraphicsWidget*) : Int32
    fun bg_QGraphicsWidget_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsWidget*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsWidget_paintWindowFrame_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsWidget*, painter : QPainter*, option : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsWidget_boundingRect_SUPER_(_self_ : QGraphicsWidget*) : QRectF*
    fun bg_QGraphicsWidget_shape_SUPER_(_self_ : QGraphicsWidget*) : QPainterPath*
    fun bg_QGraphicsWidget_initStyleOption_SUPER_QStyleOption_X(_self_ : QGraphicsWidget*, option : QStyleOption*) : Void
    fun bg_QGraphicsWidget_sizeHint_SUPER_Qt__SizeHint_const_QSizeF_R(_self_ : QGraphicsWidget*, which : SizeHint, constraint : QSizeF*) : QSizeF*
    fun bg_QGraphicsWidget_updateGeometry_SUPER_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(_self_ : QGraphicsWidget*, change : GraphicsItem::Change, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsWidget_propertyChange_SUPER_const_QString_R_const_QVariant_R(_self_ : QGraphicsWidget*, property_name : CrystalString, value : CrystalVariant) : CrystalVariant
    fun bg_QGraphicsWidget_sceneEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Bool
    fun bg_QGraphicsWidget_windowFrameEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, e : QEvent*) : Bool
    fun bg_QGraphicsWidget_windowFrameSectionAt_SUPER_const_QPointF_R(_self_ : QGraphicsWidget*, pos : QPointF) : WindowFrameSection
    fun bg_QGraphicsWidget_event_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Bool
    fun bg_QGraphicsWidget_changeEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QGraphicsWidget*, event : QCloseEvent*) : Void
    fun bg_QGraphicsWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsWidget*, event : QFocusEvent*) : Void
    fun bg_QGraphicsWidget_focusNextPrevChild_SUPER_bool(_self_ : QGraphicsWidget*, next_ : Bool) : Bool
    fun bg_QGraphicsWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsWidget*, event : QFocusEvent*) : Void
    fun bg_QGraphicsWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QGraphicsWidget*, event : QHideEvent*) : Void
    fun bg_QGraphicsWidget_moveEvent_SUPER_QGraphicsSceneMoveEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneMoveEvent*) : Void
    fun bg_QGraphicsWidget_polishEvent_SUPER_(_self_ : QGraphicsWidget*) : Void
    fun bg_QGraphicsWidget_resizeEvent_SUPER_QGraphicsSceneResizeEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneResizeEvent*) : Void
    fun bg_QGraphicsWidget_showEvent_SUPER_QShowEvent_X(_self_ : QGraphicsWidget*, event : QShowEvent*) : Void
    fun bg_QGraphicsWidget_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsWidget_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(_self_ : QGraphicsWidget*, event : QGraphicsSceneHoverEvent*) : Void
    fun bg_QGraphicsWidget_grabMouseEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_ungrabMouseEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_grabKeyboardEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_QGraphicsWidget_ungrabKeyboardEvent_SUPER_QEvent_X(_self_ : QGraphicsWidget*, event : QEvent*) : Void
    fun bg_BgInherit_QGraphicsWidget_JUMPTABLE_BgJumptable_QGraphicsWidget_R(_self_ : QGraphicsWidget*, table : BgJumptable_QGraphicsWidget*) : Void
    fun bg_QGraphicsScene_metaObject_(_self_ : QGraphicsScene*) : QMetaObject*
    fun bg_QGraphicsScene_qt_metacast_const_char_X(_self_ : QGraphicsScene*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGraphicsScene*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsScene_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGraphicsScene__CONSTRUCT_QObject_X(parent : QObject*) : QGraphicsScene*
    fun bg_QGraphicsScene__CONSTRUCT_const_QRectF_R_QObject_X(scene_rect : QRectF*, parent : QObject*) : QGraphicsScene*
    fun bg_QGraphicsScene__CONSTRUCT_qreal_qreal_qreal_qreal_QObject_X(x : Float64, y : Float64, width : Float64, height : Float64, parent : QObject*) : QGraphicsScene*
    fun bg_QGraphicsScene_sceneRect_(_self_ : QGraphicsScene*) : QRectF*
    fun bg_QGraphicsScene_width_(_self_ : QGraphicsScene*) : Float64
    fun bg_QGraphicsScene_height_(_self_ : QGraphicsScene*) : Float64
    fun bg_QGraphicsScene_setSceneRect_const_QRectF_R(_self_ : QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_setSceneRect_qreal_qreal_qreal_qreal(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsScene_render_QPainter_X(_self_ : QGraphicsScene*, painter : QPainter*) : Void
    fun bg_QGraphicsScene_render_QPainter_X_const_QRectF_R(_self_ : QGraphicsScene*, painter : QPainter*, target : QRectF*) : Void
    fun bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R(_self_ : QGraphicsScene*, painter : QPainter*, target : QRectF*, source : QRectF*) : Void
    fun bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R_Qt__AspectRatioMode(_self_ : QGraphicsScene*, painter : QPainter*, target : QRectF*, source : QRectF*, aspect_ratio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsScene_itemIndexMethod_(_self_ : QGraphicsScene*) : GraphicsScene::ItemIndexMethod
    fun bg_QGraphicsScene_setItemIndexMethod_QGraphicsScene__ItemIndexMethod(_self_ : QGraphicsScene*, method : GraphicsScene::ItemIndexMethod) : Void
    fun bg_QGraphicsScene_bspTreeDepth_(_self_ : QGraphicsScene*) : Int32
    fun bg_QGraphicsScene_setBspTreeDepth_int(_self_ : QGraphicsScene*, depth : Int32) : Void
    fun bg_QGraphicsScene_itemsBoundingRect_(_self_ : QGraphicsScene*) : QRectF*
    fun bg_QGraphicsScene_items_Qt__SortOrder(_self_ : QGraphicsScene*, order : SortOrder) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : QGraphicsScene*, pos : QPointF, mode : ItemSelectionMode, order : SortOrder) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : QGraphicsScene*, pos : QPointF, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : QGraphicsScene*, rect : QRectF*, mode : ItemSelectionMode, order : SortOrder) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : QGraphicsScene*, rect : QRectF*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : QGraphicsScene*, polygon : QPolygonF*, mode : ItemSelectionMode, order : SortOrder) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : QGraphicsScene*, polygon : QPolygonF*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode, order : SortOrder) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_collidingItems_const_QGraphicsItem_X_Qt__ItemSelectionMode(_self_ : QGraphicsScene*, item : QGraphicsItem*, mode : ItemSelectionMode) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_itemAt_const_QPointF_R_const_QTransform_R(_self_ : QGraphicsScene*, pos : QPointF, device_transform : QTransform*) : QGraphicsItem*
    fun bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder, device_transform : QTransform*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_itemAt_qreal_qreal_const_QTransform_R(_self_ : QGraphicsScene*, x : Float64, y : Float64, device_transform : QTransform*) : QGraphicsItem*
    fun bg_QGraphicsScene_selectedItems_(_self_ : QGraphicsScene*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsScene_selectionArea_(_self_ : QGraphicsScene*) : QPainterPath*
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_const_QTransform_R(_self_ : QGraphicsScene*, path : QPainterPath*, device_transform : QTransform*) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode_const_QTransform_R(_self_ : QGraphicsScene*, path : QPainterPath*, mode : ItemSelectionMode, device_transform : QTransform*) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode(_self_ : QGraphicsScene*, path : QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode) : Void
    fun bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode_const_QTransform_R(_self_ : QGraphicsScene*, path : QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode, device_transform : QTransform*) : Void
    fun bg_QGraphicsScene_createItemGroup_const_QList_QGraphicsItem_X__R(_self_ : QGraphicsScene*, items : ContainerQListQGraphicsItemX*) : QGraphicsItemGroup*
    fun bg_QGraphicsScene_destroyItemGroup_QGraphicsItemGroup_X(_self_ : QGraphicsScene*, group : QGraphicsItemGroup*) : Void
    fun bg_QGraphicsScene_addItem_QGraphicsItem_X(_self_ : QGraphicsScene*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsScene_addEllipse_const_QRectF_R(_self_ : QGraphicsScene*, rect : QRectF*) : QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R(_self_ : QGraphicsScene*, rect : QRectF*, pen : QPen*) : QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R_const_QBrush_R(_self_ : QGraphicsScene*, rect : QRectF*, pen : QPen*, brush : QBrush*) : QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addLine_const_QLineF_R(_self_ : QGraphicsScene*, line : QLineF*) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addLine_const_QLineF_R_const_QPen_R(_self_ : QGraphicsScene*, line : QLineF*, pen : QPen*) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addPath_const_QPainterPath_R(_self_ : QGraphicsScene*, path : QPainterPath*) : QGraphicsPathItem*
    fun bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R(_self_ : QGraphicsScene*, path : QPainterPath*, pen : QPen*) : QGraphicsPathItem*
    fun bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R_const_QBrush_R(_self_ : QGraphicsScene*, path : QPainterPath*, pen : QPen*, brush : QBrush*) : QGraphicsPathItem*
    fun bg_QGraphicsScene_addPixmap_const_QPixmap_R(_self_ : QGraphicsScene*, pixmap : QPixmap*) : QGraphicsPixmapItem*
    fun bg_QGraphicsScene_addPolygon_const_QPolygonF_R(_self_ : QGraphicsScene*, polygon : QPolygonF*) : QGraphicsPolygonItem*
    fun bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R(_self_ : QGraphicsScene*, polygon : QPolygonF*, pen : QPen*) : QGraphicsPolygonItem*
    fun bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R_const_QBrush_R(_self_ : QGraphicsScene*, polygon : QPolygonF*, pen : QPen*, brush : QBrush*) : QGraphicsPolygonItem*
    fun bg_QGraphicsScene_addRect_const_QRectF_R(_self_ : QGraphicsScene*, rect : QRectF*) : QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R(_self_ : QGraphicsScene*, rect : QRectF*, pen : QPen*) : QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R_const_QBrush_R(_self_ : QGraphicsScene*, rect : QRectF*, pen : QPen*, brush : QBrush*) : QGraphicsRectItem*
    fun bg_QGraphicsScene_addText_const_QString_R(_self_ : QGraphicsScene*, text : CrystalString) : QGraphicsTextItem*
    fun bg_QGraphicsScene_addText_const_QString_R_const_QFont_R(_self_ : QGraphicsScene*, text : CrystalString, font : QFont*) : QGraphicsTextItem*
    fun bg_QGraphicsScene_addSimpleText_const_QString_R(_self_ : QGraphicsScene*, text : CrystalString) : QGraphicsSimpleTextItem*
    fun bg_QGraphicsScene_addSimpleText_const_QString_R_const_QFont_R(_self_ : QGraphicsScene*, text : CrystalString, font : QFont*) : QGraphicsSimpleTextItem*
    fun bg_QGraphicsScene_addWidget_QWidget_X(_self_ : QGraphicsScene*, widget : QWidget*) : QGraphicsProxyWidget*
    fun bg_QGraphicsScene_addWidget_QWidget_X_Qt__WindowFlags(_self_ : QGraphicsScene*, widget : QWidget*, w_flags : WindowFlags) : QGraphicsProxyWidget*
    fun bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*) : QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*, brush : QBrush*) : QGraphicsEllipseItem*
    fun bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal(_self_ : QGraphicsScene*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal_const_QPen_R(_self_ : QGraphicsScene*, x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64, pen : QPen*) : QGraphicsLineItem*
    fun bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*) : QGraphicsRectItem*
    fun bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, pen : QPen*, brush : QBrush*) : QGraphicsRectItem*
    fun bg_QGraphicsScene_removeItem_QGraphicsItem_X(_self_ : QGraphicsScene*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsScene_focusItem_(_self_ : QGraphicsScene*) : QGraphicsItem*
    fun bg_QGraphicsScene_setFocusItem_QGraphicsItem_X_Qt__FocusReason(_self_ : QGraphicsScene*, item : QGraphicsItem*, focus_reason : FocusReason) : Void
    fun bg_QGraphicsScene_hasFocus_(_self_ : QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_setFocus_Qt__FocusReason(_self_ : QGraphicsScene*, focus_reason : FocusReason) : Void
    fun bg_QGraphicsScene_clearFocus_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_setStickyFocus_bool(_self_ : QGraphicsScene*, enabled : Bool) : Void
    fun bg_QGraphicsScene_stickyFocus_(_self_ : QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_mouseGrabberItem_(_self_ : QGraphicsScene*) : QGraphicsItem*
    fun bg_QGraphicsScene_backgroundBrush_(_self_ : QGraphicsScene*) : QBrush*
    fun bg_QGraphicsScene_setBackgroundBrush_const_QBrush_R(_self_ : QGraphicsScene*, brush : QBrush*) : Void
    fun bg_QGraphicsScene_foregroundBrush_(_self_ : QGraphicsScene*) : QBrush*
    fun bg_QGraphicsScene_setForegroundBrush_const_QBrush_R(_self_ : QGraphicsScene*, brush : QBrush*) : Void
    fun bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGraphicsScene*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsScene_views_(_self_ : QGraphicsScene*) : ContainerQListQGraphicsViewX*
    fun bg_QGraphicsScene_update_qreal_qreal_qreal_qreal(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal_QGraphicsScene__SceneLayers(_self_ : QGraphicsScene*, x : Float64, y : Float64, w : Float64, h : Float64, layers : GraphicsScene::SceneLayers) : Void
    fun bg_QGraphicsScene_style_(_self_ : QGraphicsScene*) : QStyle*
    fun bg_QGraphicsScene_setStyle_QStyle_X(_self_ : QGraphicsScene*, style : QStyle*) : Void
    fun bg_QGraphicsScene_font_(_self_ : QGraphicsScene*) : QFont*
    fun bg_QGraphicsScene_setFont_const_QFont_R(_self_ : QGraphicsScene*, font : QFont*) : Void
    fun bg_QGraphicsScene_palette_(_self_ : QGraphicsScene*) : QPalette*
    fun bg_QGraphicsScene_setPalette_const_QPalette_R(_self_ : QGraphicsScene*, palette : QPalette*) : Void
    fun bg_QGraphicsScene_isActive_(_self_ : QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_activePanel_(_self_ : QGraphicsScene*) : QGraphicsItem*
    fun bg_QGraphicsScene_setActivePanel_QGraphicsItem_X(_self_ : QGraphicsScene*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsScene_activeWindow_(_self_ : QGraphicsScene*) : QGraphicsWidget*
    fun bg_QGraphicsScene_setActiveWindow_QGraphicsWidget_X(_self_ : QGraphicsScene*, widget : QGraphicsWidget*) : Void
    fun bg_QGraphicsScene_sendEvent_QGraphicsItem_X_QEvent_X(_self_ : QGraphicsScene*, item : QGraphicsItem*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_minimumRenderSize_(_self_ : QGraphicsScene*) : Float64
    fun bg_QGraphicsScene_setMinimumRenderSize_qreal(_self_ : QGraphicsScene*, min_size : Float64) : Void
    fun bg_QGraphicsScene_focusOnTouch_(_self_ : QGraphicsScene*) : Bool
    fun bg_QGraphicsScene_setFocusOnTouch_bool(_self_ : QGraphicsScene*, enabled : Bool) : Void
    fun bg_QGraphicsScene_update_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_update_const_QRectF_R(_self_ : QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_invalidate_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_invalidate_const_QRectF_R(_self_ : QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_invalidate_const_QRectF_R_QGraphicsScene__SceneLayers(_self_ : QGraphicsScene*, rect : QRectF*, layers : GraphicsScene::SceneLayers) : Void
    fun bg_QGraphicsScene_advance_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_clearSelection_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_clear_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_event_QEvent_X(_self_ : QGraphicsScene*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(_self_ : QGraphicsScene*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_focusInEvent_QFocusEvent_X(_self_ : QGraphicsScene*, event : QFocusEvent*) : Void
    fun bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsScene*, event : QFocusEvent*) : Void
    fun bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneHelpEvent*) : Void
    fun bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(_self_ : QGraphicsScene*, event : QKeyEvent*) : Void
    fun bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(_self_ : QGraphicsScene*, event : QKeyEvent*) : Void
    fun bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(_self_ : QGraphicsScene*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(_self_ : QGraphicsScene*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(_self_ : QGraphicsScene*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsScene*, painter : QPainter*, num_items : Int32, items : QGraphicsItem**, options : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QGraphicsScene_focusNextPrevChild_bool(_self_ : QGraphicsScene*, next_ : Bool) : Bool
    fun bg_QGraphicsScene_changed_const_QList_QRectF__R(_self_ : QGraphicsScene*, region : ContainerQListQRectF*) : Void
    fun bg_QGraphicsScene_sceneRectChanged_const_QRectF_R(_self_ : QGraphicsScene*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_selectionChanged_(_self_ : QGraphicsScene*) : Void
    fun bg_QGraphicsScene_focusItemChanged_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(_self_ : QGraphicsScene*, new_focus : QGraphicsItem*, old_focus : QGraphicsItem*, reason : FocusReason) : Void
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QGraphicsScene*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QGraphicsScene*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QGraphicsScene*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QGraphicsScene*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QGraphicsScene*, signal : QMetaMethod*) : Void
    fun bg_QGraphicsScene_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGraphicsScene_CONNECT_changed_CrystalProc_void__const_QList_QRectF__R_(_self_ : QGraphicsScene*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsScene_CONNECT_sceneRectChanged_CrystalProc_void__const_QRectF_R_(_self_ : QGraphicsScene*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsScene_CONNECT_selectionChanged_CrystalProc_void_(_self_ : QGraphicsScene*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsScene_CONNECT_focusItemChanged_CrystalProc_void__QGraphicsItem_X__QGraphicsItem_X__Qt__FocusReason_(_self_ : QGraphicsScene*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsScene_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGraphicsScene*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsScene_event_SUPER_QEvent_X(_self_ : QGraphicsScene*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QGraphicsScene*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QGraphicsScene_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneContextMenuEvent*) : Void
    fun bg_QGraphicsScene_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneDragDropEvent*) : Void
    fun bg_QGraphicsScene_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsScene*, event : QFocusEvent*) : Void
    fun bg_QGraphicsScene_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsScene*, event : QFocusEvent*) : Void
    fun bg_QGraphicsScene_helpEvent_SUPER_QGraphicsSceneHelpEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneHelpEvent*) : Void
    fun bg_QGraphicsScene_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsScene*, event : QKeyEvent*) : Void
    fun bg_QGraphicsScene_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsScene*, event : QKeyEvent*) : Void
    fun bg_QGraphicsScene_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneMouseEvent*) : Void
    fun bg_QGraphicsScene_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(_self_ : QGraphicsScene*, event : QGraphicsSceneWheelEvent*) : Void
    fun bg_QGraphicsScene_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGraphicsScene*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsScene_drawBackground_SUPER_QPainter_X_const_QRectF_R(_self_ : QGraphicsScene*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_drawForeground_SUPER_QPainter_X_const_QRectF_R(_self_ : QGraphicsScene*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsScene_drawItems_SUPER_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(_self_ : QGraphicsScene*, painter : QPainter*, num_items : Int32, items : QGraphicsItem**, options : QStyleOptionGraphicsItem*, widget : QWidget*) : Void
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QGraphicsScene*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QGraphicsScene*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QGraphicsScene*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QGraphicsScene*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QGraphicsScene*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QGraphicsScene_JUMPTABLE_BgJumptable_QGraphicsScene_R(_self_ : QGraphicsScene*, table : BgJumptable_QGraphicsScene*) : Void
    fun bg_QGraphicsSceneEvent__CONSTRUCT_QEvent__Type(type : Event::Type) : QGraphicsSceneEvent*
    fun bg_QGraphicsSceneEvent_widget_(_self_ : QGraphicsSceneEvent*) : QWidget*
    fun bg_QGraphicsSceneEvent_setWidget_QWidget_X(_self_ : QGraphicsSceneEvent*, widget : QWidget*) : Void
    fun bg_QGraphicsSceneEvent__CONSTRUCT_QGraphicsSceneEventPrivate_R_QEvent__Type(dd : QGraphicsSceneEventPrivate*, type : Event::Type) : QGraphicsSceneEvent*
    fun bg_QGraphicsSceneEvent_d_func_(_self_ : QGraphicsSceneEvent*) : QGraphicsSceneEventPrivate*
    fun bg_QGraphicsTransform_metaObject_(_self_ : QGraphicsTransform*) : QMetaObject*
    fun bg_QGraphicsTransform_qt_metacast_const_char_X(_self_ : QGraphicsTransform*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGraphicsTransform*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsTransform_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGraphicsTransform__CONSTRUCT_QObject_X(parent : QObject*) : QGraphicsTransform*
    fun bg_QGraphicsTransform_applyTo_QMatrix4x4_X(_self_ : QGraphicsTransform*, matrix : QMatrix4x4*) : Void
    fun bg_QGraphicsTransform_update_(_self_ : QGraphicsTransform*) : Void
    fun bg_QGraphicsTransform__CONSTRUCT_QGraphicsTransformPrivate_R_QObject_X(p : QGraphicsTransformPrivate*, parent : QObject*) : QGraphicsTransform*
    fun bg_QObject_event_QEvent_X(_self_ : QGraphicsTransform*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QGraphicsTransform*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QGraphicsTransform*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QGraphicsTransform*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QGraphicsTransform*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QGraphicsTransform*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QGraphicsTransform*, signal : QMetaMethod*) : Void
    fun bg_QGraphicsTransform_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QObject_event_SUPER_QEvent_X(_self_ : QGraphicsTransform*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QGraphicsTransform*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QGraphicsTransform*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QGraphicsTransform*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QGraphicsTransform*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QGraphicsTransform*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QGraphicsTransform*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QGraphicsTransform_JUMPTABLE_BgJumptable_QGraphicsTransform_R(_self_ : QGraphicsTransform*, table : BgJumptable_QGraphicsTransform*) : Void
    fun bg_QScrollArea_metaObject_(_self_ : QScrollArea*) : QMetaObject*
    fun bg_QScrollArea_qt_metacast_const_char_X(_self_ : QScrollArea*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QScrollArea*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QScrollArea_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QScrollArea_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QScrollArea__CONSTRUCT_QWidget_X(parent : QWidget*) : QScrollArea*
    fun bg_QScrollArea_widget_(_self_ : QScrollArea*) : QWidget*
    fun bg_QScrollArea_setWidget_QWidget_X(_self_ : QScrollArea*, widget : QWidget*) : Void
    fun bg_QScrollArea_takeWidget_(_self_ : QScrollArea*) : QWidget*
    fun bg_QScrollArea_widgetResizable_(_self_ : QScrollArea*) : Bool
    fun bg_QScrollArea_setWidgetResizable_bool(_self_ : QScrollArea*, resizable : Bool) : Void
    fun bg_QScrollArea_sizeHint_(_self_ : QScrollArea*) : QSize*
    fun bg_QScrollArea_focusNextPrevChild_bool(_self_ : QScrollArea*, next_ : Bool) : Bool
    fun bg_QScrollArea_alignment_(_self_ : QScrollArea*) : Alignment
    fun bg_QScrollArea_setAlignment_Qt__Alignment(_self_ : QScrollArea*, unnamed_arg_0 : Alignment) : Void
    fun bg_QScrollArea_ensureVisible_int_int_int_int(_self_ : QScrollArea*, x : Int32, y : Int32, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(_self_ : QScrollArea*, child_widget : QWidget*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QScrollArea__CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(dd : QScrollAreaPrivate*, parent : QWidget*) : QScrollArea*
    fun bg_QScrollArea_event_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QScrollArea_resizeEvent_QResizeEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QScrollArea_scrollContentsBy_int_int(_self_ : QScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QScrollArea_viewportSizeHint_(_self_ : QScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : QScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_QWidget_X(_self_ : QScrollArea*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_viewportEvent_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDragMoveEvent*) : Void
    fun bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDragLeaveEvent*) : Void
    fun bg_QAbstractScrollArea_dropEvent_QDropEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QScrollArea_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QScrollArea_sizeHint_SUPER_(_self_ : QScrollArea*) : QSize*
    fun bg_QScrollArea_focusNextPrevChild_SUPER_bool(_self_ : QScrollArea*, next_ : Bool) : Bool
    fun bg_QScrollArea_event_SUPER_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QScrollArea_resizeEvent_SUPER_QResizeEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QScrollArea_scrollContentsBy_SUPER_int_int(_self_ : QScrollArea*, dx : Int32, dy : Int32) : Void
    fun bg_QScrollArea_viewportSizeHint_SUPER_(_self_ : QScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_minimumSizeHint_SUPER_(_self_ : QScrollArea*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(_self_ : QScrollArea*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_viewportEvent_SUPER_QEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_paintEvent_SUPER_QPaintEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QAbstractScrollArea_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractScrollArea_wheelEvent_SUPER_QWheelEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QAbstractScrollArea_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractScrollArea_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QAbstractScrollArea_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDragMoveEvent*) : Void
    fun bg_QAbstractScrollArea_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDragLeaveEvent*) : Void
    fun bg_QAbstractScrollArea_dropEvent_SUPER_QDropEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QAbstractScrollArea_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QScrollArea*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_BgInherit_QScrollArea_JUMPTABLE_BgJumptable_QScrollArea_R(_self_ : QScrollArea*, table : BgJumptable_QScrollArea*) : Void
    fun bg_QGraphicsView_metaObject_(_self_ : QGraphicsView*) : QMetaObject*
    fun bg_QGraphicsView_qt_metacast_const_char_X(_self_ : QGraphicsView*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGraphicsView*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGraphicsView_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGraphicsView__CONSTRUCT_QWidget_X(parent : QWidget*) : QGraphicsView*
    fun bg_QGraphicsView__CONSTRUCT_QGraphicsScene_X_QWidget_X(scene : QGraphicsScene*, parent : QWidget*) : QGraphicsView*
    fun bg_QGraphicsView_sizeHint_(_self_ : QGraphicsView*) : QSize*
    fun bg_QGraphicsView_renderHints_(_self_ : QGraphicsView*) : Painter::RenderHints
    fun bg_QGraphicsView_setRenderHint_QPainter__RenderHint_bool(_self_ : QGraphicsView*, hint : Painter::RenderHint, enabled : Bool) : Void
    fun bg_QGraphicsView_setRenderHints_QPainter__RenderHints(_self_ : QGraphicsView*, hints : Painter::RenderHints) : Void
    fun bg_QGraphicsView_alignment_(_self_ : QGraphicsView*) : Alignment
    fun bg_QGraphicsView_setAlignment_Qt__Alignment(_self_ : QGraphicsView*, alignment : Alignment) : Void
    fun bg_QGraphicsView_transformationAnchor_(_self_ : QGraphicsView*) : GraphicsView::ViewportAnchor
    fun bg_QGraphicsView_setTransformationAnchor_QGraphicsView__ViewportAnchor(_self_ : QGraphicsView*, anchor : GraphicsView::ViewportAnchor) : Void
    fun bg_QGraphicsView_resizeAnchor_(_self_ : QGraphicsView*) : GraphicsView::ViewportAnchor
    fun bg_QGraphicsView_setResizeAnchor_QGraphicsView__ViewportAnchor(_self_ : QGraphicsView*, anchor : GraphicsView::ViewportAnchor) : Void
    fun bg_QGraphicsView_viewportUpdateMode_(_self_ : QGraphicsView*) : GraphicsView::ViewportUpdateMode
    fun bg_QGraphicsView_setViewportUpdateMode_QGraphicsView__ViewportUpdateMode(_self_ : QGraphicsView*, mode : GraphicsView::ViewportUpdateMode) : Void
    fun bg_QGraphicsView_optimizationFlags_(_self_ : QGraphicsView*) : GraphicsView::OptimizationFlags
    fun bg_QGraphicsView_setOptimizationFlag_QGraphicsView__OptimizationFlag_bool(_self_ : QGraphicsView*, flag : GraphicsView::OptimizationFlag, enabled : Bool) : Void
    fun bg_QGraphicsView_setOptimizationFlags_QGraphicsView__OptimizationFlags(_self_ : QGraphicsView*, flags : GraphicsView::OptimizationFlags) : Void
    fun bg_QGraphicsView_dragMode_(_self_ : QGraphicsView*) : GraphicsView::DragMode
    fun bg_QGraphicsView_setDragMode_QGraphicsView__DragMode(_self_ : QGraphicsView*, mode : GraphicsView::DragMode) : Void
    fun bg_QGraphicsView_rubberBandSelectionMode_(_self_ : QGraphicsView*) : ItemSelectionMode
    fun bg_QGraphicsView_setRubberBandSelectionMode_Qt__ItemSelectionMode(_self_ : QGraphicsView*, mode : ItemSelectionMode) : Void
    fun bg_QGraphicsView_rubberBandRect_(_self_ : QGraphicsView*) : QRect*
    fun bg_QGraphicsView_cacheMode_(_self_ : QGraphicsView*) : GraphicsView::CacheMode
    fun bg_QGraphicsView_setCacheMode_QGraphicsView__CacheMode(_self_ : QGraphicsView*, mode : GraphicsView::CacheMode) : Void
    fun bg_QGraphicsView_resetCachedContent_(_self_ : QGraphicsView*) : Void
    fun bg_QGraphicsView_isInteractive_(_self_ : QGraphicsView*) : Bool
    fun bg_QGraphicsView_setInteractive_bool(_self_ : QGraphicsView*, allowed : Bool) : Void
    fun bg_QGraphicsView_scene_(_self_ : QGraphicsView*) : QGraphicsScene*
    fun bg_QGraphicsView_setScene_QGraphicsScene_X(_self_ : QGraphicsView*, scene : QGraphicsScene*) : Void
    fun bg_QGraphicsView_sceneRect_(_self_ : QGraphicsView*) : QRectF*
    fun bg_QGraphicsView_setSceneRect_const_QRectF_R(_self_ : QGraphicsView*, rect : QRectF*) : Void
    fun bg_QGraphicsView_setSceneRect_qreal_qreal_qreal_qreal(_self_ : QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64) : Void
    fun bg_QGraphicsView_transform_(_self_ : QGraphicsView*) : QTransform*
    fun bg_QGraphicsView_viewportTransform_(_self_ : QGraphicsView*) : QTransform*
    fun bg_QGraphicsView_isTransformed_(_self_ : QGraphicsView*) : Bool
    fun bg_QGraphicsView_setTransform_const_QTransform_R_bool(_self_ : QGraphicsView*, matrix : QTransform*, combine : Bool) : Void
    fun bg_QGraphicsView_resetTransform_(_self_ : QGraphicsView*) : Void
    fun bg_QGraphicsView_rotate_qreal(_self_ : QGraphicsView*, angle : Float64) : Void
    fun bg_QGraphicsView_scale_qreal_qreal(_self_ : QGraphicsView*, sx : Float64, sy : Float64) : Void
    fun bg_QGraphicsView_shear_qreal_qreal(_self_ : QGraphicsView*, sh : Float64, sv : Float64) : Void
    fun bg_QGraphicsView_translate_qreal_qreal(_self_ : QGraphicsView*, dx : Float64, dy : Float64) : Void
    fun bg_QGraphicsView_centerOn_const_QPointF_R(_self_ : QGraphicsView*, pos : QPointF) : Void
    fun bg_QGraphicsView_centerOn_qreal_qreal(_self_ : QGraphicsView*, x : Float64, y : Float64) : Void
    fun bg_QGraphicsView_centerOn_const_QGraphicsItem_X(_self_ : QGraphicsView*, item : QGraphicsItem*) : Void
    fun bg_QGraphicsView_ensureVisible_const_QRectF_R_int_int(_self_ : QGraphicsView*, rect : QRectF*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsView_ensureVisible_qreal_qreal_qreal_qreal_int_int(_self_ : QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsView_ensureVisible_const_QGraphicsItem_X_int_int(_self_ : QGraphicsView*, item : QGraphicsItem*, xmargin : Int32, ymargin : Int32) : Void
    fun bg_QGraphicsView_fitInView_const_QRectF_R_Qt__AspectRatioMode(_self_ : QGraphicsView*, rect : QRectF*, aspect_radio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_fitInView_qreal_qreal_qreal_qreal_Qt__AspectRatioMode(_self_ : QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64, aspect_radio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_fitInView_const_QGraphicsItem_X_Qt__AspectRatioMode(_self_ : QGraphicsView*, item : QGraphicsItem*, aspect_radio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_render_QPainter_X(_self_ : QGraphicsView*, painter : QPainter*) : Void
    fun bg_QGraphicsView_render_QPainter_X_const_QRectF_R(_self_ : QGraphicsView*, painter : QPainter*, target : QRectF*) : Void
    fun bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R(_self_ : QGraphicsView*, painter : QPainter*, target : QRectF*, source : QRect*) : Void
    fun bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R_Qt__AspectRatioMode(_self_ : QGraphicsView*, painter : QPainter*, target : QRectF*, source : QRect*, aspect_ratio_mode : AspectRatioMode) : Void
    fun bg_QGraphicsView_items_(_self_ : QGraphicsView*) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_items_const_QPoint_R(_self_ : QGraphicsView*, pos : QPoint) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_items_int_int(_self_ : QGraphicsView*, x : Int32, y : Int32) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_items_const_QRect_R_Qt__ItemSelectionMode(_self_ : QGraphicsView*, rect : QRect*, mode : ItemSelectionMode) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_items_int_int_int_int_Qt__ItemSelectionMode(_self_ : QGraphicsView*, x : Int32, y : Int32, w : Int32, h : Int32, mode : ItemSelectionMode) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_items_const_QPolygon_R_Qt__ItemSelectionMode(_self_ : QGraphicsView*, polygon : QPolygon*, mode : ItemSelectionMode) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_items_const_QPainterPath_R_Qt__ItemSelectionMode(_self_ : QGraphicsView*, path : QPainterPath*, mode : ItemSelectionMode) : ContainerQListQGraphicsItemX*
    fun bg_QGraphicsView_itemAt_const_QPoint_R(_self_ : QGraphicsView*, pos : QPoint) : QGraphicsItem*
    fun bg_QGraphicsView_itemAt_int_int(_self_ : QGraphicsView*, x : Int32, y : Int32) : QGraphicsItem*
    fun bg_QGraphicsView_mapToScene_const_QPoint_R(_self_ : QGraphicsView*, point : QPoint) : QPointF
    fun bg_QGraphicsView_mapToScene_const_QRect_R(_self_ : QGraphicsView*, rect : QRect*) : QPolygonF*
    fun bg_QGraphicsView_mapToScene_const_QPolygon_R(_self_ : QGraphicsView*, polygon : QPolygon*) : QPolygonF*
    fun bg_QGraphicsView_mapToScene_const_QPainterPath_R(_self_ : QGraphicsView*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsView_mapFromScene_const_QPointF_R(_self_ : QGraphicsView*, point : QPointF) : QPoint
    fun bg_QGraphicsView_mapFromScene_const_QRectF_R(_self_ : QGraphicsView*, rect : QRectF*) : QPolygon*
    fun bg_QGraphicsView_mapFromScene_const_QPolygonF_R(_self_ : QGraphicsView*, polygon : QPolygonF*) : QPolygon*
    fun bg_QGraphicsView_mapFromScene_const_QPainterPath_R(_self_ : QGraphicsView*, path : QPainterPath*) : QPainterPath*
    fun bg_QGraphicsView_mapToScene_int_int(_self_ : QGraphicsView*, x : Int32, y : Int32) : QPointF
    fun bg_QGraphicsView_mapToScene_int_int_int_int(_self_ : QGraphicsView*, x : Int32, y : Int32, w : Int32, h : Int32) : QPolygonF*
    fun bg_QGraphicsView_mapFromScene_qreal_qreal(_self_ : QGraphicsView*, x : Float64, y : Float64) : QPoint
    fun bg_QGraphicsView_mapFromScene_qreal_qreal_qreal_qreal(_self_ : QGraphicsView*, x : Float64, y : Float64, w : Float64, h : Float64) : QPolygon*
    fun bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGraphicsView*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsView_backgroundBrush_(_self_ : QGraphicsView*) : QBrush*
    fun bg_QGraphicsView_setBackgroundBrush_const_QBrush_R(_self_ : QGraphicsView*, brush : QBrush*) : Void
    fun bg_QGraphicsView_foregroundBrush_(_self_ : QGraphicsView*) : QBrush*
    fun bg_QGraphicsView_setForegroundBrush_const_QBrush_R(_self_ : QGraphicsView*, brush : QBrush*) : Void
    fun bg_QGraphicsView_updateScene_const_QList_QRectF__R(_self_ : QGraphicsView*, rects : ContainerQListQRectF*) : Void
    fun bg_QGraphicsView_invalidateScene_(_self_ : QGraphicsView*) : Void
    fun bg_QGraphicsView_invalidateScene_const_QRectF_R(_self_ : QGraphicsView*, rect : QRectF*) : Void
    fun bg_QGraphicsView_invalidateScene_const_QRectF_R_QGraphicsScene__SceneLayers(_self_ : QGraphicsView*, rect : QRectF*, layers : GraphicsScene::SceneLayers) : Void
    fun bg_QGraphicsView_updateSceneRect_const_QRectF_R(_self_ : QGraphicsView*, rect : QRectF*) : Void
    fun bg_QGraphicsView_rubberBandChanged_QRect_QPointF_QPointF(_self_ : QGraphicsView*, viewport_rect : QRect*, from_scene_point : QPointF, to_scene_point : QPointF) : Void
    fun bg_QGraphicsView_setupViewport_QWidget_X(_self_ : QGraphicsView*, widget : QWidget*) : Void
    fun bg_QGraphicsView__CONSTRUCT_QGraphicsViewPrivate_R_QWidget_X(unnamed_arg_0 : QGraphicsViewPrivate*, parent : QWidget*) : QGraphicsView*
    fun bg_QGraphicsView_event_QEvent_X(_self_ : QGraphicsView*, event : QEvent*) : Bool
    fun bg_QGraphicsView_viewportEvent_QEvent_X(_self_ : QGraphicsView*, event : QEvent*) : Bool
    fun bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(_self_ : QGraphicsView*, event : QContextMenuEvent*) : Void
    fun bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(_self_ : QGraphicsView*, event : QDragEnterEvent*) : Void
    fun bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QGraphicsView*, event : QDragLeaveEvent*) : Void
    fun bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(_self_ : QGraphicsView*, event : QDragMoveEvent*) : Void
    fun bg_QGraphicsView_dropEvent_QDropEvent_X(_self_ : QGraphicsView*, event : QDropEvent*) : Void
    fun bg_QGraphicsView_focusInEvent_QFocusEvent_X(_self_ : QGraphicsView*, event : QFocusEvent*) : Void
    fun bg_QGraphicsView_focusNextPrevChild_bool(_self_ : QGraphicsView*, next_ : Bool) : Bool
    fun bg_QGraphicsView_focusOutEvent_QFocusEvent_X(_self_ : QGraphicsView*, event : QFocusEvent*) : Void
    fun bg_QGraphicsView_keyPressEvent_QKeyEvent_X(_self_ : QGraphicsView*, event : QKeyEvent*) : Void
    fun bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(_self_ : QGraphicsView*, event : QKeyEvent*) : Void
    fun bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mousePressEvent_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_wheelEvent_QWheelEvent_X(_self_ : QGraphicsView*, event : QWheelEvent*) : Void
    fun bg_QGraphicsView_paintEvent_QPaintEvent_X(_self_ : QGraphicsView*, event : QPaintEvent*) : Void
    fun bg_QGraphicsView_resizeEvent_QResizeEvent_X(_self_ : QGraphicsView*, event : QResizeEvent*) : Void
    fun bg_QGraphicsView_scrollContentsBy_int_int(_self_ : QGraphicsView*, dx : Int32, dy : Int32) : Void
    fun bg_QGraphicsView_showEvent_QShowEvent_X(_self_ : QGraphicsView*, event : QShowEvent*) : Void
    fun bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(_self_ : QGraphicsView*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(_self_ : QGraphicsView*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(_self_ : QGraphicsView*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(_self_ : QGraphicsView*, painter : QPainter*, num_items : Int32, items : QGraphicsItem**, options : QStyleOptionGraphicsItem*) : Void
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : QGraphicsView*) : QSize*
    fun bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : QGraphicsView*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportSizeHint_(_self_ : QGraphicsView*) : QSize*
    fun bg_QGraphicsView_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGraphicsView_CONNECT_rubberBandChanged_CrystalProc_void__QRect__QPointF__QPointF_(_self_ : QGraphicsView*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGraphicsView_sizeHint_SUPER_(_self_ : QGraphicsView*) : QSize*
    fun bg_QGraphicsView_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGraphicsView*, query : InputMethodQuery) : CrystalVariant
    fun bg_QGraphicsView_setupViewport_SUPER_QWidget_X(_self_ : QGraphicsView*, widget : QWidget*) : Void
    fun bg_QGraphicsView_event_SUPER_QEvent_X(_self_ : QGraphicsView*, event : QEvent*) : Bool
    fun bg_QGraphicsView_viewportEvent_SUPER_QEvent_X(_self_ : QGraphicsView*, event : QEvent*) : Bool
    fun bg_QGraphicsView_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QGraphicsView*, event : QContextMenuEvent*) : Void
    fun bg_QGraphicsView_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QGraphicsView*, event : QDragEnterEvent*) : Void
    fun bg_QGraphicsView_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QGraphicsView*, event : QDragLeaveEvent*) : Void
    fun bg_QGraphicsView_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QGraphicsView*, event : QDragMoveEvent*) : Void
    fun bg_QGraphicsView_dropEvent_SUPER_QDropEvent_X(_self_ : QGraphicsView*, event : QDropEvent*) : Void
    fun bg_QGraphicsView_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsView*, event : QFocusEvent*) : Void
    fun bg_QGraphicsView_focusNextPrevChild_SUPER_bool(_self_ : QGraphicsView*, next_ : Bool) : Bool
    fun bg_QGraphicsView_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGraphicsView*, event : QFocusEvent*) : Void
    fun bg_QGraphicsView_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsView*, event : QKeyEvent*) : Void
    fun bg_QGraphicsView_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGraphicsView*, event : QKeyEvent*) : Void
    fun bg_QGraphicsView_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QGraphicsView*, event : QMouseEvent*) : Void
    fun bg_QGraphicsView_wheelEvent_SUPER_QWheelEvent_X(_self_ : QGraphicsView*, event : QWheelEvent*) : Void
    fun bg_QGraphicsView_paintEvent_SUPER_QPaintEvent_X(_self_ : QGraphicsView*, event : QPaintEvent*) : Void
    fun bg_QGraphicsView_resizeEvent_SUPER_QResizeEvent_X(_self_ : QGraphicsView*, event : QResizeEvent*) : Void
    fun bg_QGraphicsView_scrollContentsBy_SUPER_int_int(_self_ : QGraphicsView*, dx : Int32, dy : Int32) : Void
    fun bg_QGraphicsView_showEvent_SUPER_QShowEvent_X(_self_ : QGraphicsView*, event : QShowEvent*) : Void
    fun bg_QGraphicsView_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGraphicsView*, event : QInputMethodEvent*) : Void
    fun bg_QGraphicsView_drawBackground_SUPER_QPainter_X_const_QRectF_R(_self_ : QGraphicsView*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsView_drawForeground_SUPER_QPainter_X_const_QRectF_R(_self_ : QGraphicsView*, painter : QPainter*, rect : QRectF*) : Void
    fun bg_QGraphicsView_drawItems_SUPER_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(_self_ : QGraphicsView*, painter : QPainter*, num_items : Int32, items : QGraphicsItem**, options : QStyleOptionGraphicsItem*) : Void
    fun bg_QAbstractScrollArea_minimumSizeHint_SUPER_(_self_ : QGraphicsView*) : QSize*
    fun bg_QAbstractScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QGraphicsView*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportSizeHint_SUPER_(_self_ : QGraphicsView*) : QSize*
    fun bg_BgInherit_QGraphicsView_JUMPTABLE_BgJumptable_QGraphicsView_R(_self_ : QGraphicsView*, table : BgJumptable_QGraphicsView*) : Void
    fun bg_QGroupBox_metaObject_(_self_ : QGroupBox*) : QMetaObject*
    fun bg_QGroupBox_qt_metacast_const_char_X(_self_ : QGroupBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QGroupBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QGroupBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QGroupBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QGroupBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QGroupBox__CONSTRUCT_QWidget_X(parent : QWidget*) : QGroupBox*
    fun bg_QGroupBox__CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : QGroupBox*
    fun bg_QGroupBox_title_(_self_ : QGroupBox*) : CrystalString
    fun bg_QGroupBox_setTitle_const_QString_R(_self_ : QGroupBox*, title : CrystalString) : Void
    fun bg_QGroupBox_alignment_(_self_ : QGroupBox*) : Alignment
    fun bg_QGroupBox_setAlignment_int(_self_ : QGroupBox*, alignment : Int32) : Void
    fun bg_QGroupBox_minimumSizeHint_(_self_ : QGroupBox*) : QSize*
    fun bg_QGroupBox_isFlat_(_self_ : QGroupBox*) : Bool
    fun bg_QGroupBox_setFlat_bool(_self_ : QGroupBox*, flat : Bool) : Void
    fun bg_QGroupBox_isCheckable_(_self_ : QGroupBox*) : Bool
    fun bg_QGroupBox_setCheckable_bool(_self_ : QGroupBox*, checkable : Bool) : Void
    fun bg_QGroupBox_isChecked_(_self_ : QGroupBox*) : Bool
    fun bg_QGroupBox_setChecked_bool(_self_ : QGroupBox*, checked : Bool) : Void
    fun bg_QGroupBox_clicked_bool(_self_ : QGroupBox*, checked : Bool) : Void
    fun bg_QGroupBox_toggled_bool(_self_ : QGroupBox*, unnamed_arg_0 : Bool) : Void
    fun bg_QGroupBox_event_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Bool
    fun bg_QGroupBox_childEvent_QChildEvent_X(_self_ : QGroupBox*, event : QChildEvent*) : Void
    fun bg_QGroupBox_resizeEvent_QResizeEvent_X(_self_ : QGroupBox*, event : QResizeEvent*) : Void
    fun bg_QGroupBox_paintEvent_QPaintEvent_X(_self_ : QGroupBox*, event : QPaintEvent*) : Void
    fun bg_QGroupBox_focusInEvent_QFocusEvent_X(_self_ : QGroupBox*, event : QFocusEvent*) : Void
    fun bg_QGroupBox_changeEvent_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Void
    fun bg_QGroupBox_mousePressEvent_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_mouseMoveEvent_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_initStyleOption_QStyleOptionGroupBox_X(_self_ : QGroupBox*, option : QStyleOptionGroupBox*) : Void
    fun bg_QWidget_devType_(_self_ : QGroupBox*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QGroupBox*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QGroupBox*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QGroupBox*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QGroupBox*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QGroupBox*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QGroupBox*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QGroupBox*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QGroupBox*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QGroupBox*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QGroupBox*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QGroupBox*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QGroupBox*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QGroupBox*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QGroupBox*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QGroupBox*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QGroupBox*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QGroupBox*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QGroupBox*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QGroupBox*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QGroupBox*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QGroupBox*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QGroupBox*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QGroupBox*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QGroupBox*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QGroupBox*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QGroupBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QGroupBox*, next_ : Bool) : Bool
    fun bg_QGroupBox_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QGroupBox_CONNECT_clicked_CrystalProc_void__bool_(_self_ : QGroupBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGroupBox_CONNECT_toggled_CrystalProc_void__bool_(_self_ : QGroupBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QGroupBox_minimumSizeHint_SUPER_(_self_ : QGroupBox*) : QSize*
    fun bg_QGroupBox_event_SUPER_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Bool
    fun bg_QGroupBox_childEvent_SUPER_QChildEvent_X(_self_ : QGroupBox*, event : QChildEvent*) : Void
    fun bg_QGroupBox_resizeEvent_SUPER_QResizeEvent_X(_self_ : QGroupBox*, event : QResizeEvent*) : Void
    fun bg_QGroupBox_paintEvent_SUPER_QPaintEvent_X(_self_ : QGroupBox*, event : QPaintEvent*) : Void
    fun bg_QGroupBox_focusInEvent_SUPER_QFocusEvent_X(_self_ : QGroupBox*, event : QFocusEvent*) : Void
    fun bg_QGroupBox_changeEvent_SUPER_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Void
    fun bg_QGroupBox_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QGroupBox_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QGroupBox*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QGroupBox*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QGroupBox*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QGroupBox*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QGroupBox*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QGroupBox*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QGroupBox*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QGroupBox*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QGroupBox*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QGroupBox*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QGroupBox*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QGroupBox*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QGroupBox*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QGroupBox*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QGroupBox*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QGroupBox*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QGroupBox*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QGroupBox*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QGroupBox*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QGroupBox*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QGroupBox*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QGroupBox*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QGroupBox*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QGroupBox*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QGroupBox*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QGroupBox*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QGroupBox*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QGroupBox*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QGroupBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QGroupBox*, next_ : Bool) : Bool
    fun bg_BgInherit_QGroupBox_JUMPTABLE_BgJumptable_QGroupBox_R(_self_ : QGroupBox*, table : BgJumptable_QGroupBox*) : Void
    fun bg_QLineEdit_metaObject_(_self_ : QLineEdit*) : QMetaObject*
    fun bg_QLineEdit_qt_metacast_const_char_X(_self_ : QLineEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QLineEdit*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLineEdit_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLineEdit_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLineEdit__CONSTRUCT_QWidget_X(parent : QWidget*) : QLineEdit*
    fun bg_QLineEdit__CONSTRUCT_const_QString_R_QWidget_X(unnamed_arg_0 : CrystalString, parent : QWidget*) : QLineEdit*
    fun bg_QLineEdit_text_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_displayText_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_placeholderText_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_setPlaceholderText_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_maxLength_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_setMaxLength_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32) : Void
    fun bg_QLineEdit_setFrame_bool(_self_ : QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_hasFrame_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setClearButtonEnabled_bool(_self_ : QLineEdit*, enable : Bool) : Void
    fun bg_QLineEdit_isClearButtonEnabled_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_echoMode_(_self_ : QLineEdit*) : LineEdit::EchoMode
    fun bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(_self_ : QLineEdit*, unnamed_arg_0 : LineEdit::EchoMode) : Void
    fun bg_QLineEdit_isReadOnly_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setReadOnly_bool(_self_ : QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_setValidator_const_QValidator_X(_self_ : QLineEdit*, unnamed_arg_0 : QValidator*) : Void
    fun bg_QLineEdit_validator_(_self_ : QLineEdit*) : QValidator*
    fun bg_QLineEdit_setCompleter_QCompleter_X(_self_ : QLineEdit*, completer : QCompleter*) : Void
    fun bg_QLineEdit_completer_(_self_ : QLineEdit*) : QCompleter*
    fun bg_QLineEdit_sizeHint_(_self_ : QLineEdit*) : QSize*
    fun bg_QLineEdit_minimumSizeHint_(_self_ : QLineEdit*) : QSize*
    fun bg_QLineEdit_cursorPosition_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_setCursorPosition_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32) : Void
    fun bg_QLineEdit_cursorPositionAt_const_QPoint_R(_self_ : QLineEdit*, pos : QPoint) : Int32
    fun bg_QLineEdit_setAlignment_Qt__Alignment(_self_ : QLineEdit*, flag : Alignment) : Void
    fun bg_QLineEdit_alignment_(_self_ : QLineEdit*) : Alignment
    fun bg_QLineEdit_cursorForward_bool_int(_self_ : QLineEdit*, mark : Bool, steps : Int32) : Void
    fun bg_QLineEdit_cursorBackward_bool_int(_self_ : QLineEdit*, mark : Bool, steps : Int32) : Void
    fun bg_QLineEdit_cursorWordForward_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_cursorWordBackward_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_backspace_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_del_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_home_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_end_bool(_self_ : QLineEdit*, mark : Bool) : Void
    fun bg_QLineEdit_isModified_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setModified_bool(_self_ : QLineEdit*, unnamed_arg_0 : Bool) : Void
    fun bg_QLineEdit_setSelection_int_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLineEdit_hasSelectedText_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_selectedText_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_selectionStart_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_selectionEnd_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_selectionLength_(_self_ : QLineEdit*) : Int32
    fun bg_QLineEdit_isUndoAvailable_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_isRedoAvailable_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setDragEnabled_bool(_self_ : QLineEdit*, b : Bool) : Void
    fun bg_QLineEdit_dragEnabled_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(_self_ : QLineEdit*, style : CursorMoveStyle) : Void
    fun bg_QLineEdit_cursorMoveStyle_(_self_ : QLineEdit*) : CursorMoveStyle
    fun bg_QLineEdit_inputMask_(_self_ : QLineEdit*) : CrystalString
    fun bg_QLineEdit_setInputMask_const_QString_R(_self_ : QLineEdit*, input_mask : CrystalString) : Void
    fun bg_QLineEdit_hasAcceptableInput_(_self_ : QLineEdit*) : Bool
    fun bg_QLineEdit_setTextMargins_int_int_int_int(_self_ : QLineEdit*, left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
    fun bg_QLineEdit_setTextMargins_const_QMargins_R(_self_ : QLineEdit*, margins : QMargins*) : Void
    fun bg_QLineEdit_textMargins_(_self_ : QLineEdit*) : QMargins*
    fun bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(_self_ : QLineEdit*, action : QAction*, position : LineEdit::ActionPosition) : Void
    fun bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(_self_ : QLineEdit*, icon : QIcon*, position : LineEdit::ActionPosition) : QAction*
    fun bg_QLineEdit_setText_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_clear_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_selectAll_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_undo_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_redo_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_cut_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_copy_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_paste_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_deselect_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_insert_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_createStandardContextMenu_(_self_ : QLineEdit*) : QMenu*
    fun bg_QLineEdit_textChanged_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_textEdited_const_QString_R(_self_ : QLineEdit*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLineEdit_cursorPositionChanged_int_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLineEdit_returnPressed_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_editingFinished_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_selectionChanged_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_inputRejected_(_self_ : QLineEdit*) : Void
    fun bg_QLineEdit_mousePressEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_keyPressEvent_QKeyEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QLineEdit_focusInEvent_QFocusEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_focusOutEvent_QFocusEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_paintEvent_QPaintEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(_self_ : QLineEdit*, e : QDragMoveEvent*) : Void
    fun bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QLineEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QLineEdit_dropEvent_QDropEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QLineEdit_changeEvent_QEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(_self_ : QLineEdit*, option : QStyleOptionFrame*) : Void
    fun bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery(_self_ : QLineEdit*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery_QVariant(_self_ : QLineEdit*, property : InputMethodQuery, argument : CrystalVariant) : CrystalVariant
    fun bg_QLineEdit_event_QEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QLineEdit_cursorRect_(_self_ : QLineEdit*) : QRect*
    fun bg_QWidget_devType_(_self_ : QLineEdit*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QLineEdit*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QLineEdit*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QLineEdit*) : QPaintEngine*
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QLineEdit*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QLineEdit*, event : QKeyEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QLineEdit*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QLineEdit*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QLineEdit*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QLineEdit*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QLineEdit*, event : QCloseEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QLineEdit*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QLineEdit*, event : QActionEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QLineEdit*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QLineEdit*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QLineEdit*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QLineEdit*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QLineEdit*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QLineEdit*) : QPainter*
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QLineEdit*, next_ : Bool) : Bool
    fun bg_QLineEdit_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QLineEdit_CONNECT_textChanged_CrystalProc_void__const_QString_R_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_CONNECT_textEdited_CrystalProc_void__const_QString_R_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_CONNECT_cursorPositionChanged_CrystalProc_void__int__int_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_CONNECT_returnPressed_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_CONNECT_editingFinished_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_CONNECT_selectionChanged_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_CONNECT_inputRejected_CrystalProc_void_(_self_ : QLineEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLineEdit_sizeHint_SUPER_(_self_ : QLineEdit*) : QSize*
    fun bg_QLineEdit_minimumSizeHint_SUPER_(_self_ : QLineEdit*) : QSize*
    fun bg_QLineEdit_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QLineEdit_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QLineEdit_focusInEvent_SUPER_QFocusEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QLineEdit_paintEvent_SUPER_QPaintEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLineEdit_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QDragEnterEvent*) : Void
    fun bg_QLineEdit_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QLineEdit*, e : QDragMoveEvent*) : Void
    fun bg_QLineEdit_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QLineEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QLineEdit_dropEvent_SUPER_QDropEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QDropEvent*) : Void
    fun bg_QLineEdit_changeEvent_SUPER_QEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLineEdit_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QLineEdit_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QLineEdit_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QLineEdit*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QLineEdit_event_SUPER_QEvent_X(_self_ : QLineEdit*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QLineEdit*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QLineEdit*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QLineEdit*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QLineEdit*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QLineEdit*) : QPaintEngine*
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QLineEdit*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QLineEdit*, event : QKeyEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QLineEdit*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QLineEdit*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QLineEdit*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QLineEdit*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QLineEdit*, event : QCloseEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QLineEdit*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QLineEdit*, event : QActionEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QLineEdit*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QLineEdit*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QLineEdit*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QLineEdit*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QLineEdit*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QLineEdit*) : QPainter*
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QLineEdit*, next_ : Bool) : Bool
    fun bg_BgInherit_QLineEdit_JUMPTABLE_BgJumptable_QLineEdit_R(_self_ : QLineEdit*, table : BgJumptable_QLineEdit*) : Void
    fun bg_QItemEditorFactory__CONSTRUCT_() : QItemEditorFactory*
    fun bg_QItemEditorFactory_createEditor_int_QWidget_X(_self_ : QItemEditorFactory*, user_type : Int32, parent : QWidget*) : QWidget*
    fun bg_QItemEditorFactory_valuePropertyName_int(_self_ : QItemEditorFactory*, user_type : Int32) : QByteArray*
    fun bg_QItemEditorFactory_registerEditor_int_QItemEditorCreatorBase_X(_self_ : QItemEditorFactory*, user_type : Int32, creator : QItemEditorCreatorBase*) : Void
    fun bg_QItemEditorFactory_defaultFactory_STATIC_() : QItemEditorFactory*
    fun bg_QItemEditorFactory_setDefaultFactory_STATIC_QItemEditorFactory_X(factory : QItemEditorFactory*) : Void
    fun bg_QItemEditorFactory_createEditor_SUPER_int_QWidget_X(_self_ : QItemEditorFactory*, user_type : Int32, parent : QWidget*) : QWidget*
    fun bg_QItemEditorFactory_valuePropertyName_SUPER_int(_self_ : QItemEditorFactory*, user_type : Int32) : QByteArray*
    fun bg_BgInherit_QItemEditorFactory_JUMPTABLE_BgJumptable_QItemEditorFactory_R(_self_ : QItemEditorFactory*, table : BgJumptable_QItemEditorFactory*) : Void
    fun bg_QLabel_metaObject_(_self_ : QLabel*) : QMetaObject*
    fun bg_QLabel_qt_metacast_const_char_X(_self_ : QLabel*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QLabel*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLabel_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLabel_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLabel__CONSTRUCT_QWidget_X(parent : QWidget*) : QLabel*
    fun bg_QLabel__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, f : WindowFlags) : QLabel*
    fun bg_QLabel__CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QLabel*
    fun bg_QLabel__CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(text : CrystalString, parent : QWidget*, f : WindowFlags) : QLabel*
    fun bg_QLabel_text_(_self_ : QLabel*) : CrystalString
    fun bg_QLabel_movie_(_self_ : QLabel*) : QMovie*
    fun bg_QLabel_textFormat_(_self_ : QLabel*) : TextFormatEnum
    fun bg_QLabel_setTextFormat_Qt__TextFormat(_self_ : QLabel*, unnamed_arg_0 : TextFormatEnum) : Void
    fun bg_QLabel_alignment_(_self_ : QLabel*) : Alignment
    fun bg_QLabel_setAlignment_Qt__Alignment(_self_ : QLabel*, unnamed_arg_0 : Alignment) : Void
    fun bg_QLabel_setWordWrap_bool(_self_ : QLabel*, on : Bool) : Void
    fun bg_QLabel_wordWrap_(_self_ : QLabel*) : Bool
    fun bg_QLabel_indent_(_self_ : QLabel*) : Int32
    fun bg_QLabel_setIndent_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_margin_(_self_ : QLabel*) : Int32
    fun bg_QLabel_setMargin_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_hasScaledContents_(_self_ : QLabel*) : Bool
    fun bg_QLabel_setScaledContents_bool(_self_ : QLabel*, unnamed_arg_0 : Bool) : Void
    fun bg_QLabel_sizeHint_(_self_ : QLabel*) : QSize*
    fun bg_QLabel_minimumSizeHint_(_self_ : QLabel*) : QSize*
    fun bg_QLabel_setBuddy_QWidget_X(_self_ : QLabel*, unnamed_arg_0 : QWidget*) : Void
    fun bg_QLabel_buddy_(_self_ : QLabel*) : QWidget*
    fun bg_QLabel_heightForWidth_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLabel_openExternalLinks_(_self_ : QLabel*) : Bool
    fun bg_QLabel_setOpenExternalLinks_bool(_self_ : QLabel*, open : Bool) : Void
    fun bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : QLabel*, flags : TextInteractionFlags) : Void
    fun bg_QLabel_textInteractionFlags_(_self_ : QLabel*) : TextInteractionFlags
    fun bg_QLabel_setSelection_int_int(_self_ : QLabel*, unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
    fun bg_QLabel_hasSelectedText_(_self_ : QLabel*) : Bool
    fun bg_QLabel_selectedText_(_self_ : QLabel*) : CrystalString
    fun bg_QLabel_selectionStart_(_self_ : QLabel*) : Int32
    fun bg_QLabel_setText_const_QString_R(_self_ : QLabel*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QLabel_setPixmap_const_QPixmap_R(_self_ : QLabel*, unnamed_arg_0 : QPixmap*) : Void
    fun bg_QLabel_setPicture_const_QPicture_R(_self_ : QLabel*, unnamed_arg_0 : QPicture*) : Void
    fun bg_QLabel_setMovie_QMovie_X(_self_ : QLabel*, movie : QMovie*) : Void
    fun bg_QLabel_setNum_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Void
    fun bg_QLabel_setNum_double(_self_ : QLabel*, unnamed_arg_0 : Float64) : Void
    fun bg_QLabel_clear_(_self_ : QLabel*) : Void
    fun bg_QLabel_linkActivated_const_QString_R(_self_ : QLabel*, link : CrystalString) : Void
    fun bg_QLabel_linkHovered_const_QString_R(_self_ : QLabel*, link : CrystalString) : Void
    fun bg_QLabel_event_QEvent_X(_self_ : QLabel*, e : QEvent*) : Bool
    fun bg_QLabel_keyPressEvent_QKeyEvent_X(_self_ : QLabel*, ev : QKeyEvent*) : Void
    fun bg_QLabel_paintEvent_QPaintEvent_X(_self_ : QLabel*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLabel_changeEvent_QEvent_X(_self_ : QLabel*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLabel_mousePressEvent_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseMoveEvent_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseReleaseEvent_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_contextMenuEvent_QContextMenuEvent_X(_self_ : QLabel*, ev : QContextMenuEvent*) : Void
    fun bg_QLabel_focusInEvent_QFocusEvent_X(_self_ : QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusOutEvent_QFocusEvent_X(_self_ : QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusNextPrevChild_bool(_self_ : QLabel*, next_ : Bool) : Bool
    fun bg_QLabel_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QLabel_CONNECT_linkActivated_CrystalProc_void__const_QString_R_(_self_ : QLabel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLabel_CONNECT_linkHovered_CrystalProc_void__const_QString_R_(_self_ : QLabel*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLabel_sizeHint_SUPER_(_self_ : QLabel*) : QSize*
    fun bg_QLabel_minimumSizeHint_SUPER_(_self_ : QLabel*) : QSize*
    fun bg_QLabel_heightForWidth_SUPER_int(_self_ : QLabel*, unnamed_arg_0 : Int32) : Int32
    fun bg_QLabel_event_SUPER_QEvent_X(_self_ : QLabel*, e : QEvent*) : Bool
    fun bg_QLabel_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QLabel*, ev : QKeyEvent*) : Void
    fun bg_QLabel_paintEvent_SUPER_QPaintEvent_X(_self_ : QLabel*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QLabel_changeEvent_SUPER_QEvent_X(_self_ : QLabel*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLabel_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QLabel*, ev : QMouseEvent*) : Void
    fun bg_QLabel_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QLabel*, ev : QContextMenuEvent*) : Void
    fun bg_QLabel_focusInEvent_SUPER_QFocusEvent_X(_self_ : QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QLabel*, ev : QFocusEvent*) : Void
    fun bg_QLabel_focusNextPrevChild_SUPER_bool(_self_ : QLabel*, next_ : Bool) : Bool
    fun bg_BgInherit_QLabel_JUMPTABLE_BgJumptable_QLabel_R(_self_ : QLabel*, table : BgJumptable_QLabel*) : Void
    fun bg_QLCDNumber_metaObject_(_self_ : QLCDNumber*) : QMetaObject*
    fun bg_QLCDNumber_qt_metacast_const_char_X(_self_ : QLCDNumber*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QLCDNumber*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QLCDNumber_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QLCDNumber__CONSTRUCT_QWidget_X(parent : QWidget*) : QLCDNumber*
    fun bg_QLCDNumber__CONSTRUCT_uint_QWidget_X(num_digits : UInt32, parent : QWidget*) : QLCDNumber*
    fun bg_QLCDNumber_smallDecimalPoint_(_self_ : QLCDNumber*) : Bool
    fun bg_QLCDNumber_digitCount_(_self_ : QLCDNumber*) : Int32
    fun bg_QLCDNumber_setDigitCount_int(_self_ : QLCDNumber*, n_digits : Int32) : Void
    fun bg_QLCDNumber_checkOverflow_double(_self_ : QLCDNumber*, num : Float64) : Bool
    fun bg_QLCDNumber_checkOverflow_int(_self_ : QLCDNumber*, num : Int32) : Bool
    fun bg_QLCDNumber_mode_(_self_ : QLCDNumber*) : LcdNumber::Mode
    fun bg_QLCDNumber_setMode_QLCDNumber__Mode(_self_ : QLCDNumber*, unnamed_arg_0 : LcdNumber::Mode) : Void
    fun bg_QLCDNumber_segmentStyle_(_self_ : QLCDNumber*) : LcdNumber::SegmentStyle
    fun bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(_self_ : QLCDNumber*, unnamed_arg_0 : LcdNumber::SegmentStyle) : Void
    fun bg_QLCDNumber_value_(_self_ : QLCDNumber*) : Float64
    fun bg_QLCDNumber_intValue_(_self_ : QLCDNumber*) : Int32
    fun bg_QLCDNumber_sizeHint_(_self_ : QLCDNumber*) : QSize*
    fun bg_QLCDNumber_display_const_QString_R(_self_ : QLCDNumber*, str : CrystalString) : Void
    fun bg_QLCDNumber_display_int(_self_ : QLCDNumber*, num : Int32) : Void
    fun bg_QLCDNumber_display_double(_self_ : QLCDNumber*, num : Float64) : Void
    fun bg_QLCDNumber_setHexMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setDecMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setOctMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setBinMode_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_setSmallDecimalPoint_bool(_self_ : QLCDNumber*, unnamed_arg_0 : Bool) : Void
    fun bg_QLCDNumber_overflow_(_self_ : QLCDNumber*) : Void
    fun bg_QLCDNumber_event_QEvent_X(_self_ : QLCDNumber*, e : QEvent*) : Bool
    fun bg_QLCDNumber_paintEvent_QPaintEvent_X(_self_ : QLCDNumber*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QFrame_changeEvent_QEvent_X(_self_ : QLCDNumber*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QLCDNumber_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QLCDNumber_CONNECT_overflow_CrystalProc_void_(_self_ : QLCDNumber*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QLCDNumber_sizeHint_SUPER_(_self_ : QLCDNumber*) : QSize*
    fun bg_QLCDNumber_event_SUPER_QEvent_X(_self_ : QLCDNumber*, e : QEvent*) : Bool
    fun bg_QLCDNumber_paintEvent_SUPER_QPaintEvent_X(_self_ : QLCDNumber*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QFrame_changeEvent_SUPER_QEvent_X(_self_ : QLCDNumber*, unnamed_arg_0 : QEvent*) : Void
    fun bg_BgInherit_QLCDNumber_JUMPTABLE_BgJumptable_QLCDNumber_R(_self_ : QLCDNumber*, table : BgJumptable_QLCDNumber*) : Void
    fun bg_QMainWindow_metaObject_(_self_ : QMainWindow*) : QMetaObject*
    fun bg_QMainWindow_qt_metacast_const_char_X(_self_ : QMainWindow*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QMainWindow*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMainWindow_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMainWindow_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMainWindow__CONSTRUCT_QWidget_X(parent : QWidget*) : QMainWindow*
    fun bg_QMainWindow__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent : QWidget*, flags : WindowFlags) : QMainWindow*
    fun bg_QMainWindow_iconSize_(_self_ : QMainWindow*) : QSize*
    fun bg_QMainWindow_setIconSize_const_QSize_R(_self_ : QMainWindow*, icon_size : QSize*) : Void
    fun bg_QMainWindow_toolButtonStyle_(_self_ : QMainWindow*) : ToolButtonStyle
    fun bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : QMainWindow*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QMainWindow_isAnimated_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_isDockNestingEnabled_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_documentMode_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_setDocumentMode_bool(_self_ : QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_tabShape_(_self_ : QMainWindow*) : TabWidget::TabShape
    fun bg_QMainWindow_setTabShape_QTabWidget__TabShape(_self_ : QMainWindow*, tab_shape : TabWidget::TabShape) : Void
    fun bg_QMainWindow_tabPosition_Qt__DockWidgetArea(_self_ : QMainWindow*, area : DockWidgetArea) : TabWidget::TabPosition
    fun bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(_self_ : QMainWindow*, areas : DockWidgetAreas, tab_position : TabWidget::TabPosition) : Void
    fun bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(_self_ : QMainWindow*, options : MainWindow::DockOptions) : Void
    fun bg_QMainWindow_dockOptions_(_self_ : QMainWindow*) : MainWindow::DockOptions
    fun bg_QMainWindow_isSeparator_const_QPoint_R(_self_ : QMainWindow*, pos : QPoint) : Bool
    fun bg_QMainWindow_menuBar_(_self_ : QMainWindow*) : QMenuBar*
    fun bg_QMainWindow_setMenuBar_QMenuBar_X(_self_ : QMainWindow*, menubar : QMenuBar*) : Void
    fun bg_QMainWindow_menuWidget_(_self_ : QMainWindow*) : QWidget*
    fun bg_QMainWindow_setMenuWidget_QWidget_X(_self_ : QMainWindow*, menubar : QWidget*) : Void
    fun bg_QMainWindow_statusBar_(_self_ : QMainWindow*) : QStatusBar*
    fun bg_QMainWindow_setStatusBar_QStatusBar_X(_self_ : QMainWindow*, statusbar : QStatusBar*) : Void
    fun bg_QMainWindow_centralWidget_(_self_ : QMainWindow*) : QWidget*
    fun bg_QMainWindow_setCentralWidget_QWidget_X(_self_ : QMainWindow*, widget : QWidget*) : Void
    fun bg_QMainWindow_takeCentralWidget_(_self_ : QMainWindow*) : QWidget*
    fun bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(_self_ : QMainWindow*, corner : Corner, area : DockWidgetArea) : Void
    fun bg_QMainWindow_corner_Qt__Corner(_self_ : QMainWindow*, corner : Corner) : DockWidgetArea
    fun bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(_self_ : QMainWindow*, area : ToolBarArea) : Void
    fun bg_QMainWindow_insertToolBarBreak_QToolBar_X(_self_ : QMainWindow*, before : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(_self_ : QMainWindow*, area : ToolBarArea, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_addToolBar_const_QString_R(_self_ : QMainWindow*, title : CrystalString) : QToolBar*
    fun bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(_self_ : QMainWindow*, before : QToolBar*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_removeToolBar_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : Void
    fun bg_QMainWindow_removeToolBarBreak_QToolBar_X(_self_ : QMainWindow*, before : QToolBar*) : Void
    fun bg_QMainWindow_unifiedTitleAndToolBarOnMac_(_self_ : QMainWindow*) : Bool
    fun bg_QMainWindow_toolBarArea_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : ToolBarArea
    fun bg_QMainWindow_toolBarBreak_QToolBar_X(_self_ : QMainWindow*, toolbar : QToolBar*) : Bool
    fun bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(_self_ : QMainWindow*, area : DockWidgetArea, dockwidget : QDockWidget*) : Void
    fun bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(_self_ : QMainWindow*, area : DockWidgetArea, dockwidget : QDockWidget*, orientation : Orientation) : Void
    fun bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(_self_ : QMainWindow*, after : QDockWidget*, dockwidget : QDockWidget*, orientation : Orientation) : Void
    fun bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(_self_ : QMainWindow*, first : QDockWidget*, second : QDockWidget*) : Void
    fun bg_QMainWindow_tabifiedDockWidgets_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : ContainerQListQDockWidgetX*
    fun bg_QMainWindow_removeDockWidget_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : Void
    fun bg_QMainWindow_restoreDockWidget_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : Bool
    fun bg_QMainWindow_dockWidgetArea_QDockWidget_X(_self_ : QMainWindow*, dockwidget : QDockWidget*) : DockWidgetArea
    fun bg_QMainWindow_resizeDocks_const_QList_QDockWidget_X__R_const_QList_int__R_Qt__Orientation(_self_ : QMainWindow*, docks : ContainerQListQDockWidgetX*, sizes : ContainerQListInt*, orientation : Orientation) : Void
    fun bg_QMainWindow_saveState_int(_self_ : QMainWindow*, version : Int32) : QByteArray*
    fun bg_QMainWindow_restoreState_const_QByteArray_R_int(_self_ : QMainWindow*, state : QByteArray*, version : Int32) : Bool
    fun bg_QMainWindow_createPopupMenu_(_self_ : QMainWindow*) : QMenu*
    fun bg_QMainWindow_setAnimated_bool(_self_ : QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_setDockNestingEnabled_bool(_self_ : QMainWindow*, enabled : Bool) : Void
    fun bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(_self_ : QMainWindow*, set : Bool) : Void
    fun bg_QMainWindow_iconSizeChanged_const_QSize_R(_self_ : QMainWindow*, icon_size : QSize*) : Void
    fun bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(_self_ : QMainWindow*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(_self_ : QMainWindow*, dock_widget : QDockWidget*) : Void
    fun bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(_self_ : QMainWindow*, event : QContextMenuEvent*) : Void
    fun bg_QMainWindow_event_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Bool
    fun bg_QWidget_devType_(_self_ : QMainWindow*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QMainWindow*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QMainWindow*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QMainWindow*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QMainWindow*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QMainWindow*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QMainWindow*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QMainWindow*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QMainWindow*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QMainWindow*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QMainWindow*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QMainWindow*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_QPaintEvent_X(_self_ : QMainWindow*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QMainWindow*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QMainWindow*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QMainWindow*, event : QCloseEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QMainWindow*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QMainWindow*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QMainWindow*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QMainWindow*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QMainWindow*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QMainWindow*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QMainWindow*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QMainWindow*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QMainWindow*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QMainWindow*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QMainWindow*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QMainWindow*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QMainWindow*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QMainWindow*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QMainWindow*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QMainWindow*, next_ : Bool) : Bool
    fun bg_QMainWindow_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QMainWindow_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(_self_ : QMainWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMainWindow_CONNECT_toolButtonStyleChanged_CrystalProc_void__Qt__ToolButtonStyle_(_self_ : QMainWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMainWindow_CONNECT_tabifiedDockWidgetActivated_CrystalProc_void__QDockWidget_X_(_self_ : QMainWindow*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMainWindow_createPopupMenu_SUPER_(_self_ : QMainWindow*) : QMenu*
    fun bg_QMainWindow_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QMainWindow*, event : QContextMenuEvent*) : Void
    fun bg_QMainWindow_event_SUPER_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QMainWindow*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QMainWindow*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QMainWindow*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QMainWindow*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QMainWindow*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QMainWindow*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QMainWindow*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QMainWindow*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QMainWindow*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QMainWindow*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QMainWindow*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QMainWindow*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QMainWindow*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QMainWindow*, event : QEvent*) : Void
    fun bg_QWidget_paintEvent_SUPER_QPaintEvent_X(_self_ : QMainWindow*, event : QPaintEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QMainWindow*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QMainWindow*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QMainWindow*, event : QCloseEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QMainWindow*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QMainWindow*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QMainWindow*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QMainWindow*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QMainWindow*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QMainWindow*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QMainWindow*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QMainWindow*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QMainWindow*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_SUPER_QEvent_X(_self_ : QMainWindow*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QMainWindow*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QMainWindow*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QMainWindow*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QMainWindow*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QMainWindow*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QMainWindow*, next_ : Bool) : Bool
    fun bg_BgInherit_QMainWindow_JUMPTABLE_BgJumptable_QMainWindow_R(_self_ : QMainWindow*, table : BgJumptable_QMainWindow*) : Void
    fun bg_QMenu_metaObject_(_self_ : QMenu*) : QMetaObject*
    fun bg_QMenu_qt_metacast_const_char_X(_self_ : QMenu*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QMenu*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMenu_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMenu_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMenu__CONSTRUCT_QWidget_X(parent : QWidget*) : QMenu*
    fun bg_QMenu__CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : QMenu*
    fun bg_QMenu_addAction_const_QString_R(_self_ : QMenu*, text : CrystalString) : QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R(_self_ : QMenu*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : QMenu*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(_self_ : QMenu*, text : CrystalString, receiver : QObject*, member : UInt8*, shortcut : QKeySequence*) : QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(_self_ : QMenu*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(_self_ : QMenu*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*, shortcut : QKeySequence*) : QAction*
    fun bg_QMenu_addMenu_QMenu_X(_self_ : QMenu*, menu : QMenu*) : QAction*
    fun bg_QMenu_addMenu_const_QString_R(_self_ : QMenu*, title : CrystalString) : QMenu*
    fun bg_QMenu_addMenu_const_QIcon_R_const_QString_R(_self_ : QMenu*, icon : QIcon*, title : CrystalString) : QMenu*
    fun bg_QMenu_addSeparator_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_addSection_const_QString_R(_self_ : QMenu*, text : CrystalString) : QAction*
    fun bg_QMenu_addSection_const_QIcon_R_const_QString_R(_self_ : QMenu*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QMenu_insertMenu_QAction_X_QMenu_X(_self_ : QMenu*, before : QAction*, menu : QMenu*) : QAction*
    fun bg_QMenu_insertSeparator_QAction_X(_self_ : QMenu*, before : QAction*) : QAction*
    fun bg_QMenu_insertSection_QAction_X_const_QString_R(_self_ : QMenu*, before : QAction*, text : CrystalString) : QAction*
    fun bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(_self_ : QMenu*, before : QAction*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QMenu_isEmpty_(_self_ : QMenu*) : Bool
    fun bg_QMenu_clear_(_self_ : QMenu*) : Void
    fun bg_QMenu_setTearOffEnabled_bool(_self_ : QMenu*, unnamed_arg_0 : Bool) : Void
    fun bg_QMenu_isTearOffEnabled_(_self_ : QMenu*) : Bool
    fun bg_QMenu_isTearOffMenuVisible_(_self_ : QMenu*) : Bool
    fun bg_QMenu_showTearOffMenu_(_self_ : QMenu*) : Void
    fun bg_QMenu_showTearOffMenu_const_QPoint_R(_self_ : QMenu*, pos : QPoint) : Void
    fun bg_QMenu_hideTearOffMenu_(_self_ : QMenu*) : Void
    fun bg_QMenu_setDefaultAction_QAction_X(_self_ : QMenu*, unnamed_arg_0 : QAction*) : Void
    fun bg_QMenu_defaultAction_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_setActiveAction_QAction_X(_self_ : QMenu*, act : QAction*) : Void
    fun bg_QMenu_activeAction_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_popup_const_QPoint_R_QAction_X(_self_ : QMenu*, pos : QPoint, at : QAction*) : Void
    fun bg_QMenu_exec_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_exec_const_QPoint_R_QAction_X(_self_ : QMenu*, pos : QPoint, at : QAction*) : QAction*
    fun bg_QMenu_exec_STATIC_QList_QAction_X__const_QPoint_R_QAction_X_QWidget_X(actions : ContainerQListQActionX*, pos : QPoint, at : QAction*, parent : QWidget*) : QAction*
    fun bg_QMenu_sizeHint_(_self_ : QMenu*) : QSize*
    fun bg_QMenu_actionGeometry_QAction_X(_self_ : QMenu*, unnamed_arg_0 : QAction*) : QRect*
    fun bg_QMenu_actionAt_const_QPoint_R(_self_ : QMenu*, unnamed_arg_0 : QPoint) : QAction*
    fun bg_QMenu_menuAction_(_self_ : QMenu*) : QAction*
    fun bg_QMenu_title_(_self_ : QMenu*) : CrystalString
    fun bg_QMenu_setTitle_const_QString_R(_self_ : QMenu*, title : CrystalString) : Void
    fun bg_QMenu_icon_(_self_ : QMenu*) : QIcon*
    fun bg_QMenu_setIcon_const_QIcon_R(_self_ : QMenu*, icon : QIcon*) : Void
    fun bg_QMenu_setNoReplayFor_QWidget_X(_self_ : QMenu*, widget : QWidget*) : Void
    fun bg_QMenu_platformMenu_(_self_ : QMenu*) : QPlatformMenu*
    fun bg_QMenu_setPlatformMenu_QPlatformMenu_X(_self_ : QMenu*, platform_menu : QPlatformMenu*) : Void
    fun bg_QMenu_toNSMenu_(_self_ : QMenu*) : NSMenu*
    fun bg_QMenu_setAsDockMenu_(_self_ : QMenu*) : Void
    fun bg_QMenu_separatorsCollapsible_(_self_ : QMenu*) : Bool
    fun bg_QMenu_setSeparatorsCollapsible_bool(_self_ : QMenu*, collapse : Bool) : Void
    fun bg_QMenu_toolTipsVisible_(_self_ : QMenu*) : Bool
    fun bg_QMenu_setToolTipsVisible_bool(_self_ : QMenu*, visible : Bool) : Void
    fun bg_QMenu_aboutToShow_(_self_ : QMenu*) : Void
    fun bg_QMenu_aboutToHide_(_self_ : QMenu*) : Void
    fun bg_QMenu_triggered_QAction_X(_self_ : QMenu*, action : QAction*) : Void
    fun bg_QMenu_hovered_QAction_X(_self_ : QMenu*, action : QAction*) : Void
    fun bg_QMenu_columnCount_(_self_ : QMenu*) : Int32
    fun bg_QMenu_changeEvent_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_keyPressEvent_QKeyEvent_X(_self_ : QMenu*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenu_mouseReleaseEvent_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mousePressEvent_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mouseMoveEvent_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_wheelEvent_QWheelEvent_X(_self_ : QMenu*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QMenu_enterEvent_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_leaveEvent_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_hideEvent_QHideEvent_X(_self_ : QMenu*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QMenu_paintEvent_QPaintEvent_X(_self_ : QMenu*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenu_actionEvent_QActionEvent_X(_self_ : QMenu*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenu_timerEvent_QTimerEvent_X(_self_ : QMenu*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenu_event_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenu_focusNextPrevChild_bool(_self_ : QMenu*, next_ : Bool) : Bool
    fun bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(_self_ : QMenu*, option : QStyleOptionMenuItem*, action : QAction*) : Void
    fun bg_QMenu__CONSTRUCT_QMenuPrivate_R_QWidget_X(dd : QMenuPrivate*, parent : QWidget*) : QMenu*
    fun bg_QWidget_devType_(_self_ : QMenu*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QMenu*, visible : Bool) : Void
    fun bg_QWidget_minimumSizeHint_(_self_ : QMenu*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QMenu*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QMenu*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QMenu*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QMenu*, event : QMouseEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QMenu*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QMenu*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QMenu*, event : QFocusEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QMenu*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QMenu*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QMenu*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QMenu*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QMenu*, event : QTabletEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QMenu*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QMenu*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QMenu*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QMenu*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QMenu*, event : QShowEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QMenu*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QMenu*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QMenu*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QMenu*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QMenu*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QMenu*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QMenu_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QMenu_CONNECT_aboutToShow_CrystalProc_void_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_CONNECT_aboutToHide_CrystalProc_void_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_CONNECT_triggered_CrystalProc_void__QAction_X_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_CONNECT_hovered_CrystalProc_void__QAction_X_(_self_ : QMenu*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenu_sizeHint_SUPER_(_self_ : QMenu*) : QSize*
    fun bg_QMenu_changeEvent_SUPER_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QMenu*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenu_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QMenu*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenu_wheelEvent_SUPER_QWheelEvent_X(_self_ : QMenu*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QMenu_enterEvent_SUPER_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_leaveEvent_SUPER_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenu_hideEvent_SUPER_QHideEvent_X(_self_ : QMenu*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QMenu_paintEvent_SUPER_QPaintEvent_X(_self_ : QMenu*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenu_actionEvent_SUPER_QActionEvent_X(_self_ : QMenu*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenu_timerEvent_SUPER_QTimerEvent_X(_self_ : QMenu*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenu_event_SUPER_QEvent_X(_self_ : QMenu*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenu_focusNextPrevChild_SUPER_bool(_self_ : QMenu*, next_ : Bool) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QMenu*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QMenu*, visible : Bool) : Void
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QMenu*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QMenu*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QMenu*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QMenu*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QMenu*, event : QMouseEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QMenu*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QMenu*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QMenu*, event : QFocusEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QMenu*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QMenu*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QMenu*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QMenu*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QMenu*, event : QTabletEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QMenu*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QMenu*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QMenu*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QMenu*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QMenu*, event : QShowEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QMenu*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QMenu*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QMenu*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QMenu*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QMenu*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QMenu*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_BgInherit_QMenu_JUMPTABLE_BgJumptable_QMenu_R(_self_ : QMenu*, table : BgJumptable_QMenu*) : Void
    fun bg_QMenuBar_metaObject_(_self_ : QMenuBar*) : QMetaObject*
    fun bg_QMenuBar_qt_metacast_const_char_X(_self_ : QMenuBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QMenuBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QMenuBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QMenuBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QMenuBar__CONSTRUCT_QWidget_X(parent : QWidget*) : QMenuBar*
    fun bg_QMenuBar_addAction_const_QString_R(_self_ : QMenuBar*, text : CrystalString) : QAction*
    fun bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : QMenuBar*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QMenuBar_addMenu_QMenu_X(_self_ : QMenuBar*, menu : QMenu*) : QAction*
    fun bg_QMenuBar_addMenu_const_QString_R(_self_ : QMenuBar*, title : CrystalString) : QMenu*
    fun bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(_self_ : QMenuBar*, icon : QIcon*, title : CrystalString) : QMenu*
    fun bg_QMenuBar_addSeparator_(_self_ : QMenuBar*) : QAction*
    fun bg_QMenuBar_insertSeparator_QAction_X(_self_ : QMenuBar*, before : QAction*) : QAction*
    fun bg_QMenuBar_insertMenu_QAction_X_QMenu_X(_self_ : QMenuBar*, before : QAction*, menu : QMenu*) : QAction*
    fun bg_QMenuBar_clear_(_self_ : QMenuBar*) : Void
    fun bg_QMenuBar_activeAction_(_self_ : QMenuBar*) : QAction*
    fun bg_QMenuBar_setActiveAction_QAction_X(_self_ : QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_setDefaultUp_bool(_self_ : QMenuBar*, unnamed_arg_0 : Bool) : Void
    fun bg_QMenuBar_isDefaultUp_(_self_ : QMenuBar*) : Bool
    fun bg_QMenuBar_sizeHint_(_self_ : QMenuBar*) : QSize*
    fun bg_QMenuBar_minimumSizeHint_(_self_ : QMenuBar*) : QSize*
    fun bg_QMenuBar_heightForWidth_int(_self_ : QMenuBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QMenuBar_actionGeometry_QAction_X(_self_ : QMenuBar*, unnamed_arg_0 : QAction*) : QRect*
    fun bg_QMenuBar_actionAt_const_QPoint_R(_self_ : QMenuBar*, unnamed_arg_0 : QPoint) : QAction*
    fun bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(_self_ : QMenuBar*, w : QWidget*, corner : Corner) : Void
    fun bg_QMenuBar_cornerWidget_Qt__Corner(_self_ : QMenuBar*, corner : Corner) : QWidget*
    fun bg_QMenuBar_toNSMenu_(_self_ : QMenuBar*) : NSMenu*
    fun bg_QMenuBar_isNativeMenuBar_(_self_ : QMenuBar*) : Bool
    fun bg_QMenuBar_setNativeMenuBar_bool(_self_ : QMenuBar*, native_menu_bar : Bool) : Void
    fun bg_QMenuBar_platformMenuBar_(_self_ : QMenuBar*) : QPlatformMenuBar*
    fun bg_QMenuBar_setVisible_bool(_self_ : QMenuBar*, visible : Bool) : Void
    fun bg_QMenuBar_triggered_QAction_X(_self_ : QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_hovered_QAction_X(_self_ : QMenuBar*, action : QAction*) : Void
    fun bg_QMenuBar_changeEvent_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_keyPressEvent_QKeyEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mousePressEvent_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_leaveEvent_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_paintEvent_QPaintEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenuBar_resizeEvent_QResizeEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QMenuBar_actionEvent_QActionEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenuBar_focusOutEvent_QFocusEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_focusInEvent_QFocusEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_timerEvent_QTimerEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenuBar_eventFilter_QObject_X_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QMenuBar_event_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(_self_ : QMenuBar*, option : QStyleOptionMenuItem*, action : QAction*) : Void
    fun bg_QWidget_devType_(_self_ : QMenuBar*) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QMenuBar*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QMenuBar*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QMenuBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QMenuBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QMenuBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QMenuBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QMenuBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QMenuBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QMenuBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QMenuBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QMenuBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QMenuBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QMenuBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QMenuBar*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QMenuBar*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QMenuBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QMenuBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QMenuBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QMenuBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QMenuBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QMenuBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QMenuBar*, next_ : Bool) : Bool
    fun bg_QMenuBar_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QMenuBar_CONNECT_triggered_CrystalProc_void__QAction_X_(_self_ : QMenuBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenuBar_CONNECT_hovered_CrystalProc_void__QAction_X_(_self_ : QMenuBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QMenuBar_sizeHint_SUPER_(_self_ : QMenuBar*) : QSize*
    fun bg_QMenuBar_minimumSizeHint_SUPER_(_self_ : QMenuBar*) : QSize*
    fun bg_QMenuBar_heightForWidth_SUPER_int(_self_ : QMenuBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QMenuBar_setVisible_SUPER_bool(_self_ : QMenuBar*, visible : Bool) : Void
    fun bg_QMenuBar_changeEvent_SUPER_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QKeyEvent*) : Void
    fun bg_QMenuBar_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QMenuBar_leaveEvent_SUPER_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QMenuBar_paintEvent_SUPER_QPaintEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QMenuBar_resizeEvent_SUPER_QResizeEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QMenuBar_actionEvent_SUPER_QActionEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QMenuBar_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_focusInEvent_SUPER_QFocusEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QFocusEvent*) : Void
    fun bg_QMenuBar_timerEvent_SUPER_QTimerEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QMenuBar_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QMenuBar_event_SUPER_QEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QMenuBar*) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QMenuBar*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QMenuBar*) : QPaintEngine*
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QMenuBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QMenuBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QMenuBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QMenuBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QMenuBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QMenuBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QMenuBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QMenuBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QMenuBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QMenuBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QMenuBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QMenuBar*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QMenuBar*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QMenuBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QMenuBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QMenuBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QMenuBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QMenuBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QMenuBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QMenuBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QMenuBar*, next_ : Bool) : Bool
    fun bg_BgInherit_QMenuBar_JUMPTABLE_BgJumptable_QMenuBar_R(_self_ : QMenuBar*, table : BgJumptable_QMenuBar*) : Void
    fun bg_QTextEdit_metaObject_(_self_ : QTextEdit*) : QMetaObject*
    fun bg_QTextEdit_qt_metacast_const_char_X(_self_ : QTextEdit*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTextEdit*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTextEdit_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTextEdit_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTextEdit__CONSTRUCT_QWidget_X(parent : QWidget*) : QTextEdit*
    fun bg_QTextEdit__CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QTextEdit*
    fun bg_QTextEdit_setDocument_QTextDocument_X(_self_ : QTextEdit*, document : QTextDocument*) : Void
    fun bg_QTextEdit_document_(_self_ : QTextEdit*) : QTextDocument*
    fun bg_QTextEdit_setPlaceholderText_const_QString_R(_self_ : QTextEdit*, placeholder_text : CrystalString) : Void
    fun bg_QTextEdit_placeholderText_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_setTextCursor_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QTextEdit_textCursor_(_self_ : QTextEdit*) : QTextCursor*
    fun bg_QTextEdit_isReadOnly_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setReadOnly_bool(_self_ : QTextEdit*, ro : Bool) : Void
    fun bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(_self_ : QTextEdit*, flags : TextInteractionFlags) : Void
    fun bg_QTextEdit_textInteractionFlags_(_self_ : QTextEdit*) : TextInteractionFlags
    fun bg_QTextEdit_fontPointSize_(_self_ : QTextEdit*) : Float64
    fun bg_QTextEdit_fontFamily_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_fontWeight_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_fontUnderline_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_fontItalic_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_textColor_(_self_ : QTextEdit*) : QColor*
    fun bg_QTextEdit_textBackgroundColor_(_self_ : QTextEdit*) : QColor*
    fun bg_QTextEdit_currentFont_(_self_ : QTextEdit*) : QFont*
    fun bg_QTextEdit_alignment_(_self_ : QTextEdit*) : Alignment
    fun bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(_self_ : QTextEdit*, modifier : QTextCharFormat*) : Void
    fun bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(_self_ : QTextEdit*, format : QTextCharFormat*) : Void
    fun bg_QTextEdit_currentCharFormat_(_self_ : QTextEdit*) : QTextCharFormat*
    fun bg_QTextEdit_autoFormatting_(_self_ : QTextEdit*) : TextEdit::AutoFormatting
    fun bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(_self_ : QTextEdit*, features : TextEdit::AutoFormatting) : Void
    fun bg_QTextEdit_tabChangesFocus_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setTabChangesFocus_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setDocumentTitle_const_QString_R(_self_ : QTextEdit*, title : CrystalString) : Void
    fun bg_QTextEdit_documentTitle_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_isUndoRedoEnabled_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setUndoRedoEnabled_bool(_self_ : QTextEdit*, enable : Bool) : Void
    fun bg_QTextEdit_lineWrapMode_(_self_ : QTextEdit*) : TextEdit::LineWrapMode
    fun bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(_self_ : QTextEdit*, mode : TextEdit::LineWrapMode) : Void
    fun bg_QTextEdit_lineWrapColumnOrWidth_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_setLineWrapColumnOrWidth_int(_self_ : QTextEdit*, w : Int32) : Void
    fun bg_QTextEdit_wordWrapMode_(_self_ : QTextEdit*) : TextOption::WrapMode
    fun bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(_self_ : QTextEdit*, policy : TextOption::WrapMode) : Void
    fun bg_QTextEdit_find_const_QString_R(_self_ : QTextEdit*, exp : CrystalString) : Bool
    fun bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(_self_ : QTextEdit*, exp : CrystalString, options : TextDocument::FindFlags) : Bool
    fun bg_QTextEdit_find_const_QRegExp_R(_self_ : QTextEdit*, exp : QRegExp*) : Bool
    fun bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(_self_ : QTextEdit*, exp : QRegExp*, options : TextDocument::FindFlags) : Bool
    fun bg_QTextEdit_find_const_QRegularExpression_R(_self_ : QTextEdit*, exp : QRegularExpression*) : Bool
    fun bg_QTextEdit_find_const_QRegularExpression_R_QTextDocument__FindFlags(_self_ : QTextEdit*, exp : QRegularExpression*, options : TextDocument::FindFlags) : Bool
    fun bg_QTextEdit_toPlainText_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_toHtml_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_toMarkdown_(_self_ : QTextEdit*) : CrystalString
    fun bg_QTextEdit_toMarkdown_QTextDocument__MarkdownFeatures(_self_ : QTextEdit*, features : TextDocument::MarkdownFeatures) : CrystalString
    fun bg_QTextEdit_ensureCursorVisible_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_loadResource_int_const_QUrl_R(_self_ : QTextEdit*, type : Int32, name : QUrl*) : CrystalVariant
    fun bg_QTextEdit_createStandardContextMenu_(_self_ : QTextEdit*) : QMenu*
    fun bg_QTextEdit_createStandardContextMenu_const_QPoint_R(_self_ : QTextEdit*, position : QPoint) : QMenu*
    fun bg_QTextEdit_cursorForPosition_const_QPoint_R(_self_ : QTextEdit*, pos : QPoint) : QTextCursor*
    fun bg_QTextEdit_cursorRect_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : QRect*
    fun bg_QTextEdit_cursorRect_(_self_ : QTextEdit*) : QRect*
    fun bg_QTextEdit_anchorAt_const_QPoint_R(_self_ : QTextEdit*, pos : QPoint) : CrystalString
    fun bg_QTextEdit_overwriteMode_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setOverwriteMode_bool(_self_ : QTextEdit*, overwrite : Bool) : Void
    fun bg_QTextEdit_tabStopDistance_(_self_ : QTextEdit*) : Float64
    fun bg_QTextEdit_setTabStopDistance_qreal(_self_ : QTextEdit*, distance : Float64) : Void
    fun bg_QTextEdit_cursorWidth_(_self_ : QTextEdit*) : Int32
    fun bg_QTextEdit_setCursorWidth_int(_self_ : QTextEdit*, width : Int32) : Void
    fun bg_QTextEdit_acceptRichText_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_setAcceptRichText_bool(_self_ : QTextEdit*, accept : Bool) : Void
    fun bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(_self_ : QTextEdit*, operation : TextCursor::MoveOperation, mode : TextCursor::MoveMode) : Void
    fun bg_QTextEdit_canPaste_(_self_ : QTextEdit*) : Bool
    fun bg_QTextEdit_print_QPagedPaintDevice_X(_self_ : QTextEdit*, printer : QPagedPaintDevice*) : Void
    fun bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery(_self_ : QTextEdit*, property : InputMethodQuery) : CrystalVariant
    fun bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery_QVariant(_self_ : QTextEdit*, query : InputMethodQuery, argument : CrystalVariant) : CrystalVariant
    fun bg_QTextEdit_setFontPointSize_qreal(_self_ : QTextEdit*, s : Float64) : Void
    fun bg_QTextEdit_setFontFamily_const_QString_R(_self_ : QTextEdit*, font_family : CrystalString) : Void
    fun bg_QTextEdit_setFontWeight_int(_self_ : QTextEdit*, w : Int32) : Void
    fun bg_QTextEdit_setFontUnderline_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setFontItalic_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_setTextColor_const_QColor_R(_self_ : QTextEdit*, c : QColor*) : Void
    fun bg_QTextEdit_setTextBackgroundColor_const_QColor_R(_self_ : QTextEdit*, c : QColor*) : Void
    fun bg_QTextEdit_setCurrentFont_const_QFont_R(_self_ : QTextEdit*, f : QFont*) : Void
    fun bg_QTextEdit_setAlignment_Qt__Alignment(_self_ : QTextEdit*, a : Alignment) : Void
    fun bg_QTextEdit_setPlainText_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_setHtml_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_setMarkdown_const_QString_R(_self_ : QTextEdit*, markdown : CrystalString) : Void
    fun bg_QTextEdit_setText_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_cut_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_copy_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_paste_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_undo_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_redo_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_clear_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_selectAll_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_insertPlainText_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_insertHtml_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_append_const_QString_R(_self_ : QTextEdit*, text : CrystalString) : Void
    fun bg_QTextEdit_scrollToAnchor_const_QString_R(_self_ : QTextEdit*, name : CrystalString) : Void
    fun bg_QTextEdit_zoomIn_int(_self_ : QTextEdit*, range : Int32) : Void
    fun bg_QTextEdit_zoomOut_int(_self_ : QTextEdit*, range : Int32) : Void
    fun bg_QTextEdit_textChanged_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_undoAvailable_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_redoAvailable_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(_self_ : QTextEdit*, format : QTextCharFormat*) : Void
    fun bg_QTextEdit_copyAvailable_bool(_self_ : QTextEdit*, b : Bool) : Void
    fun bg_QTextEdit_selectionChanged_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_cursorPositionChanged_(_self_ : QTextEdit*) : Void
    fun bg_QTextEdit_event_QEvent_X(_self_ : QTextEdit*, e : QEvent*) : Bool
    fun bg_QTextEdit_timerEvent_QTimerEvent_X(_self_ : QTextEdit*, e : QTimerEvent*) : Void
    fun bg_QTextEdit_keyPressEvent_QKeyEvent_X(_self_ : QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(_self_ : QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_resizeEvent_QResizeEvent_X(_self_ : QTextEdit*, e : QResizeEvent*) : Void
    fun bg_QTextEdit_paintEvent_QPaintEvent_X(_self_ : QTextEdit*, e : QPaintEvent*) : Void
    fun bg_QTextEdit_mousePressEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_focusNextPrevChild_bool(_self_ : QTextEdit*, next_ : Bool) : Bool
    fun bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(_self_ : QTextEdit*, e : QContextMenuEvent*) : Void
    fun bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(_self_ : QTextEdit*, e : QDragEnterEvent*) : Void
    fun bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QTextEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(_self_ : QTextEdit*, e : QDragMoveEvent*) : Void
    fun bg_QTextEdit_dropEvent_QDropEvent_X(_self_ : QTextEdit*, e : QDropEvent*) : Void
    fun bg_QTextEdit_focusInEvent_QFocusEvent_X(_self_ : QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_focusOutEvent_QFocusEvent_X(_self_ : QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_showEvent_QShowEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTextEdit_changeEvent_QEvent_X(_self_ : QTextEdit*, e : QEvent*) : Void
    fun bg_QTextEdit_wheelEvent_QWheelEvent_X(_self_ : QTextEdit*, e : QWheelEvent*) : Void
    fun bg_QTextEdit_createMimeDataFromSelection_(_self_ : QTextEdit*) : QMimeData*
    fun bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(_self_ : QTextEdit*, source : QMimeData*) : Bool
    fun bg_QTextEdit_insertFromMimeData_const_QMimeData_X(_self_ : QTextEdit*, source : QMimeData*) : Void
    fun bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QTextEdit__CONSTRUCT_QTextEditPrivate_R_QWidget_X(dd : QTextEditPrivate*, parent : QWidget*) : QTextEdit*
    fun bg_QTextEdit_scrollContentsBy_int_int(_self_ : QTextEdit*, dx : Int32, dy : Int32) : Void
    fun bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QTextEdit_zoomInF_float(_self_ : QTextEdit*, range : Float32) : Void
    fun bg_QAbstractScrollArea_minimumSizeHint_(_self_ : QTextEdit*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_(_self_ : QTextEdit*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_QWidget_X(_self_ : QTextEdit*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportEvent_QEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportSizeHint_(_self_ : QTextEdit*) : QSize*
    fun bg_QTextEdit_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTextEdit_CONNECT_textChanged_CrystalProc_void_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_CONNECT_undoAvailable_CrystalProc_void__bool_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_CONNECT_redoAvailable_CrystalProc_void__bool_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_CONNECT_currentCharFormatChanged_CrystalProc_void__const_QTextCharFormat_R_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_CONNECT_copyAvailable_CrystalProc_void__bool_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_CONNECT_selectionChanged_CrystalProc_void_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_CONNECT_cursorPositionChanged_CrystalProc_void_(_self_ : QTextEdit*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTextEdit_loadResource_SUPER_int_const_QUrl_R(_self_ : QTextEdit*, type : Int32, name : QUrl*) : CrystalVariant
    fun bg_QTextEdit_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QTextEdit*, property : InputMethodQuery) : CrystalVariant
    fun bg_QTextEdit_event_SUPER_QEvent_X(_self_ : QTextEdit*, e : QEvent*) : Bool
    fun bg_QTextEdit_timerEvent_SUPER_QTimerEvent_X(_self_ : QTextEdit*, e : QTimerEvent*) : Void
    fun bg_QTextEdit_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QTextEdit*, e : QKeyEvent*) : Void
    fun bg_QTextEdit_resizeEvent_SUPER_QResizeEvent_X(_self_ : QTextEdit*, e : QResizeEvent*) : Void
    fun bg_QTextEdit_paintEvent_SUPER_QPaintEvent_X(_self_ : QTextEdit*, e : QPaintEvent*) : Void
    fun bg_QTextEdit_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QTextEdit*, e : QMouseEvent*) : Void
    fun bg_QTextEdit_focusNextPrevChild_SUPER_bool(_self_ : QTextEdit*, next_ : Bool) : Bool
    fun bg_QTextEdit_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QTextEdit*, e : QContextMenuEvent*) : Void
    fun bg_QTextEdit_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QTextEdit*, e : QDragEnterEvent*) : Void
    fun bg_QTextEdit_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QTextEdit*, e : QDragLeaveEvent*) : Void
    fun bg_QTextEdit_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QTextEdit*, e : QDragMoveEvent*) : Void
    fun bg_QTextEdit_dropEvent_SUPER_QDropEvent_X(_self_ : QTextEdit*, e : QDropEvent*) : Void
    fun bg_QTextEdit_focusInEvent_SUPER_QFocusEvent_X(_self_ : QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QTextEdit*, e : QFocusEvent*) : Void
    fun bg_QTextEdit_showEvent_SUPER_QShowEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QTextEdit_changeEvent_SUPER_QEvent_X(_self_ : QTextEdit*, e : QEvent*) : Void
    fun bg_QTextEdit_wheelEvent_SUPER_QWheelEvent_X(_self_ : QTextEdit*, e : QWheelEvent*) : Void
    fun bg_QTextEdit_createMimeDataFromSelection_SUPER_(_self_ : QTextEdit*) : QMimeData*
    fun bg_QTextEdit_canInsertFromMimeData_SUPER_const_QMimeData_X(_self_ : QTextEdit*, source : QMimeData*) : Bool
    fun bg_QTextEdit_insertFromMimeData_SUPER_const_QMimeData_X(_self_ : QTextEdit*, source : QMimeData*) : Void
    fun bg_QTextEdit_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QTextEdit_scrollContentsBy_SUPER_int_int(_self_ : QTextEdit*, dx : Int32, dy : Int32) : Void
    fun bg_QTextEdit_doSetTextCursor_SUPER_const_QTextCursor_R(_self_ : QTextEdit*, cursor : QTextCursor*) : Void
    fun bg_QAbstractScrollArea_minimumSizeHint_SUPER_(_self_ : QTextEdit*) : QSize*
    fun bg_QAbstractScrollArea_sizeHint_SUPER_(_self_ : QTextEdit*) : QSize*
    fun bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(_self_ : QTextEdit*, viewport : QWidget*) : Void
    fun bg_QAbstractScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QObject*, unnamed_arg_1 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportEvent_SUPER_QEvent_X(_self_ : QTextEdit*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QAbstractScrollArea_viewportSizeHint_SUPER_(_self_ : QTextEdit*) : QSize*
    fun bg_BgInherit_QTextEdit_JUMPTABLE_BgJumptable_QTextEdit_R(_self_ : QTextEdit*, table : BgJumptable_QTextEdit*) : Void
    fun bg_QProgressBar_metaObject_(_self_ : QProgressBar*) : QMetaObject*
    fun bg_QProgressBar_qt_metacast_const_char_X(_self_ : QProgressBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QProgressBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QProgressBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QProgressBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QProgressBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QProgressBar__CONSTRUCT_QWidget_X(parent : QWidget*) : QProgressBar*
    fun bg_QProgressBar_minimum_(_self_ : QProgressBar*) : Int32
    fun bg_QProgressBar_maximum_(_self_ : QProgressBar*) : Int32
    fun bg_QProgressBar_value_(_self_ : QProgressBar*) : Int32
    fun bg_QProgressBar_text_(_self_ : QProgressBar*) : CrystalString
    fun bg_QProgressBar_setTextVisible_bool(_self_ : QProgressBar*, visible : Bool) : Void
    fun bg_QProgressBar_isTextVisible_(_self_ : QProgressBar*) : Bool
    fun bg_QProgressBar_alignment_(_self_ : QProgressBar*) : Alignment
    fun bg_QProgressBar_setAlignment_Qt__Alignment(_self_ : QProgressBar*, alignment : Alignment) : Void
    fun bg_QProgressBar_sizeHint_(_self_ : QProgressBar*) : QSize*
    fun bg_QProgressBar_minimumSizeHint_(_self_ : QProgressBar*) : QSize*
    fun bg_QProgressBar_orientation_(_self_ : QProgressBar*) : Orientation
    fun bg_QProgressBar_setInvertedAppearance_bool(_self_ : QProgressBar*, invert : Bool) : Void
    fun bg_QProgressBar_invertedAppearance_(_self_ : QProgressBar*) : Bool
    fun bg_QProgressBar_setTextDirection_QProgressBar__Direction(_self_ : QProgressBar*, text_direction : ProgressBar::Direction) : Void
    fun bg_QProgressBar_textDirection_(_self_ : QProgressBar*) : ProgressBar::Direction
    fun bg_QProgressBar_setFormat_const_QString_R(_self_ : QProgressBar*, format : CrystalString) : Void
    fun bg_QProgressBar_resetFormat_(_self_ : QProgressBar*) : Void
    fun bg_QProgressBar_format_(_self_ : QProgressBar*) : CrystalString
    fun bg_QProgressBar_reset_(_self_ : QProgressBar*) : Void
    fun bg_QProgressBar_setRange_int_int(_self_ : QProgressBar*, minimum : Int32, maximum : Int32) : Void
    fun bg_QProgressBar_setMinimum_int(_self_ : QProgressBar*, minimum : Int32) : Void
    fun bg_QProgressBar_setMaximum_int(_self_ : QProgressBar*, maximum : Int32) : Void
    fun bg_QProgressBar_setValue_int(_self_ : QProgressBar*, value : Int32) : Void
    fun bg_QProgressBar_setOrientation_Qt__Orientation(_self_ : QProgressBar*, unnamed_arg_0 : Orientation) : Void
    fun bg_QProgressBar_valueChanged_int(_self_ : QProgressBar*, value : Int32) : Void
    fun bg_QProgressBar_event_QEvent_X(_self_ : QProgressBar*, e : QEvent*) : Bool
    fun bg_QProgressBar_paintEvent_QPaintEvent_X(_self_ : QProgressBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QProgressBar_initStyleOption_QStyleOptionProgressBar_X(_self_ : QProgressBar*, option : QStyleOptionProgressBar*) : Void
    fun bg_QWidget_devType_(_self_ : QProgressBar*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QProgressBar*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_int(_self_ : QProgressBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QProgressBar*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QProgressBar*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QProgressBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QProgressBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QProgressBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QProgressBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QProgressBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QProgressBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QProgressBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QProgressBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QProgressBar*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QProgressBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QProgressBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QProgressBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QProgressBar*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QProgressBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QProgressBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QProgressBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QProgressBar*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QProgressBar*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QProgressBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QProgressBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QProgressBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QProgressBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QProgressBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QProgressBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QProgressBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QProgressBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QProgressBar*, next_ : Bool) : Bool
    fun bg_QProgressBar_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QProgressBar_CONNECT_valueChanged_CrystalProc_void__int_(_self_ : QProgressBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QProgressBar_text_SUPER_(_self_ : QProgressBar*) : CrystalString
    fun bg_QProgressBar_sizeHint_SUPER_(_self_ : QProgressBar*) : QSize*
    fun bg_QProgressBar_minimumSizeHint_SUPER_(_self_ : QProgressBar*) : QSize*
    fun bg_QProgressBar_event_SUPER_QEvent_X(_self_ : QProgressBar*, e : QEvent*) : Bool
    fun bg_QProgressBar_paintEvent_SUPER_QPaintEvent_X(_self_ : QProgressBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QWidget_devType_SUPER_(_self_ : QProgressBar*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QProgressBar*, visible : Bool) : Void
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QProgressBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QProgressBar*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QProgressBar*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QProgressBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QProgressBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QProgressBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QProgressBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QProgressBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QProgressBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QProgressBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QProgressBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QProgressBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QProgressBar*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QProgressBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QProgressBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QProgressBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QProgressBar*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QProgressBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QProgressBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QProgressBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QProgressBar*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QProgressBar*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QProgressBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QProgressBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_SUPER_QEvent_X(_self_ : QProgressBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QProgressBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QProgressBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QProgressBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QProgressBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QProgressBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QProgressBar*, next_ : Bool) : Bool
    fun bg_BgInherit_QProgressBar_JUMPTABLE_BgJumptable_QProgressBar_R(_self_ : QProgressBar*, table : BgJumptable_QProgressBar*) : Void
    fun bg_QRadioButton_metaObject_(_self_ : QRadioButton*) : QMetaObject*
    fun bg_QRadioButton_qt_metacast_const_char_X(_self_ : QRadioButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QRadioButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QRadioButton_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QRadioButton_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QRadioButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QRadioButton__CONSTRUCT_QWidget_X(parent : QWidget*) : QRadioButton*
    fun bg_QRadioButton__CONSTRUCT_const_QString_R_QWidget_X(text : CrystalString, parent : QWidget*) : QRadioButton*
    fun bg_QRadioButton_sizeHint_(_self_ : QRadioButton*) : QSize*
    fun bg_QRadioButton_minimumSizeHint_(_self_ : QRadioButton*) : QSize*
    fun bg_QRadioButton_event_QEvent_X(_self_ : QRadioButton*, e : QEvent*) : Bool
    fun bg_QRadioButton_hitButton_const_QPoint_R(_self_ : QRadioButton*, unnamed_arg_0 : QPoint) : Bool
    fun bg_QRadioButton_paintEvent_QPaintEvent_X(_self_ : QRadioButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QRadioButton_mouseMoveEvent_QMouseEvent_X(_self_ : QRadioButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QRadioButton_initStyleOption_QStyleOptionButton_X(_self_ : QRadioButton*, button : QStyleOptionButton*) : Void
    fun bg_QAbstractButton_checkStateSet_(_self_ : QRadioButton*) : Void
    fun bg_QAbstractButton_nextCheckState_(_self_ : QRadioButton*) : Void
    fun bg_QAbstractButton_keyPressEvent_QKeyEvent_X(_self_ : QRadioButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : QRadioButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_QMouseEvent_X(_self_ : QRadioButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(_self_ : QRadioButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_QFocusEvent_X(_self_ : QRadioButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_QFocusEvent_X(_self_ : QRadioButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_QEvent_X(_self_ : QRadioButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_QTimerEvent_X(_self_ : QRadioButton*, e : QTimerEvent*) : Void
    fun bg_QRadioButton_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QRadioButton_sizeHint_SUPER_(_self_ : QRadioButton*) : QSize*
    fun bg_QRadioButton_minimumSizeHint_SUPER_(_self_ : QRadioButton*) : QSize*
    fun bg_QRadioButton_event_SUPER_QEvent_X(_self_ : QRadioButton*, e : QEvent*) : Bool
    fun bg_QRadioButton_hitButton_SUPER_const_QPoint_R(_self_ : QRadioButton*, unnamed_arg_0 : QPoint) : Bool
    fun bg_QRadioButton_paintEvent_SUPER_QPaintEvent_X(_self_ : QRadioButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QRadioButton_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QRadioButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QAbstractButton_checkStateSet_SUPER_(_self_ : QRadioButton*) : Void
    fun bg_QAbstractButton_nextCheckState_SUPER_(_self_ : QRadioButton*) : Void
    fun bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QRadioButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QRadioButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QRadioButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QRadioButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(_self_ : QRadioButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QRadioButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_changeEvent_SUPER_QEvent_X(_self_ : QRadioButton*, e : QEvent*) : Void
    fun bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(_self_ : QRadioButton*, e : QTimerEvent*) : Void
    fun bg_BgInherit_QRadioButton_JUMPTABLE_BgJumptable_QRadioButton_R(_self_ : QRadioButton*, table : BgJumptable_QRadioButton*) : Void
    fun bg_QScrollBar_metaObject_(_self_ : QScrollBar*) : QMetaObject*
    fun bg_QScrollBar_qt_metacast_const_char_X(_self_ : QScrollBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QScrollBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QScrollBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QScrollBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QScrollBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QScrollBar__CONSTRUCT_QWidget_X(parent : QWidget*) : QScrollBar*
    fun bg_QScrollBar__CONSTRUCT_Qt__Orientation_QWidget_X(unnamed_arg_0 : Orientation, parent : QWidget*) : QScrollBar*
    fun bg_QScrollBar_sizeHint_(_self_ : QScrollBar*) : QSize*
    fun bg_QScrollBar_event_QEvent_X(_self_ : QScrollBar*, event : QEvent*) : Bool
    fun bg_QScrollBar_wheelEvent_QWheelEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QScrollBar_paintEvent_QPaintEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QScrollBar_mousePressEvent_QMouseEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_mouseMoveEvent_QMouseEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_hideEvent_QHideEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange(_self_ : QScrollBar*, change : AbstractSlider::SliderChange) : Void
    fun bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QScrollBar_initStyleOption_QStyleOptionSlider_X(_self_ : QScrollBar*, option : QStyleOptionSlider*) : Void
    fun bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(_self_ : QScrollBar*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_QTimerEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_QEvent_X(_self_ : QScrollBar*, e : QEvent*) : Void
    fun bg_QScrollBar_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QScrollBar_sizeHint_SUPER_(_self_ : QScrollBar*) : QSize*
    fun bg_QScrollBar_event_SUPER_QEvent_X(_self_ : QScrollBar*, event : QEvent*) : Bool
    fun bg_QScrollBar_wheelEvent_SUPER_QWheelEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QWheelEvent*) : Void
    fun bg_QScrollBar_paintEvent_SUPER_QPaintEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QScrollBar_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QScrollBar_hideEvent_SUPER_QHideEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QHideEvent*) : Void
    fun bg_QScrollBar_sliderChange_SUPER_QAbstractSlider__SliderChange(_self_ : QScrollBar*, change : AbstractSlider::SliderChange) : Void
    fun bg_QScrollBar_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QContextMenuEvent*) : Void
    fun bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QScrollBar*, ev : QKeyEvent*) : Void
    fun bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(_self_ : QScrollBar*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(_self_ : QScrollBar*, e : QEvent*) : Void
    fun bg_BgInherit_QScrollBar_JUMPTABLE_BgJumptable_QScrollBar_R(_self_ : QScrollBar*, table : BgJumptable_QScrollBar*) : Void
    fun bg_QSpinBox_metaObject_(_self_ : QSpinBox*) : QMetaObject*
    fun bg_QSpinBox_qt_metacast_const_char_X(_self_ : QSpinBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QSpinBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSpinBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QSpinBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QSpinBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QSpinBox__CONSTRUCT_QWidget_X(parent : QWidget*) : QSpinBox*
    fun bg_QSpinBox_value_(_self_ : QSpinBox*) : Int32
    fun bg_QSpinBox_prefix_(_self_ : QSpinBox*) : CrystalString
    fun bg_QSpinBox_setPrefix_const_QString_R(_self_ : QSpinBox*, prefix : CrystalString) : Void
    fun bg_QSpinBox_suffix_(_self_ : QSpinBox*) : CrystalString
    fun bg_QSpinBox_setSuffix_const_QString_R(_self_ : QSpinBox*, suffix : CrystalString) : Void
    fun bg_QSpinBox_cleanText_(_self_ : QSpinBox*) : CrystalString
    fun bg_QSpinBox_singleStep_(_self_ : QSpinBox*) : Int32
    fun bg_QSpinBox_setSingleStep_int(_self_ : QSpinBox*, val : Int32) : Void
    fun bg_QSpinBox_minimum_(_self_ : QSpinBox*) : Int32
    fun bg_QSpinBox_setMinimum_int(_self_ : QSpinBox*, min : Int32) : Void
    fun bg_QSpinBox_maximum_(_self_ : QSpinBox*) : Int32
    fun bg_QSpinBox_setMaximum_int(_self_ : QSpinBox*, max : Int32) : Void
    fun bg_QSpinBox_setRange_int_int(_self_ : QSpinBox*, min : Int32, max : Int32) : Void
    fun bg_QSpinBox_stepType_(_self_ : QSpinBox*) : AbstractSpinBox::StepType
    fun bg_QSpinBox_setStepType_QAbstractSpinBox__StepType(_self_ : QSpinBox*, step_type : AbstractSpinBox::StepType) : Void
    fun bg_QSpinBox_displayIntegerBase_(_self_ : QSpinBox*) : Int32
    fun bg_QSpinBox_setDisplayIntegerBase_int(_self_ : QSpinBox*, base : Int32) : Void
    fun bg_QSpinBox_event_QEvent_X(_self_ : QSpinBox*, event : QEvent*) : Bool
    fun bg_QSpinBox_valueFromText_const_QString_R(_self_ : QSpinBox*, text : CrystalString) : Int32
    fun bg_QSpinBox_textFromValue_int(_self_ : QSpinBox*, val : Int32) : CrystalString
    fun bg_QSpinBox_setValue_int(_self_ : QSpinBox*, val : Int32) : Void
    fun bg_QSpinBox_textChanged_const_QString_R(_self_ : QSpinBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QAbstractSpinBox_sizeHint_(_self_ : QSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_(_self_ : QSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(_self_ : QSpinBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_stepBy_int(_self_ : QSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_clear_(_self_ : QSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(_self_ : QSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(_self_ : QSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(_self_ : QSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(_self_ : QSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(_self_ : QSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(_self_ : QSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(_self_ : QSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_QEvent_X(_self_ : QSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(_self_ : QSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_QHideEvent_X(_self_ : QSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(_self_ : QSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(_self_ : QSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(_self_ : QSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(_self_ : QSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(_self_ : QSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_QShowEvent_X(_self_ : QSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_(_self_ : QSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_QSpinBox_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QSpinBox_CONNECT_valueChanged_CrystalProc_void__int_(_self_ : QSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QSpinBox_CONNECT_textChanged_CrystalProc_void__const_QString_R_(_self_ : QSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QSpinBox_CONNECT_valueChanged_CrystalProc_void__const_QString_R_(_self_ : QSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QSpinBox_event_SUPER_QEvent_X(_self_ : QSpinBox*, event : QEvent*) : Bool
    fun bg_QSpinBox_valueFromText_SUPER_const_QString_R(_self_ : QSpinBox*, text : CrystalString) : Int32
    fun bg_QSpinBox_textFromValue_SUPER_int(_self_ : QSpinBox*, val : Int32) : CrystalString
    fun bg_QAbstractSpinBox_sizeHint_SUPER_(_self_ : QSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_SUPER_(_self_ : QSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QSpinBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_stepBy_SUPER_int(_self_ : QSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_clear_SUPER_(_self_ : QSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(_self_ : QSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_SUPER_QWheelEvent_X(_self_ : QSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_SUPER_QFocusEvent_X(_self_ : QSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(_self_ : QSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(_self_ : QSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(_self_ : QSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(_self_ : QSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_SUPER_QPaintEvent_X(_self_ : QSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(_self_ : QSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_SUPER_(_self_ : QSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_BgInherit_QSpinBox_JUMPTABLE_BgJumptable_QSpinBox_R(_self_ : QSpinBox*, table : BgJumptable_QSpinBox*) : Void
    fun bg_QDoubleSpinBox_metaObject_(_self_ : QDoubleSpinBox*) : QMetaObject*
    fun bg_QDoubleSpinBox_qt_metacast_const_char_X(_self_ : QDoubleSpinBox*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QDoubleSpinBox*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QDoubleSpinBox_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QDoubleSpinBox__CONSTRUCT_QWidget_X(parent : QWidget*) : QDoubleSpinBox*
    fun bg_QDoubleSpinBox_value_(_self_ : QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_prefix_(_self_ : QDoubleSpinBox*) : CrystalString
    fun bg_QDoubleSpinBox_setPrefix_const_QString_R(_self_ : QDoubleSpinBox*, prefix : CrystalString) : Void
    fun bg_QDoubleSpinBox_suffix_(_self_ : QDoubleSpinBox*) : CrystalString
    fun bg_QDoubleSpinBox_setSuffix_const_QString_R(_self_ : QDoubleSpinBox*, suffix : CrystalString) : Void
    fun bg_QDoubleSpinBox_cleanText_(_self_ : QDoubleSpinBox*) : CrystalString
    fun bg_QDoubleSpinBox_singleStep_(_self_ : QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_setSingleStep_double(_self_ : QDoubleSpinBox*, val : Float64) : Void
    fun bg_QDoubleSpinBox_minimum_(_self_ : QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_setMinimum_double(_self_ : QDoubleSpinBox*, min : Float64) : Void
    fun bg_QDoubleSpinBox_maximum_(_self_ : QDoubleSpinBox*) : Float64
    fun bg_QDoubleSpinBox_setMaximum_double(_self_ : QDoubleSpinBox*, max : Float64) : Void
    fun bg_QDoubleSpinBox_setRange_double_double(_self_ : QDoubleSpinBox*, min : Float64, max : Float64) : Void
    fun bg_QDoubleSpinBox_stepType_(_self_ : QDoubleSpinBox*) : AbstractSpinBox::StepType
    fun bg_QDoubleSpinBox_setStepType_QAbstractSpinBox__StepType(_self_ : QDoubleSpinBox*, step_type : AbstractSpinBox::StepType) : Void
    fun bg_QDoubleSpinBox_decimals_(_self_ : QDoubleSpinBox*) : Int32
    fun bg_QDoubleSpinBox_setDecimals_int(_self_ : QDoubleSpinBox*, prec : Int32) : Void
    fun bg_QDoubleSpinBox_valueFromText_const_QString_R(_self_ : QDoubleSpinBox*, text : CrystalString) : Float64
    fun bg_QDoubleSpinBox_textFromValue_double(_self_ : QDoubleSpinBox*, val : Float64) : CrystalString
    fun bg_QDoubleSpinBox_setValue_double(_self_ : QDoubleSpinBox*, val : Float64) : Void
    fun bg_QDoubleSpinBox_textChanged_const_QString_R(_self_ : QDoubleSpinBox*, unnamed_arg_0 : CrystalString) : Void
    fun bg_QAbstractSpinBox_sizeHint_(_self_ : QDoubleSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_(_self_ : QDoubleSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_event_QEvent_X(_self_ : QDoubleSpinBox*, event : QEvent*) : Bool
    fun bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(_self_ : QDoubleSpinBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_stepBy_int(_self_ : QDoubleSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_clear_(_self_ : QDoubleSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(_self_ : QDoubleSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(_self_ : QDoubleSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(_self_ : QDoubleSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(_self_ : QDoubleSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(_self_ : QDoubleSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(_self_ : QDoubleSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(_self_ : QDoubleSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_QEvent_X(_self_ : QDoubleSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(_self_ : QDoubleSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_QHideEvent_X(_self_ : QDoubleSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(_self_ : QDoubleSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(_self_ : QDoubleSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(_self_ : QDoubleSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(_self_ : QDoubleSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(_self_ : QDoubleSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_QShowEvent_X(_self_ : QDoubleSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_(_self_ : QDoubleSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_QDoubleSpinBox_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QDoubleSpinBox_CONNECT_valueChanged_CrystalProc_void__double_(_self_ : QDoubleSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDoubleSpinBox_CONNECT_textChanged_CrystalProc_void__const_QString_R_(_self_ : QDoubleSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDoubleSpinBox_CONNECT_valueChanged_CrystalProc_void__const_QString_R_(_self_ : QDoubleSpinBox*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QDoubleSpinBox_valueFromText_SUPER_const_QString_R(_self_ : QDoubleSpinBox*, text : CrystalString) : Float64
    fun bg_QDoubleSpinBox_textFromValue_SUPER_double(_self_ : QDoubleSpinBox*, val : Float64) : CrystalString
    fun bg_QAbstractSpinBox_sizeHint_SUPER_(_self_ : QDoubleSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_minimumSizeHint_SUPER_(_self_ : QDoubleSpinBox*) : QSize*
    fun bg_QAbstractSpinBox_event_SUPER_QEvent_X(_self_ : QDoubleSpinBox*, event : QEvent*) : Bool
    fun bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QDoubleSpinBox*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractSpinBox_stepBy_SUPER_int(_self_ : QDoubleSpinBox*, steps : Int32) : Void
    fun bg_QAbstractSpinBox_clear_SUPER_(_self_ : QDoubleSpinBox*) : Void
    fun bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(_self_ : QDoubleSpinBox*, event : QResizeEvent*) : Void
    fun bg_QAbstractSpinBox_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QDoubleSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QDoubleSpinBox*, event : QKeyEvent*) : Void
    fun bg_QAbstractSpinBox_wheelEvent_SUPER_QWheelEvent_X(_self_ : QDoubleSpinBox*, event : QWheelEvent*) : Void
    fun bg_QAbstractSpinBox_focusInEvent_SUPER_QFocusEvent_X(_self_ : QDoubleSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QDoubleSpinBox*, event : QFocusEvent*) : Void
    fun bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QDoubleSpinBox*, event : QContextMenuEvent*) : Void
    fun bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(_self_ : QDoubleSpinBox*, event : QEvent*) : Void
    fun bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(_self_ : QDoubleSpinBox*, event : QCloseEvent*) : Void
    fun bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(_self_ : QDoubleSpinBox*, event : QHideEvent*) : Void
    fun bg_QAbstractSpinBox_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QDoubleSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QDoubleSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QDoubleSpinBox*, event : QMouseEvent*) : Void
    fun bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(_self_ : QDoubleSpinBox*, event : QTimerEvent*) : Void
    fun bg_QAbstractSpinBox_paintEvent_SUPER_QPaintEvent_X(_self_ : QDoubleSpinBox*, event : QPaintEvent*) : Void
    fun bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(_self_ : QDoubleSpinBox*, event : QShowEvent*) : Void
    fun bg_QAbstractSpinBox_stepEnabled_SUPER_(_self_ : QDoubleSpinBox*) : AbstractSpinBox::StepEnabled
    fun bg_BgInherit_QDoubleSpinBox_JUMPTABLE_BgJumptable_QDoubleSpinBox_R(_self_ : QDoubleSpinBox*, table : BgJumptable_QDoubleSpinBox*) : Void
    fun bg_QStackedLayout_metaObject_(_self_ : QStackedLayout*) : QMetaObject*
    fun bg_QStackedLayout_qt_metacast_const_char_X(_self_ : QStackedLayout*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QStackedLayout*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QStackedLayout_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QStackedLayout_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QStackedLayout_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QStackedLayout__CONSTRUCT_() : QStackedLayout*
    fun bg_QStackedLayout__CONSTRUCT_QWidget_X(parent : QWidget*) : QStackedLayout*
    fun bg_QStackedLayout__CONSTRUCT_QLayout_X(parent_layout : QLayout*) : QStackedLayout*
    fun bg_QStackedLayout_addWidget_QWidget_X(_self_ : QStackedLayout*, w : QWidget*) : Int32
    fun bg_QStackedLayout_insertWidget_int_QWidget_X(_self_ : QStackedLayout*, index : Int32, w : QWidget*) : Int32
    fun bg_QStackedLayout_currentWidget_(_self_ : QStackedLayout*) : QWidget*
    fun bg_QStackedLayout_currentIndex_(_self_ : QStackedLayout*) : Int32
    fun bg_QStackedLayout_widget_int(_self_ : QStackedLayout*, unnamed_arg_0 : Int32) : QWidget*
    fun bg_QStackedLayout_count_(_self_ : QStackedLayout*) : Int32
    fun bg_QStackedLayout_stackingMode_(_self_ : QStackedLayout*) : StackedLayout::StackingMode
    fun bg_QStackedLayout_setStackingMode_QStackedLayout__StackingMode(_self_ : QStackedLayout*, stacking_mode : StackedLayout::StackingMode) : Void
    fun bg_QStackedLayout_addItem_QLayoutItem_X(_self_ : QStackedLayout*, item : QLayoutItem*) : Void
    fun bg_QStackedLayout_sizeHint_(_self_ : QStackedLayout*) : QSize*
    fun bg_QStackedLayout_minimumSize_(_self_ : QStackedLayout*) : QSize*
    fun bg_QStackedLayout_itemAt_int(_self_ : QStackedLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QStackedLayout_takeAt_int(_self_ : QStackedLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QStackedLayout_setGeometry_const_QRect_R(_self_ : QStackedLayout*, rect : QRect*) : Void
    fun bg_QStackedLayout_hasHeightForWidth_(_self_ : QStackedLayout*) : Bool
    fun bg_QStackedLayout_heightForWidth_int(_self_ : QStackedLayout*, width : Int32) : Int32
    fun bg_QStackedLayout_widgetRemoved_int(_self_ : QStackedLayout*, index : Int32) : Void
    fun bg_QStackedLayout_currentChanged_int(_self_ : QStackedLayout*, index : Int32) : Void
    fun bg_QStackedLayout_setCurrentIndex_int(_self_ : QStackedLayout*, index : Int32) : Void
    fun bg_QStackedLayout_setCurrentWidget_QWidget_X(_self_ : QStackedLayout*, w : QWidget*) : Void
    fun bg_QLayout_invalidate_(_self_ : QStackedLayout*) : Void
    fun bg_QLayout_geometry_(_self_ : QStackedLayout*) : QRect*
    fun bg_QLayout_expandingDirections_(_self_ : QStackedLayout*) : Orientations
    fun bg_QLayout_maximumSize_(_self_ : QStackedLayout*) : QSize*
    fun bg_QLayout_indexOf_QWidget_X(_self_ : QStackedLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_(_self_ : QStackedLayout*) : Bool
    fun bg_QLayout_controlTypes_(_self_ : QStackedLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_(_self_ : QStackedLayout*) : QLayout*
    fun bg_QLayout_childEvent_QChildEvent_X(_self_ : QStackedLayout*, e : QChildEvent*) : Void
    fun bg_QStackedLayout_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QStackedLayout_CONNECT_widgetRemoved_CrystalProc_void__int_(_self_ : QStackedLayout*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QStackedLayout_CONNECT_currentChanged_CrystalProc_void__int_(_self_ : QStackedLayout*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QStackedLayout_count_SUPER_(_self_ : QStackedLayout*) : Int32
    fun bg_QStackedLayout_addItem_SUPER_QLayoutItem_X(_self_ : QStackedLayout*, item : QLayoutItem*) : Void
    fun bg_QStackedLayout_sizeHint_SUPER_(_self_ : QStackedLayout*) : QSize*
    fun bg_QStackedLayout_minimumSize_SUPER_(_self_ : QStackedLayout*) : QSize*
    fun bg_QStackedLayout_itemAt_SUPER_int(_self_ : QStackedLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QStackedLayout_takeAt_SUPER_int(_self_ : QStackedLayout*, unnamed_arg_0 : Int32) : QLayoutItem*
    fun bg_QStackedLayout_setGeometry_SUPER_const_QRect_R(_self_ : QStackedLayout*, rect : QRect*) : Void
    fun bg_QStackedLayout_hasHeightForWidth_SUPER_(_self_ : QStackedLayout*) : Bool
    fun bg_QStackedLayout_heightForWidth_SUPER_int(_self_ : QStackedLayout*, width : Int32) : Int32
    fun bg_QLayout_invalidate_SUPER_(_self_ : QStackedLayout*) : Void
    fun bg_QLayout_geometry_SUPER_(_self_ : QStackedLayout*) : QRect*
    fun bg_QLayout_expandingDirections_SUPER_(_self_ : QStackedLayout*) : Orientations
    fun bg_QLayout_maximumSize_SUPER_(_self_ : QStackedLayout*) : QSize*
    fun bg_QLayout_indexOf_SUPER_QWidget_X(_self_ : QStackedLayout*, unnamed_arg_0 : QWidget*) : Int32
    fun bg_QLayout_isEmpty_SUPER_(_self_ : QStackedLayout*) : Bool
    fun bg_QLayout_controlTypes_SUPER_(_self_ : QStackedLayout*) : SizePolicy::ControlTypes
    fun bg_QLayout_layout_SUPER_(_self_ : QStackedLayout*) : QLayout*
    fun bg_QLayout_childEvent_SUPER_QChildEvent_X(_self_ : QStackedLayout*, e : QChildEvent*) : Void
    fun bg_BgInherit_QStackedLayout_JUMPTABLE_BgJumptable_QStackedLayout_R(_self_ : QStackedLayout*, table : BgJumptable_QStackedLayout*) : Void
    fun bg_QStatusBar_metaObject_(_self_ : QStatusBar*) : QMetaObject*
    fun bg_QStatusBar_qt_metacast_const_char_X(_self_ : QStatusBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QStatusBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QStatusBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QStatusBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QStatusBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QStatusBar__CONSTRUCT_QWidget_X(parent : QWidget*) : QStatusBar*
    fun bg_QStatusBar_addWidget_QWidget_X_int(_self_ : QStatusBar*, widget : QWidget*, stretch : Int32) : Void
    fun bg_QStatusBar_insertWidget_int_QWidget_X_int(_self_ : QStatusBar*, index : Int32, widget : QWidget*, stretch : Int32) : Int32
    fun bg_QStatusBar_addPermanentWidget_QWidget_X_int(_self_ : QStatusBar*, widget : QWidget*, stretch : Int32) : Void
    fun bg_QStatusBar_insertPermanentWidget_int_QWidget_X_int(_self_ : QStatusBar*, index : Int32, widget : QWidget*, stretch : Int32) : Int32
    fun bg_QStatusBar_removeWidget_QWidget_X(_self_ : QStatusBar*, widget : QWidget*) : Void
    fun bg_QStatusBar_setSizeGripEnabled_bool(_self_ : QStatusBar*, unnamed_arg_0 : Bool) : Void
    fun bg_QStatusBar_isSizeGripEnabled_(_self_ : QStatusBar*) : Bool
    fun bg_QStatusBar_currentMessage_(_self_ : QStatusBar*) : CrystalString
    fun bg_QStatusBar_showMessage_const_QString_R_int(_self_ : QStatusBar*, text : CrystalString, timeout : Int32) : Void
    fun bg_QStatusBar_clearMessage_(_self_ : QStatusBar*) : Void
    fun bg_QStatusBar_messageChanged_const_QString_R(_self_ : QStatusBar*, text : CrystalString) : Void
    fun bg_QStatusBar_showEvent_QShowEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QStatusBar_paintEvent_QPaintEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QStatusBar_resizeEvent_QResizeEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QStatusBar_reformat_(_self_ : QStatusBar*) : Void
    fun bg_QStatusBar_hideOrShow_(_self_ : QStatusBar*) : Void
    fun bg_QStatusBar_event_QEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWidget_devType_(_self_ : QStatusBar*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QStatusBar*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QStatusBar*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QStatusBar*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QStatusBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QStatusBar*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QStatusBar*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QStatusBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QStatusBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QStatusBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QStatusBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QStatusBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QStatusBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QStatusBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QStatusBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QStatusBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QStatusBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QStatusBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_QActionEvent_X(_self_ : QStatusBar*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QStatusBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QStatusBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QStatusBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QStatusBar*, event : QDropEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QStatusBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QStatusBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_QEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QStatusBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QStatusBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QStatusBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QStatusBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QStatusBar*, next_ : Bool) : Bool
    fun bg_QStatusBar_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QStatusBar_CONNECT_messageChanged_CrystalProc_void__const_QString_R_(_self_ : QStatusBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QStatusBar_showEvent_SUPER_QShowEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QShowEvent*) : Void
    fun bg_QStatusBar_paintEvent_SUPER_QPaintEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QStatusBar_resizeEvent_SUPER_QResizeEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QResizeEvent*) : Void
    fun bg_QStatusBar_event_SUPER_QEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QStatusBar*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QStatusBar*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QStatusBar*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QStatusBar*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QStatusBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QStatusBar*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QStatusBar*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QStatusBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QStatusBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QStatusBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QStatusBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QStatusBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QStatusBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QStatusBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QStatusBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QStatusBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QStatusBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QStatusBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QStatusBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_actionEvent_SUPER_QActionEvent_X(_self_ : QStatusBar*, event : QActionEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QStatusBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QStatusBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QStatusBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QStatusBar*, event : QDropEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QStatusBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QStatusBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_changeEvent_SUPER_QEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QStatusBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QStatusBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QStatusBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QStatusBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QStatusBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QStatusBar*, next_ : Bool) : Bool
    fun bg_BgInherit_QStatusBar_JUMPTABLE_BgJumptable_QStatusBar_R(_self_ : QStatusBar*, table : BgJumptable_QStatusBar*) : Void
    fun bg_QStyledItemDelegate_metaObject_(_self_ : QStyledItemDelegate*) : QMetaObject*
    fun bg_QStyledItemDelegate_qt_metacast_const_char_X(_self_ : QStyledItemDelegate*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QStyledItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QStyledItemDelegate*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QStyledItemDelegate_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QStyledItemDelegate_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QStyledItemDelegate_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QStyledItemDelegate__CONSTRUCT_QObject_X(parent : QObject*) : QStyledItemDelegate*
    fun bg_QStyledItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, painter : QPainter*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, option : QStyleOptionViewItem*, index : QModelIndex*) : QSize*
    fun bg_QStyledItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, parent : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : QWidget*
    fun bg_QStyledItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, model : QAbstractItemModel*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_itemEditorFactory_(_self_ : QStyledItemDelegate*) : QItemEditorFactory*
    fun bg_QStyledItemDelegate_setItemEditorFactory_QItemEditorFactory_X(_self_ : QStyledItemDelegate*, factory : QItemEditorFactory*) : Void
    fun bg_QStyledItemDelegate_displayText_const_QVariant_R_const_QLocale_R(_self_ : QStyledItemDelegate*, value : CrystalVariant, locale : QLocale*) : CrystalString
    fun bg_QStyledItemDelegate_initStyleOption_QStyleOptionViewItem_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_eventFilter_QObject_X_QEvent_X(_self_ : QStyledItemDelegate*, object : QObject*, event : QEvent*) : Bool
    fun bg_QStyledItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, event : QEvent*, model : QAbstractItemModel*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, event : QHelpEvent*, view : QAbstractItemView*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_paintingRoles_(_self_ : QStyledItemDelegate*) : ContainerQVectorInt*
    fun bg_QStyledItemDelegate_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QStyledItemDelegate_paint_SUPER_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, painter : QPainter*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_sizeHint_SUPER_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, option : QStyleOptionViewItem*, index : QModelIndex*) : QSize*
    fun bg_QStyledItemDelegate_createEditor_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, parent : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : QWidget*
    fun bg_QStyledItemDelegate_setEditorData_SUPER_QWidget_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_setModelData_SUPER_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, model : QAbstractItemModel*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_updateEditorGeometry_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_displayText_SUPER_const_QVariant_R_const_QLocale_R(_self_ : QStyledItemDelegate*, value : CrystalVariant, locale : QLocale*) : CrystalString
    fun bg_QStyledItemDelegate_initStyleOption_SUPER_QStyleOptionViewItem_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, option : QStyleOptionViewItem*, index : QModelIndex*) : Void
    fun bg_QStyledItemDelegate_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QStyledItemDelegate*, object : QObject*, event : QEvent*) : Bool
    fun bg_QStyledItemDelegate_editorEvent_SUPER_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, event : QEvent*, model : QAbstractItemModel*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_destroyEditor_SUPER_QWidget_X_const_QModelIndex_R(_self_ : QStyledItemDelegate*, editor : QWidget*, index : QModelIndex*) : Void
    fun bg_QAbstractItemDelegate_helpEvent_SUPER_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(_self_ : QStyledItemDelegate*, event : QHelpEvent*, view : QAbstractItemView*, option : QStyleOptionViewItem*, index : QModelIndex*) : Bool
    fun bg_QAbstractItemDelegate_paintingRoles_SUPER_(_self_ : QStyledItemDelegate*) : ContainerQVectorInt*
    fun bg_BgInherit_QStyledItemDelegate_JUMPTABLE_BgJumptable_QStyledItemDelegate_R(_self_ : QStyledItemDelegate*, table : BgJumptable_QStyledItemDelegate*) : Void
    fun bg_QSystemTrayIcon_metaObject_(_self_ : QSystemTrayIcon*) : QMetaObject*
    fun bg_QSystemTrayIcon_qt_metacast_const_char_X(_self_ : QSystemTrayIcon*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QSystemTrayIcon*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QSystemTrayIcon_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QSystemTrayIcon__CONSTRUCT_QObject_X(parent : QObject*) : QSystemTrayIcon*
    fun bg_QSystemTrayIcon__CONSTRUCT_const_QIcon_R_QObject_X(icon : QIcon*, parent : QObject*) : QSystemTrayIcon*
    fun bg_QSystemTrayIcon_setContextMenu_QMenu_X(_self_ : QSystemTrayIcon*, menu : QMenu*) : Void
    fun bg_QSystemTrayIcon_contextMenu_(_self_ : QSystemTrayIcon*) : QMenu*
    fun bg_QSystemTrayIcon_icon_(_self_ : QSystemTrayIcon*) : QIcon*
    fun bg_QSystemTrayIcon_setIcon_const_QIcon_R(_self_ : QSystemTrayIcon*, icon : QIcon*) : Void
    fun bg_QSystemTrayIcon_toolTip_(_self_ : QSystemTrayIcon*) : CrystalString
    fun bg_QSystemTrayIcon_setToolTip_const_QString_R(_self_ : QSystemTrayIcon*, tip : CrystalString) : Void
    fun bg_QSystemTrayIcon_isSystemTrayAvailable_STATIC_() : Bool
    fun bg_QSystemTrayIcon_supportsMessages_STATIC_() : Bool
    fun bg_QSystemTrayIcon_geometry_(_self_ : QSystemTrayIcon*) : QRect*
    fun bg_QSystemTrayIcon_isVisible_(_self_ : QSystemTrayIcon*) : Bool
    fun bg_QSystemTrayIcon_setVisible_bool(_self_ : QSystemTrayIcon*, visible : Bool) : Void
    fun bg_QSystemTrayIcon_show_(_self_ : QSystemTrayIcon*) : Void
    fun bg_QSystemTrayIcon_hide_(_self_ : QSystemTrayIcon*) : Void
    fun bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_const_QIcon_R_int(_self_ : QSystemTrayIcon*, title : CrystalString, msg : CrystalString, icon : QIcon*, msecs : Int32) : Void
    fun bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_QSystemTrayIcon__MessageIcon_int(_self_ : QSystemTrayIcon*, title : CrystalString, msg : CrystalString, icon : SystemTrayIcon::MessageIcon, msecs : Int32) : Void
    fun bg_QSystemTrayIcon_activated_QSystemTrayIcon__ActivationReason(_self_ : QSystemTrayIcon*, reason : SystemTrayIcon::ActivationReason) : Void
    fun bg_QSystemTrayIcon_messageClicked_(_self_ : QSystemTrayIcon*) : Void
    fun bg_QSystemTrayIcon_event_QEvent_X(_self_ : QSystemTrayIcon*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_QObject_X_QEvent_X(_self_ : QSystemTrayIcon*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_QTimerEvent_X(_self_ : QSystemTrayIcon*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_QChildEvent_X(_self_ : QSystemTrayIcon*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_QEvent_X(_self_ : QSystemTrayIcon*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_const_QMetaMethod_R(_self_ : QSystemTrayIcon*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_const_QMetaMethod_R(_self_ : QSystemTrayIcon*, signal : QMetaMethod*) : Void
    fun bg_QSystemTrayIcon_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QSystemTrayIcon_CONNECT_activated_CrystalProc_void__QSystemTrayIcon__ActivationReason_(_self_ : QSystemTrayIcon*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QSystemTrayIcon_CONNECT_messageClicked_CrystalProc_void_(_self_ : QSystemTrayIcon*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QSystemTrayIcon_event_SUPER_QEvent_X(_self_ : QSystemTrayIcon*, event : QEvent*) : Bool
    fun bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QSystemTrayIcon*, watched : QObject*, event : QEvent*) : Bool
    fun bg_QObject_timerEvent_SUPER_QTimerEvent_X(_self_ : QSystemTrayIcon*, event : QTimerEvent*) : Void
    fun bg_QObject_childEvent_SUPER_QChildEvent_X(_self_ : QSystemTrayIcon*, event : QChildEvent*) : Void
    fun bg_QObject_customEvent_SUPER_QEvent_X(_self_ : QSystemTrayIcon*, event : QEvent*) : Void
    fun bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(_self_ : QSystemTrayIcon*, signal : QMetaMethod*) : Void
    fun bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(_self_ : QSystemTrayIcon*, signal : QMetaMethod*) : Void
    fun bg_BgInherit_QSystemTrayIcon_JUMPTABLE_BgJumptable_QSystemTrayIcon_R(_self_ : QSystemTrayIcon*, table : BgJumptable_QSystemTrayIcon*) : Void
    fun bg_QTableView_metaObject_(_self_ : QTableView*) : QMetaObject*
    fun bg_QTableView_qt_metacast_const_char_X(_self_ : QTableView*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTableView_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTableView*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTableView_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTableView_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTableView_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTableView__CONSTRUCT_QWidget_X(parent : QWidget*) : QTableView*
    fun bg_QTableView_setModel_QAbstractItemModel_X(_self_ : QTableView*, model : QAbstractItemModel*) : Void
    fun bg_QTableView_setRootIndex_const_QModelIndex_R(_self_ : QTableView*, index : QModelIndex*) : Void
    fun bg_QTableView_setSelectionModel_QItemSelectionModel_X(_self_ : QTableView*, selection_model : QItemSelectionModel*) : Void
    fun bg_QTableView_doItemsLayout_(_self_ : QTableView*) : Void
    fun bg_QTableView_horizontalHeader_(_self_ : QTableView*) : QHeaderView*
    fun bg_QTableView_verticalHeader_(_self_ : QTableView*) : QHeaderView*
    fun bg_QTableView_setHorizontalHeader_QHeaderView_X(_self_ : QTableView*, header : QHeaderView*) : Void
    fun bg_QTableView_setVerticalHeader_QHeaderView_X(_self_ : QTableView*, header : QHeaderView*) : Void
    fun bg_QTableView_rowViewportPosition_int(_self_ : QTableView*, row : Int32) : Int32
    fun bg_QTableView_rowAt_int(_self_ : QTableView*, y : Int32) : Int32
    fun bg_QTableView_setRowHeight_int_int(_self_ : QTableView*, row : Int32, height : Int32) : Void
    fun bg_QTableView_rowHeight_int(_self_ : QTableView*, row : Int32) : Int32
    fun bg_QTableView_columnViewportPosition_int(_self_ : QTableView*, column : Int32) : Int32
    fun bg_QTableView_columnAt_int(_self_ : QTableView*, x : Int32) : Int32
    fun bg_QTableView_setColumnWidth_int_int(_self_ : QTableView*, column : Int32, width : Int32) : Void
    fun bg_QTableView_columnWidth_int(_self_ : QTableView*, column : Int32) : Int32
    fun bg_QTableView_isRowHidden_int(_self_ : QTableView*, row : Int32) : Bool
    fun bg_QTableView_setRowHidden_int_bool(_self_ : QTableView*, row : Int32, hide : Bool) : Void
    fun bg_QTableView_isColumnHidden_int(_self_ : QTableView*, column : Int32) : Bool
    fun bg_QTableView_setColumnHidden_int_bool(_self_ : QTableView*, column : Int32, hide : Bool) : Void
    fun bg_QTableView_setSortingEnabled_bool(_self_ : QTableView*, enable : Bool) : Void
    fun bg_QTableView_isSortingEnabled_(_self_ : QTableView*) : Bool
    fun bg_QTableView_showGrid_(_self_ : QTableView*) : Bool
    fun bg_QTableView_gridStyle_(_self_ : QTableView*) : PenStyle
    fun bg_QTableView_setGridStyle_Qt__PenStyle(_self_ : QTableView*, style : PenStyle) : Void
    fun bg_QTableView_setWordWrap_bool(_self_ : QTableView*, on : Bool) : Void
    fun bg_QTableView_wordWrap_(_self_ : QTableView*) : Bool
    fun bg_QTableView_setCornerButtonEnabled_bool(_self_ : QTableView*, enable : Bool) : Void
    fun bg_QTableView_isCornerButtonEnabled_(_self_ : QTableView*) : Bool
    fun bg_QTableView_visualRect_const_QModelIndex_R(_self_ : QTableView*, index : QModelIndex*) : QRect*
    fun bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint(_self_ : QTableView*, index : QModelIndex*, hint : AbstractItemDelegate::ScrollHint) : Void
    fun bg_QTableView_indexAt_const_QPoint_R(_self_ : QTableView*, p : QPoint) : QModelIndex*
    fun bg_QTableView_setSpan_int_int_int_int(_self_ : QTableView*, row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
    fun bg_QTableView_rowSpan_int_int(_self_ : QTableView*, row : Int32, column : Int32) : Int32
    fun bg_QTableView_columnSpan_int_int(_self_ : QTableView*, row : Int32, column : Int32) : Int32
    fun bg_QTableView_clearSpans_(_self_ : QTableView*) : Void
    fun bg_QTableView_selectRow_int(_self_ : QTableView*, row : Int32) : Void
    fun bg_QTableView_selectColumn_int(_self_ : QTableView*, column : Int32) : Void
    fun bg_QTableView_hideRow_int(_self_ : QTableView*, row : Int32) : Void
    fun bg_QTableView_hideColumn_int(_self_ : QTableView*, column : Int32) : Void
    fun bg_QTableView_showRow_int(_self_ : QTableView*, row : Int32) : Void
    fun bg_QTableView_showColumn_int(_self_ : QTableView*, column : Int32) : Void
    fun bg_QTableView_resizeRowToContents_int(_self_ : QTableView*, row : Int32) : Void
    fun bg_QTableView_resizeRowsToContents_(_self_ : QTableView*) : Void
    fun bg_QTableView_resizeColumnToContents_int(_self_ : QTableView*, column : Int32) : Void
    fun bg_QTableView_resizeColumnsToContents_(_self_ : QTableView*) : Void
    fun bg_QTableView_setShowGrid_bool(_self_ : QTableView*, show : Bool) : Void
    fun bg_QTableView_rowMoved_int_int_int(_self_ : QTableView*, row : Int32, old_index : Int32, new_index : Int32) : Void
    fun bg_QTableView_columnMoved_int_int_int(_self_ : QTableView*, column : Int32, old_index : Int32, new_index : Int32) : Void
    fun bg_QTableView_rowResized_int_int_int(_self_ : QTableView*, row : Int32, old_height : Int32, new_height : Int32) : Void
    fun bg_QTableView_columnResized_int_int_int(_self_ : QTableView*, column : Int32, old_width : Int32, new_width : Int32) : Void
    fun bg_QTableView_rowCountChanged_int_int(_self_ : QTableView*, old_count : Int32, new_count : Int32) : Void
    fun bg_QTableView_columnCountChanged_int_int(_self_ : QTableView*, old_count : Int32, new_count : Int32) : Void
    fun bg_QTableView__CONSTRUCT_QTableViewPrivate_R_QWidget_X(unnamed_arg_0 : QTableViewPrivate*, parent : QWidget*) : QTableView*
    fun bg_QTableView_scrollContentsBy_int_int(_self_ : QTableView*, dx : Int32, dy : Int32) : Void
    fun bg_QTableView_viewOptions_(_self_ : QTableView*) : QStyleOptionViewItem*
    fun bg_QTableView_paintEvent_QPaintEvent_X(_self_ : QTableView*, e : QPaintEvent*) : Void
    fun bg_QTableView_timerEvent_QTimerEvent_X(_self_ : QTableView*, event : QTimerEvent*) : Void
    fun bg_QTableView_horizontalOffset_(_self_ : QTableView*) : Int32
    fun bg_QTableView_verticalOffset_(_self_ : QTableView*) : Int32
    fun bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(_self_ : QTableView*, cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : QModelIndex*
    fun bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags(_self_ : QTableView*, rect : QRect*, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QTableView_visualRegionForSelection_const_QItemSelection_R(_self_ : QTableView*, selection : QItemSelection*) : QRegion*
    fun bg_QTableView_selectedIndexes_(_self_ : QTableView*) : QModelIndexList*
    fun bg_QTableView_updateGeometries_(_self_ : QTableView*) : Void
    fun bg_QTableView_viewportSizeHint_(_self_ : QTableView*) : QSize*
    fun bg_QTableView_sizeHintForRow_int(_self_ : QTableView*, row : Int32) : Int32
    fun bg_QTableView_sizeHintForColumn_int(_self_ : QTableView*, column : Int32) : Int32
    fun bg_QTableView_verticalScrollbarAction_int(_self_ : QTableView*, action : Int32) : Void
    fun bg_QTableView_horizontalScrollbarAction_int(_self_ : QTableView*, action : Int32) : Void
    fun bg_QTableView_isIndexHidden_const_QModelIndex_R(_self_ : QTableView*, index : QModelIndex*) : Bool
    fun bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R(_self_ : QTableView*, selected : QItemSelection*, deselected : QItemSelection*) : Void
    fun bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R(_self_ : QTableView*, current : QModelIndex*, previous : QModelIndex*) : Void
    fun bg_QAbstractItemView_keyboardSearch_const_QString_R(_self_ : QTableView*, search : CrystalString) : Void
    fun bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery(_self_ : QTableView*, query : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractItemView_reset_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_selectAll_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(_self_ : QTableView*, top_left : QModelIndex*, bottom_right : QModelIndex*, roles : ContainerQVectorInt*) : Void
    fun bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int(_self_ : QTableView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int(_self_ : QTableView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_updateEditorData_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_updateEditorGeometries_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_verticalScrollbarValueChanged_int(_self_ : QTableView*, value : Int32) : Void
    fun bg_QAbstractItemView_horizontalScrollbarValueChanged_int(_self_ : QTableView*, value : Int32) : Void
    fun bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint(_self_ : QTableView*, editor : QWidget*, hint : AbstractItemDelegate::EndEditHint) : Void
    fun bg_QAbstractItemView_commitData_QWidget_X(_self_ : QTableView*, editor : QWidget*) : Void
    fun bg_QAbstractItemView_editorDestroyed_QObject_X(_self_ : QTableView*, editor : QObject*) : Void
    fun bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(_self_ : QTableView*, index : QModelIndex*, trigger : AbstractItemDelegate::EditTrigger, event : QEvent*) : Bool
    fun bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X(_self_ : QTableView*, index : QModelIndex*, event : QEvent*) : ItemSelectionModel::SelectionFlags
    fun bg_QAbstractItemView_startDrag_Qt__DropActions(_self_ : QTableView*, supported_actions : DropActions) : Void
    fun bg_QAbstractItemView_focusNextPrevChild_bool(_self_ : QTableView*, next_ : Bool) : Bool
    fun bg_QAbstractItemView_event_QEvent_X(_self_ : QTableView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_viewportEvent_QEvent_X(_self_ : QTableView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_mousePressEvent_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X(_self_ : QTableView*, event : QDragEnterEvent*) : Void
    fun bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X(_self_ : QTableView*, event : QDragMoveEvent*) : Void
    fun bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QTableView*, event : QDragLeaveEvent*) : Void
    fun bg_QAbstractItemView_dropEvent_QDropEvent_X(_self_ : QTableView*, event : QDropEvent*) : Void
    fun bg_QAbstractItemView_focusInEvent_QFocusEvent_X(_self_ : QTableView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_focusOutEvent_QFocusEvent_X(_self_ : QTableView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_keyPressEvent_QKeyEvent_X(_self_ : QTableView*, event : QKeyEvent*) : Void
    fun bg_QAbstractItemView_resizeEvent_QResizeEvent_X(_self_ : QTableView*, event : QResizeEvent*) : Void
    fun bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X(_self_ : QTableView*, event : QInputMethodEvent*) : Void
    fun bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X(_self_ : QTableView*, object : QObject*, event : QEvent*) : Bool
    fun bg_QTableView_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTableView_setModel_SUPER_QAbstractItemModel_X(_self_ : QTableView*, model : QAbstractItemModel*) : Void
    fun bg_QTableView_setRootIndex_SUPER_const_QModelIndex_R(_self_ : QTableView*, index : QModelIndex*) : Void
    fun bg_QTableView_setSelectionModel_SUPER_QItemSelectionModel_X(_self_ : QTableView*, selection_model : QItemSelectionModel*) : Void
    fun bg_QTableView_doItemsLayout_SUPER_(_self_ : QTableView*) : Void
    fun bg_QTableView_visualRect_SUPER_const_QModelIndex_R(_self_ : QTableView*, index : QModelIndex*) : QRect*
    fun bg_QTableView_scrollTo_SUPER_const_QModelIndex_R_QAbstractItemView__ScrollHint(_self_ : QTableView*, index : QModelIndex*, hint : AbstractItemDelegate::ScrollHint) : Void
    fun bg_QTableView_indexAt_SUPER_const_QPoint_R(_self_ : QTableView*, p : QPoint) : QModelIndex*
    fun bg_QTableView_scrollContentsBy_SUPER_int_int(_self_ : QTableView*, dx : Int32, dy : Int32) : Void
    fun bg_QTableView_viewOptions_SUPER_(_self_ : QTableView*) : QStyleOptionViewItem*
    fun bg_QTableView_paintEvent_SUPER_QPaintEvent_X(_self_ : QTableView*, e : QPaintEvent*) : Void
    fun bg_QTableView_timerEvent_SUPER_QTimerEvent_X(_self_ : QTableView*, event : QTimerEvent*) : Void
    fun bg_QTableView_horizontalOffset_SUPER_(_self_ : QTableView*) : Int32
    fun bg_QTableView_verticalOffset_SUPER_(_self_ : QTableView*) : Int32
    fun bg_QTableView_moveCursor_SUPER_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(_self_ : QTableView*, cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : QModelIndex*
    fun bg_QTableView_setSelection_SUPER_const_QRect_R_QItemSelectionModel__SelectionFlags(_self_ : QTableView*, rect : QRect*, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QTableView_visualRegionForSelection_SUPER_const_QItemSelection_R(_self_ : QTableView*, selection : QItemSelection*) : QRegion*
    fun bg_QTableView_selectedIndexes_SUPER_(_self_ : QTableView*) : QModelIndexList*
    fun bg_QTableView_updateGeometries_SUPER_(_self_ : QTableView*) : Void
    fun bg_QTableView_viewportSizeHint_SUPER_(_self_ : QTableView*) : QSize*
    fun bg_QTableView_sizeHintForRow_SUPER_int(_self_ : QTableView*, row : Int32) : Int32
    fun bg_QTableView_sizeHintForColumn_SUPER_int(_self_ : QTableView*, column : Int32) : Int32
    fun bg_QTableView_verticalScrollbarAction_SUPER_int(_self_ : QTableView*, action : Int32) : Void
    fun bg_QTableView_horizontalScrollbarAction_SUPER_int(_self_ : QTableView*, action : Int32) : Void
    fun bg_QTableView_isIndexHidden_SUPER_const_QModelIndex_R(_self_ : QTableView*, index : QModelIndex*) : Bool
    fun bg_QTableView_selectionChanged_SUPER_const_QItemSelection_R_const_QItemSelection_R(_self_ : QTableView*, selected : QItemSelection*, deselected : QItemSelection*) : Void
    fun bg_QTableView_currentChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R(_self_ : QTableView*, current : QModelIndex*, previous : QModelIndex*) : Void
    fun bg_QAbstractItemView_keyboardSearch_SUPER_const_QString_R(_self_ : QTableView*, search : CrystalString) : Void
    fun bg_QAbstractItemView_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QTableView*, query : InputMethodQuery) : CrystalVariant
    fun bg_QAbstractItemView_reset_SUPER_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_selectAll_SUPER_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_dataChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(_self_ : QTableView*, top_left : QModelIndex*, bottom_right : QModelIndex*, roles : ContainerQVectorInt*) : Void
    fun bg_QAbstractItemView_rowsInserted_SUPER_const_QModelIndex_R_int_int(_self_ : QTableView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_rowsAboutToBeRemoved_SUPER_const_QModelIndex_R_int_int(_self_ : QTableView*, parent : QModelIndex*, start : Int32, end_ : Int32) : Void
    fun bg_QAbstractItemView_updateEditorData_SUPER_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_updateEditorGeometries_SUPER_(_self_ : QTableView*) : Void
    fun bg_QAbstractItemView_verticalScrollbarValueChanged_SUPER_int(_self_ : QTableView*, value : Int32) : Void
    fun bg_QAbstractItemView_horizontalScrollbarValueChanged_SUPER_int(_self_ : QTableView*, value : Int32) : Void
    fun bg_QAbstractItemView_closeEditor_SUPER_QWidget_X_QAbstractItemDelegate__EndEditHint(_self_ : QTableView*, editor : QWidget*, hint : AbstractItemDelegate::EndEditHint) : Void
    fun bg_QAbstractItemView_commitData_SUPER_QWidget_X(_self_ : QTableView*, editor : QWidget*) : Void
    fun bg_QAbstractItemView_editorDestroyed_SUPER_QObject_X(_self_ : QTableView*, editor : QObject*) : Void
    fun bg_QAbstractItemView_edit_SUPER_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(_self_ : QTableView*, index : QModelIndex*, trigger : AbstractItemDelegate::EditTrigger, event : QEvent*) : Bool
    fun bg_QAbstractItemView_selectionCommand_SUPER_const_QModelIndex_R_const_QEvent_X(_self_ : QTableView*, index : QModelIndex*, event : QEvent*) : ItemSelectionModel::SelectionFlags
    fun bg_QAbstractItemView_startDrag_SUPER_Qt__DropActions(_self_ : QTableView*, supported_actions : DropActions) : Void
    fun bg_QAbstractItemView_focusNextPrevChild_SUPER_bool(_self_ : QTableView*, next_ : Bool) : Bool
    fun bg_QAbstractItemView_event_SUPER_QEvent_X(_self_ : QTableView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_viewportEvent_SUPER_QEvent_X(_self_ : QTableView*, event : QEvent*) : Bool
    fun bg_QAbstractItemView_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QTableView*, event : QMouseEvent*) : Void
    fun bg_QAbstractItemView_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QTableView*, event : QDragEnterEvent*) : Void
    fun bg_QAbstractItemView_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QTableView*, event : QDragMoveEvent*) : Void
    fun bg_QAbstractItemView_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QTableView*, event : QDragLeaveEvent*) : Void
    fun bg_QAbstractItemView_dropEvent_SUPER_QDropEvent_X(_self_ : QTableView*, event : QDropEvent*) : Void
    fun bg_QAbstractItemView_focusInEvent_SUPER_QFocusEvent_X(_self_ : QTableView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QTableView*, event : QFocusEvent*) : Void
    fun bg_QAbstractItemView_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QTableView*, event : QKeyEvent*) : Void
    fun bg_QAbstractItemView_resizeEvent_SUPER_QResizeEvent_X(_self_ : QTableView*, event : QResizeEvent*) : Void
    fun bg_QAbstractItemView_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QTableView*, event : QInputMethodEvent*) : Void
    fun bg_QAbstractItemView_eventFilter_SUPER_QObject_X_QEvent_X(_self_ : QTableView*, object : QObject*, event : QEvent*) : Bool
    fun bg_BgInherit_QTableView_JUMPTABLE_BgJumptable_QTableView_R(_self_ : QTableView*, table : BgJumptable_QTableView*) : Void
    fun bg_QTableWidgetItem__CONSTRUCT_int(type : Int32) : QTableWidgetItem*
    fun bg_QTableWidgetItem__CONSTRUCT_const_QString_R_int(text : CrystalString, type : Int32) : QTableWidgetItem*
    fun bg_QTableWidgetItem__CONSTRUCT_const_QIcon_R_const_QString_R_int(icon : QIcon*, text : CrystalString, type : Int32) : QTableWidgetItem*
    fun bg_QTableWidgetItem_clone_(_self_ : QTableWidgetItem*) : QTableWidgetItem*
    fun bg_QTableWidgetItem_tableWidget_(_self_ : QTableWidgetItem*) : QTableWidget*
    fun bg_QTableWidgetItem_row_(_self_ : QTableWidgetItem*) : Int32
    fun bg_QTableWidgetItem_column_(_self_ : QTableWidgetItem*) : Int32
    fun bg_QTableWidgetItem_setSelected_bool(_self_ : QTableWidgetItem*, select_ : Bool) : Void
    fun bg_QTableWidgetItem_isSelected_(_self_ : QTableWidgetItem*) : Bool
    fun bg_QTableWidgetItem_flags_(_self_ : QTableWidgetItem*) : ItemFlags
    fun bg_QTableWidgetItem_setFlags_Qt__ItemFlags(_self_ : QTableWidgetItem*, flags : ItemFlags) : Void
    fun bg_QTableWidgetItem_text_(_self_ : QTableWidgetItem*) : CrystalString
    fun bg_QTableWidgetItem_setText_const_QString_R(_self_ : QTableWidgetItem*, text : CrystalString) : Void
    fun bg_QTableWidgetItem_icon_(_self_ : QTableWidgetItem*) : QIcon*
    fun bg_QTableWidgetItem_setIcon_const_QIcon_R(_self_ : QTableWidgetItem*, icon : QIcon*) : Void
    fun bg_QTableWidgetItem_statusTip_(_self_ : QTableWidgetItem*) : CrystalString
    fun bg_QTableWidgetItem_setStatusTip_const_QString_R(_self_ : QTableWidgetItem*, status_tip : CrystalString) : Void
    fun bg_QTableWidgetItem_toolTip_(_self_ : QTableWidgetItem*) : CrystalString
    fun bg_QTableWidgetItem_setToolTip_const_QString_R(_self_ : QTableWidgetItem*, tool_tip : CrystalString) : Void
    fun bg_QTableWidgetItem_whatsThis_(_self_ : QTableWidgetItem*) : CrystalString
    fun bg_QTableWidgetItem_setWhatsThis_const_QString_R(_self_ : QTableWidgetItem*, whats_this : CrystalString) : Void
    fun bg_QTableWidgetItem_font_(_self_ : QTableWidgetItem*) : QFont*
    fun bg_QTableWidgetItem_setFont_const_QFont_R(_self_ : QTableWidgetItem*, font : QFont*) : Void
    fun bg_QTableWidgetItem_textAlignment_(_self_ : QTableWidgetItem*) : Int32
    fun bg_QTableWidgetItem_setTextAlignment_int(_self_ : QTableWidgetItem*, alignment : Int32) : Void
    fun bg_QTableWidgetItem_background_(_self_ : QTableWidgetItem*) : QBrush*
    fun bg_QTableWidgetItem_setBackground_const_QBrush_R(_self_ : QTableWidgetItem*, brush : QBrush*) : Void
    fun bg_QTableWidgetItem_foreground_(_self_ : QTableWidgetItem*) : QBrush*
    fun bg_QTableWidgetItem_setForeground_const_QBrush_R(_self_ : QTableWidgetItem*, brush : QBrush*) : Void
    fun bg_QTableWidgetItem_checkState_(_self_ : QTableWidgetItem*) : CheckState
    fun bg_QTableWidgetItem_setCheckState_Qt__CheckState(_self_ : QTableWidgetItem*, state : CheckState) : Void
    fun bg_QTableWidgetItem_sizeHint_(_self_ : QTableWidgetItem*) : QSize*
    fun bg_QTableWidgetItem_setSizeHint_const_QSize_R(_self_ : QTableWidgetItem*, size : QSize*) : Void
    fun bg_QTableWidgetItem_data_int(_self_ : QTableWidgetItem*, role : Int32) : CrystalVariant
    fun bg_QTableWidgetItem_setData_int_const_QVariant_R(_self_ : QTableWidgetItem*, role : Int32, value : CrystalVariant) : Void
    fun bg_QTableWidgetItem_read_QDataStream_R(_self_ : QTableWidgetItem*, in_ : QDataStream*) : Void
    fun bg_QTableWidgetItem_write_QDataStream_R(_self_ : QTableWidgetItem*, out_ : QDataStream*) : Void
    fun bg_QTableWidgetItem_type_(_self_ : QTableWidgetItem*) : Int32
    fun bg_QTableWidgetItem_clone_SUPER_(_self_ : QTableWidgetItem*) : QTableWidgetItem*
    fun bg_QTableWidgetItem_data_SUPER_int(_self_ : QTableWidgetItem*, role : Int32) : CrystalVariant
    fun bg_QTableWidgetItem_setData_SUPER_int_const_QVariant_R(_self_ : QTableWidgetItem*, role : Int32, value : CrystalVariant) : Void
    fun bg_QTableWidgetItem_read_SUPER_QDataStream_R(_self_ : QTableWidgetItem*, in_ : QDataStream*) : Void
    fun bg_QTableWidgetItem_write_SUPER_QDataStream_R(_self_ : QTableWidgetItem*, out_ : QDataStream*) : Void
    fun bg_BgInherit_QTableWidgetItem_JUMPTABLE_BgJumptable_QTableWidgetItem_R(_self_ : QTableWidgetItem*, table : BgJumptable_QTableWidgetItem*) : Void
    fun bg_QTableWidget_metaObject_(_self_ : QTableWidget*) : QMetaObject*
    fun bg_QTableWidget_qt_metacast_const_char_X(_self_ : QTableWidget*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QTableWidget_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QTableWidget*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QTableWidget_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QTableWidget_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QTableWidget_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QTableWidget__CONSTRUCT_QWidget_X(parent : QWidget*) : QTableWidget*
    fun bg_QTableWidget__CONSTRUCT_int_int_QWidget_X(rows : Int32, columns : Int32, parent : QWidget*) : QTableWidget*
    fun bg_QTableWidget_setRowCount_int(_self_ : QTableWidget*, rows : Int32) : Void
    fun bg_QTableWidget_rowCount_(_self_ : QTableWidget*) : Int32
    fun bg_QTableWidget_setColumnCount_int(_self_ : QTableWidget*, columns : Int32) : Void
    fun bg_QTableWidget_columnCount_(_self_ : QTableWidget*) : Int32
    fun bg_QTableWidget_row_const_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Int32
    fun bg_QTableWidget_column_const_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Int32
    fun bg_QTableWidget_item_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_setItem_int_int_QTableWidgetItem_X(_self_ : QTableWidget*, row : Int32, column : Int32, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_takeItem_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_verticalHeaderItem_int(_self_ : QTableWidget*, row : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_setVerticalHeaderItem_int_QTableWidgetItem_X(_self_ : QTableWidget*, row : Int32, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_takeVerticalHeaderItem_int(_self_ : QTableWidget*, row : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_horizontalHeaderItem_int(_self_ : QTableWidget*, column : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_setHorizontalHeaderItem_int_QTableWidgetItem_X(_self_ : QTableWidget*, column : Int32, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_takeHorizontalHeaderItem_int(_self_ : QTableWidget*, column : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_setVerticalHeaderLabels_const_QStringList_R(_self_ : QTableWidget*, labels : QStringList*) : Void
    fun bg_QTableWidget_setHorizontalHeaderLabels_const_QStringList_R(_self_ : QTableWidget*, labels : QStringList*) : Void
    fun bg_QTableWidget_currentRow_(_self_ : QTableWidget*) : Int32
    fun bg_QTableWidget_currentColumn_(_self_ : QTableWidget*) : Int32
    fun bg_QTableWidget_currentItem_(_self_ : QTableWidget*) : QTableWidgetItem*
    fun bg_QTableWidget_setCurrentItem_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_setCurrentItem_QTableWidgetItem_X_QItemSelectionModel__SelectionFlags(_self_ : QTableWidget*, item : QTableWidgetItem*, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QTableWidget_setCurrentCell_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_setCurrentCell_int_int_QItemSelectionModel__SelectionFlags(_self_ : QTableWidget*, row : Int32, column : Int32, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QTableWidget_sortItems_int_Qt__SortOrder(_self_ : QTableWidget*, column : Int32, order : SortOrder) : Void
    fun bg_QTableWidget_setSortingEnabled_bool(_self_ : QTableWidget*, enable : Bool) : Void
    fun bg_QTableWidget_isSortingEnabled_(_self_ : QTableWidget*) : Bool
    fun bg_QTableWidget_editItem_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_openPersistentEditor_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_closePersistentEditor_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_isPersistentEditorOpen_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Bool
    fun bg_QTableWidget_cellWidget_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : QWidget*
    fun bg_QTableWidget_setCellWidget_int_int_QWidget_X(_self_ : QTableWidget*, row : Int32, column : Int32, widget : QWidget*) : Void
    fun bg_QTableWidget_removeCellWidget_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_setRangeSelected_const_QTableWidgetSelectionRange_R_bool(_self_ : QTableWidget*, range : QTableWidgetSelectionRange*, select_ : Bool) : Void
    fun bg_QTableWidget_selectedRanges_(_self_ : QTableWidget*) : ContainerQListQTableWidgetSelectionRange*
    fun bg_QTableWidget_selectedItems_(_self_ : QTableWidget*) : ContainerQListQTableWidgetItemX*
    fun bg_QTableWidget_findItems_const_QString_R_Qt__MatchFlags(_self_ : QTableWidget*, text : CrystalString, flags : MatchFlags) : ContainerQListQTableWidgetItemX*
    fun bg_QTableWidget_visualRow_int(_self_ : QTableWidget*, logical_row : Int32) : Int32
    fun bg_QTableWidget_visualColumn_int(_self_ : QTableWidget*, logical_column : Int32) : Int32
    fun bg_QTableWidget_itemAt_const_QPoint_R(_self_ : QTableWidget*, p : QPoint) : QTableWidgetItem*
    fun bg_QTableWidget_itemAt_int_int(_self_ : QTableWidget*, x : Int32, y : Int32) : QTableWidgetItem*
    fun bg_QTableWidget_visualItemRect_const_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : QRect*
    fun bg_QTableWidget_itemPrototype_(_self_ : QTableWidget*) : QTableWidgetItem*
    fun bg_QTableWidget_setItemPrototype_const_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_scrollToItem_const_QTableWidgetItem_X_QAbstractItemView__ScrollHint(_self_ : QTableWidget*, item : QTableWidgetItem*, hint : AbstractItemDelegate::ScrollHint) : Void
    fun bg_QTableWidget_insertRow_int(_self_ : QTableWidget*, row : Int32) : Void
    fun bg_QTableWidget_insertColumn_int(_self_ : QTableWidget*, column : Int32) : Void
    fun bg_QTableWidget_removeRow_int(_self_ : QTableWidget*, row : Int32) : Void
    fun bg_QTableWidget_removeColumn_int(_self_ : QTableWidget*, column : Int32) : Void
    fun bg_QTableWidget_clear_(_self_ : QTableWidget*) : Void
    fun bg_QTableWidget_clearContents_(_self_ : QTableWidget*) : Void
    fun bg_QTableWidget_itemPressed_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_itemClicked_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_itemDoubleClicked_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_itemActivated_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_itemEntered_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_itemChanged_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : Void
    fun bg_QTableWidget_currentItemChanged_QTableWidgetItem_X_QTableWidgetItem_X(_self_ : QTableWidget*, current : QTableWidgetItem*, previous : QTableWidgetItem*) : Void
    fun bg_QTableWidget_itemSelectionChanged_(_self_ : QTableWidget*) : Void
    fun bg_QTableWidget_cellPressed_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_cellClicked_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_cellDoubleClicked_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_cellActivated_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_cellEntered_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_cellChanged_int_int(_self_ : QTableWidget*, row : Int32, column : Int32) : Void
    fun bg_QTableWidget_currentCellChanged_int_int_int_int(_self_ : QTableWidget*, current_row : Int32, current_column : Int32, previous_row : Int32, previous_column : Int32) : Void
    fun bg_QTableWidget_event_QEvent_X(_self_ : QTableWidget*, e : QEvent*) : Bool
    fun bg_QTableWidget_mimeTypes_(_self_ : QTableWidget*) : QStringList*
    fun bg_QTableWidget_mimeData_const_QList_QTableWidgetItem_X_(_self_ : QTableWidget*, items : ContainerQListQTableWidgetItemX*) : QMimeData*
    fun bg_QTableWidget_dropMimeData_int_int_const_QMimeData_X_Qt__DropAction(_self_ : QTableWidget*, row : Int32, column : Int32, data : QMimeData*, action : DropAction) : Bool
    fun bg_QTableWidget_supportedDropActions_(_self_ : QTableWidget*) : DropActions
    fun bg_QTableWidget_items_const_QMimeData_X(_self_ : QTableWidget*, data : QMimeData*) : ContainerQListQTableWidgetItemX*
    fun bg_QTableWidget_indexFromItem_const_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : QModelIndex*
    fun bg_QTableWidget_indexFromItem_QTableWidgetItem_X(_self_ : QTableWidget*, item : QTableWidgetItem*) : QModelIndex*
    fun bg_QTableWidget_itemFromIndex_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : QTableWidgetItem*
    fun bg_QTableWidget_dropEvent_QDropEvent_X(_self_ : QTableWidget*, event : QDropEvent*) : Void
    fun bg_QTableView_setModel_QAbstractItemModel_X(_self_ : QTableWidget*, model : QAbstractItemModel*) : Void
    fun bg_QTableView_setRootIndex_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : Void
    fun bg_QTableView_setSelectionModel_QItemSelectionModel_X(_self_ : QTableWidget*, selection_model : QItemSelectionModel*) : Void
    fun bg_QTableView_doItemsLayout_(_self_ : QTableWidget*) : Void
    fun bg_QTableView_visualRect_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : QRect*
    fun bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint(_self_ : QTableWidget*, index : QModelIndex*, hint : AbstractItemDelegate::ScrollHint) : Void
    fun bg_QTableView_indexAt_const_QPoint_R(_self_ : QTableWidget*, p : QPoint) : QModelIndex*
    fun bg_QTableView_scrollContentsBy_int_int(_self_ : QTableWidget*, dx : Int32, dy : Int32) : Void
    fun bg_QTableView_viewOptions_(_self_ : QTableWidget*) : QStyleOptionViewItem*
    fun bg_QTableView_paintEvent_QPaintEvent_X(_self_ : QTableWidget*, e : QPaintEvent*) : Void
    fun bg_QTableView_timerEvent_QTimerEvent_X(_self_ : QTableWidget*, event : QTimerEvent*) : Void
    fun bg_QTableView_horizontalOffset_(_self_ : QTableWidget*) : Int32
    fun bg_QTableView_verticalOffset_(_self_ : QTableWidget*) : Int32
    fun bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(_self_ : QTableWidget*, cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : QModelIndex*
    fun bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags(_self_ : QTableWidget*, rect : QRect*, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QTableView_visualRegionForSelection_const_QItemSelection_R(_self_ : QTableWidget*, selection : QItemSelection*) : QRegion*
    fun bg_QTableView_selectedIndexes_(_self_ : QTableWidget*) : QModelIndexList*
    fun bg_QTableView_updateGeometries_(_self_ : QTableWidget*) : Void
    fun bg_QTableView_viewportSizeHint_(_self_ : QTableWidget*) : QSize*
    fun bg_QTableView_sizeHintForRow_int(_self_ : QTableWidget*, row : Int32) : Int32
    fun bg_QTableView_sizeHintForColumn_int(_self_ : QTableWidget*, column : Int32) : Int32
    fun bg_QTableView_verticalScrollbarAction_int(_self_ : QTableWidget*, action : Int32) : Void
    fun bg_QTableView_horizontalScrollbarAction_int(_self_ : QTableWidget*, action : Int32) : Void
    fun bg_QTableView_isIndexHidden_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : Bool
    fun bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R(_self_ : QTableWidget*, selected : QItemSelection*, deselected : QItemSelection*) : Void
    fun bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R(_self_ : QTableWidget*, current : QModelIndex*, previous : QModelIndex*) : Void
    fun bg_QTableWidget_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QTableWidget_CONNECT_itemPressed_CrystalProc_void__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_itemClicked_CrystalProc_void__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_itemDoubleClicked_CrystalProc_void__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_itemActivated_CrystalProc_void__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_itemEntered_CrystalProc_void__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_itemChanged_CrystalProc_void__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_currentItemChanged_CrystalProc_void__QTableWidgetItem_X__QTableWidgetItem_X_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_itemSelectionChanged_CrystalProc_void_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_cellPressed_CrystalProc_void__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_cellClicked_CrystalProc_void__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_cellDoubleClicked_CrystalProc_void__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_cellActivated_CrystalProc_void__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_cellEntered_CrystalProc_void__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_cellChanged_CrystalProc_void__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_CONNECT_currentCellChanged_CrystalProc_void__int__int__int__int_(_self_ : QTableWidget*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QTableWidget_event_SUPER_QEvent_X(_self_ : QTableWidget*, e : QEvent*) : Bool
    fun bg_QTableWidget_mimeTypes_SUPER_(_self_ : QTableWidget*) : QStringList*
    fun bg_QTableWidget_mimeData_SUPER_const_QList_QTableWidgetItem_X_(_self_ : QTableWidget*, items : ContainerQListQTableWidgetItemX*) : QMimeData*
    fun bg_QTableWidget_dropMimeData_SUPER_int_int_const_QMimeData_X_Qt__DropAction(_self_ : QTableWidget*, row : Int32, column : Int32, data : QMimeData*, action : DropAction) : Bool
    fun bg_QTableWidget_supportedDropActions_SUPER_(_self_ : QTableWidget*) : DropActions
    fun bg_QTableWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QTableWidget*, event : QDropEvent*) : Void
    fun bg_QTableView_setRootIndex_SUPER_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : Void
    fun bg_QTableView_setSelectionModel_SUPER_QItemSelectionModel_X(_self_ : QTableWidget*, selection_model : QItemSelectionModel*) : Void
    fun bg_QTableView_doItemsLayout_SUPER_(_self_ : QTableWidget*) : Void
    fun bg_QTableView_visualRect_SUPER_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : QRect*
    fun bg_QTableView_scrollTo_SUPER_const_QModelIndex_R_QAbstractItemView__ScrollHint(_self_ : QTableWidget*, index : QModelIndex*, hint : AbstractItemDelegate::ScrollHint) : Void
    fun bg_QTableView_indexAt_SUPER_const_QPoint_R(_self_ : QTableWidget*, p : QPoint) : QModelIndex*
    fun bg_QTableView_scrollContentsBy_SUPER_int_int(_self_ : QTableWidget*, dx : Int32, dy : Int32) : Void
    fun bg_QTableView_viewOptions_SUPER_(_self_ : QTableWidget*) : QStyleOptionViewItem*
    fun bg_QTableView_paintEvent_SUPER_QPaintEvent_X(_self_ : QTableWidget*, e : QPaintEvent*) : Void
    fun bg_QTableView_timerEvent_SUPER_QTimerEvent_X(_self_ : QTableWidget*, event : QTimerEvent*) : Void
    fun bg_QTableView_horizontalOffset_SUPER_(_self_ : QTableWidget*) : Int32
    fun bg_QTableView_verticalOffset_SUPER_(_self_ : QTableWidget*) : Int32
    fun bg_QTableView_moveCursor_SUPER_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(_self_ : QTableWidget*, cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : QModelIndex*
    fun bg_QTableView_setSelection_SUPER_const_QRect_R_QItemSelectionModel__SelectionFlags(_self_ : QTableWidget*, rect : QRect*, command : ItemSelectionModel::SelectionFlags) : Void
    fun bg_QTableView_visualRegionForSelection_SUPER_const_QItemSelection_R(_self_ : QTableWidget*, selection : QItemSelection*) : QRegion*
    fun bg_QTableView_selectedIndexes_SUPER_(_self_ : QTableWidget*) : QModelIndexList*
    fun bg_QTableView_updateGeometries_SUPER_(_self_ : QTableWidget*) : Void
    fun bg_QTableView_viewportSizeHint_SUPER_(_self_ : QTableWidget*) : QSize*
    fun bg_QTableView_sizeHintForRow_SUPER_int(_self_ : QTableWidget*, row : Int32) : Int32
    fun bg_QTableView_sizeHintForColumn_SUPER_int(_self_ : QTableWidget*, column : Int32) : Int32
    fun bg_QTableView_verticalScrollbarAction_SUPER_int(_self_ : QTableWidget*, action : Int32) : Void
    fun bg_QTableView_horizontalScrollbarAction_SUPER_int(_self_ : QTableWidget*, action : Int32) : Void
    fun bg_QTableView_isIndexHidden_SUPER_const_QModelIndex_R(_self_ : QTableWidget*, index : QModelIndex*) : Bool
    fun bg_QTableView_selectionChanged_SUPER_const_QItemSelection_R_const_QItemSelection_R(_self_ : QTableWidget*, selected : QItemSelection*, deselected : QItemSelection*) : Void
    fun bg_QTableView_currentChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R(_self_ : QTableWidget*, current : QModelIndex*, previous : QModelIndex*) : Void
    fun bg_BgInherit_QTableWidget_JUMPTABLE_BgJumptable_QTableWidget_R(_self_ : QTableWidget*, table : BgJumptable_QTableWidget*) : Void
    fun bg_QToolBar_metaObject_(_self_ : QToolBar*) : QMetaObject*
    fun bg_QToolBar_qt_metacast_const_char_X(_self_ : QToolBar*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QToolBar*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QToolBar_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QToolBar_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QToolBar_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QToolBar__CONSTRUCT_const_QString_R_QWidget_X(title : CrystalString, parent : QWidget*) : QToolBar*
    fun bg_QToolBar__CONSTRUCT_QWidget_X(parent : QWidget*) : QToolBar*
    fun bg_QToolBar_setMovable_bool(_self_ : QToolBar*, movable : Bool) : Void
    fun bg_QToolBar_isMovable_(_self_ : QToolBar*) : Bool
    fun bg_QToolBar_setAllowedAreas_Qt__ToolBarAreas(_self_ : QToolBar*, areas : ToolBarAreas) : Void
    fun bg_QToolBar_allowedAreas_(_self_ : QToolBar*) : ToolBarAreas
    fun bg_QToolBar_isAreaAllowed_Qt__ToolBarArea(_self_ : QToolBar*, area : ToolBarArea) : Bool
    fun bg_QToolBar_setOrientation_Qt__Orientation(_self_ : QToolBar*, orientation : Orientation) : Void
    fun bg_QToolBar_orientation_(_self_ : QToolBar*) : Orientation
    fun bg_QToolBar_clear_(_self_ : QToolBar*) : Void
    fun bg_QToolBar_addAction_const_QString_R(_self_ : QToolBar*, text : CrystalString) : QAction*
    fun bg_QToolBar_addAction_const_QIcon_R_const_QString_R(_self_ : QToolBar*, icon : QIcon*, text : CrystalString) : QAction*
    fun bg_QToolBar_addAction_const_QString_R_const_QObject_X_const_char_X(_self_ : QToolBar*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QToolBar_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(_self_ : QToolBar*, icon : QIcon*, text : CrystalString, receiver : QObject*, member : UInt8*) : QAction*
    fun bg_QToolBar_addSeparator_(_self_ : QToolBar*) : QAction*
    fun bg_QToolBar_insertSeparator_QAction_X(_self_ : QToolBar*, before : QAction*) : QAction*
    fun bg_QToolBar_addWidget_QWidget_X(_self_ : QToolBar*, widget : QWidget*) : QAction*
    fun bg_QToolBar_insertWidget_QAction_X_QWidget_X(_self_ : QToolBar*, before : QAction*, widget : QWidget*) : QAction*
    fun bg_QToolBar_actionGeometry_QAction_X(_self_ : QToolBar*, action : QAction*) : QRect*
    fun bg_QToolBar_actionAt_const_QPoint_R(_self_ : QToolBar*, p : QPoint) : QAction*
    fun bg_QToolBar_actionAt_int_int(_self_ : QToolBar*, x : Int32, y : Int32) : QAction*
    fun bg_QToolBar_toggleViewAction_(_self_ : QToolBar*) : QAction*
    fun bg_QToolBar_iconSize_(_self_ : QToolBar*) : QSize*
    fun bg_QToolBar_toolButtonStyle_(_self_ : QToolBar*) : ToolButtonStyle
    fun bg_QToolBar_widgetForAction_QAction_X(_self_ : QToolBar*, action : QAction*) : QWidget*
    fun bg_QToolBar_isFloatable_(_self_ : QToolBar*) : Bool
    fun bg_QToolBar_setFloatable_bool(_self_ : QToolBar*, floatable : Bool) : Void
    fun bg_QToolBar_isFloating_(_self_ : QToolBar*) : Bool
    fun bg_QToolBar_setIconSize_const_QSize_R(_self_ : QToolBar*, icon_size : QSize*) : Void
    fun bg_QToolBar_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : QToolBar*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QToolBar_actionTriggered_QAction_X(_self_ : QToolBar*, action : QAction*) : Void
    fun bg_QToolBar_movableChanged_bool(_self_ : QToolBar*, movable : Bool) : Void
    fun bg_QToolBar_allowedAreasChanged_Qt__ToolBarAreas(_self_ : QToolBar*, allowed_areas : ToolBarAreas) : Void
    fun bg_QToolBar_orientationChanged_Qt__Orientation(_self_ : QToolBar*, orientation : Orientation) : Void
    fun bg_QToolBar_iconSizeChanged_const_QSize_R(_self_ : QToolBar*, icon_size : QSize*) : Void
    fun bg_QToolBar_toolButtonStyleChanged_Qt__ToolButtonStyle(_self_ : QToolBar*, tool_button_style : ToolButtonStyle) : Void
    fun bg_QToolBar_topLevelChanged_bool(_self_ : QToolBar*, top_level : Bool) : Void
    fun bg_QToolBar_visibilityChanged_bool(_self_ : QToolBar*, visible : Bool) : Void
    fun bg_QToolBar_actionEvent_QActionEvent_X(_self_ : QToolBar*, event : QActionEvent*) : Void
    fun bg_QToolBar_changeEvent_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Void
    fun bg_QToolBar_paintEvent_QPaintEvent_X(_self_ : QToolBar*, event : QPaintEvent*) : Void
    fun bg_QToolBar_event_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Bool
    fun bg_QToolBar_initStyleOption_QStyleOptionToolBar_X(_self_ : QToolBar*, option : QStyleOptionToolBar*) : Void
    fun bg_QWidget_devType_(_self_ : QToolBar*) : Int32
    fun bg_QWidget_setVisible_bool(_self_ : QToolBar*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_(_self_ : QToolBar*) : QSize*
    fun bg_QWidget_minimumSizeHint_(_self_ : QToolBar*) : QSize*
    fun bg_QWidget_heightForWidth_int(_self_ : QToolBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_(_self_ : QToolBar*) : Bool
    fun bg_QWidget_paintEngine_(_self_ : QToolBar*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_QWheelEvent_X(_self_ : QToolBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_QKeyEvent_X(_self_ : QToolBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_QKeyEvent_X(_self_ : QToolBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_QFocusEvent_X(_self_ : QToolBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_QFocusEvent_X(_self_ : QToolBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_QMoveEvent_X(_self_ : QToolBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_QResizeEvent_X(_self_ : QToolBar*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_QCloseEvent_X(_self_ : QToolBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_QContextMenuEvent_X(_self_ : QToolBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_QTabletEvent_X(_self_ : QToolBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_dragEnterEvent_QDragEnterEvent_X(_self_ : QToolBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_QDragMoveEvent_X(_self_ : QToolBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(_self_ : QToolBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_QDropEvent_X(_self_ : QToolBar*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_QShowEvent_X(_self_ : QToolBar*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_QHideEvent_X(_self_ : QToolBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(_self_ : QToolBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(_self_ : QToolBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_QPainter_X(_self_ : QToolBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_(_self_ : QToolBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_QInputMethodEvent_X(_self_ : QToolBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(_self_ : QToolBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_bool(_self_ : QToolBar*, next_ : Bool) : Bool
    fun bg_QToolBar_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QToolBar_CONNECT_actionTriggered_CrystalProc_void__QAction_X_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_movableChanged_CrystalProc_void__bool_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_allowedAreasChanged_CrystalProc_void__Qt__ToolBarAreas_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_orientationChanged_CrystalProc_void__Qt__Orientation_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_toolButtonStyleChanged_CrystalProc_void__Qt__ToolButtonStyle_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_topLevelChanged_CrystalProc_void__bool_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_CONNECT_visibilityChanged_CrystalProc_void__bool_(_self_ : QToolBar*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolBar_actionEvent_SUPER_QActionEvent_X(_self_ : QToolBar*, event : QActionEvent*) : Void
    fun bg_QToolBar_changeEvent_SUPER_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Void
    fun bg_QToolBar_paintEvent_SUPER_QPaintEvent_X(_self_ : QToolBar*, event : QPaintEvent*) : Void
    fun bg_QToolBar_event_SUPER_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Bool
    fun bg_QWidget_devType_SUPER_(_self_ : QToolBar*) : Int32
    fun bg_QWidget_setVisible_SUPER_bool(_self_ : QToolBar*, visible : Bool) : Void
    fun bg_QWidget_sizeHint_SUPER_(_self_ : QToolBar*) : QSize*
    fun bg_QWidget_minimumSizeHint_SUPER_(_self_ : QToolBar*) : QSize*
    fun bg_QWidget_heightForWidth_SUPER_int(_self_ : QToolBar*, unnamed_arg_0 : Int32) : Int32
    fun bg_QWidget_hasHeightForWidth_SUPER_(_self_ : QToolBar*) : Bool
    fun bg_QWidget_paintEngine_SUPER_(_self_ : QToolBar*) : QPaintEngine*
    fun bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QToolBar*, event : QMouseEvent*) : Void
    fun bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(_self_ : QToolBar*, event : QWheelEvent*) : Void
    fun bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QToolBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QToolBar*, event : QKeyEvent*) : Void
    fun bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(_self_ : QToolBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QToolBar*, event : QFocusEvent*) : Void
    fun bg_QWidget_enterEvent_SUPER_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Void
    fun bg_QWidget_leaveEvent_SUPER_QEvent_X(_self_ : QToolBar*, event : QEvent*) : Void
    fun bg_QWidget_moveEvent_SUPER_QMoveEvent_X(_self_ : QToolBar*, event : QMoveEvent*) : Void
    fun bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(_self_ : QToolBar*, event : QResizeEvent*) : Void
    fun bg_QWidget_closeEvent_SUPER_QCloseEvent_X(_self_ : QToolBar*, event : QCloseEvent*) : Void
    fun bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(_self_ : QToolBar*, event : QContextMenuEvent*) : Void
    fun bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(_self_ : QToolBar*, event : QTabletEvent*) : Void
    fun bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(_self_ : QToolBar*, event : QDragEnterEvent*) : Void
    fun bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(_self_ : QToolBar*, event : QDragMoveEvent*) : Void
    fun bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(_self_ : QToolBar*, event : QDragLeaveEvent*) : Void
    fun bg_QWidget_dropEvent_SUPER_QDropEvent_X(_self_ : QToolBar*, event : QDropEvent*) : Void
    fun bg_QWidget_showEvent_SUPER_QShowEvent_X(_self_ : QToolBar*, event : QShowEvent*) : Void
    fun bg_QWidget_hideEvent_SUPER_QHideEvent_X(_self_ : QToolBar*, event : QHideEvent*) : Void
    fun bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(_self_ : QToolBar*, event_type : QByteArray*, message : Void*, result : LibC::Long*) : Bool
    fun bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(_self_ : QToolBar*, unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
    fun bg_QWidget_initPainter_SUPER_QPainter_X(_self_ : QToolBar*, painter : QPainter*) : Void
    fun bg_QWidget_sharedPainter_SUPER_(_self_ : QToolBar*) : QPainter*
    fun bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(_self_ : QToolBar*, unnamed_arg_0 : QInputMethodEvent*) : Void
    fun bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(_self_ : QToolBar*, unnamed_arg_0 : InputMethodQuery) : CrystalVariant
    fun bg_QWidget_focusNextPrevChild_SUPER_bool(_self_ : QToolBar*, next_ : Bool) : Bool
    fun bg_BgInherit_QToolBar_JUMPTABLE_BgJumptable_QToolBar_R(_self_ : QToolBar*, table : BgJumptable_QToolBar*) : Void
    fun bg_QToolButton_metaObject_(_self_ : QToolButton*) : QMetaObject*
    fun bg_QToolButton_qt_metacast_const_char_X(_self_ : QToolButton*, unnamed_arg_0 : UInt8*) : Void*
    fun bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX(_self_ : QToolButton*, unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void**) : Int32
    fun bg_QToolButton_tr_STATIC_const_char_X(s : UInt8*) : CrystalString
    fun bg_QToolButton_tr_STATIC_const_char_X_const_char_X(s : UInt8*, c : UInt8*) : CrystalString
    fun bg_QToolButton_tr_STATIC_const_char_X_const_char_X_int(s : UInt8*, c : UInt8*, n : Int32) : CrystalString
    fun bg_QToolButton__CONSTRUCT_QWidget_X(parent : QWidget*) : QToolButton*
    fun bg_QToolButton_sizeHint_(_self_ : QToolButton*) : QSize*
    fun bg_QToolButton_minimumSizeHint_(_self_ : QToolButton*) : QSize*
    fun bg_QToolButton_toolButtonStyle_(_self_ : QToolButton*) : ToolButtonStyle
    fun bg_QToolButton_arrowType_(_self_ : QToolButton*) : ArrowType
    fun bg_QToolButton_setArrowType_Qt__ArrowType(_self_ : QToolButton*, type : ArrowType) : Void
    fun bg_QToolButton_setMenu_QMenu_X(_self_ : QToolButton*, menu : QMenu*) : Void
    fun bg_QToolButton_menu_(_self_ : QToolButton*) : QMenu*
    fun bg_QToolButton_setPopupMode_QToolButton__ToolButtonPopupMode(_self_ : QToolButton*, mode : ToolButton::ToolButtonPopupMode) : Void
    fun bg_QToolButton_popupMode_(_self_ : QToolButton*) : ToolButton::ToolButtonPopupMode
    fun bg_QToolButton_defaultAction_(_self_ : QToolButton*) : QAction*
    fun bg_QToolButton_setAutoRaise_bool(_self_ : QToolButton*, enable : Bool) : Void
    fun bg_QToolButton_autoRaise_(_self_ : QToolButton*) : Bool
    fun bg_QToolButton_showMenu_(_self_ : QToolButton*) : Void
    fun bg_QToolButton_setToolButtonStyle_Qt__ToolButtonStyle(_self_ : QToolButton*, style : ToolButtonStyle) : Void
    fun bg_QToolButton_setDefaultAction_QAction_X(_self_ : QToolButton*, unnamed_arg_0 : QAction*) : Void
    fun bg_QToolButton_triggered_QAction_X(_self_ : QToolButton*, unnamed_arg_0 : QAction*) : Void
    fun bg_QToolButton_event_QEvent_X(_self_ : QToolButton*, e : QEvent*) : Bool
    fun bg_QToolButton_mousePressEvent_QMouseEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QToolButton_mouseReleaseEvent_QMouseEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QToolButton_paintEvent_QPaintEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QToolButton_actionEvent_QActionEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QToolButton_enterEvent_QEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_leaveEvent_QEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_timerEvent_QTimerEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QToolButton_changeEvent_QEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_hitButton_const_QPoint_R(_self_ : QToolButton*, pos : QPoint) : Bool
    fun bg_QToolButton_nextCheckState_(_self_ : QToolButton*) : Void
    fun bg_QToolButton_initStyleOption_QStyleOptionToolButton_X(_self_ : QToolButton*, option : QStyleOptionToolButton*) : Void
    fun bg_QAbstractButton_checkStateSet_(_self_ : QToolButton*) : Void
    fun bg_QAbstractButton_keyPressEvent_QKeyEvent_X(_self_ : QToolButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(_self_ : QToolButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(_self_ : QToolButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_QFocusEvent_X(_self_ : QToolButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_QFocusEvent_X(_self_ : QToolButton*, e : QFocusEvent*) : Void
    fun bg_QToolButton_staticMetaObject_STATIC_GETTER_() : QMetaObject*
    fun bg_QToolButton_CONNECT_triggered_CrystalProc_void__QAction_X_(_self_ : QToolButton*, _proc_ : CrystalProc) : QMetaObjectConnection*
    fun bg_QToolButton_sizeHint_SUPER_(_self_ : QToolButton*) : QSize*
    fun bg_QToolButton_minimumSizeHint_SUPER_(_self_ : QToolButton*) : QSize*
    fun bg_QToolButton_event_SUPER_QEvent_X(_self_ : QToolButton*, e : QEvent*) : Bool
    fun bg_QToolButton_mousePressEvent_SUPER_QMouseEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QToolButton_mouseReleaseEvent_SUPER_QMouseEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QMouseEvent*) : Void
    fun bg_QToolButton_paintEvent_SUPER_QPaintEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QPaintEvent*) : Void
    fun bg_QToolButton_actionEvent_SUPER_QActionEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QActionEvent*) : Void
    fun bg_QToolButton_enterEvent_SUPER_QEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_leaveEvent_SUPER_QEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_timerEvent_SUPER_QTimerEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QTimerEvent*) : Void
    fun bg_QToolButton_changeEvent_SUPER_QEvent_X(_self_ : QToolButton*, unnamed_arg_0 : QEvent*) : Void
    fun bg_QToolButton_hitButton_SUPER_const_QPoint_R(_self_ : QToolButton*, pos : QPoint) : Bool
    fun bg_QToolButton_nextCheckState_SUPER_(_self_ : QToolButton*) : Void
    fun bg_QAbstractButton_checkStateSet_SUPER_(_self_ : QToolButton*) : Void
    fun bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(_self_ : QToolButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(_self_ : QToolButton*, e : QKeyEvent*) : Void
    fun bg_QAbstractButton_mouseMoveEvent_SUPER_QMouseEvent_X(_self_ : QToolButton*, e : QMouseEvent*) : Void
    fun bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(_self_ : QToolButton*, e : QFocusEvent*) : Void
    fun bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(_self_ : QToolButton*, e : QFocusEvent*) : Void
    fun bg_BgInherit_QToolButton_JUMPTABLE_BgJumptable_QToolButton_R(_self_ : QToolButton*, table : BgJumptable_QToolButton*) : Void
    fun bg____qVersion_STATIC_() : UInt8*
    fun bg_Container_QList_qreal___CONSTRUCT_() : ContainerQListQreal*
    fun bg_Container_QList_qreal__at_int(_self_ : ContainerQListQreal*, index : Int32) : Float64
    fun bg_Container_QList_qreal__push_back_qreal(_self_ : ContainerQListQreal*, value : Float64) : Void
    fun bg_Container_QList_qreal__size_(_self_ : ContainerQListQreal*) : Int32
    fun bg_Container_QList_QAbstractEventDispatcher__TimerInfo___CONSTRUCT_() : ContainerQListQAbstractEventDispatcherTimerInfo*
    fun bg_Container_QList_QAbstractEventDispatcher__TimerInfo__at_int(_self_ : ContainerQListQAbstractEventDispatcherTimerInfo*, index : Int32) : EventDispatcherTimerInfo
    fun bg_Container_QList_QAbstractEventDispatcher__TimerInfo__push_back_QAbstractEventDispatcher__TimerInfo(_self_ : ContainerQListQAbstractEventDispatcherTimerInfo*, value : EventDispatcherTimerInfo) : Void
    fun bg_Container_QList_QAbstractEventDispatcher__TimerInfo__size_(_self_ : ContainerQListQAbstractEventDispatcherTimerInfo*) : Int32
    fun bg_Container_QList_QVariant___CONSTRUCT_() : ContainerQListQVariant*
    fun bg_Container_QList_QVariant__at_int(_self_ : ContainerQListQVariant*, index : Int32) : CrystalVariant
    fun bg_Container_QList_QVariant__push_back_QVariant(_self_ : ContainerQListQVariant*, value : CrystalVariant) : Void
    fun bg_Container_QList_QVariant__size_(_self_ : ContainerQListQVariant*) : Int32
    fun bg_Container_QList_QPersistentModelIndex___CONSTRUCT_() : ContainerQListQPersistentModelIndex*
    fun bg_Container_QList_QPersistentModelIndex__at_int(_self_ : ContainerQListQPersistentModelIndex*, index : Int32) : QPersistentModelIndex*
    fun bg_Container_QList_QPersistentModelIndex__push_back_QPersistentModelIndex(_self_ : ContainerQListQPersistentModelIndex*, value : QPersistentModelIndex*) : Void
    fun bg_Container_QList_QPersistentModelIndex__size_(_self_ : ContainerQListQPersistentModelIndex*) : Int32
    fun bg_Container_QList_QUrl___CONSTRUCT_() : ContainerQListQUrl*
    fun bg_Container_QList_QUrl__at_int(_self_ : ContainerQListQUrl*, index : Int32) : QUrl*
    fun bg_Container_QList_QUrl__push_back_QUrl(_self_ : ContainerQListQUrl*, value : QUrl*) : Void
    fun bg_Container_QList_QUrl__size_(_self_ : ContainerQListQUrl*) : Int32
    fun bg_Container_QList_QKeySequence___CONSTRUCT_() : ContainerQListQKeySequence*
    fun bg_Container_QList_QKeySequence__at_int(_self_ : ContainerQListQKeySequence*, index : Int32) : QKeySequence*
    fun bg_Container_QList_QKeySequence__push_back_QKeySequence(_self_ : ContainerQListQKeySequence*, value : QKeySequence*) : Void
    fun bg_Container_QList_QKeySequence__size_(_self_ : ContainerQListQKeySequence*) : Int32
    fun bg_Container_QList_QSize___CONSTRUCT_() : ContainerQListQSize*
    fun bg_Container_QList_QSize__at_int(_self_ : ContainerQListQSize*, index : Int32) : QSize*
    fun bg_Container_QList_QSize__push_back_QSize(_self_ : ContainerQListQSize*, value : QSize*) : Void
    fun bg_Container_QList_QSize__size_(_self_ : ContainerQListQSize*) : Int32
    fun bg_Container_QList_QScreen_X___CONSTRUCT_() : ContainerQListQScreenX*
    fun bg_Container_QList_QScreen_X__at_int(_self_ : ContainerQListQScreenX*, index : Int32) : QScreen*
    fun bg_Container_QList_QScreen_X__push_back_QScreen_X(_self_ : ContainerQListQScreenX*, value : QScreen*) : Void
    fun bg_Container_QList_QScreen_X__size_(_self_ : ContainerQListQScreenX*) : Int32
    fun bg_Container_QList_QAction_X___CONSTRUCT_() : ContainerQListQActionX*
    fun bg_Container_QList_QAction_X__at_int(_self_ : ContainerQListQActionX*, index : Int32) : QAction*
    fun bg_Container_QList_QAction_X__push_back_QAction_X(_self_ : ContainerQListQActionX*, value : QAction*) : Void
    fun bg_Container_QList_QAction_X__size_(_self_ : ContainerQListQActionX*) : Int32
    fun bg_Container_QList_QWidget_X___CONSTRUCT_() : ContainerQListQWidgetX*
    fun bg_Container_QList_QWidget_X__at_int(_self_ : ContainerQListQWidgetX*, index : Int32) : QWidget*
    fun bg_Container_QList_QWidget_X__push_back_QWidget_X(_self_ : ContainerQListQWidgetX*, value : QWidget*) : Void
    fun bg_Container_QList_QWidget_X__size_(_self_ : ContainerQListQWidgetX*) : Int32
    fun bg_Container_QList_QGraphicsWidget_X___CONSTRUCT_() : ContainerQListQGraphicsWidgetX*
    fun bg_Container_QList_QGraphicsWidget_X__at_int(_self_ : ContainerQListQGraphicsWidgetX*, index : Int32) : QGraphicsWidget*
    fun bg_Container_QList_QGraphicsWidget_X__push_back_QGraphicsWidget_X(_self_ : ContainerQListQGraphicsWidgetX*, value : QGraphicsWidget*) : Void
    fun bg_Container_QList_QGraphicsWidget_X__size_(_self_ : ContainerQListQGraphicsWidgetX*) : Int32
    fun bg_Container_QList_QAbstractButton_X___CONSTRUCT_() : ContainerQListQAbstractButtonX*
    fun bg_Container_QList_QAbstractButton_X__at_int(_self_ : ContainerQListQAbstractButtonX*, index : Int32) : QAbstractButton*
    fun bg_Container_QList_QAbstractButton_X__push_back_QAbstractButton_X(_self_ : ContainerQListQAbstractButtonX*, value : QAbstractButton*) : Void
    fun bg_Container_QList_QAbstractButton_X__size_(_self_ : ContainerQListQAbstractButtonX*) : Int32
    fun bg_Container_QList_QGesture_X___CONSTRUCT_() : ContainerQListQGestureX*
    fun bg_Container_QList_QGesture_X__at_int(_self_ : ContainerQListQGestureX*, index : Int32) : QGesture*
    fun bg_Container_QList_QGesture_X__push_back_QGesture_X(_self_ : ContainerQListQGestureX*, value : QGesture*) : Void
    fun bg_Container_QList_QGesture_X__size_(_self_ : ContainerQListQGestureX*) : Int32
    fun bg_Container_QList_QGraphicsItem_X___CONSTRUCT_() : ContainerQListQGraphicsItemX*
    fun bg_Container_QList_QGraphicsItem_X__at_int(_self_ : ContainerQListQGraphicsItemX*, index : Int32) : QGraphicsItem*
    fun bg_Container_QList_QGraphicsItem_X__push_back_QGraphicsItem_X(_self_ : ContainerQListQGraphicsItemX*, value : QGraphicsItem*) : Void
    fun bg_Container_QList_QGraphicsItem_X__size_(_self_ : ContainerQListQGraphicsItemX*) : Int32
    fun bg_Container_QList_QGraphicsTransform_X___CONSTRUCT_() : ContainerQListQGraphicsTransformX*
    fun bg_Container_QList_QGraphicsTransform_X__at_int(_self_ : ContainerQListQGraphicsTransformX*, index : Int32) : QGraphicsTransform*
    fun bg_Container_QList_QGraphicsTransform_X__push_back_QGraphicsTransform_X(_self_ : ContainerQListQGraphicsTransformX*, value : QGraphicsTransform*) : Void
    fun bg_Container_QList_QGraphicsTransform_X__size_(_self_ : ContainerQListQGraphicsTransformX*) : Int32
    fun bg_Container_QList_QGraphicsView_X___CONSTRUCT_() : ContainerQListQGraphicsViewX*
    fun bg_Container_QList_QGraphicsView_X__at_int(_self_ : ContainerQListQGraphicsViewX*, index : Int32) : QGraphicsView*
    fun bg_Container_QList_QGraphicsView_X__push_back_QGraphicsView_X(_self_ : ContainerQListQGraphicsViewX*, value : QGraphicsView*) : Void
    fun bg_Container_QList_QGraphicsView_X__size_(_self_ : ContainerQListQGraphicsViewX*) : Int32
    fun bg_Container_QList_QRectF___CONSTRUCT_() : ContainerQListQRectF*
    fun bg_Container_QList_QRectF__at_int(_self_ : ContainerQListQRectF*, index : Int32) : QRectF*
    fun bg_Container_QList_QRectF__push_back_QRectF(_self_ : ContainerQListQRectF*, value : QRectF*) : Void
    fun bg_Container_QList_QRectF__size_(_self_ : ContainerQListQRectF*) : Int32
    fun bg_Container_QList_QDockWidget_X___CONSTRUCT_() : ContainerQListQDockWidgetX*
    fun bg_Container_QList_QDockWidget_X__at_int(_self_ : ContainerQListQDockWidgetX*, index : Int32) : QDockWidget*
    fun bg_Container_QList_QDockWidget_X__push_back_QDockWidget_X(_self_ : ContainerQListQDockWidgetX*, value : QDockWidget*) : Void
    fun bg_Container_QList_QDockWidget_X__size_(_self_ : ContainerQListQDockWidgetX*) : Int32
    fun bg_Container_QList_int___CONSTRUCT_() : ContainerQListInt*
    fun bg_Container_QList_int__at_int(_self_ : ContainerQListInt*, index : Int32) : Int32
    fun bg_Container_QList_int__push_back_int(_self_ : ContainerQListInt*, value : Int32) : Void
    fun bg_Container_QList_int__size_(_self_ : ContainerQListInt*) : Int32
    fun bg_Container_QList_QTableWidgetSelectionRange___CONSTRUCT_() : ContainerQListQTableWidgetSelectionRange*
    fun bg_Container_QList_QTableWidgetSelectionRange__at_int(_self_ : ContainerQListQTableWidgetSelectionRange*, index : Int32) : QTableWidgetSelectionRange*
    fun bg_Container_QList_QTableWidgetSelectionRange__push_back_QTableWidgetSelectionRange(_self_ : ContainerQListQTableWidgetSelectionRange*, value : QTableWidgetSelectionRange*) : Void
    fun bg_Container_QList_QTableWidgetSelectionRange__size_(_self_ : ContainerQListQTableWidgetSelectionRange*) : Int32
    fun bg_Container_QList_QTableWidgetItem_X___CONSTRUCT_() : ContainerQListQTableWidgetItemX*
    fun bg_Container_QList_QTableWidgetItem_X__at_int(_self_ : ContainerQListQTableWidgetItemX*, index : Int32) : QTableWidgetItem*
    fun bg_Container_QList_QTableWidgetItem_X__push_back_QTableWidgetItem_X(_self_ : ContainerQListQTableWidgetItemX*, value : QTableWidgetItem*) : Void
    fun bg_Container_QList_QTableWidgetItem_X__size_(_self_ : ContainerQListQTableWidgetItemX*) : Int32
    fun bg_Container_QVector_unsigned_int___CONSTRUCT_() : ContainerQVectorUnsignedInt*
    fun bg_Container_QVector_unsigned_int__at_int(_self_ : ContainerQVectorUnsignedInt*, index : Int32) : UInt32
    fun bg_Container_QVector_unsigned_int__push_back_unsigned_int(_self_ : ContainerQVectorUnsignedInt*, value : UInt32) : Void
    fun bg_Container_QVector_unsigned_int__size_(_self_ : ContainerQVectorUnsignedInt*) : Int32
    fun bg_Container_QVector_int___CONSTRUCT_() : ContainerQVectorInt*
    fun bg_Container_QVector_int__at_int(_self_ : ContainerQVectorInt*, index : Int32) : Int32
    fun bg_Container_QVector_int__push_back_int(_self_ : ContainerQVectorInt*, value : Int32) : Void
    fun bg_Container_QVector_int__size_(_self_ : ContainerQVectorInt*) : Int32
    fun bg_Container_QVector_QTextLength___CONSTRUCT_() : ContainerQVectorQTextLength*
    fun bg_Container_QVector_QTextLength__at_int(_self_ : ContainerQVectorQTextLength*, index : Int32) : QTextLength*
    fun bg_Container_QVector_QTextLength__push_back_QTextLength(_self_ : ContainerQVectorQTextLength*, value : QTextLength*) : Void
    fun bg_Container_QVector_QTextLength__size_(_self_ : ContainerQVectorQTextLength*) : Int32
    fun bg_Container_QVector_QTextFormat___CONSTRUCT_() : ContainerQVectorQTextFormat*
    fun bg_Container_QVector_QTextFormat__at_int(_self_ : ContainerQVectorQTextFormat*, index : Int32) : QTextFormat*
    fun bg_Container_QVector_QTextFormat__push_back_QTextFormat(_self_ : ContainerQVectorQTextFormat*, value : QTextFormat*) : Void
    fun bg_Container_QVector_QTextFormat__size_(_self_ : ContainerQVectorQTextFormat*) : Int32
    fun bg_Container_QVector_QLineF___CONSTRUCT_() : ContainerQVectorQLineF*
    fun bg_Container_QVector_QLineF__at_int(_self_ : ContainerQVectorQLineF*, index : Int32) : QLineF*
    fun bg_Container_QVector_QLineF__push_back_QLineF(_self_ : ContainerQVectorQLineF*, value : QLineF*) : Void
    fun bg_Container_QVector_QLineF__size_(_self_ : ContainerQVectorQLineF*) : Int32
    fun bg_Container_QVector_QPointF___CONSTRUCT_() : ContainerQVectorQPointF*
    fun bg_Container_QVector_QPointF__at_int(_self_ : ContainerQVectorQPointF*, index : Int32) : QPointF
    fun bg_Container_QVector_QPointF__push_back_QPointF(_self_ : ContainerQVectorQPointF*, value : QPointF) : Void
    fun bg_Container_QVector_QPointF__size_(_self_ : ContainerQVectorQPointF*) : Int32
    fun bg_Container_QVector_QLine___CONSTRUCT_() : ContainerQVectorQLine*
    fun bg_Container_QVector_QLine__at_int(_self_ : ContainerQVectorQLine*, index : Int32) : QLine*
    fun bg_Container_QVector_QLine__push_back_QLine(_self_ : ContainerQVectorQLine*, value : QLine*) : Void
    fun bg_Container_QVector_QLine__size_(_self_ : ContainerQVectorQLine*) : Int32
    fun bg_Container_QVector_QPoint___CONSTRUCT_() : ContainerQVectorQPoint*
    fun bg_Container_QVector_QPoint__at_int(_self_ : ContainerQVectorQPoint*, index : Int32) : QPoint
    fun bg_Container_QVector_QPoint__push_back_QPoint(_self_ : ContainerQVectorQPoint*, value : QPoint) : Void
    fun bg_Container_QVector_QPoint__size_(_self_ : ContainerQVectorQPoint*) : Int32
    fun bg_Container_QVector_QRectF___CONSTRUCT_() : ContainerQVectorQRectF*
    fun bg_Container_QVector_QRectF__at_int(_self_ : ContainerQVectorQRectF*, index : Int32) : QRectF*
    fun bg_Container_QVector_QRectF__push_back_QRectF(_self_ : ContainerQVectorQRectF*, value : QRectF*) : Void
    fun bg_Container_QVector_QRectF__size_(_self_ : ContainerQVectorQRectF*) : Int32
    fun bg_Container_QVector_QRect___CONSTRUCT_() : ContainerQVectorQRect*
    fun bg_Container_QVector_QRect__at_int(_self_ : ContainerQVectorQRect*, index : Int32) : QRect*
    fun bg_Container_QVector_QRect__push_back_QRect(_self_ : ContainerQVectorQRect*, value : QRect*) : Void
    fun bg_Container_QVector_QRect__size_(_self_ : ContainerQVectorQRect*) : Int32
  end
  class SignalConnection
    @unwrap : Binding::QMetaObjectConnection*
    
    def initialize()
      result = Binding.bg_QMetaObject__Connection__CONSTRUCT_()
    @unwrap = result
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QMetaObjectConnection*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Object
    @unwrap : Binding::QObject*
    
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QObject_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QObject_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QObject__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Object)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QObject.new(
      bg_QObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QObject_JUMPTABLE_BgJumptable_QObject_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    def object_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QObject_objectName_(self))
    end
    
    def object_name=(name : String) : Void
      Binding.bg_QObject_setObjectName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    
    def widget_type?() : Bool
      Binding.bg_QObject_isWidgetType_(self)
    end
    
    def window_type?() : Bool
      Binding.bg_QObject_isWindowType_(self)
    end
    
    def signals_blocked() : Bool
      Binding.bg_QObject_signalsBlocked_(self)
    end
    
    def block_signals(b : Bool) : Bool
      Binding.bg_QObject_blockSignals_bool(self, b)
    end
    
    def thread() : Binding::QThread*
      Binding.bg_QObject_thread_(self)
    end
    
    def move_to_thread(thread : Binding::QThread*) : Void
      Binding.bg_QObject_moveToThread_QThread_X(self, thread)
    end
    
    def start_timer(interval : Int32, timer_type : TimerType = TimerType::CoarseTimer) : Int32
      Binding.bg_QObject_startTimer_int_Qt__TimerType(self, interval, timer_type)
    end
    
    def start_timer(time : Time::Span, timer_type : TimerType = TimerType::CoarseTimer) : Int32
      Binding.bg_QObject_startTimer_std__chrono__milliseconds_Qt__TimerType(self, Qt::Converter::TimeSpan.wrap(time), timer_type)
    end
    
    def kill_timer(id : Int32) : Void
      Binding.bg_QObject_killTimer_int(self, id)
    end
    
    def children() : Binding::QObjectList*
      Binding.bg_QObject_children_(self)
    end
    
    def parent=(parent : Object) : Void
      Binding.bg_QObject_setParent_QObject_X(self, parent)
    end
    
    def install_event_filter(filter_obj : Object) : Void
      Binding.bg_QObject_installEventFilter_QObject_X(self, filter_obj)
    end
    
    def remove_event_filter(obj : Object) : Void
      Binding.bg_QObject_removeEventFilter_QObject_X(self, obj)
    end
    
    def self.connect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*, unnamed_arg_4 : ConnectionType = ConnectionType::AutoConnection) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X_Qt__ConnectionType(sender, signal, receiver, member, unnamed_arg_4))
    end
    
    def self.connect(sender : Object, signal : Binding::QMetaMethod*, receiver : Object, method : Binding::QMetaMethod*, type : ConnectionType = ConnectionType::AutoConnection) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R_Qt__ConnectionType(sender, signal, receiver, method, type))
    end
    
    def connect(sender : Object, signal : UInt8*, member : UInt8*, type : ConnectionType = ConnectionType::AutoConnection) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_connect_const_QObject_X_const_char_X_const_char_X_Qt__ConnectionType(self, sender, signal, member, type))
    end
    
    def self.disconnect(sender : Object, signal : UInt8*, receiver : Object, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QObject_X_const_char_X_const_QObject_X_const_char_X(sender, signal, receiver, member)
    end
    
    def self.disconnect(sender : Object, signal : Binding::QMetaMethod*, receiver : Object, member : Binding::QMetaMethod*) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QObject_X_const_QMetaMethod_R_const_QObject_X_const_QMetaMethod_R(sender, signal, receiver, member)
    end
    
    def disconnect() : Bool
      Binding.bg_QObject_disconnect_(self)
    end
    
    def disconnect(signal : UInt8*) : Bool
      Binding.bg_QObject_disconnect_const_char_X(self, signal)
    end
    
    def disconnect(signal : UInt8*, receiver : Object? = nil) : Bool
      Binding.bg_QObject_disconnect_const_char_X_const_QObject_X(self, signal, receiver)
    end
    
    def disconnect(signal : UInt8*, receiver : Object?, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_const_char_X_const_QObject_X_const_char_X(self, signal, receiver, member)
    end
    
    def disconnect(receiver : Object) : Bool
      Binding.bg_QObject_disconnect_const_QObject_X(self, receiver)
    end
    
    def disconnect(receiver : Object, member : UInt8*) : Bool
      Binding.bg_QObject_disconnect_const_QObject_X_const_char_X(self, receiver, member)
    end
    
    def self.disconnect(unnamed_arg_0 : SignalConnection) : Bool
      Binding.bg_QObject_disconnect_STATIC_const_QMetaObject__Connection_R(unnamed_arg_0)
    end
    
    def dump_object_tree() : Void
      Binding.bg_QObject_dumpObjectTree_(self)
    end
    
    def dump_object_info() : Void
      Binding.bg_QObject_dumpObjectInfo_(self)
    end
    
    def set_property(name : UInt8*, value : Variant) : Bool
      Binding.bg_QObject_setProperty_const_char_X_const_QVariant_R(self, name, (value.to_unsafe))
    end
    
    def property(name : UInt8*) : Variant
      Qt::Variant.new(Binding.bg_QObject_property_const_char_X(self, name))
    end
    
    def destroyed(unnamed_arg_0 : Object? = nil) : Void
      Binding.bg_QObject_destroyed_QObject_X(self, unnamed_arg_0)
    end
    
    def parent() : Object
      Object.new(unwrap: Binding.bg_QObject_parent_(self))
    end
    
    def inherits(classname : UInt8*) : Bool
      Binding.bg_QObject_inherits_const_char_X(self, classname)
    end
    
    def delete_later() : Void
      Binding.bg_QObject_deleteLater_(self)
    end
    
    protected def sender() : Object
      Object.new(unwrap: Binding.bg_QObject_sender_(self))
    end
    
    protected def sender_signal_index() : Int32
      Binding.bg_QObject_senderSignalIndex_(self)
    end
    
    protected def receivers(signal : UInt8*) : Int32
      Binding.bg_QObject_receivers_const_char_X(self, signal)
    end
    
    protected def is_signal_connected(signal : Binding::QMetaMethod*) : Bool
      Binding.bg_QObject_isSignalConnected_const_QMetaMethod_R(self, signal)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QObject_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_destroyed(&_proc_ : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_CONNECT_destroyed_CrystalProc_void__QObject_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QObject*, Void).new do |arg0| _proc_.call(arg0.try {|ptr| Object.new(unwrap: ptr) unless ptr.null?}) end)))
    end
    
    def on_object_name_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QObject_CONNECT_objectNameChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QObject*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Object)
      end
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class EventLoop < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QEventLoop_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QEventLoop_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QEventLoop_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QEventLoop__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(EventLoop)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QEventLoop.new(
      bg_QEventLoop_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QEventLoop_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QEventLoop_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QEventLoop_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QEventLoop_JUMPTABLE_BgJumptable_QEventLoop_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def process_events() : Bool
      Binding.bg_QEventLoop_processEvents_(self)
    end
    
    def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
      Binding.bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags(self, flags)
    end
    
    def process_events(flags : EventLoop::ProcessEventsFlags, maximum_time : Int32) : Void
      Binding.bg_QEventLoop_processEvents_QEventLoop__ProcessEventsFlags_int(self, flags, maximum_time)
    end
    
    def exec() : Int32
      Binding.bg_QEventLoop_exec_(self)
    end
    
    def exec(flags : EventLoop::ProcessEventsFlags) : Int32
      Binding.bg_QEventLoop_exec_QEventLoop__ProcessEventsFlags(self, flags)
    end
    
    def exit(return_code : Int32 = 0) : Void
      Binding.bg_QEventLoop_exit_int(self, return_code)
    end
    
    def running?() : Bool
      Binding.bg_QEventLoop_isRunning_(self)
    end
    
    def wake_up() : Void
      Binding.bg_QEventLoop_wakeUp_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QEventLoop_event_QEvent_X(self, event)
    end
    
    def quit() : Void
      Binding.bg_QEventLoop_quit_(self)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QEventLoop_staticMetaObject_STATIC_GETTER_()
    end
    
    @[Flags]
    enum ProcessEventsFlags : UInt32
      AllEvents = 0
      ExcludeUserInputEvents = 1
      ExcludeSocketNotifiers = 2
      WaitForMoreEvents = 4
      X11excludetimers = 8
      EventLoopExec = 32
      DialogExec = 64
    end
    def initialize(unwrap : Binding::QEventLoop*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : EventLoop)
      end
      def event(event : Event) : Bool
        Binding.bg_QEventLoop_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class AbstractEventDispatcher < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractEventDispatcher_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractEventDispatcher_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractEventDispatcher_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QAbstractEventDispatcher__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} Proc(EventLoop::ProcessEventsFlags, Bool).new{|flags| self.process_events(flags) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} Proc(Bool).new{ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} Proc(Binding::QSocketNotifier*, Void).new{|notifier| self.register_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} Proc(Binding::QSocketNotifier*, Void).new{|notifier| self.unregister_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} Proc(Int32, Int32, TimerType, Binding::QObject*, Void).new{|timer_id, interval, timer_type, object| self.register_timer(timer_id, interval, timer_type, Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} Proc(Int32, Bool).new{|timer_id| self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} Proc(Binding::QObject*, Bool).new{|object| self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} Proc(Binding::QObject*, Binding::ContainerQListQAbstractEventDispatcherTimerInfo*).new{|object| BindgenHelper.wrap_container(Container_QList_QAbstractEventDispatcher__TimerInfo_, self.registered_timers(Object.new(unwrap: object))).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} Proc(Int32, Int32).new{|timer_id| self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} Proc(Void).new{ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} Proc(Void).new{ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} Proc(Void).new{ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} Proc(Void).new{ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} Proc(Void).new{ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractEventDispatcher_JUMPTABLE_BgJumptable_QAbstractEventDispatcher_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.instance(thread : Binding::QThread*? = nil) : AbstractEventDispatcher
      AbstractEventDispatcherImpl.new(unwrap: Binding.bg_QAbstractEventDispatcher_instance_STATIC_QThread_X(thread))
    end
    
    abstract def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
    abstract def has_pending_events?() : Bool
    abstract def register_socket_notifier(notifier : SocketNotifier) : Void
    abstract def unregister_socket_notifier(notifier : SocketNotifier) : Void
    def register_timer(interval : Int32, timer_type : TimerType, object : Object) : Int32
      Binding.bg_QAbstractEventDispatcher_registerTimer_int_Qt__TimerType_QObject_X(self, interval, timer_type, object)
    end
    
    abstract def register_timer(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Object) : Void
    abstract def unregister_timer(timer_id : Int32) : Bool
    abstract def unregister_timers(object : Object) : Bool
    abstract def registered_timers(object : Object) : Enumerable(Binding::EventDispatcherTimerInfo)
    abstract def remaining_time(timer_id : Int32) : Int32
    abstract def wake_up() : Void
    abstract def interrupt() : Void
    abstract def flush() : Void
    def starting_up() : Void
      Binding.bg_QAbstractEventDispatcher_startingUp_(self)
    end
    
    def closing_down() : Void
      Binding.bg_QAbstractEventDispatcher_closingDown_(self)
    end
    
    def install_native_event_filter(filter_obj : Binding::QAbstractNativeEventFilter*) : Void
      Binding.bg_QAbstractEventDispatcher_installNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    
    def remove_native_event_filter(filter_obj : Binding::QAbstractNativeEventFilter*) : Void
      Binding.bg_QAbstractEventDispatcher_removeNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    
    def filter_native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QAbstractEventDispatcher_filterNativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    def about_to_block() : Void
      Binding.bg_QAbstractEventDispatcher_aboutToBlock_(self)
    end
    
    def awake() : Void
      Binding.bg_QAbstractEventDispatcher_awake_(self)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QAbstractEventDispatcherPrivate*, parent : Object)
      result = Binding.bg_QAbstractEventDispatcher__CONSTRUCT_QAbstractEventDispatcherPrivate_R_QObject_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractEventDispatcher)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall process_events has_pending_events? register_socket_notifier unregister_socket_notifier register_timer unregister_timer unregister_timers registered_timers remaining_time wake_up interrupt flush starting_up closing_down event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractEventDispatcher.new(
      bg_QAbstractEventDispatcher_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("process_events") %} Proc(EventLoop::ProcessEventsFlags, Bool).new{|flags| self.process_events(flags) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_hasPendingEvents_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_pending_events?") %} Proc(Bool).new{ self.has_pending_events?() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_socket_notifier") %} Proc(Binding::QSocketNotifier*, Void).new{|notifier| self.register_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_socket_notifier") %} Proc(Binding::QSocketNotifier*, Void).new{|notifier| self.unregister_socket_notifier(SocketNotifier.new(unwrap: notifier)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("register_timer") %} Proc(Int32, Int32, TimerType, Binding::QObject*, Void).new{|timer_id, interval, timer_type, object| self.register_timer(timer_id, interval, timer_type, Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimer_int: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timer") %} Proc(Int32, Bool).new{|timer_id| self.unregister_timer(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_unregisterTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("unregister_timers") %} Proc(Binding::QObject*, Bool).new{|object| self.unregister_timers(Object.new(unwrap: object)) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_registeredTimers_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("registered_timers") %} Proc(Binding::QObject*, Binding::ContainerQListQAbstractEventDispatcherTimerInfo*).new{|object| BindgenHelper.wrap_container(Container_QList_QAbstractEventDispatcher__TimerInfo_, self.registered_timers(Object.new(unwrap: object))).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_remainingTime_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remaining_time") %} Proc(Int32, Int32).new{|timer_id| self.remaining_time(timer_id) } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_wakeUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("wake_up") %} Proc(Void).new{ self.wake_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_interrupt_: BindgenHelper.wrap_proc({% if forwarded.includes?("interrupt") %} Proc(Void).new{ self.interrupt() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_flush_: BindgenHelper.wrap_proc({% if forwarded.includes?("flush") %} Proc(Void).new{ self.flush() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_startingUp_: BindgenHelper.wrap_proc({% if forwarded.includes?("starting_up") %} Proc(Void).new{ self.starting_up() } {% else %} nil {% end %}),
      bg_QAbstractEventDispatcher_closingDown_: BindgenHelper.wrap_proc({% if forwarded.includes?("closing_down") %} Proc(Void).new{ self.closing_down() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractEventDispatcher_JUMPTABLE_BgJumptable_QAbstractEventDispatcher_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractEventDispatcher_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_about_to_block(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_CONNECT_aboutToBlock_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_awake(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_CONNECT_awake_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QAbstractEventDispatcher*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractEventDispatcher)
      end
      def starting_up() : Void
        Binding.bg_QAbstractEventDispatcher_startingUp_SUPER_(@myself)
      end
      
      def closing_down() : Void
        Binding.bg_QAbstractEventDispatcher_closingDown_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  module QAbstractEventDispatcher
  end
  class ModelIndex
    @unwrap : Binding::QModelIndex*
    
    def initialize()
      result = Binding.bg_QModelIndex__CONSTRUCT_()
    @unwrap = result
    end
    
    def row() : Int32
      Binding.bg_QModelIndex_row_(self)
    end
    
    def column() : Int32
      Binding.bg_QModelIndex_column_(self)
    end
    
    def internal_id() : UInt64
      Binding.bg_QModelIndex_internalId_(self)
    end
    
    def internal_pointer() : Void*
      Binding.bg_QModelIndex_internalPointer_(self)
    end
    
    def parent() : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QModelIndex_parent_(self))
    end
    
    def sibling(row : Int32, column : Int32) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QModelIndex_sibling_int_int(self, row, column))
    end
    
    def sibling_at_column(column : Int32) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QModelIndex_siblingAtColumn_int(self, column))
    end
    
    def sibling_at_row(row : Int32) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QModelIndex_siblingAtRow_int(self, row))
    end
    
    def data(role : Int32 = 0) : Variant
      Qt::Variant.new(Binding.bg_QModelIndex_data_int(self, role))
    end
    
    def flags() : ItemFlags
      Binding.bg_QModelIndex_flags_(self)
    end
    
    def model() : AbstractItemModel
      AbstractItemModelImpl.new(unwrap: Binding.bg_QModelIndex_model_(self))
    end
    
    def valid?() : Bool
      Binding.bg_QModelIndex_isValid_(self)
    end
    
    def ==(other : ModelIndex) : Bool
      Binding.bg_QModelIndex__OPERATOR_eq_const_QModelIndex_R(self, other)
    end
    
    def !=(other : ModelIndex) : Bool
      Binding.bg_QModelIndex__OPERATOR_ne_const_QModelIndex_R(self, other)
    end
    
    def <(other : ModelIndex) : Bool
      Binding.bg_QModelIndex__OPERATOR_lt_const_QModelIndex_R(self, other)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QModelIndex*)
      result = unwrap
    @unwrap = result
    end
    
  end
  abstract class AbstractItemModel < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractItemModel_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractItemModel_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractItemModel_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemModel_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemModel_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemModel_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QAbstractItemModel__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractItemModel)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall index index parent sibling row_count row_count column_count column_count has_children? has_children data set_data header_data set_header_data mime_types mime_data can_drop_mime_data drop_mime_data supported_drop_actions supported_drag_actions insert_rows insert_rows insert_columns insert_columns remove_rows remove_rows remove_columns remove_columns move_rows move_columns fetch_more can_fetch_more flags sort buddy match match span submit revert event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractItemModel.new(
      bg_QAbstractItemModel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_index_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("index") %} Proc(Int32, Int32, Binding::QModelIndex*).new{|row, column| self.index(row, column).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_index_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index") %} Proc(Int32, Int32, Binding::QModelIndex*, Binding::QModelIndex*).new{|row, column, parent| self.index(row, column, ModelIndex.new(unwrap: parent)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_parent_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("parent") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*).new{|child| self.parent(ModelIndex.new(unwrap: child)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_sibling_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("sibling") %} Proc(Int32, Int32, Binding::QModelIndex*, Binding::QModelIndex*).new{|row, column, idx| self.sibling(row, column, ModelIndex.new(unwrap: idx)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_rowCount_: BindgenHelper.wrap_proc({% if forwarded.includes?("row_count") %} Proc(Int32).new{ self.row_count() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_rowCount_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("row_count") %} Proc(Binding::QModelIndex*, Int32).new{|parent| self.row_count(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_columnCount_: BindgenHelper.wrap_proc({% if forwarded.includes?("column_count") %} Proc(Int32).new{ self.column_count() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_columnCount_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("column_count") %} Proc(Binding::QModelIndex*, Int32).new{|parent| self.column_count(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_hasChildren_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_children?") %} Proc(Bool).new{ self.has_children?() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_hasChildren_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("has_children") %} Proc(Binding::QModelIndex*, Bool).new{|parent| self.has_children(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_data_const_QModelIndex_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("data") %} Proc(Binding::QModelIndex*, Int32, Binding::CrystalVariant).new{|index, role| (self.data(ModelIndex.new(unwrap: index), role).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_setData_const_QModelIndex_R_const_QVariant_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("set_data") %} Proc(Binding::QModelIndex*, Binding::CrystalVariant, Int32, Bool).new{|index, value, role| self.set_data(ModelIndex.new(unwrap: index), Qt::Variant.new(value), role) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_headerData_int_Qt__Orientation_int: BindgenHelper.wrap_proc({% if forwarded.includes?("header_data") %} Proc(Int32, Orientation, Int32, Binding::CrystalVariant).new{|section, orientation, role| (self.header_data(section, orientation, role).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_setHeaderData_int_Qt__Orientation_const_QVariant_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("set_header_data") %} Proc(Int32, Orientation, Binding::CrystalVariant, Int32, Bool).new{|section, orientation, value, role| self.set_header_data(section, orientation, Qt::Variant.new(value), role) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_mimeTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_types") %} Proc(Binding::QStringList*).new{ self.mime_types() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_mimeData_const_QModelIndexList_R: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_data") %} Proc(Binding::QModelIndexList*, Binding::QMimeData*).new{|indexes| self.mime_data(indexes).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_canDropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("can_drop_mime_data") %} Proc(Binding::QMimeData*, DropAction, Int32, Int32, Binding::QModelIndex*, Bool).new{|data, action, row, column, parent| self.can_drop_mime_data(MimeData.new(unwrap: data), action, row, column, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_dropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_mime_data") %} Proc(Binding::QMimeData*, DropAction, Int32, Int32, Binding::QModelIndex*, Bool).new{|data, action, row, column, parent| self.drop_mime_data(MimeData.new(unwrap: data), action, row, column, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_supportedDropActions_: BindgenHelper.wrap_proc({% if forwarded.includes?("supported_drop_actions") %} Proc(DropActions).new{ self.supported_drop_actions().to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_supportedDragActions_: BindgenHelper.wrap_proc({% if forwarded.includes?("supported_drag_actions") %} Proc(DropActions).new{ self.supported_drag_actions().to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertRows_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_rows") %} Proc(Int32, Int32, Bool).new{|row, count| self.insert_rows(row, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertRows_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_rows") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|row, count, parent| self.insert_rows(row, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertColumns_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_columns") %} Proc(Int32, Int32, Bool).new{|column, count| self.insert_columns(column, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertColumns_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_columns") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|column, count, parent| self.insert_columns(column, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeRows_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_rows") %} Proc(Int32, Int32, Bool).new{|row, count| self.remove_rows(row, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeRows_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_rows") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|row, count, parent| self.remove_rows(row, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeColumns_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_columns") %} Proc(Int32, Int32, Bool).new{|column, count| self.remove_columns(column, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeColumns_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_columns") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|column, count, parent| self.remove_columns(column, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_moveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("move_rows") %} Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Bool).new{|source_parent, source_row, count, destination_parent, destination_child| self.move_rows(ModelIndex.new(unwrap: source_parent), source_row, count, ModelIndex.new(unwrap: destination_parent), destination_child) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_moveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("move_columns") %} Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Bool).new{|source_parent, source_column, count, destination_parent, destination_child| self.move_columns(ModelIndex.new(unwrap: source_parent), source_column, count, ModelIndex.new(unwrap: destination_parent), destination_child) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_fetchMore_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("fetch_more") %} Proc(Binding::QModelIndex*, Void).new{|parent| self.fetch_more(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_canFetchMore_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("can_fetch_more") %} Proc(Binding::QModelIndex*, Bool).new{|parent| self.can_fetch_more(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_flags_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("flags") %} Proc(Binding::QModelIndex*, ItemFlags).new{|index| self.flags(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_sort_int_Qt__SortOrder: BindgenHelper.wrap_proc({% if forwarded.includes?("sort") %} Proc(Int32, SortOrder, Void).new{|column, order| self.sort(column, order) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_buddy_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("buddy") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*).new{|index| self.buddy(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("match") %} Proc(Binding::QModelIndex*, Int32, Binding::CrystalVariant, Int32, Binding::QModelIndexList*).new{|start, role, value, hits| self.match(ModelIndex.new(unwrap: start), role, Qt::Variant.new(value), hits) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("match") %} Proc(Binding::QModelIndex*, Int32, Binding::CrystalVariant, Int32, MatchFlags, Binding::QModelIndexList*).new{|start, role, value, hits, flags| self.match(ModelIndex.new(unwrap: start), role, Qt::Variant.new(value), hits, flags) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_span_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("span") %} Proc(Binding::QModelIndex*, Binding::QSize*).new{|index| self.span(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_submit_: BindgenHelper.wrap_proc({% if forwarded.includes?("submit") %} Proc(Bool).new{ self.submit() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_revert_: BindgenHelper.wrap_proc({% if forwarded.includes?("revert") %} Proc(Void).new{ self.revert() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractItemModel_JUMPTABLE_BgJumptable_QAbstractItemModel_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def has_index(row : Int32, column : Int32) : Bool
      Binding.bg_QAbstractItemModel_hasIndex_int_int(self, row, column)
    end
    
    def has_index(row : Int32, column : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_hasIndex_int_int_const_QModelIndex_R(self, row, column, parent)
    end
    
    abstract def index(row : Int32, column : Int32) : ModelIndex
    abstract def index(row : Int32, column : Int32, parent : ModelIndex) : ModelIndex
    abstract def parent(child : ModelIndex) : ModelIndex
    def sibling(row : Int32, column : Int32, idx : ModelIndex) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_sibling_int_int_const_QModelIndex_R(self, row, column, idx))
    end
    
    abstract def row_count() : Int32
    abstract def row_count(parent : ModelIndex) : Int32
    abstract def column_count() : Int32
    abstract def column_count(parent : ModelIndex) : Int32
    def has_children?() : Bool
      Binding.bg_QAbstractItemModel_hasChildren_(self)
    end
    
    def has_children(parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_hasChildren_const_QModelIndex_R(self, parent)
    end
    
    abstract def data(index : ModelIndex, role : Int32 = 0) : Variant
    def set_data(index : ModelIndex, value : Variant, role : Int32 = 2) : Bool
      Binding.bg_QAbstractItemModel_setData_const_QModelIndex_R_const_QVariant_R_int(self, index, (value.to_unsafe), role)
    end
    
    def header_data(section : Int32, orientation : Orientation, role : Int32 = 0) : Variant
      Qt::Variant.new(Binding.bg_QAbstractItemModel_headerData_int_Qt__Orientation_int(self, section, orientation, role))
    end
    
    def set_header_data(section : Int32, orientation : Orientation, value : Variant, role : Int32 = 2) : Bool
      Binding.bg_QAbstractItemModel_setHeaderData_int_Qt__Orientation_const_QVariant_R_int(self, section, orientation, (value.to_unsafe), role)
    end
    
    def mime_types() : Binding::QStringList*
      Binding.bg_QAbstractItemModel_mimeTypes_(self)
    end
    
    def mime_data(indexes : Binding::QModelIndexList*) : MimeData
      MimeData.new(unwrap: Binding.bg_QAbstractItemModel_mimeData_const_QModelIndexList_R(self, indexes))
    end
    
    def can_drop_mime_data(data : MimeData, action : DropAction, row : Int32, column : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_canDropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(self, data, action, row, column, parent)
    end
    
    def drop_mime_data(data : MimeData, action : DropAction, row : Int32, column : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_dropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(self, data, action, row, column, parent)
    end
    
    def supported_drop_actions() : DropActions
      Binding.bg_QAbstractItemModel_supportedDropActions_(self)
    end
    
    def supported_drag_actions() : DropActions
      Binding.bg_QAbstractItemModel_supportedDragActions_(self)
    end
    
    def insert_rows(row : Int32, count : Int32) : Bool
      Binding.bg_QAbstractItemModel_insertRows_int_int(self, row, count)
    end
    
    def insert_rows(row : Int32, count : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_insertRows_int_int_const_QModelIndex_R(self, row, count, parent)
    end
    
    def insert_columns(column : Int32, count : Int32) : Bool
      Binding.bg_QAbstractItemModel_insertColumns_int_int(self, column, count)
    end
    
    def insert_columns(column : Int32, count : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_insertColumns_int_int_const_QModelIndex_R(self, column, count, parent)
    end
    
    def remove_rows(row : Int32, count : Int32) : Bool
      Binding.bg_QAbstractItemModel_removeRows_int_int(self, row, count)
    end
    
    def remove_rows(row : Int32, count : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_removeRows_int_int_const_QModelIndex_R(self, row, count, parent)
    end
    
    def remove_columns(column : Int32, count : Int32) : Bool
      Binding.bg_QAbstractItemModel_removeColumns_int_int(self, column, count)
    end
    
    def remove_columns(column : Int32, count : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_removeColumns_int_int_const_QModelIndex_R(self, column, count, parent)
    end
    
    def move_rows(source_parent : ModelIndex, source_row : Int32, count : Int32, destination_parent : ModelIndex, destination_child : Int32) : Bool
      Binding.bg_QAbstractItemModel_moveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int(self, source_parent, source_row, count, destination_parent, destination_child)
    end
    
    def move_columns(source_parent : ModelIndex, source_column : Int32, count : Int32, destination_parent : ModelIndex, destination_child : Int32) : Bool
      Binding.bg_QAbstractItemModel_moveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int(self, source_parent, source_column, count, destination_parent, destination_child)
    end
    
    def insert_row(row : Int32) : Bool
      Binding.bg_QAbstractItemModel_insertRow_int(self, row)
    end
    
    def insert_row(row : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_insertRow_int_const_QModelIndex_R(self, row, parent)
    end
    
    def insert_column(column : Int32) : Bool
      Binding.bg_QAbstractItemModel_insertColumn_int(self, column)
    end
    
    def insert_column(column : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_insertColumn_int_const_QModelIndex_R(self, column, parent)
    end
    
    def remove_row(row : Int32) : Bool
      Binding.bg_QAbstractItemModel_removeRow_int(self, row)
    end
    
    def remove_row(row : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_removeRow_int_const_QModelIndex_R(self, row, parent)
    end
    
    def remove_column(column : Int32) : Bool
      Binding.bg_QAbstractItemModel_removeColumn_int(self, column)
    end
    
    def remove_column(column : Int32, parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_removeColumn_int_const_QModelIndex_R(self, column, parent)
    end
    
    def move_row(source_parent : ModelIndex, source_row : Int32, destination_parent : ModelIndex, destination_child : Int32) : Bool
      Binding.bg_QAbstractItemModel_moveRow_const_QModelIndex_R_int_const_QModelIndex_R_int(self, source_parent, source_row, destination_parent, destination_child)
    end
    
    def move_column(source_parent : ModelIndex, source_column : Int32, destination_parent : ModelIndex, destination_child : Int32) : Bool
      Binding.bg_QAbstractItemModel_moveColumn_const_QModelIndex_R_int_const_QModelIndex_R_int(self, source_parent, source_column, destination_parent, destination_child)
    end
    
    def fetch_more(parent : ModelIndex) : Void
      Binding.bg_QAbstractItemModel_fetchMore_const_QModelIndex_R(self, parent)
    end
    
    def can_fetch_more(parent : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_canFetchMore_const_QModelIndex_R(self, parent)
    end
    
    def flags(index : ModelIndex) : ItemFlags
      Binding.bg_QAbstractItemModel_flags_const_QModelIndex_R(self, index)
    end
    
    def sort(column : Int32, order : SortOrder = SortOrder::AscendingOrder) : Void
      Binding.bg_QAbstractItemModel_sort_int_Qt__SortOrder(self, column, order)
    end
    
    def buddy(index : ModelIndex) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_buddy_const_QModelIndex_R(self, index))
    end
    
    def match(start : ModelIndex, role : Int32, value : Variant, hits : Int32 = 1) : Binding::QModelIndexList*
      Binding.bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int(self, start, role, (value.to_unsafe), hits)
    end
    
    def match(start : ModelIndex, role : Int32, value : Variant, hits : Int32, flags : MatchFlags) : Binding::QModelIndexList*
      Binding.bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags(self, start, role, (value.to_unsafe), hits, flags)
    end
    
    def span(index : ModelIndex) : Binding::QSize*
      Binding.bg_QAbstractItemModel_span_const_QModelIndex_R(self, index)
    end
    
    def check_index(index : ModelIndex) : Bool
      Binding.bg_QAbstractItemModel_checkIndex_const_QModelIndex_R(self, index)
    end
    
    def check_index(index : ModelIndex, options : AbstractItemModel::CheckIndexOptions) : Bool
      Binding.bg_QAbstractItemModel_checkIndex_const_QModelIndex_R_QAbstractItemModel__CheckIndexOptions(self, index, options)
    end
    
    def data_changed(top_left : ModelIndex, bottom_right : ModelIndex) : Void
      Binding.bg_QAbstractItemModel_dataChanged_const_QModelIndex_R_const_QModelIndex_R(self, top_left, bottom_right)
    end
    
    def data_changed(top_left : ModelIndex, bottom_right : ModelIndex, roles : Enumerable(Int32)) : Void
      Binding.bg_QAbstractItemModel_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(self, top_left, bottom_right, BindgenHelper.wrap_container(Container_QVector_int_, roles).to_unsafe)
    end
    
    def header_data_changed(orientation : Orientation, first : Int32, last : Int32) : Void
      Binding.bg_QAbstractItemModel_headerDataChanged_Qt__Orientation_int_int(self, orientation, first, last)
    end
    
    def layout_changed() : Void
      Binding.bg_QAbstractItemModel_layoutChanged_(self)
    end
    
    def layout_changed(parents : Enumerable(Binding::QPersistentModelIndex*)) : Void
      Binding.bg_QAbstractItemModel_layoutChanged_const_QList_QPersistentModelIndex__R(self, BindgenHelper.wrap_container(Container_QList_QPersistentModelIndex_, parents).to_unsafe)
    end
    
    def layout_changed(parents : Enumerable(Binding::QPersistentModelIndex*), hint : AbstractItemModel::LayoutChangeHint = AbstractItemModel::LayoutChangeHint::NoLayoutChangeHint) : Void
      Binding.bg_QAbstractItemModel_layoutChanged_const_QList_QPersistentModelIndex__R_QAbstractItemModel__LayoutChangeHint(self, BindgenHelper.wrap_container(Container_QList_QPersistentModelIndex_, parents).to_unsafe, hint)
    end
    
    def layout_about_to_be_changed() : Void
      Binding.bg_QAbstractItemModel_layoutAboutToBeChanged_(self)
    end
    
    def layout_about_to_be_changed(parents : Enumerable(Binding::QPersistentModelIndex*)) : Void
      Binding.bg_QAbstractItemModel_layoutAboutToBeChanged_const_QList_QPersistentModelIndex__R(self, BindgenHelper.wrap_container(Container_QList_QPersistentModelIndex_, parents).to_unsafe)
    end
    
    def layout_about_to_be_changed(parents : Enumerable(Binding::QPersistentModelIndex*), hint : AbstractItemModel::LayoutChangeHint = AbstractItemModel::LayoutChangeHint::NoLayoutChangeHint) : Void
      Binding.bg_QAbstractItemModel_layoutAboutToBeChanged_const_QList_QPersistentModelIndex__R_QAbstractItemModel__LayoutChangeHint(self, BindgenHelper.wrap_container(Container_QList_QPersistentModelIndex_, parents).to_unsafe, hint)
    end
    
    def submit() : Bool
      Binding.bg_QAbstractItemModel_submit_(self)
    end
    
    def revert() : Void
      Binding.bg_QAbstractItemModel_revert_(self)
    end
    
    protected def reset_internal_data() : Void
      Binding.bg_QAbstractItemModel_resetInternalData_(self)
    end
    
    protected def initialize(dd : Binding::QAbstractItemModelPrivate*, parent : Object? = nil)
      result = Binding.bg_QAbstractItemModel__CONSTRUCT_QAbstractItemModelPrivate_R_QObject_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractItemModel)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall index index parent sibling row_count row_count column_count column_count has_children? has_children data set_data header_data set_header_data mime_types mime_data can_drop_mime_data drop_mime_data supported_drop_actions supported_drag_actions insert_rows insert_rows insert_columns insert_columns remove_rows remove_rows remove_columns remove_columns move_rows move_columns fetch_more can_fetch_more flags sort buddy match match span submit revert event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractItemModel.new(
      bg_QAbstractItemModel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_index_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("index") %} Proc(Int32, Int32, Binding::QModelIndex*).new{|row, column| self.index(row, column).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_index_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index") %} Proc(Int32, Int32, Binding::QModelIndex*, Binding::QModelIndex*).new{|row, column, parent| self.index(row, column, ModelIndex.new(unwrap: parent)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_parent_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("parent") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*).new{|child| self.parent(ModelIndex.new(unwrap: child)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_sibling_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("sibling") %} Proc(Int32, Int32, Binding::QModelIndex*, Binding::QModelIndex*).new{|row, column, idx| self.sibling(row, column, ModelIndex.new(unwrap: idx)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_rowCount_: BindgenHelper.wrap_proc({% if forwarded.includes?("row_count") %} Proc(Int32).new{ self.row_count() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_rowCount_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("row_count") %} Proc(Binding::QModelIndex*, Int32).new{|parent| self.row_count(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_columnCount_: BindgenHelper.wrap_proc({% if forwarded.includes?("column_count") %} Proc(Int32).new{ self.column_count() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_columnCount_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("column_count") %} Proc(Binding::QModelIndex*, Int32).new{|parent| self.column_count(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_hasChildren_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_children?") %} Proc(Bool).new{ self.has_children?() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_hasChildren_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("has_children") %} Proc(Binding::QModelIndex*, Bool).new{|parent| self.has_children(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_data_const_QModelIndex_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("data") %} Proc(Binding::QModelIndex*, Int32, Binding::CrystalVariant).new{|index, role| (self.data(ModelIndex.new(unwrap: index), role).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_setData_const_QModelIndex_R_const_QVariant_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("set_data") %} Proc(Binding::QModelIndex*, Binding::CrystalVariant, Int32, Bool).new{|index, value, role| self.set_data(ModelIndex.new(unwrap: index), Qt::Variant.new(value), role) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_headerData_int_Qt__Orientation_int: BindgenHelper.wrap_proc({% if forwarded.includes?("header_data") %} Proc(Int32, Orientation, Int32, Binding::CrystalVariant).new{|section, orientation, role| (self.header_data(section, orientation, role).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_setHeaderData_int_Qt__Orientation_const_QVariant_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("set_header_data") %} Proc(Int32, Orientation, Binding::CrystalVariant, Int32, Bool).new{|section, orientation, value, role| self.set_header_data(section, orientation, Qt::Variant.new(value), role) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_mimeTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_types") %} Proc(Binding::QStringList*).new{ self.mime_types() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_mimeData_const_QModelIndexList_R: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_data") %} Proc(Binding::QModelIndexList*, Binding::QMimeData*).new{|indexes| self.mime_data(indexes).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_canDropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("can_drop_mime_data") %} Proc(Binding::QMimeData*, DropAction, Int32, Int32, Binding::QModelIndex*, Bool).new{|data, action, row, column, parent| self.can_drop_mime_data(MimeData.new(unwrap: data), action, row, column, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_dropMimeData_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_mime_data") %} Proc(Binding::QMimeData*, DropAction, Int32, Int32, Binding::QModelIndex*, Bool).new{|data, action, row, column, parent| self.drop_mime_data(MimeData.new(unwrap: data), action, row, column, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_supportedDropActions_: BindgenHelper.wrap_proc({% if forwarded.includes?("supported_drop_actions") %} Proc(DropActions).new{ self.supported_drop_actions().to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_supportedDragActions_: BindgenHelper.wrap_proc({% if forwarded.includes?("supported_drag_actions") %} Proc(DropActions).new{ self.supported_drag_actions().to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertRows_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_rows") %} Proc(Int32, Int32, Bool).new{|row, count| self.insert_rows(row, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertRows_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_rows") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|row, count, parent| self.insert_rows(row, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertColumns_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_columns") %} Proc(Int32, Int32, Bool).new{|column, count| self.insert_columns(column, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_insertColumns_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_columns") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|column, count, parent| self.insert_columns(column, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeRows_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_rows") %} Proc(Int32, Int32, Bool).new{|row, count| self.remove_rows(row, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeRows_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_rows") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|row, count, parent| self.remove_rows(row, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeColumns_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_columns") %} Proc(Int32, Int32, Bool).new{|column, count| self.remove_columns(column, count) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_removeColumns_int_int_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("remove_columns") %} Proc(Int32, Int32, Binding::QModelIndex*, Bool).new{|column, count, parent| self.remove_columns(column, count, ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_moveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("move_rows") %} Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Bool).new{|source_parent, source_row, count, destination_parent, destination_child| self.move_rows(ModelIndex.new(unwrap: source_parent), source_row, count, ModelIndex.new(unwrap: destination_parent), destination_child) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_moveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("move_columns") %} Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Bool).new{|source_parent, source_column, count, destination_parent, destination_child| self.move_columns(ModelIndex.new(unwrap: source_parent), source_column, count, ModelIndex.new(unwrap: destination_parent), destination_child) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_fetchMore_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("fetch_more") %} Proc(Binding::QModelIndex*, Void).new{|parent| self.fetch_more(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_canFetchMore_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("can_fetch_more") %} Proc(Binding::QModelIndex*, Bool).new{|parent| self.can_fetch_more(ModelIndex.new(unwrap: parent)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_flags_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("flags") %} Proc(Binding::QModelIndex*, ItemFlags).new{|index| self.flags(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_sort_int_Qt__SortOrder: BindgenHelper.wrap_proc({% if forwarded.includes?("sort") %} Proc(Int32, SortOrder, Void).new{|column, order| self.sort(column, order) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_buddy_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("buddy") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*).new{|index| self.buddy(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int: BindgenHelper.wrap_proc({% if forwarded.includes?("match") %} Proc(Binding::QModelIndex*, Int32, Binding::CrystalVariant, Int32, Binding::QModelIndexList*).new{|start, role, value, hits| self.match(ModelIndex.new(unwrap: start), role, Qt::Variant.new(value), hits) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_match_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("match") %} Proc(Binding::QModelIndex*, Int32, Binding::CrystalVariant, Int32, MatchFlags, Binding::QModelIndexList*).new{|start, role, value, hits, flags| self.match(ModelIndex.new(unwrap: start), role, Qt::Variant.new(value), hits, flags) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_span_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("span") %} Proc(Binding::QModelIndex*, Binding::QSize*).new{|index| self.span(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemModel_submit_: BindgenHelper.wrap_proc({% if forwarded.includes?("submit") %} Proc(Bool).new{ self.submit() } {% else %} nil {% end %}),
      bg_QAbstractItemModel_revert_: BindgenHelper.wrap_proc({% if forwarded.includes?("revert") %} Proc(Void).new{ self.revert() } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractItemModel_JUMPTABLE_BgJumptable_QAbstractItemModel_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def create_index(row : Int32, column : Int32, data : Void*? = nil) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_createIndex_int_int_void_X(self, row, column, data))
    end
    
    protected def create_index(row : Int32, column : Int32, id : UInt64) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_createIndex_int_int_quintptr(self, row, column, id))
    end
    
    protected def encode_data(indexes : Binding::QModelIndexList*, stream : Binding::QDataStream*) : Void
      Binding.bg_QAbstractItemModel_encodeData_const_QModelIndexList_R_QDataStream_R(self, indexes, stream)
    end
    
    protected def decode_data(row : Int32, column : Int32, parent : ModelIndex, stream : Binding::QDataStream*) : Bool
      Binding.bg_QAbstractItemModel_decodeData_int_int_const_QModelIndex_R_QDataStream_R(self, row, column, parent, stream)
    end
    
    protected def begin_insert_rows(parent : ModelIndex, first : Int32, last : Int32) : Void
      Binding.bg_QAbstractItemModel_beginInsertRows_const_QModelIndex_R_int_int(self, parent, first, last)
    end
    
    protected def end_insert_rows() : Void
      Binding.bg_QAbstractItemModel_endInsertRows_(self)
    end
    
    protected def begin_remove_rows(parent : ModelIndex, first : Int32, last : Int32) : Void
      Binding.bg_QAbstractItemModel_beginRemoveRows_const_QModelIndex_R_int_int(self, parent, first, last)
    end
    
    protected def end_remove_rows() : Void
      Binding.bg_QAbstractItemModel_endRemoveRows_(self)
    end
    
    protected def begin_move_rows(source_parent : ModelIndex, source_first : Int32, source_last : Int32, destination_parent : ModelIndex, destination_row : Int32) : Bool
      Binding.bg_QAbstractItemModel_beginMoveRows_const_QModelIndex_R_int_int_const_QModelIndex_R_int(self, source_parent, source_first, source_last, destination_parent, destination_row)
    end
    
    protected def end_move_rows() : Void
      Binding.bg_QAbstractItemModel_endMoveRows_(self)
    end
    
    protected def begin_insert_columns(parent : ModelIndex, first : Int32, last : Int32) : Void
      Binding.bg_QAbstractItemModel_beginInsertColumns_const_QModelIndex_R_int_int(self, parent, first, last)
    end
    
    protected def end_insert_columns() : Void
      Binding.bg_QAbstractItemModel_endInsertColumns_(self)
    end
    
    protected def begin_remove_columns(parent : ModelIndex, first : Int32, last : Int32) : Void
      Binding.bg_QAbstractItemModel_beginRemoveColumns_const_QModelIndex_R_int_int(self, parent, first, last)
    end
    
    protected def end_remove_columns() : Void
      Binding.bg_QAbstractItemModel_endRemoveColumns_(self)
    end
    
    protected def begin_move_columns(source_parent : ModelIndex, source_first : Int32, source_last : Int32, destination_parent : ModelIndex, destination_column : Int32) : Bool
      Binding.bg_QAbstractItemModel_beginMoveColumns_const_QModelIndex_R_int_int_const_QModelIndex_R_int(self, source_parent, source_first, source_last, destination_parent, destination_column)
    end
    
    protected def end_move_columns() : Void
      Binding.bg_QAbstractItemModel_endMoveColumns_(self)
    end
    
    protected def begin_reset_model() : Void
      Binding.bg_QAbstractItemModel_beginResetModel_(self)
    end
    
    protected def end_reset_model() : Void
      Binding.bg_QAbstractItemModel_endResetModel_(self)
    end
    
    protected def change_persistent_index(from : ModelIndex, to : ModelIndex) : Void
      Binding.bg_QAbstractItemModel_changePersistentIndex_const_QModelIndex_R_const_QModelIndex_R(self, from, to)
    end
    
    protected def change_persistent_index_list(from : Binding::QModelIndexList*, to : Binding::QModelIndexList*) : Void
      Binding.bg_QAbstractItemModel_changePersistentIndexList_const_QModelIndexList_R_const_QModelIndexList_R(self, from, to)
    end
    
    protected def persistent_index_list() : Binding::QModelIndexList*
      Binding.bg_QAbstractItemModel_persistentIndexList_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractItemModel_staticMetaObject_STATIC_GETTER_()
    end
    
    enum LayoutChangeHint : UInt32
      NoLayoutChangeHint = 0
      VerticalSortHint = 1
      HorizontalSortHint = 2
    end
    enum CheckIndexOption : Int32
      NoOption = 0
      IndexIsValid = 1
      DoNotUseParent = 2
      ParentIsInvalid = 4
    end
    @[Flags]
    enum CheckIndexOptions : Int32
      NoOption = 0
      IndexIsValid = 1
      DoNotUseParent = 2
      ParentIsInvalid = 4
    end
    def on_data_changed(&_proc_ : Proc(ModelIndex, ModelIndex, Enumerable(Int32), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_dataChanged_CrystalProc_void__const_QModelIndex_R__const_QModelIndex_R__const_QVector_int__R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Binding::QModelIndex*, Binding::ContainerQVectorInt*, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), ModelIndex.new(unwrap: arg1), Container_QVector_int_.new(unwrap: arg2)) end)))
    end
    
    def on_header_data_changed(&_proc_ : Proc(Orientation, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_headerDataChanged_CrystalProc_void__Qt__Orientation__int__int_(self, BindgenHelper.wrap_proc(Proc(Orientation, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(arg0, arg1, arg2) end)))
    end
    
    def on_layout_changed(&_proc_ : Proc(Enumerable(Binding::QPersistentModelIndex*), AbstractItemModel::LayoutChangeHint, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_layoutChanged_CrystalProc_void__const_QList_QPersistentModelIndex__R__QAbstractItemModel__LayoutChangeHint_(self, BindgenHelper.wrap_proc(Proc(Binding::ContainerQListQPersistentModelIndex*, AbstractItemModel::LayoutChangeHint, Void).new do |arg0, arg1| _proc_.call(Container_QList_QPersistentModelIndex_.new(unwrap: arg0), arg1) end)))
    end
    
    def on_layout_about_to_be_changed(&_proc_ : Proc(Enumerable(Binding::QPersistentModelIndex*), AbstractItemModel::LayoutChangeHint, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_layoutAboutToBeChanged_CrystalProc_void__const_QList_QPersistentModelIndex__R__QAbstractItemModel__LayoutChangeHint_(self, BindgenHelper.wrap_proc(Proc(Binding::ContainerQListQPersistentModelIndex*, AbstractItemModel::LayoutChangeHint, Void).new do |arg0, arg1| _proc_.call(Container_QList_QPersistentModelIndex_.new(unwrap: arg0), arg1) end)))
    end
    
    def on_rows_about_to_be_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsAboutToBeInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_rows_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_rows_about_to_be_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsAboutToBeRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_rows_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_about_to_be_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsAboutToBeInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_about_to_be_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsAboutToBeRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_model_about_to_be_reset(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_modelAboutToBeReset_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_model_reset(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_modelReset_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_rows_about_to_be_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsAboutToBeMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def on_rows_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def on_columns_about_to_be_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsAboutToBeMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def on_columns_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractItemModel*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractItemModel)
      end
      def sibling(row : Int32, column : Int32, idx : ModelIndex) : ModelIndex
        ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_sibling_SUPER_int_int_const_QModelIndex_R(@myself, row, column, idx))
      end
      
      def has_children(parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_hasChildren_SUPER_const_QModelIndex_R(@myself, parent)
      end
      
      def set_data(index : ModelIndex, value : Variant, role : Int32 = 2) : Bool
        Binding.bg_QAbstractItemModel_setData_SUPER_const_QModelIndex_R_const_QVariant_R_int(@myself, index, (value.to_unsafe), role)
      end
      
      def header_data(section : Int32, orientation : Orientation, role : Int32 = 0) : Variant
        Qt::Variant.new(Binding.bg_QAbstractItemModel_headerData_SUPER_int_Qt__Orientation_int(@myself, section, orientation, role))
      end
      
      def set_header_data(section : Int32, orientation : Orientation, value : Variant, role : Int32 = 2) : Bool
        Binding.bg_QAbstractItemModel_setHeaderData_SUPER_int_Qt__Orientation_const_QVariant_R_int(@myself, section, orientation, (value.to_unsafe), role)
      end
      
      def mime_types() : Binding::QStringList*
        Binding.bg_QAbstractItemModel_mimeTypes_SUPER_(@myself)
      end
      
      def mime_data(indexes : Binding::QModelIndexList*) : MimeData
        MimeData.new(unwrap: Binding.bg_QAbstractItemModel_mimeData_SUPER_const_QModelIndexList_R(@myself, indexes))
      end
      
      def can_drop_mime_data(data : MimeData, action : DropAction, row : Int32, column : Int32, parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_canDropMimeData_SUPER_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(@myself, data, action, row, column, parent)
      end
      
      def drop_mime_data(data : MimeData, action : DropAction, row : Int32, column : Int32, parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_dropMimeData_SUPER_const_QMimeData_X_Qt__DropAction_int_int_const_QModelIndex_R(@myself, data, action, row, column, parent)
      end
      
      def supported_drop_actions() : DropActions
        Binding.bg_QAbstractItemModel_supportedDropActions_SUPER_(@myself)
      end
      
      def supported_drag_actions() : DropActions
        Binding.bg_QAbstractItemModel_supportedDragActions_SUPER_(@myself)
      end
      
      def insert_rows(row : Int32, count : Int32, parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_insertRows_SUPER_int_int_const_QModelIndex_R(@myself, row, count, parent)
      end
      
      def insert_columns(column : Int32, count : Int32, parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_insertColumns_SUPER_int_int_const_QModelIndex_R(@myself, column, count, parent)
      end
      
      def remove_rows(row : Int32, count : Int32, parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_removeRows_SUPER_int_int_const_QModelIndex_R(@myself, row, count, parent)
      end
      
      def remove_columns(column : Int32, count : Int32, parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_removeColumns_SUPER_int_int_const_QModelIndex_R(@myself, column, count, parent)
      end
      
      def move_rows(source_parent : ModelIndex, source_row : Int32, count : Int32, destination_parent : ModelIndex, destination_child : Int32) : Bool
        Binding.bg_QAbstractItemModel_moveRows_SUPER_const_QModelIndex_R_int_int_const_QModelIndex_R_int(@myself, source_parent, source_row, count, destination_parent, destination_child)
      end
      
      def move_columns(source_parent : ModelIndex, source_column : Int32, count : Int32, destination_parent : ModelIndex, destination_child : Int32) : Bool
        Binding.bg_QAbstractItemModel_moveColumns_SUPER_const_QModelIndex_R_int_int_const_QModelIndex_R_int(@myself, source_parent, source_column, count, destination_parent, destination_child)
      end
      
      def fetch_more(parent : ModelIndex) : Void
        Binding.bg_QAbstractItemModel_fetchMore_SUPER_const_QModelIndex_R(@myself, parent)
      end
      
      def can_fetch_more(parent : ModelIndex) : Bool
        Binding.bg_QAbstractItemModel_canFetchMore_SUPER_const_QModelIndex_R(@myself, parent)
      end
      
      def flags(index : ModelIndex) : ItemFlags
        Binding.bg_QAbstractItemModel_flags_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      def sort(column : Int32, order : SortOrder = SortOrder::AscendingOrder) : Void
        Binding.bg_QAbstractItemModel_sort_SUPER_int_Qt__SortOrder(@myself, column, order)
      end
      
      def buddy(index : ModelIndex) : ModelIndex
        ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_buddy_SUPER_const_QModelIndex_R(@myself, index))
      end
      
      def match(start : ModelIndex, role : Int32, value : Variant, hits : Int32, flags : MatchFlags) : Binding::QModelIndexList*
        Binding.bg_QAbstractItemModel_match_SUPER_const_QModelIndex_R_int_const_QVariant_R_int_Qt__MatchFlags(@myself, start, role, (value.to_unsafe), hits, flags)
      end
      
      def span(index : ModelIndex) : Binding::QSize*
        Binding.bg_QAbstractItemModel_span_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      def submit() : Bool
        Binding.bg_QAbstractItemModel_submit_SUPER_(@myself)
      end
      
      def revert() : Void
        Binding.bg_QAbstractItemModel_revert_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class IODevice < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QIODevice_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QIODevice_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize()
      result = Binding.bg_QIODevice__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(IODevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall sequential? open close pos size seek at_end reset bytes_available bytes_to_write can_read_line wait_for_ready_read wait_for_bytes_written read_data read_line_data write_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QIODevice.new(
      bg_QIODevice_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QIODevice_isSequential_: BindgenHelper.wrap_proc({% if forwarded.includes?("sequential?") %} Proc(Bool).new{ self.sequential?() } {% else %} nil {% end %}),
      bg_QIODevice_open_QIODevice__OpenMode: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(IODevice::OpenMode, Bool).new{|mode| self.open(mode) } {% else %} nil {% end %}),
      bg_QIODevice_close_: BindgenHelper.wrap_proc({% if forwarded.includes?("close") %} Proc(Void).new{ self.close() } {% else %} nil {% end %}),
      bg_QIODevice_pos_: BindgenHelper.wrap_proc({% if forwarded.includes?("pos") %} Proc(Int64).new{ self.pos() } {% else %} nil {% end %}),
      bg_QIODevice_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Int64).new{ self.size() } {% else %} nil {% end %}),
      bg_QIODevice_seek_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("seek") %} Proc(Int64, Bool).new{|pos| self.seek(pos) } {% else %} nil {% end %}),
      bg_QIODevice_atEnd_: BindgenHelper.wrap_proc({% if forwarded.includes?("at_end") %} Proc(Bool).new{ self.at_end() } {% else %} nil {% end %}),
      bg_QIODevice_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Bool).new{ self.reset() } {% else %} nil {% end %}),
      bg_QIODevice_bytesAvailable_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_available") %} Proc(Int64).new{ self.bytes_available() } {% else %} nil {% end %}),
      bg_QIODevice_bytesToWrite_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_to_write") %} Proc(Int64).new{ self.bytes_to_write() } {% else %} nil {% end %}),
      bg_QIODevice_canReadLine_: BindgenHelper.wrap_proc({% if forwarded.includes?("can_read_line") %} Proc(Bool).new{ self.can_read_line() } {% else %} nil {% end %}),
      bg_QIODevice_waitForReadyRead_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_ready_read") %} Proc(Int32, Bool).new{|msecs| self.wait_for_ready_read(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_waitForBytesWritten_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_bytes_written") %} Proc(Int32, Bool).new{|msecs| self.wait_for_bytes_written(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_readData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_data") %} Proc(UInt8*, Int64, Int64).new{|data, maxlen| self.read_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_readLineData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_line_data") %} Proc(UInt8*, Int64, Int64).new{|data, maxlen| self.read_line_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_writeData_const_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("write_data") %} Proc(UInt8*, Int64, Int64).new{|data, len| self.write_data(data, len) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QIODevice_JUMPTABLE_BgJumptable_QIODevice_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Object)
      result = Binding.bg_QIODevice__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(IODevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall sequential? open close pos size seek at_end reset bytes_available bytes_to_write can_read_line wait_for_ready_read wait_for_bytes_written read_data read_line_data write_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QIODevice.new(
      bg_QIODevice_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QIODevice_isSequential_: BindgenHelper.wrap_proc({% if forwarded.includes?("sequential?") %} Proc(Bool).new{ self.sequential?() } {% else %} nil {% end %}),
      bg_QIODevice_open_QIODevice__OpenMode: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(IODevice::OpenMode, Bool).new{|mode| self.open(mode) } {% else %} nil {% end %}),
      bg_QIODevice_close_: BindgenHelper.wrap_proc({% if forwarded.includes?("close") %} Proc(Void).new{ self.close() } {% else %} nil {% end %}),
      bg_QIODevice_pos_: BindgenHelper.wrap_proc({% if forwarded.includes?("pos") %} Proc(Int64).new{ self.pos() } {% else %} nil {% end %}),
      bg_QIODevice_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Int64).new{ self.size() } {% else %} nil {% end %}),
      bg_QIODevice_seek_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("seek") %} Proc(Int64, Bool).new{|pos| self.seek(pos) } {% else %} nil {% end %}),
      bg_QIODevice_atEnd_: BindgenHelper.wrap_proc({% if forwarded.includes?("at_end") %} Proc(Bool).new{ self.at_end() } {% else %} nil {% end %}),
      bg_QIODevice_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Bool).new{ self.reset() } {% else %} nil {% end %}),
      bg_QIODevice_bytesAvailable_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_available") %} Proc(Int64).new{ self.bytes_available() } {% else %} nil {% end %}),
      bg_QIODevice_bytesToWrite_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_to_write") %} Proc(Int64).new{ self.bytes_to_write() } {% else %} nil {% end %}),
      bg_QIODevice_canReadLine_: BindgenHelper.wrap_proc({% if forwarded.includes?("can_read_line") %} Proc(Bool).new{ self.can_read_line() } {% else %} nil {% end %}),
      bg_QIODevice_waitForReadyRead_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_ready_read") %} Proc(Int32, Bool).new{|msecs| self.wait_for_ready_read(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_waitForBytesWritten_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_bytes_written") %} Proc(Int32, Bool).new{|msecs| self.wait_for_bytes_written(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_readData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_data") %} Proc(UInt8*, Int64, Int64).new{|data, maxlen| self.read_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_readLineData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_line_data") %} Proc(UInt8*, Int64, Int64).new{|data, maxlen| self.read_line_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_writeData_const_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("write_data") %} Proc(UInt8*, Int64, Int64).new{|data, len| self.write_data(data, len) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QIODevice_JUMPTABLE_BgJumptable_QIODevice_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def open_mode() : IODevice::OpenMode
      Binding.bg_QIODevice_openMode_(self)
    end
    
    def text_mode_enabled=(enabled : Bool) : Void
      Binding.bg_QIODevice_setTextModeEnabled_bool(self, enabled)
    end
    
    def text_mode_enabled?() : Bool
      Binding.bg_QIODevice_isTextModeEnabled_(self)
    end
    
    def open?() : Bool
      Binding.bg_QIODevice_isOpen_(self)
    end
    
    def readable?() : Bool
      Binding.bg_QIODevice_isReadable_(self)
    end
    
    def writable?() : Bool
      Binding.bg_QIODevice_isWritable_(self)
    end
    
    def sequential?() : Bool
      Binding.bg_QIODevice_isSequential_(self)
    end
    
    def read_channel_count() : Int32
      Binding.bg_QIODevice_readChannelCount_(self)
    end
    
    def write_channel_count() : Int32
      Binding.bg_QIODevice_writeChannelCount_(self)
    end
    
    def current_read_channel() : Int32
      Binding.bg_QIODevice_currentReadChannel_(self)
    end
    
    def current_read_channel=(channel : Int32) : Void
      Binding.bg_QIODevice_setCurrentReadChannel_int(self, channel)
    end
    
    def current_write_channel() : Int32
      Binding.bg_QIODevice_currentWriteChannel_(self)
    end
    
    def current_write_channel=(channel : Int32) : Void
      Binding.bg_QIODevice_setCurrentWriteChannel_int(self, channel)
    end
    
    def open(mode : IODevice::OpenMode) : Bool
      Binding.bg_QIODevice_open_QIODevice__OpenMode(self, mode)
    end
    
    def close() : Void
      Binding.bg_QIODevice_close_(self)
    end
    
    def pos() : Int64
      Binding.bg_QIODevice_pos_(self)
    end
    
    def size() : Int64
      Binding.bg_QIODevice_size_(self)
    end
    
    def seek(pos : Int64) : Bool
      Binding.bg_QIODevice_seek_qint64(self, pos)
    end
    
    def at_end() : Bool
      Binding.bg_QIODevice_atEnd_(self)
    end
    
    def reset() : Bool
      Binding.bg_QIODevice_reset_(self)
    end
    
    def bytes_available() : Int64
      Binding.bg_QIODevice_bytesAvailable_(self)
    end
    
    def bytes_to_write() : Int64
      Binding.bg_QIODevice_bytesToWrite_(self)
    end
    
    def read(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_read_char_X_qint64(self, data, maxlen)
    end
    
    def read(maxlen : Int64) : Binding::QByteArray*
      Binding.bg_QIODevice_read_qint64(self, maxlen)
    end
    
    def read_all() : Binding::QByteArray*
      Binding.bg_QIODevice_readAll_(self)
    end
    
    def read_line(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_readLine_char_X_qint64(self, data, maxlen)
    end
    
    def read_line(maxlen : Int64 = 0i64) : Binding::QByteArray*
      Binding.bg_QIODevice_readLine_qint64(self, maxlen)
    end
    
    def can_read_line() : Bool
      Binding.bg_QIODevice_canReadLine_(self)
    end
    
    def start_transaction() : Void
      Binding.bg_QIODevice_startTransaction_(self)
    end
    
    def commit_transaction() : Void
      Binding.bg_QIODevice_commitTransaction_(self)
    end
    
    def rollback_transaction() : Void
      Binding.bg_QIODevice_rollbackTransaction_(self)
    end
    
    def transaction_started?() : Bool
      Binding.bg_QIODevice_isTransactionStarted_(self)
    end
    
    def write(data : UInt8*, len : Int64) : Int64
      Binding.bg_QIODevice_write_const_char_X_qint64(self, data, len)
    end
    
    def write(data : UInt8*) : Int64
      Binding.bg_QIODevice_write_const_char_X(self, data)
    end
    
    def write(data : Binding::QByteArray*) : Int64
      Binding.bg_QIODevice_write_const_QByteArray_R(self, data)
    end
    
    def peek(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_peek_char_X_qint64(self, data, maxlen)
    end
    
    def peek(maxlen : Int64) : Binding::QByteArray*
      Binding.bg_QIODevice_peek_qint64(self, maxlen)
    end
    
    def skip(max_size : Int64) : Int64
      Binding.bg_QIODevice_skip_qint64(self, max_size)
    end
    
    def wait_for_ready_read(msecs : Int32) : Bool
      Binding.bg_QIODevice_waitForReadyRead_int(self, msecs)
    end
    
    def wait_for_bytes_written(msecs : Int32) : Bool
      Binding.bg_QIODevice_waitForBytesWritten_int(self, msecs)
    end
    
    def unget_char(c : UInt8) : Void
      Binding.bg_QIODevice_ungetChar_char(self, c)
    end
    
    def put_char(c : UInt8) : Bool
      Binding.bg_QIODevice_putChar_char(self, c)
    end
    
    def get_char(c : UInt8*) : Bool
      Binding.bg_QIODevice_getChar_char_X(self, c)
    end
    
    def error_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIODevice_errorString_(self))
    end
    
    def ready_read() : Void
      Binding.bg_QIODevice_readyRead_(self)
    end
    
    def channel_ready_read(channel : Int32) : Void
      Binding.bg_QIODevice_channelReadyRead_int(self, channel)
    end
    
    def bytes_written(bytes : Int64) : Void
      Binding.bg_QIODevice_bytesWritten_qint64(self, bytes)
    end
    
    def channel_bytes_written(channel : Int32, bytes : Int64) : Void
      Binding.bg_QIODevice_channelBytesWritten_int_qint64(self, channel, bytes)
    end
    
    def about_to_close() : Void
      Binding.bg_QIODevice_aboutToClose_(self)
    end
    
    def read_channel_finished() : Void
      Binding.bg_QIODevice_readChannelFinished_(self)
    end
    
    protected def initialize(dd : Binding::QIODevicePrivate*, parent : Object? = nil)
      result = Binding.bg_QIODevice__CONSTRUCT_QIODevicePrivate_R_QObject_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(IODevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall sequential? open close pos size seek at_end reset bytes_available bytes_to_write can_read_line wait_for_ready_read wait_for_bytes_written read_data read_line_data write_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QIODevice.new(
      bg_QIODevice_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QIODevice_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QIODevice_isSequential_: BindgenHelper.wrap_proc({% if forwarded.includes?("sequential?") %} Proc(Bool).new{ self.sequential?() } {% else %} nil {% end %}),
      bg_QIODevice_open_QIODevice__OpenMode: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(IODevice::OpenMode, Bool).new{|mode| self.open(mode) } {% else %} nil {% end %}),
      bg_QIODevice_close_: BindgenHelper.wrap_proc({% if forwarded.includes?("close") %} Proc(Void).new{ self.close() } {% else %} nil {% end %}),
      bg_QIODevice_pos_: BindgenHelper.wrap_proc({% if forwarded.includes?("pos") %} Proc(Int64).new{ self.pos() } {% else %} nil {% end %}),
      bg_QIODevice_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Int64).new{ self.size() } {% else %} nil {% end %}),
      bg_QIODevice_seek_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("seek") %} Proc(Int64, Bool).new{|pos| self.seek(pos) } {% else %} nil {% end %}),
      bg_QIODevice_atEnd_: BindgenHelper.wrap_proc({% if forwarded.includes?("at_end") %} Proc(Bool).new{ self.at_end() } {% else %} nil {% end %}),
      bg_QIODevice_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Bool).new{ self.reset() } {% else %} nil {% end %}),
      bg_QIODevice_bytesAvailable_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_available") %} Proc(Int64).new{ self.bytes_available() } {% else %} nil {% end %}),
      bg_QIODevice_bytesToWrite_: BindgenHelper.wrap_proc({% if forwarded.includes?("bytes_to_write") %} Proc(Int64).new{ self.bytes_to_write() } {% else %} nil {% end %}),
      bg_QIODevice_canReadLine_: BindgenHelper.wrap_proc({% if forwarded.includes?("can_read_line") %} Proc(Bool).new{ self.can_read_line() } {% else %} nil {% end %}),
      bg_QIODevice_waitForReadyRead_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_ready_read") %} Proc(Int32, Bool).new{|msecs| self.wait_for_ready_read(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_waitForBytesWritten_int: BindgenHelper.wrap_proc({% if forwarded.includes?("wait_for_bytes_written") %} Proc(Int32, Bool).new{|msecs| self.wait_for_bytes_written(msecs) } {% else %} nil {% end %}),
      bg_QIODevice_readData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_data") %} Proc(UInt8*, Int64, Int64).new{|data, maxlen| self.read_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_readLineData_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("read_line_data") %} Proc(UInt8*, Int64, Int64).new{|data, maxlen| self.read_line_data(data, maxlen) } {% else %} nil {% end %}),
      bg_QIODevice_writeData_const_char_X_qint64: BindgenHelper.wrap_proc({% if forwarded.includes?("write_data") %} Proc(UInt8*, Int64, Int64).new{|data, len| self.write_data(data, len) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QIODevice_JUMPTABLE_BgJumptable_QIODevice_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected abstract def read_data(data : UInt8*, maxlen : Int64) : Int64
    protected def read_line_data(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_readLineData_char_X_qint64(self, data, maxlen)
    end
    
    protected abstract def write_data(data : UInt8*, len : Int64) : Int64
    protected def open_mode=(open_mode : IODevice::OpenMode) : Void
      Binding.bg_QIODevice_setOpenMode_QIODevice__OpenMode(self, open_mode)
    end
    
    protected def error_string=(error_string : String) : Void
      Binding.bg_QIODevice_setErrorString_const_QString_R(self, Qt::Converter::QString.wrap(error_string))
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QIODevice_staticMetaObject_STATIC_GETTER_()
    end
    
    @[Flags]
    enum OpenMode : UInt32
      NotOpen = 0
      ReadOnly = 1
      WriteOnly = 2
      ReadWrite = 3
      Append = 4
      Truncate = 8
      Text = 16
      Unbuffered = 32
      NewOnly = 64
      ExistingOnly = 128
    end
    def on_ready_read(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_readyRead_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_channel_ready_read(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_channelReadyRead_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_bytes_written(&_proc_ : Proc(Int64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_bytesWritten_CrystalProc_void__qint64_(self, BindgenHelper.wrap_proc(Proc(Int64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_channel_bytes_written(&_proc_ : Proc(Int32, Int64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_channelBytesWritten_CrystalProc_void__int__qint64_(self, BindgenHelper.wrap_proc(Proc(Int32, Int64, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_about_to_close(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_aboutToClose_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_read_channel_finished(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_readChannelFinished_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QIODevice*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : IODevice)
      end
      def sequential?() : Bool
        Binding.bg_QIODevice_isSequential_SUPER_(@myself)
      end
      
      def open(mode : IODevice::OpenMode) : Bool
        Binding.bg_QIODevice_open_SUPER_QIODevice__OpenMode(@myself, mode)
      end
      
      def close() : Void
        Binding.bg_QIODevice_close_SUPER_(@myself)
      end
      
      def pos() : Int64
        Binding.bg_QIODevice_pos_SUPER_(@myself)
      end
      
      def size() : Int64
        Binding.bg_QIODevice_size_SUPER_(@myself)
      end
      
      def seek(pos : Int64) : Bool
        Binding.bg_QIODevice_seek_SUPER_qint64(@myself, pos)
      end
      
      def at_end() : Bool
        Binding.bg_QIODevice_atEnd_SUPER_(@myself)
      end
      
      def reset() : Bool
        Binding.bg_QIODevice_reset_SUPER_(@myself)
      end
      
      def bytes_available() : Int64
        Binding.bg_QIODevice_bytesAvailable_SUPER_(@myself)
      end
      
      def bytes_to_write() : Int64
        Binding.bg_QIODevice_bytesToWrite_SUPER_(@myself)
      end
      
      def can_read_line() : Bool
        Binding.bg_QIODevice_canReadLine_SUPER_(@myself)
      end
      
      def wait_for_ready_read(msecs : Int32) : Bool
        Binding.bg_QIODevice_waitForReadyRead_SUPER_int(@myself, msecs)
      end
      
      def wait_for_bytes_written(msecs : Int32) : Bool
        Binding.bg_QIODevice_waitForBytesWritten_SUPER_int(@myself, msecs)
      end
      
      protected def read_line_data(data : UInt8*, maxlen : Int64) : Int64
        Binding.bg_QIODevice_readLineData_SUPER_char_X_qint64(@myself, data, maxlen)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Url
    @unwrap : Binding::QUrl*
    
    def initialize()
      result = Binding.bg_QUrl__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(url : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode)
      result = Binding.bg_QUrl__CONSTRUCT_const_QString_R_QUrl__ParsingMode(Qt::Converter::QString.wrap(url), mode)
    @unwrap = result
    end
    
    def swap(other : Url) : Void
      Binding.bg_QUrl_swap_QUrl_R(self, other)
    end
    
    def set_url(url : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setUrl_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(url), mode)
    end
    
    def url() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_url_(self))
    end
    
    def url(options : Url::FormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_url_QUrl__FormattingOptions(self, options))
    end
    
    def to_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toString_(self))
    end
    
    def to_string(options : Url::FormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toString_QUrl__FormattingOptions(self, options))
    end
    
    def to_display_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toDisplayString_(self))
    end
    
    def to_display_string(options : Url::FormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toDisplayString_QUrl__FormattingOptions(self, options))
    end
    
    def adjusted(options : Url::FormattingOptions) : Url
      Url.new(unwrap: Binding.bg_QUrl_adjusted_QUrl__FormattingOptions(self, options))
    end
    
    def to_encoded() : Binding::QByteArray*
      Binding.bg_QUrl_toEncoded_(self)
    end
    
    def to_encoded(options : Url::FormattingOptions) : Binding::QByteArray*
      Binding.bg_QUrl_toEncoded_QUrl__FormattingOptions(self, options)
    end
    
    def self.from_encoded(url : Binding::QByteArray*, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromEncoded_STATIC_const_QByteArray_R_QUrl__ParsingMode(url, mode))
    end
    
    def self.from_user_input(user_input : String) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromUserInput_STATIC_const_QString_R(Qt::Converter::QString.wrap(user_input)))
    end
    
    def self.from_user_input(user_input : String, working_directory : String) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(user_input), Qt::Converter::QString.wrap(working_directory)))
    end
    
    def self.from_user_input(user_input : String, working_directory : String, options : Url::UserInputResolutionOptions) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromUserInput_STATIC_const_QString_R_const_QString_R_QUrl__UserInputResolutionOptions(Qt::Converter::QString.wrap(user_input), Qt::Converter::QString.wrap(working_directory), options))
    end
    
    def valid?() : Bool
      Binding.bg_QUrl_isValid_(self)
    end
    
    def error_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_errorString_(self))
    end
    
    def empty?() : Bool
      Binding.bg_QUrl_isEmpty_(self)
    end
    
    def clear() : Void
      Binding.bg_QUrl_clear_(self)
    end
    
    def scheme=(scheme : String) : Void
      Binding.bg_QUrl_setScheme_const_QString_R(self, Qt::Converter::QString.wrap(scheme))
    end
    
    def scheme() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_scheme_(self))
    end
    
    def set_authority(authority : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setAuthority_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(authority), mode)
    end
    
    def authority() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_authority_(self))
    end
    
    def authority(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_authority_QUrl__ComponentFormattingOptions(self, options))
    end
    
    def set_user_info(user_info : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setUserInfo_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(user_info), mode)
    end
    
    def user_info() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userInfo_(self))
    end
    
    def user_info(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userInfo_QUrl__ComponentFormattingOptions(self, options))
    end
    
    def set_user_name(user_name : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setUserName_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(user_name), mode)
    end
    
    def user_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userName_(self))
    end
    
    def user_name(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_userName_QUrl__ComponentFormattingOptions(self, options))
    end
    
    def set_password(password : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setPassword_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(password), mode)
    end
    
    def password() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_password_(self))
    end
    
    def password(unnamed_arg_0 : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_password_QUrl__ComponentFormattingOptions(self, unnamed_arg_0))
    end
    
    def set_host(host : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setHost_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(host), mode)
    end
    
    def host() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_host_(self))
    end
    
    def host(unnamed_arg_0 : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_host_QUrl__ComponentFormattingOptions(self, unnamed_arg_0))
    end
    
    def port=(port : Int32) : Void
      Binding.bg_QUrl_setPort_int(self, port)
    end
    
    def port(default_port : Int32 = -1) : Int32
      Binding.bg_QUrl_port_int(self, default_port)
    end
    
    def set_path(path : String, mode : Url::ParsingMode = Url::ParsingMode::DecodedMode) : Void
      Binding.bg_QUrl_setPath_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(path), mode)
    end
    
    def path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_path_(self))
    end
    
    def path(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_path_QUrl__ComponentFormattingOptions(self, options))
    end
    
    def file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fileName_(self))
    end
    
    def file_name(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fileName_QUrl__ComponentFormattingOptions(self, options))
    end
    
    def has_query?() : Bool
      Binding.bg_QUrl_hasQuery_(self)
    end
    
    def set_query(query : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setQuery_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(query), mode)
    end
    
    def query=(query : Binding::QUrlQuery*) : Void
      Binding.bg_QUrl_setQuery_const_QUrlQuery_R(self, query)
    end
    
    def query() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_query_(self))
    end
    
    def query(unnamed_arg_0 : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_query_QUrl__ComponentFormattingOptions(self, unnamed_arg_0))
    end
    
    def has_fragment?() : Bool
      Binding.bg_QUrl_hasFragment_(self)
    end
    
    def fragment() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fragment_(self))
    end
    
    def fragment(options : Url::ComponentFormattingOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fragment_QUrl__ComponentFormattingOptions(self, options))
    end
    
    def set_fragment(fragment : String, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Void
      Binding.bg_QUrl_setFragment_const_QString_R_QUrl__ParsingMode(self, Qt::Converter::QString.wrap(fragment), mode)
    end
    
    def resolved(relative : Url) : Url
      Url.new(unwrap: Binding.bg_QUrl_resolved_const_QUrl_R(self, relative))
    end
    
    def relative?() : Bool
      Binding.bg_QUrl_isRelative_(self)
    end
    
    def is_parent_of(url : Url) : Bool
      Binding.bg_QUrl_isParentOf_const_QUrl_R(self, url)
    end
    
    def local_file?() : Bool
      Binding.bg_QUrl_isLocalFile_(self)
    end
    
    def self.from_local_file(localfile : String) : Url
      Url.new(unwrap: Binding.bg_QUrl_fromLocalFile_STATIC_const_QString_R(Qt::Converter::QString.wrap(localfile)))
    end
    
    def to_local_file() : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_toLocalFile_(self))
    end
    
    def detach() : Void
      Binding.bg_QUrl_detach_(self)
    end
    
    def detached?() : Bool
      Binding.bg_QUrl_isDetached_(self)
    end
    
    def <(url : Url) : Bool
      Binding.bg_QUrl__OPERATOR_lt_const_QUrl_R(self, url)
    end
    
    def ==(url : Url) : Bool
      Binding.bg_QUrl__OPERATOR_eq_const_QUrl_R(self, url)
    end
    
    def !=(url : Url) : Bool
      Binding.bg_QUrl__OPERATOR_ne_const_QUrl_R(self, url)
    end
    
    def matches(url : Url, options : Url::FormattingOptions) : Bool
      Binding.bg_QUrl_matches_const_QUrl_R_QUrl__FormattingOptions(self, url, options)
    end
    
    def self.from_percent_encoding(unnamed_arg_0 : Binding::QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fromPercentEncoding_STATIC_const_QByteArray_R(unnamed_arg_0))
    end
    
    def self.to_percent_encoding(unnamed_arg_0 : String) : Binding::QByteArray*
      Binding.bg_QUrl_toPercentEncoding_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.to_percent_encoding(unnamed_arg_0 : String, exclude : Binding::QByteArray*) : Binding::QByteArray*
      Binding.bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R(Qt::Converter::QString.wrap(unnamed_arg_0), exclude)
    end
    
    def self.to_percent_encoding(unnamed_arg_0 : String, exclude : Binding::QByteArray*, include_ : Binding::QByteArray*) : Binding::QByteArray*
      Binding.bg_QUrl_toPercentEncoding_STATIC_const_QString_R_const_QByteArray_R_const_QByteArray_R(Qt::Converter::QString.wrap(unnamed_arg_0), exclude, include_)
    end
    
    def self.from_ace(unnamed_arg_0 : Binding::QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QUrl_fromAce_STATIC_const_QByteArray_R(unnamed_arg_0))
    end
    
    def self.to_ace(unnamed_arg_0 : String) : Binding::QByteArray*
      Binding.bg_QUrl_toAce_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.idn_whitelist() : Binding::QStringList*
      Binding.bg_QUrl_idnWhitelist_STATIC_()
    end
    
    def self.to_string_list(uris : Enumerable(Url)) : Binding::QStringList*
      Binding.bg_QUrl_toStringList_STATIC_const_QList_QUrl__R(BindgenHelper.wrap_container(Container_QList_QUrl_, uris).to_unsafe)
    end
    
    def self.to_string_list(uris : Enumerable(Url), options : Url::FormattingOptions) : Binding::QStringList*
      Binding.bg_QUrl_toStringList_STATIC_const_QList_QUrl__R_QUrl__FormattingOptions(BindgenHelper.wrap_container(Container_QList_QUrl_, uris).to_unsafe, options)
    end
    
    def self.from_string_list(uris : Binding::QStringList*, mode : Url::ParsingMode = Url::ParsingMode::TolerantMode) : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QUrl_fromStringList_STATIC_const_QStringList_R_QUrl__ParsingMode(uris, mode))
    end
    
    def self.idn_whitelist=(unnamed_arg_0 : Binding::QStringList*) : Void
      Binding.bg_QUrl_setIdnWhitelist_STATIC_const_QStringList_R(unnamed_arg_0)
    end
    
    enum ParsingMode : UInt32
      TolerantMode = 0
      StrictMode = 1
      DecodedMode = 2
    end
    enum FormattingOption : UInt32
      None = 0
      RemoveScheme = 1
      RemovePassword = 2
      RemoveUserInfo = 6
      RemovePort = 8
      RemoveAuthority = 30
      RemovePath = 32
      RemoveQuery = 64
      RemoveFragment = 128
      PreferLocalFile = 512
      StripTrailingSlash = 1024
      RemoveFilename = 2048
      NormalizePathSegments = 4096
    end
    enum ComponentFormattingOption : UInt32
      PrettyDecoded = 0
      EncodeSpaces = 1048576
      EncodeUnicode = 2097152
      EncodeDelimiters = 12582912
      EncodeReserved = 16777216
      DecodeReserved = 33554432
      FullyEncoded = 32505856
      FullyDecoded = 133169152
    end
    @[Flags]
    enum ComponentFormattingOptions : UInt32
      PrettyDecoded = 0
      EncodeSpaces = 1048576
      EncodeUnicode = 2097152
      EncodeDelimiters = 12582912
      EncodeReserved = 16777216
      DecodeReserved = 33554432
      FullyEncoded = 32505856
      FullyDecoded = 133169152
    end
    enum UserInputResolutionOption : UInt32
      DefaultResolution = 0
      AssumeLocalFile = 1
    end
    @[Flags]
    enum UserInputResolutionOptions : UInt32
      DefaultResolution = 0
      AssumeLocalFile = 1
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QUrl*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Event
    @unwrap : Binding::QEvent*
    
    def initialize(type : Event::Type)
      result = Binding.bg_QEvent__CONSTRUCT_QEvent__Type(type)
    @unwrap = result
    end
    
    def type() : Event::Type
      Binding.bg_QEvent_type_(self)
    end
    
    def spontaneous() : Bool
      Binding.bg_QEvent_spontaneous_(self)
    end
    
    def accepted=(accepted : Bool) : Void
      Binding.bg_QEvent_setAccepted_bool(self, accepted)
    end
    
    def accepted?() : Bool
      Binding.bg_QEvent_isAccepted_(self)
    end
    
    def accept() : Void
      Binding.bg_QEvent_accept_(self)
    end
    
    def ignore() : Void
      Binding.bg_QEvent_ignore_(self)
    end
    
    def self.register_event_type(hint : Int32 = -1) : Int32
      Binding.bg_QEvent_registerEventType_STATIC_int(hint)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QEvent_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Type : UInt32
      None = 0
      Timer = 1
      MouseButtonPress = 2
      MouseButtonRelease = 3
      MouseButtonDblClick = 4
      MouseMove = 5
      KeyPress = 6
      KeyRelease = 7
      FocusIn = 8
      FocusOut = 9
      FocusAboutToChange = 23
      Enter = 10
      Leave = 11
      Paint = 12
      Move = 13
      Resize = 14
      Create = 15
      Destroy = 16
      Show = 17
      Hide = 18
      Close = 19
      Quit = 20
      ParentChange = 21
      ParentAboutToChange = 131
      ThreadChange = 22
      WindowActivate = 24
      WindowDeactivate = 25
      ShowToParent = 26
      HideToParent = 27
      Wheel = 31
      WindowTitleChange = 33
      WindowIconChange = 34
      ApplicationWindowIconChange = 35
      ApplicationFontChange = 36
      ApplicationLayoutDirectionChange = 37
      ApplicationPaletteChange = 38
      PaletteChange = 39
      Clipboard = 40
      Speech = 42
      MetaCall = 43
      SockAct = 50
      WinEventAct = 132
      DeferredDelete = 52
      DragEnter = 60
      DragMove = 61
      DragLeave = 62
      Drop = 63
      DragResponse = 64
      ChildAdded = 68
      ChildPolished = 69
      ChildRemoved = 71
      ShowWindowRequest = 73
      PolishRequest = 74
      Polish = 75
      LayoutRequest = 76
      UpdateRequest = 77
      UpdateLater = 78
      EmbeddingControl = 79
      ActivateControl = 80
      DeactivateControl = 81
      ContextMenu = 82
      InputMethod = 83
      TabletMove = 87
      LocaleChange = 88
      LanguageChange = 89
      LayoutDirectionChange = 90
      Style = 91
      TabletPress = 92
      TabletRelease = 93
      OkRequest = 94
      HelpRequest = 95
      IconDrag = 96
      FontChange = 97
      EnabledChange = 98
      ActivationChange = 99
      StyleChange = 100
      IconTextChange = 101
      ModifiedChange = 102
      MouseTrackingChange = 109
      WindowBlocked = 103
      WindowUnblocked = 104
      WindowStateChange = 105
      ReadOnlyChange = 106
      ToolTip = 110
      WhatsThis = 111
      StatusTip = 112
      ActionChanged = 113
      ActionAdded = 114
      ActionRemoved = 115
      FileOpen = 116
      Shortcut = 117
      ShortcutOverride = 51
      WhatsThisClicked = 118
      ToolBarChange = 120
      ApplicationActivate = 121
      ApplicationActivated = 121
      ApplicationDeactivate = 122
      ApplicationDeactivated = 122
      QueryWhatsThis = 123
      EnterWhatsThisMode = 124
      LeaveWhatsThisMode = 125
      Zorderchange = 126
      HoverEnter = 127
      HoverLeave = 128
      HoverMove = 129
      AcceptDropsChange = 152
      ZeroTimerEvent = 154
      GraphicsSceneMouseMove = 155
      GraphicsSceneMousePress = 156
      GraphicsSceneMouseRelease = 157
      GraphicsSceneMouseDoubleClick = 158
      GraphicsSceneContextMenu = 159
      GraphicsSceneHoverEnter = 160
      GraphicsSceneHoverMove = 161
      GraphicsSceneHoverLeave = 162
      GraphicsSceneHelp = 163
      GraphicsSceneDragEnter = 164
      GraphicsSceneDragMove = 165
      GraphicsSceneDragLeave = 166
      GraphicsSceneDrop = 167
      GraphicsSceneWheel = 168
      KeyboardLayoutChange = 169
      DynamicPropertyChange = 170
      TabletEnterProximity = 171
      TabletLeaveProximity = 172
      NonClientAreaMouseMove = 173
      NonClientAreaMouseButtonPress = 174
      NonClientAreaMouseButtonRelease = 175
      NonClientAreaMouseButtonDblClick = 176
      MacSizeChange = 177
      ContentsRectChange = 178
      MacGLWindowChange = 179
      FutureCallOut = 180
      GraphicsSceneResize = 181
      GraphicsSceneMove = 182
      CursorChange = 183
      ToolTipChange = 184
      NetworkReplyUpdated = 185
      GrabMouse = 186
      UngrabMouse = 187
      GrabKeyboard = 188
      UngrabKeyboard = 189
      MacGLClearDrawable = 191
      StateMachineSignal = 192
      StateMachineWrapped = 193
      TouchBegin = 194
      TouchUpdate = 195
      TouchEnd = 196
      NativeGesture = 197
      RequestSoftwareInputPanel = 199
      CloseSoftwareInputPanel = 200
      WinIdChange = 203
      Gesture = 198
      GestureOverride = 202
      ScrollPrepare = 204
      Scroll = 205
      Expose = 206
      InputMethodQuery = 207
      OrientationChange = 208
      TouchCancel = 209
      ThemeChange = 210
      SockClose = 211
      PlatformPanel = 212
      StyleAnimationUpdate = 213
      ApplicationStateChange = 214
      WindowChangeInternal = 215
      ScreenChangeInternal = 216
      PlatformSurface = 217
      Pointer = 218
      TabletTrackingChange = 219
      User = 1000
      MaxUser = 65535
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TimerEvent < Event
    def initialize(timer_id : Int32)
      result = Binding.bg_QTimerEvent__CONSTRUCT_int(timer_id)
    @unwrap = result
    end
    
    def timer_id() : Int32
      Binding.bg_QTimerEvent_timerId_(self)
    end
    
    def initialize(unwrap : Binding::QTimerEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class DynamicPropertyChangeEvent < Event
    def initialize(name : Binding::QByteArray*)
      result = Binding.bg_QDynamicPropertyChangeEvent__CONSTRUCT_const_QByteArray_R(name)
    @unwrap = result
    end
    
    def property_name() : Binding::QByteArray*
      Binding.bg_QDynamicPropertyChangeEvent_propertyName_(self)
    end
    
    def initialize(unwrap : Binding::QDynamicPropertyChangeEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class DeferredDeleteEvent < Event
    def initialize()
      result = Binding.bg_QDeferredDeleteEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def loop_level() : Int32
      Binding.bg_QDeferredDeleteEvent_loopLevel_(self)
    end
    
    def initialize(unwrap : Binding::QDeferredDeleteEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class CoreApplication < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QCoreApplication_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCoreApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32 = 331520)
      result = Binding.bg_QCoreApplication__CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} Proc(Binding::QEvent*, Binding::QObject*, Binding::QPostEventList*, Bool).new{|unnamed_arg_0, receiver, unnamed_arg_2| self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCoreApplication_JUMPTABLE_BgJumptable_QCoreApplication_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.arguments() : Binding::QStringList*
      Binding.bg_QCoreApplication_arguments_STATIC_()
    end
    
    def self.set_attribute(attribute : ApplicationAttribute, on : Bool = true) : Void
      Binding.bg_QCoreApplication_setAttribute_STATIC_Qt__ApplicationAttribute_bool(attribute, on)
    end
    
    def self.test_attribute(attribute : ApplicationAttribute) : Bool
      Binding.bg_QCoreApplication_testAttribute_STATIC_Qt__ApplicationAttribute(attribute)
    end
    
    def self.organization_domain=(org_domain : String) : Void
      Binding.bg_QCoreApplication_setOrganizationDomain_STATIC_const_QString_R(Qt::Converter::QString.wrap(org_domain))
    end
    
    def self.organization_domain() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_organizationDomain_STATIC_())
    end
    
    def self.organization_name=(org_name : String) : Void
      Binding.bg_QCoreApplication_setOrganizationName_STATIC_const_QString_R(Qt::Converter::QString.wrap(org_name))
    end
    
    def self.organization_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_organizationName_STATIC_())
    end
    
    def self.application_name=(application : String) : Void
      Binding.bg_QCoreApplication_setApplicationName_STATIC_const_QString_R(Qt::Converter::QString.wrap(application))
    end
    
    def self.application_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationName_STATIC_())
    end
    
    def self.application_version=(version : String) : Void
      Binding.bg_QCoreApplication_setApplicationVersion_STATIC_const_QString_R(Qt::Converter::QString.wrap(version))
    end
    
    def self.application_version() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationVersion_STATIC_())
    end
    
    def self.setuid_allowed=(allow : Bool) : Void
      Binding.bg_QCoreApplication_setSetuidAllowed_STATIC_bool(allow)
    end
    
    def self.setuid_allowed?() : Bool
      Binding.bg_QCoreApplication_isSetuidAllowed_STATIC_()
    end
    
    def self.instance() : CoreApplication
      CoreApplication.new(unwrap: Binding.bg_QCoreApplication_instance_STATIC_())
    end
    
    def self.exec() : Int32
      Binding.bg_QCoreApplication_exec_STATIC_()
    end
    
    def self.process_events() : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_()
    end
    
    def self.process_events(flags : EventLoop::ProcessEventsFlags) : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags(flags)
    end
    
    def self.process_events(flags : EventLoop::ProcessEventsFlags, maxtime : Int32) : Void
      Binding.bg_QCoreApplication_processEvents_STATIC_QEventLoop__ProcessEventsFlags_int(flags, maxtime)
    end
    
    def self.exit(retcode : Int32 = 0) : Void
      Binding.bg_QCoreApplication_exit_STATIC_int(retcode)
    end
    
    def self.send_event(receiver : Object, event : Event) : Bool
      Binding.bg_QCoreApplication_sendEvent_STATIC_QObject_X_QEvent_X(receiver, event)
    end
    
    def self.post_event(receiver : Object, event : Event, priority : Int32 = 0) : Void
      Binding.bg_QCoreApplication_postEvent_STATIC_QObject_X_QEvent_X_int(receiver, event, priority)
    end
    
    def self.send_posted_events(receiver : Object? = nil, event_type : Int32 = 0) : Void
      Binding.bg_QCoreApplication_sendPostedEvents_STATIC_QObject_X_int(receiver, event_type)
    end
    
    def self.remove_posted_events(receiver : Object, event_type : Int32 = 0) : Void
      Binding.bg_QCoreApplication_removePostedEvents_STATIC_QObject_X_int(receiver, event_type)
    end
    
    def self.event_dispatcher() : AbstractEventDispatcher
      AbstractEventDispatcherImpl.new(unwrap: Binding.bg_QCoreApplication_eventDispatcher_STATIC_())
    end
    
    def self.event_dispatcher=(event_dispatcher : AbstractEventDispatcher) : Void
      Binding.bg_QCoreApplication_setEventDispatcher_STATIC_QAbstractEventDispatcher_X(event_dispatcher)
    end
    
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QCoreApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def self.starting_up() : Bool
      Binding.bg_QCoreApplication_startingUp_STATIC_()
    end
    
    def self.closing_down() : Bool
      Binding.bg_QCoreApplication_closingDown_STATIC_()
    end
    
    def self.application_dir_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationDirPath_STATIC_())
    end
    
    def self.application_file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_applicationFilePath_STATIC_())
    end
    
    def self.application_pid() : Int64
      Binding.bg_QCoreApplication_applicationPid_STATIC_()
    end
    
    def self.library_paths=(unnamed_arg_0 : Binding::QStringList*) : Void
      Binding.bg_QCoreApplication_setLibraryPaths_STATIC_const_QStringList_R(unnamed_arg_0)
    end
    
    def self.library_paths() : Binding::QStringList*
      Binding.bg_QCoreApplication_libraryPaths_STATIC_()
    end
    
    def self.add_library_path(unnamed_arg_0 : String) : Void
      Binding.bg_QCoreApplication_addLibraryPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.remove_library_path(unnamed_arg_0 : String) : Void
      Binding.bg_QCoreApplication_removeLibraryPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.install_translator(message_file : Binding::QTranslator*) : Bool
      Binding.bg_QCoreApplication_installTranslator_STATIC_QTranslator_X(message_file)
    end
    
    def self.remove_translator(message_file : Binding::QTranslator*) : Bool
      Binding.bg_QCoreApplication_removeTranslator_STATIC_QTranslator_X(message_file)
    end
    
    def self.translate(context : UInt8*, key : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X(context, key))
    end
    
    def self.translate(context : UInt8*, key : UInt8*, disambiguation : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X(context, key, disambiguation))
    end
    
    def self.translate(context : UInt8*, key : UInt8*, disambiguation : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCoreApplication_translate_STATIC_const_char_X_const_char_X_const_char_X_int(context, key, disambiguation, n))
    end
    
    def install_native_event_filter(filter_obj : Binding::QAbstractNativeEventFilter*) : Void
      Binding.bg_QCoreApplication_installNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    
    def remove_native_event_filter(filter_obj : Binding::QAbstractNativeEventFilter*) : Void
      Binding.bg_QCoreApplication_removeNativeEventFilter_QAbstractNativeEventFilter_X(self, filter_obj)
    end
    
    def self.quit_lock_enabled?() : Bool
      Binding.bg_QCoreApplication_isQuitLockEnabled_STATIC_()
    end
    
    def self.quit_lock_enabled=(enabled : Bool) : Void
      Binding.bg_QCoreApplication_setQuitLockEnabled_STATIC_bool(enabled)
    end
    
    def self.quit() : Void
      Binding.bg_QCoreApplication_quit_STATIC_()
    end
    
    def organization_name_changed() : Void
      Binding.bg_QCoreApplication_organizationNameChanged_(self)
    end
    
    def organization_domain_changed() : Void
      Binding.bg_QCoreApplication_organizationDomainChanged_(self)
    end
    
    def application_name_changed() : Void
      Binding.bg_QCoreApplication_applicationNameChanged_(self)
    end
    
    def application_version_changed() : Void
      Binding.bg_QCoreApplication_applicationVersionChanged_(self)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QCoreApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : Binding::QPostEventList*) : Bool
      Binding.bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    
    protected def initialize(p : Binding::QCoreApplicationPrivate*)
      result = Binding.bg_QCoreApplication__CONSTRUCT_QCoreApplicationPrivate_R(p)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CoreApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCoreApplication.new(
      bg_QCoreApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCoreApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCoreApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QCoreApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCoreApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} Proc(Binding::QEvent*, Binding::QObject*, Binding::QPostEventList*, Bool).new{|unnamed_arg_0, receiver, unnamed_arg_2| self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCoreApplication_JUMPTABLE_BgJumptable_QCoreApplication_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QCoreApplication_staticMetaObject_STATIC_GETTER_()
    end
    
    APPLICATION_FLAGS = 331520u32
    def initialize(unwrap : Binding::QCoreApplication*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : CoreApplication)
      end
      def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QCoreApplication_notify_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QCoreApplication_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : Binding::QPostEventList*) : Bool
        Binding.bg_QCoreApplication_compressEvent_SUPER_QEvent_X_QObject_X_QPostEventList_X(@myself, unnamed_arg_0, receiver, unnamed_arg_2)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
    def on_about_to_quit(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_CONNECT_aboutToQuit_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_organization_name_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_CONNECT_organizationNameChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_organization_domain_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_CONNECT_organizationDomainChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_application_name_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_CONNECT_applicationNameChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_application_version_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCoreApplication_CONNECT_applicationVersionChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
  end
  class Dir
    @unwrap : Binding::QDir*
    
    def initialize()
      result = Binding.bg_QDir__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(path : String)
      result = Binding.bg_QDir__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(path))
    @unwrap = result
    end
    
    def initialize(path : String, name_filter : String)
      result = Binding.bg_QDir__CONSTRUCT_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter))
    @unwrap = result
    end
    
    def initialize(path : String, name_filter : String, sort : Dir::SortFlags)
      result = Binding.bg_QDir__CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter), sort)
    @unwrap = result
    end
    
    def initialize(path : String, name_filter : String, sort : Dir::SortFlags, filter : Dir::Filters)
      result = Binding.bg_QDir__CONSTRUCT_const_QString_R_const_QString_R_QDir__SortFlags_QDir__Filters(Qt::Converter::QString.wrap(path), Qt::Converter::QString.wrap(name_filter), sort, filter)
    @unwrap = result
    end
    
    def swap(other : Dir) : Void
      Binding.bg_QDir_swap_QDir_R(self, other)
    end
    
    def path=(path : String) : Void
      Binding.bg_QDir_setPath_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    
    def path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_path_(self))
    end
    
    def absolute_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_absolutePath_(self))
    end
    
    def canonical_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_canonicalPath_(self))
    end
    
    def self.set_search_paths(prefix : String, search_paths : Binding::QStringList*) : Void
      Binding.bg_QDir_setSearchPaths_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(prefix), search_paths)
    end
    
    def self.add_search_path(prefix : String, path : String) : Void
      Binding.bg_QDir_addSearchPath_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(prefix), Qt::Converter::QString.wrap(path))
    end
    
    def self.search_paths(prefix : String) : Binding::QStringList*
      Binding.bg_QDir_searchPaths_STATIC_const_QString_R(Qt::Converter::QString.wrap(prefix))
    end
    
    def dir_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_dirName_(self))
    end
    
    def file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_filePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    
    def absolute_file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_absoluteFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    
    def relative_file_path(file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_relativeFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_name)))
    end
    
    def self.to_native_separators(path_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_toNativeSeparators_STATIC_const_QString_R(Qt::Converter::QString.wrap(path_name)))
    end
    
    def self.from_native_separators(path_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_fromNativeSeparators_STATIC_const_QString_R(Qt::Converter::QString.wrap(path_name)))
    end
    
    def cd(dir_name : String) : Bool
      Binding.bg_QDir_cd_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    
    def cd_up() : Bool
      Binding.bg_QDir_cdUp_(self)
    end
    
    def name_filters() : Binding::QStringList*
      Binding.bg_QDir_nameFilters_(self)
    end
    
    def name_filters=(name_filters : Binding::QStringList*) : Void
      Binding.bg_QDir_setNameFilters_const_QStringList_R(self, name_filters)
    end
    
    def filter() : Dir::Filters
      Binding.bg_QDir_filter_(self)
    end
    
    def filter=(filter : Dir::Filters) : Void
      Binding.bg_QDir_setFilter_QDir__Filters(self, filter)
    end
    
    def sorting() : Dir::SortFlags
      Binding.bg_QDir_sorting_(self)
    end
    
    def sorting=(sort : Dir::SortFlags) : Void
      Binding.bg_QDir_setSorting_QDir__SortFlags(self, sort)
    end
    
    def count() : UInt32
      Binding.bg_QDir_count_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QDir_isEmpty_(self)
    end
    
    def is_empty(filters : Dir::Filters) : Bool
      Binding.bg_QDir_isEmpty_QDir__Filters(self, filters)
    end
    
    def [](unnamed_arg_0 : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir__OPERATOR_at_int(self, unnamed_arg_0))
    end
    
    def self.name_filters_from_string(name_filter : String) : Binding::QStringList*
      Binding.bg_QDir_nameFiltersFromString_STATIC_const_QString_R(Qt::Converter::QString.wrap(name_filter))
    end
    
    def entry_list() : Binding::QStringList*
      Binding.bg_QDir_entryList_(self)
    end
    
    def entry_list(filters : Dir::Filters) : Binding::QStringList*
      Binding.bg_QDir_entryList_QDir__Filters(self, filters)
    end
    
    def entry_list(filters : Dir::Filters, sort : Dir::SortFlags) : Binding::QStringList*
      Binding.bg_QDir_entryList_QDir__Filters_QDir__SortFlags(self, filters, sort)
    end
    
    def entry_list(name_filters : Binding::QStringList*) : Binding::QStringList*
      Binding.bg_QDir_entryList_const_QStringList_R(self, name_filters)
    end
    
    def entry_list(name_filters : Binding::QStringList*, filters : Dir::Filters) : Binding::QStringList*
      Binding.bg_QDir_entryList_const_QStringList_R_QDir__Filters(self, name_filters, filters)
    end
    
    def entry_list(name_filters : Binding::QStringList*, filters : Dir::Filters, sort : Dir::SortFlags) : Binding::QStringList*
      Binding.bg_QDir_entryList_const_QStringList_R_QDir__Filters_QDir__SortFlags(self, name_filters, filters, sort)
    end
    
    def entry_info_list() : Binding::QFileInfoList*
      Binding.bg_QDir_entryInfoList_(self)
    end
    
    def entry_info_list(filters : Dir::Filters) : Binding::QFileInfoList*
      Binding.bg_QDir_entryInfoList_QDir__Filters(self, filters)
    end
    
    def entry_info_list(filters : Dir::Filters, sort : Dir::SortFlags) : Binding::QFileInfoList*
      Binding.bg_QDir_entryInfoList_QDir__Filters_QDir__SortFlags(self, filters, sort)
    end
    
    def entry_info_list(name_filters : Binding::QStringList*) : Binding::QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R(self, name_filters)
    end
    
    def entry_info_list(name_filters : Binding::QStringList*, filters : Dir::Filters) : Binding::QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters(self, name_filters, filters)
    end
    
    def entry_info_list(name_filters : Binding::QStringList*, filters : Dir::Filters, sort : Dir::SortFlags) : Binding::QFileInfoList*
      Binding.bg_QDir_entryInfoList_const_QStringList_R_QDir__Filters_QDir__SortFlags(self, name_filters, filters, sort)
    end
    
    def mkdir(dir_name : String) : Bool
      Binding.bg_QDir_mkdir_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    
    def rmdir(dir_name : String) : Bool
      Binding.bg_QDir_rmdir_const_QString_R(self, Qt::Converter::QString.wrap(dir_name))
    end
    
    def mkpath(dir_path : String) : Bool
      Binding.bg_QDir_mkpath_const_QString_R(self, Qt::Converter::QString.wrap(dir_path))
    end
    
    def rmpath(dir_path : String) : Bool
      Binding.bg_QDir_rmpath_const_QString_R(self, Qt::Converter::QString.wrap(dir_path))
    end
    
    def remove_recursively() : Bool
      Binding.bg_QDir_removeRecursively_(self)
    end
    
    def readable?() : Bool
      Binding.bg_QDir_isReadable_(self)
    end
    
    def exists() : Bool
      Binding.bg_QDir_exists_(self)
    end
    
    def root?() : Bool
      Binding.bg_QDir_isRoot_(self)
    end
    
    def self.is_relative_path(path : String) : Bool
      Binding.bg_QDir_isRelativePath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    
    def self.is_absolute_path(path : String) : Bool
      Binding.bg_QDir_isAbsolutePath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    
    def relative?() : Bool
      Binding.bg_QDir_isRelative_(self)
    end
    
    def absolute?() : Bool
      Binding.bg_QDir_isAbsolute_(self)
    end
    
    def make_absolute() : Bool
      Binding.bg_QDir_makeAbsolute_(self)
    end
    
    def ==(dir : Dir) : Bool
      Binding.bg_QDir__OPERATOR_eq_const_QDir_R(self, dir)
    end
    
    def !=(dir : Dir) : Bool
      Binding.bg_QDir__OPERATOR_ne_const_QDir_R(self, dir)
    end
    
    def remove(file_name : String) : Bool
      Binding.bg_QDir_remove_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    
    def rename(old_name : String, new_name : String) : Bool
      Binding.bg_QDir_rename_const_QString_R_const_QString_R(self, Qt::Converter::QString.wrap(old_name), Qt::Converter::QString.wrap(new_name))
    end
    
    def exists(name : String) : Bool
      Binding.bg_QDir_exists_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    
    def self.drives() : Binding::QFileInfoList*
      Binding.bg_QDir_drives_STATIC_()
    end
    
    def self.list_separator() : Char
      (Binding.bg_QDir_listSeparator_STATIC_().chr)
    end
    
    def self.separator() : Char
      (Binding.bg_QDir_separator_STATIC_().chr)
    end
    
    def self.set_current(path : String) : Bool
      Binding.bg_QDir_setCurrent_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    
    def self.current() : Dir
      Dir.new(unwrap: Binding.bg_QDir_current_STATIC_())
    end
    
    def self.current_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_currentPath_STATIC_())
    end
    
    def self.home() : Dir
      Dir.new(unwrap: Binding.bg_QDir_home_STATIC_())
    end
    
    def self.home_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_homePath_STATIC_())
    end
    
    def self.root() : Dir
      Dir.new(unwrap: Binding.bg_QDir_root_STATIC_())
    end
    
    def self.root_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_rootPath_STATIC_())
    end
    
    def self.temp() : Dir
      Dir.new(unwrap: Binding.bg_QDir_temp_STATIC_())
    end
    
    def self.temp_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_tempPath_STATIC_())
    end
    
    def self.match(filters : Binding::QStringList*, file_name : String) : Bool
      Binding.bg_QDir_match_STATIC_const_QStringList_R_const_QString_R(filters, Qt::Converter::QString.wrap(file_name))
    end
    
    def self.match(filter : String, file_name : String) : Bool
      Binding.bg_QDir_match_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(filter), Qt::Converter::QString.wrap(file_name))
    end
    
    def self.clean_path(path : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDir_cleanPath_STATIC_const_QString_R(Qt::Converter::QString.wrap(path)))
    end
    
    def refresh() : Void
      Binding.bg_QDir_refresh_(self)
    end
    
    protected def initialize(d : Binding::QDirPrivate*)
      result = Binding.bg_QDir__CONSTRUCT_QDirPrivate_R(d)
    @unwrap = result
    end
    
    @[Flags]
    enum Filters : Int32
      Dirs = 1
      Files = 2
      Drives = 4
      NoSymLinks = 8
      AllEntries = 7
      TypeMask = 15
      Readable = 16
      Writable = 32
      Executable = 64
      PermissionMask = 112
      Modified = 128
      Hidden = 256
      System = 512
      AccessMask = 1008
      AllDirs = 1024
      CaseSensitive = 2048
      NoDot = 8192
      NoDotDot = 16384
      NoDotAndDotDot = 24576
      NoFilter = -1
    end
    @[Flags]
    enum SortFlags : Int32
      Name = 0
      Time = 1
      Size = 2
      Unsorted = 3
      SortByMask = 3
      DirsFirst = 4
      Reversed = 8
      IgnoreCase = 16
      DirsLast = 32
      LocaleAware = 64
      Type = 128
      NoSort = -1
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QDir*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class QLine
    @unwrap : Binding::QLine*
    
    def initialize()
      result = Binding.bg_QLine__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(pt1 : Point, pt2 : Point)
      result = Binding.bg_QLine__CONSTRUCT_const_QPoint_R_const_QPoint_R(pt1, pt2)
    @unwrap = result
    end
    
    def initialize(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32)
      result = Binding.bg_QLine__CONSTRUCT_int_int_int_int(x1, y1, x2, y2)
    @unwrap = result
    end
    
    def null?() : Bool
      Binding.bg_QLine_isNull_(self)
    end
    
    def p1() : Point
      Point.new(unwrap: Binding.bg_QLine_p1_(self))
    end
    
    def p2() : Point
      Point.new(unwrap: Binding.bg_QLine_p2_(self))
    end
    
    def x1() : Int32
      Binding.bg_QLine_x1_(self)
    end
    
    def y1() : Int32
      Binding.bg_QLine_y1_(self)
    end
    
    def x2() : Int32
      Binding.bg_QLine_x2_(self)
    end
    
    def y2() : Int32
      Binding.bg_QLine_y2_(self)
    end
    
    def dx() : Int32
      Binding.bg_QLine_dx_(self)
    end
    
    def dy() : Int32
      Binding.bg_QLine_dy_(self)
    end
    
    def translate(p : Point) : Void
      Binding.bg_QLine_translate_const_QPoint_R(self, p)
    end
    
    def translate(dx : Int32, dy : Int32) : Void
      Binding.bg_QLine_translate_int_int(self, dx, dy)
    end
    
    def translated(p : Point) : QLine
      QLine.new(unwrap: Binding.bg_QLine_translated_const_QPoint_R(self, p))
    end
    
    def translated(dx : Int32, dy : Int32) : QLine
      QLine.new(unwrap: Binding.bg_QLine_translated_int_int(self, dx, dy))
    end
    
    def center() : Point
      Point.new(unwrap: Binding.bg_QLine_center_(self))
    end
    
    def p1=(p1 : Point) : Void
      Binding.bg_QLine_setP1_const_QPoint_R(self, p1)
    end
    
    def p2=(p2 : Point) : Void
      Binding.bg_QLine_setP2_const_QPoint_R(self, p2)
    end
    
    def set_points(p1 : Point, p2 : Point) : Void
      Binding.bg_QLine_setPoints_const_QPoint_R_const_QPoint_R(self, p1, p2)
    end
    
    def set_line(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QLine_setLine_int_int_int_int(self, x1, y1, x2, y2)
    end
    
    def ==(d : QLine) : Bool
      Binding.bg_QLine__OPERATOR_eq_const_QLine_R(self, d)
    end
    
    def !=(d : QLine) : Bool
      Binding.bg_QLine__OPERATOR_ne_const_QLine_R(self, d)
    end
    
    def *(m : Binding::QMatrix*) : QLine
      QLine.new(unwrap: Binding.bg_QLine__OPERATOR_mul_const_QMatrix_R(self, m))
    end
    
    def *(m : Binding::QTransform*) : QLine
      QLine.new(unwrap: Binding.bg_QLine__OPERATOR_mul_const_QTransform_R(self, m))
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QLine*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class QLineF
    @unwrap : Binding::QLineF*
    
    def initialize()
      result = Binding.bg_QLineF__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(pt1 : PointF, pt2 : PointF)
      result = Binding.bg_QLineF__CONSTRUCT_const_QPointF_R_const_QPointF_R(pt1, pt2)
    @unwrap = result
    end
    
    def initialize(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64)
      result = Binding.bg_QLineF__CONSTRUCT_qreal_qreal_qreal_qreal(x1, y1, x2, y2)
    @unwrap = result
    end
    
    def initialize(line : QLine)
      result = Binding.bg_QLineF__CONSTRUCT_const_QLine_R(line)
    @unwrap = result
    end
    
    def self.from_polar(length : Float64, angle : Float64) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_fromPolar_STATIC_qreal_qreal(length, angle))
    end
    
    def null?() : Bool
      Binding.bg_QLineF_isNull_(self)
    end
    
    def p1() : PointF
      PointF.new(unwrap: Binding.bg_QLineF_p1_(self))
    end
    
    def p2() : PointF
      PointF.new(unwrap: Binding.bg_QLineF_p2_(self))
    end
    
    def x1() : Float64
      Binding.bg_QLineF_x1_(self)
    end
    
    def y1() : Float64
      Binding.bg_QLineF_y1_(self)
    end
    
    def x2() : Float64
      Binding.bg_QLineF_x2_(self)
    end
    
    def y2() : Float64
      Binding.bg_QLineF_y2_(self)
    end
    
    def dx() : Float64
      Binding.bg_QLineF_dx_(self)
    end
    
    def dy() : Float64
      Binding.bg_QLineF_dy_(self)
    end
    
    def length() : Float64
      Binding.bg_QLineF_length_(self)
    end
    
    def length=(len : Float64) : Void
      Binding.bg_QLineF_setLength_qreal(self, len)
    end
    
    def angle=(angle : Float64) : Void
      Binding.bg_QLineF_setAngle_qreal(self, angle)
    end
    
    def angle_to(l : QLineF) : Float64
      Binding.bg_QLineF_angleTo_const_QLineF_R(self, l)
    end
    
    def unit_vector() : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_unitVector_(self))
    end
    
    def normal_vector() : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_normalVector_(self))
    end
    
    def point_at(t : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QLineF_pointAt_qreal(self, t))
    end
    
    def translate(p : PointF) : Void
      Binding.bg_QLineF_translate_const_QPointF_R(self, p)
    end
    
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QLineF_translate_qreal_qreal(self, dx, dy)
    end
    
    def translated(p : PointF) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_translated_const_QPointF_R(self, p))
    end
    
    def translated(dx : Float64, dy : Float64) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF_translated_qreal_qreal(self, dx, dy))
    end
    
    def center() : PointF
      PointF.new(unwrap: Binding.bg_QLineF_center_(self))
    end
    
    def p1=(p1 : PointF) : Void
      Binding.bg_QLineF_setP1_const_QPointF_R(self, p1)
    end
    
    def p2=(p2 : PointF) : Void
      Binding.bg_QLineF_setP2_const_QPointF_R(self, p2)
    end
    
    def set_points(p1 : PointF, p2 : PointF) : Void
      Binding.bg_QLineF_setPoints_const_QPointF_R_const_QPointF_R(self, p1, p2)
    end
    
    def set_line(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
      Binding.bg_QLineF_setLine_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    
    def ==(d : QLineF) : Bool
      Binding.bg_QLineF__OPERATOR_eq_const_QLineF_R(self, d)
    end
    
    def !=(d : QLineF) : Bool
      Binding.bg_QLineF__OPERATOR_ne_const_QLineF_R(self, d)
    end
    
    def to_line() : QLine
      QLine.new(unwrap: Binding.bg_QLineF_toLine_(self))
    end
    
    def *(m : Binding::QMatrix*) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF__OPERATOR_mul_const_QMatrix_R(self, m))
    end
    
    def *(m : Binding::QTransform*) : QLineF
      QLineF.new(unwrap: Binding.bg_QLineF__OPERATOR_mul_const_QTransform_R(self, m))
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QLineF*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class MimeData < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QMimeData_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMimeData_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize()
      result = Binding.bg_QMimeData__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MimeData)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall has_format formats retrieve_data event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMimeData.new(
      bg_QMimeData_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMimeData_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMimeData_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMimeData_hasFormat_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("has_format") %} Proc(Binding::CrystalString, Bool).new{|mimetype| self.has_format(Qt::Converter::QString.unwrap(mimetype)) } {% else %} nil {% end %}),
      bg_QMimeData_formats_: BindgenHelper.wrap_proc({% if forwarded.includes?("formats") %} Proc(Binding::QStringList*).new{ self.formats() } {% else %} nil {% end %}),
      bg_QMimeData_retrieveData_const_QString_R_QVariant__Type: BindgenHelper.wrap_proc({% if forwarded.includes?("retrieve_data") %} Proc(Binding::CrystalString, VariantType, Binding::CrystalVariant).new{|mimetype, preferred_type| (self.retrieve_data(Qt::Converter::QString.unwrap(mimetype), preferred_type).to_unsafe) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMimeData_JUMPTABLE_BgJumptable_QMimeData_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def urls() : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QMimeData_urls_(self))
    end
    
    def urls=(urls : Enumerable(Url)) : Void
      Binding.bg_QMimeData_setUrls_const_QList_QUrl__R(self, BindgenHelper.wrap_container(Container_QList_QUrl_, urls).to_unsafe)
    end
    
    def has_urls?() : Bool
      Binding.bg_QMimeData_hasUrls_(self)
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_text_(self))
    end
    
    def text=(text : String) : Void
      Binding.bg_QMimeData_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def has_text?() : Bool
      Binding.bg_QMimeData_hasText_(self)
    end
    
    def html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMimeData_html_(self))
    end
    
    def html=(html : String) : Void
      Binding.bg_QMimeData_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    
    def has_html?() : Bool
      Binding.bg_QMimeData_hasHtml_(self)
    end
    
    def image_data() : Variant
      Qt::Variant.new(Binding.bg_QMimeData_imageData_(self))
    end
    
    def image_data=(image : Variant) : Void
      Binding.bg_QMimeData_setImageData_const_QVariant_R(self, (image.to_unsafe))
    end
    
    def has_image?() : Bool
      Binding.bg_QMimeData_hasImage_(self)
    end
    
    def color_data() : Variant
      Qt::Variant.new(Binding.bg_QMimeData_colorData_(self))
    end
    
    def color_data=(color : Variant) : Void
      Binding.bg_QMimeData_setColorData_const_QVariant_R(self, (color.to_unsafe))
    end
    
    def has_color?() : Bool
      Binding.bg_QMimeData_hasColor_(self)
    end
    
    def data(mimetype : String) : Binding::QByteArray*
      Binding.bg_QMimeData_data_const_QString_R(self, Qt::Converter::QString.wrap(mimetype))
    end
    
    def set_data(mimetype : String, data : Binding::QByteArray*) : Void
      Binding.bg_QMimeData_setData_const_QString_R_const_QByteArray_R(self, Qt::Converter::QString.wrap(mimetype), data)
    end
    
    def remove_format(mimetype : String) : Void
      Binding.bg_QMimeData_removeFormat_const_QString_R(self, Qt::Converter::QString.wrap(mimetype))
    end
    
    def has_format(mimetype : String) : Bool
      Binding.bg_QMimeData_hasFormat_const_QString_R(self, Qt::Converter::QString.wrap(mimetype))
    end
    
    def formats() : Binding::QStringList*
      Binding.bg_QMimeData_formats_(self)
    end
    
    def clear() : Void
      Binding.bg_QMimeData_clear_(self)
    end
    
    protected def retrieve_data(mimetype : String, preferred_type : VariantType) : Variant
      Qt::Variant.new(Binding.bg_QMimeData_retrieveData_const_QString_R_QVariant__Type(self, Qt::Converter::QString.wrap(mimetype), preferred_type))
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QMimeData_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QMimeData*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : MimeData)
      end
      def has_format(mimetype : String) : Bool
        Binding.bg_QMimeData_hasFormat_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(mimetype))
      end
      
      def formats() : Binding::QStringList*
        Binding.bg_QMimeData_formats_SUPER_(@myself)
      end
      
      protected def retrieve_data(mimetype : String, preferred_type : VariantType) : Variant
        Qt::Variant.new(Binding.bg_QMimeData_retrieveData_SUPER_const_QString_R_QVariant__Type(@myself, Qt::Converter::QString.wrap(mimetype), preferred_type))
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Rect
    @unwrap : Binding::QRect*
    
    def initialize()
      result = Binding.bg_QRect__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(topleft : Point, bottomright : Point)
      result = Binding.bg_QRect__CONSTRUCT_const_QPoint_R_const_QPoint_R(topleft, bottomright)
    @unwrap = result
    end
    
    def initialize(topleft : Point, size : Binding::QSize*)
      result = Binding.bg_QRect__CONSTRUCT_const_QPoint_R_const_QSize_R(topleft, size)
    @unwrap = result
    end
    
    def initialize(left : Int32, top : Int32, width : Int32, height : Int32)
      result = Binding.bg_QRect__CONSTRUCT_int_int_int_int(left, top, width, height)
    @unwrap = result
    end
    
    def null?() : Bool
      Binding.bg_QRect_isNull_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QRect_isEmpty_(self)
    end
    
    def valid?() : Bool
      Binding.bg_QRect_isValid_(self)
    end
    
    def left() : Int32
      Binding.bg_QRect_left_(self)
    end
    
    def top() : Int32
      Binding.bg_QRect_top_(self)
    end
    
    def right() : Int32
      Binding.bg_QRect_right_(self)
    end
    
    def bottom() : Int32
      Binding.bg_QRect_bottom_(self)
    end
    
    def normalized() : Rect
      Rect.new(unwrap: Binding.bg_QRect_normalized_(self))
    end
    
    def x() : Int32
      Binding.bg_QRect_x_(self)
    end
    
    def y() : Int32
      Binding.bg_QRect_y_(self)
    end
    
    def left=(pos : Int32) : Void
      Binding.bg_QRect_setLeft_int(self, pos)
    end
    
    def top=(pos : Int32) : Void
      Binding.bg_QRect_setTop_int(self, pos)
    end
    
    def right=(pos : Int32) : Void
      Binding.bg_QRect_setRight_int(self, pos)
    end
    
    def bottom=(pos : Int32) : Void
      Binding.bg_QRect_setBottom_int(self, pos)
    end
    
    def x=(x : Int32) : Void
      Binding.bg_QRect_setX_int(self, x)
    end
    
    def y=(y : Int32) : Void
      Binding.bg_QRect_setY_int(self, y)
    end
    
    def top_left=(p : Point) : Void
      Binding.bg_QRect_setTopLeft_const_QPoint_R(self, p)
    end
    
    def bottom_right=(p : Point) : Void
      Binding.bg_QRect_setBottomRight_const_QPoint_R(self, p)
    end
    
    def top_right=(p : Point) : Void
      Binding.bg_QRect_setTopRight_const_QPoint_R(self, p)
    end
    
    def bottom_left=(p : Point) : Void
      Binding.bg_QRect_setBottomLeft_const_QPoint_R(self, p)
    end
    
    def top_left() : Point
      Point.new(unwrap: Binding.bg_QRect_topLeft_(self))
    end
    
    def bottom_right() : Point
      Point.new(unwrap: Binding.bg_QRect_bottomRight_(self))
    end
    
    def top_right() : Point
      Point.new(unwrap: Binding.bg_QRect_topRight_(self))
    end
    
    def bottom_left() : Point
      Point.new(unwrap: Binding.bg_QRect_bottomLeft_(self))
    end
    
    def center() : Point
      Point.new(unwrap: Binding.bg_QRect_center_(self))
    end
    
    def move_left(pos : Int32) : Void
      Binding.bg_QRect_moveLeft_int(self, pos)
    end
    
    def move_top(pos : Int32) : Void
      Binding.bg_QRect_moveTop_int(self, pos)
    end
    
    def move_right(pos : Int32) : Void
      Binding.bg_QRect_moveRight_int(self, pos)
    end
    
    def move_bottom(pos : Int32) : Void
      Binding.bg_QRect_moveBottom_int(self, pos)
    end
    
    def move_top_left(p : Point) : Void
      Binding.bg_QRect_moveTopLeft_const_QPoint_R(self, p)
    end
    
    def move_bottom_right(p : Point) : Void
      Binding.bg_QRect_moveBottomRight_const_QPoint_R(self, p)
    end
    
    def move_top_right(p : Point) : Void
      Binding.bg_QRect_moveTopRight_const_QPoint_R(self, p)
    end
    
    def move_bottom_left(p : Point) : Void
      Binding.bg_QRect_moveBottomLeft_const_QPoint_R(self, p)
    end
    
    def move_center(p : Point) : Void
      Binding.bg_QRect_moveCenter_const_QPoint_R(self, p)
    end
    
    def translate(dx : Int32, dy : Int32) : Void
      Binding.bg_QRect_translate_int_int(self, dx, dy)
    end
    
    def translate(p : Point) : Void
      Binding.bg_QRect_translate_const_QPoint_R(self, p)
    end
    
    def translated(dx : Int32, dy : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QRect_translated_int_int(self, dx, dy))
    end
    
    def translated(p : Point) : Rect
      Rect.new(unwrap: Binding.bg_QRect_translated_const_QPoint_R(self, p))
    end
    
    def transposed() : Rect
      Rect.new(unwrap: Binding.bg_QRect_transposed_(self))
    end
    
    def move_to(x : Int32, t : Int32) : Void
      Binding.bg_QRect_moveTo_int_int(self, x, t)
    end
    
    def move_to(p : Point) : Void
      Binding.bg_QRect_moveTo_const_QPoint_R(self, p)
    end
    
    def set_rect(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QRect_setRect_int_int_int_int(self, x, y, w, h)
    end
    
    def get_rect(x : Int32*, y : Int32*, w : Int32*, h : Int32*) : Void
      Binding.bg_QRect_getRect_int_X_int_X_int_X_int_X(self, x, y, w, h)
    end
    
    def set_coords(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QRect_setCoords_int_int_int_int(self, x1, y1, x2, y2)
    end
    
    def get_coords(x1 : Int32*, y1 : Int32*, x2 : Int32*, y2 : Int32*) : Void
      Binding.bg_QRect_getCoords_int_X_int_X_int_X_int_X(self, x1, y1, x2, y2)
    end
    
    def adjust(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QRect_adjust_int_int_int_int(self, x1, y1, x2, y2)
    end
    
    def adjusted(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QRect_adjusted_int_int_int_int(self, x1, y1, x2, y2))
    end
    
    def size() : Binding::QSize*
      Binding.bg_QRect_size_(self)
    end
    
    def width() : Int32
      Binding.bg_QRect_width_(self)
    end
    
    def height() : Int32
      Binding.bg_QRect_height_(self)
    end
    
    def width=(w : Int32) : Void
      Binding.bg_QRect_setWidth_int(self, w)
    end
    
    def height=(h : Int32) : Void
      Binding.bg_QRect_setHeight_int(self, h)
    end
    
    def size=(s : Binding::QSize*) : Void
      Binding.bg_QRect_setSize_const_QSize_R(self, s)
    end
    
    def |(r : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_bit_or_const_QRect_R(self, r))
    end
    
    def &(r : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_bit_and_const_QRect_R(self, r))
    end
    
    def bit_or!(r : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_bit_or_assign_const_QRect_R(self, r))
    end
    
    def bit_and!(r : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_bit_and_assign_const_QRect_R(self, r))
    end
    
    def contains(r : Rect, proper : Bool = false) : Bool
      Binding.bg_QRect_contains_const_QRect_R_bool(self, r, proper)
    end
    
    def contains(p : Point, proper : Bool = false) : Bool
      Binding.bg_QRect_contains_const_QPoint_R_bool(self, p, proper)
    end
    
    def contains(x : Int32, y : Int32) : Bool
      Binding.bg_QRect_contains_int_int(self, x, y)
    end
    
    def contains(x : Int32, y : Int32, proper : Bool) : Bool
      Binding.bg_QRect_contains_int_int_bool(self, x, y, proper)
    end
    
    def united(other : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect_united_const_QRect_R(self, other))
    end
    
    def intersected(other : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QRect_intersected_const_QRect_R(self, other))
    end
    
    def intersects(r : Rect) : Bool
      Binding.bg_QRect_intersects_const_QRect_R(self, r)
    end
    
    def margins_added(margins : Binding::QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect_marginsAdded_const_QMargins_R(self, margins))
    end
    
    def margins_removed(margins : Binding::QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect_marginsRemoved_const_QMargins_R(self, margins))
    end
    
    def add!(margins : Binding::QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_add_assign_const_QMargins_R(self, margins))
    end
    
    def sub!(margins : Binding::QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_sub_assign_const_QMargins_R(self, margins))
    end
    
    def ==(unnamed_arg_0 : Rect) : Bool
      Binding.bg_QRect__OPERATOR_eq_const_QRect_R(self, unnamed_arg_0)
    end
    
    def !=(unnamed_arg_0 : Rect) : Bool
      Binding.bg_QRect__OPERATOR_ne_const_QRect_R(self, unnamed_arg_0)
    end
    
    def +(margins : Binding::QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_add_const_QMargins_R(self, margins))
    end
    
    def -(rhs : Binding::QMargins*) : Rect
      Rect.new(unwrap: Binding.bg_QRect__OPERATOR_sub_const_QMargins_R(self, rhs))
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QRect*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class RectF
    @unwrap : Binding::QRectF*
    
    def initialize()
      result = Binding.bg_QRectF__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(topleft : PointF, size : Binding::QSizeF*)
      result = Binding.bg_QRectF__CONSTRUCT_const_QPointF_R_const_QSizeF_R(topleft, size)
    @unwrap = result
    end
    
    def initialize(topleft : PointF, bottom_right : PointF)
      result = Binding.bg_QRectF__CONSTRUCT_const_QPointF_R_const_QPointF_R(topleft, bottom_right)
    @unwrap = result
    end
    
    def initialize(left : Float64, top : Float64, width : Float64, height : Float64)
      result = Binding.bg_QRectF__CONSTRUCT_qreal_qreal_qreal_qreal(left, top, width, height)
    @unwrap = result
    end
    
    def initialize(rect : Rect)
      result = Binding.bg_QRectF__CONSTRUCT_const_QRect_R(rect)
    @unwrap = result
    end
    
    def null?() : Bool
      Binding.bg_QRectF_isNull_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QRectF_isEmpty_(self)
    end
    
    def valid?() : Bool
      Binding.bg_QRectF_isValid_(self)
    end
    
    def normalized() : RectF
      RectF.new(unwrap: Binding.bg_QRectF_normalized_(self))
    end
    
    def left() : Float64
      Binding.bg_QRectF_left_(self)
    end
    
    def top() : Float64
      Binding.bg_QRectF_top_(self)
    end
    
    def right() : Float64
      Binding.bg_QRectF_right_(self)
    end
    
    def bottom() : Float64
      Binding.bg_QRectF_bottom_(self)
    end
    
    def x() : Float64
      Binding.bg_QRectF_x_(self)
    end
    
    def y() : Float64
      Binding.bg_QRectF_y_(self)
    end
    
    def left=(pos : Float64) : Void
      Binding.bg_QRectF_setLeft_qreal(self, pos)
    end
    
    def top=(pos : Float64) : Void
      Binding.bg_QRectF_setTop_qreal(self, pos)
    end
    
    def right=(pos : Float64) : Void
      Binding.bg_QRectF_setRight_qreal(self, pos)
    end
    
    def bottom=(pos : Float64) : Void
      Binding.bg_QRectF_setBottom_qreal(self, pos)
    end
    
    def x=(pos : Float64) : Void
      Binding.bg_QRectF_setX_qreal(self, pos)
    end
    
    def y=(pos : Float64) : Void
      Binding.bg_QRectF_setY_qreal(self, pos)
    end
    
    def top_left() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_topLeft_(self))
    end
    
    def bottom_right() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_bottomRight_(self))
    end
    
    def top_right() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_topRight_(self))
    end
    
    def bottom_left() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_bottomLeft_(self))
    end
    
    def center() : PointF
      PointF.new(unwrap: Binding.bg_QRectF_center_(self))
    end
    
    def top_left=(p : PointF) : Void
      Binding.bg_QRectF_setTopLeft_const_QPointF_R(self, p)
    end
    
    def bottom_right=(p : PointF) : Void
      Binding.bg_QRectF_setBottomRight_const_QPointF_R(self, p)
    end
    
    def top_right=(p : PointF) : Void
      Binding.bg_QRectF_setTopRight_const_QPointF_R(self, p)
    end
    
    def bottom_left=(p : PointF) : Void
      Binding.bg_QRectF_setBottomLeft_const_QPointF_R(self, p)
    end
    
    def move_left(pos : Float64) : Void
      Binding.bg_QRectF_moveLeft_qreal(self, pos)
    end
    
    def move_top(pos : Float64) : Void
      Binding.bg_QRectF_moveTop_qreal(self, pos)
    end
    
    def move_right(pos : Float64) : Void
      Binding.bg_QRectF_moveRight_qreal(self, pos)
    end
    
    def move_bottom(pos : Float64) : Void
      Binding.bg_QRectF_moveBottom_qreal(self, pos)
    end
    
    def move_top_left(p : PointF) : Void
      Binding.bg_QRectF_moveTopLeft_const_QPointF_R(self, p)
    end
    
    def move_bottom_right(p : PointF) : Void
      Binding.bg_QRectF_moveBottomRight_const_QPointF_R(self, p)
    end
    
    def move_top_right(p : PointF) : Void
      Binding.bg_QRectF_moveTopRight_const_QPointF_R(self, p)
    end
    
    def move_bottom_left(p : PointF) : Void
      Binding.bg_QRectF_moveBottomLeft_const_QPointF_R(self, p)
    end
    
    def move_center(p : PointF) : Void
      Binding.bg_QRectF_moveCenter_const_QPointF_R(self, p)
    end
    
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QRectF_translate_qreal_qreal(self, dx, dy)
    end
    
    def translate(p : PointF) : Void
      Binding.bg_QRectF_translate_const_QPointF_R(self, p)
    end
    
    def translated(dx : Float64, dy : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_translated_qreal_qreal(self, dx, dy))
    end
    
    def translated(p : PointF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_translated_const_QPointF_R(self, p))
    end
    
    def transposed() : RectF
      RectF.new(unwrap: Binding.bg_QRectF_transposed_(self))
    end
    
    def move_to(x : Float64, y : Float64) : Void
      Binding.bg_QRectF_moveTo_qreal_qreal(self, x, y)
    end
    
    def move_to(p : PointF) : Void
      Binding.bg_QRectF_moveTo_const_QPointF_R(self, p)
    end
    
    def set_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QRectF_setRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def get_rect(x : Float64*, y : Float64*, w : Float64*, h : Float64*) : Void
      Binding.bg_QRectF_getRect_qreal_X_qreal_X_qreal_X_qreal_X(self, x, y, w, h)
    end
    
    def set_coords(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
      Binding.bg_QRectF_setCoords_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    
    def get_coords(x1 : Float64*, y1 : Float64*, x2 : Float64*, y2 : Float64*) : Void
      Binding.bg_QRectF_getCoords_qreal_X_qreal_X_qreal_X_qreal_X(self, x1, y1, x2, y2)
    end
    
    def adjust(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Void
      Binding.bg_QRectF_adjust_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    
    def adjusted(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_adjusted_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2))
    end
    
    def size() : Binding::QSizeF*
      Binding.bg_QRectF_size_(self)
    end
    
    def width() : Float64
      Binding.bg_QRectF_width_(self)
    end
    
    def height() : Float64
      Binding.bg_QRectF_height_(self)
    end
    
    def width=(w : Float64) : Void
      Binding.bg_QRectF_setWidth_qreal(self, w)
    end
    
    def height=(h : Float64) : Void
      Binding.bg_QRectF_setHeight_qreal(self, h)
    end
    
    def size=(s : Binding::QSizeF*) : Void
      Binding.bg_QRectF_setSize_const_QSizeF_R(self, s)
    end
    
    def |(r : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_bit_or_const_QRectF_R(self, r))
    end
    
    def &(r : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_bit_and_const_QRectF_R(self, r))
    end
    
    def bit_or!(r : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_bit_or_assign_const_QRectF_R(self, r))
    end
    
    def bit_and!(r : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_bit_and_assign_const_QRectF_R(self, r))
    end
    
    def contains(r : RectF) : Bool
      Binding.bg_QRectF_contains_const_QRectF_R(self, r)
    end
    
    def contains(p : PointF) : Bool
      Binding.bg_QRectF_contains_const_QPointF_R(self, p)
    end
    
    def contains(x : Float64, y : Float64) : Bool
      Binding.bg_QRectF_contains_qreal_qreal(self, x, y)
    end
    
    def united(other : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_united_const_QRectF_R(self, other))
    end
    
    def intersected(other : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_intersected_const_QRectF_R(self, other))
    end
    
    def intersects(r : RectF) : Bool
      Binding.bg_QRectF_intersects_const_QRectF_R(self, r)
    end
    
    def margins_added(margins : Binding::QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_marginsAdded_const_QMarginsF_R(self, margins))
    end
    
    def margins_removed(margins : Binding::QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF_marginsRemoved_const_QMarginsF_R(self, margins))
    end
    
    def add!(margins : Binding::QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_add_assign_const_QMarginsF_R(self, margins))
    end
    
    def sub!(margins : Binding::QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_sub_assign_const_QMarginsF_R(self, margins))
    end
    
    def to_rect() : Rect
      Rect.new(unwrap: Binding.bg_QRectF_toRect_(self))
    end
    
    def to_aligned_rect() : Rect
      Rect.new(unwrap: Binding.bg_QRectF_toAlignedRect_(self))
    end
    
    def ==(unnamed_arg_0 : RectF) : Bool
      Binding.bg_QRectF__OPERATOR_eq_const_QRectF_R(self, unnamed_arg_0)
    end
    
    def !=(unnamed_arg_0 : RectF) : Bool
      Binding.bg_QRectF__OPERATOR_ne_const_QRectF_R(self, unnamed_arg_0)
    end
    
    def +(rhs : Binding::QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_add_const_QMarginsF_R(self, rhs))
    end
    
    def -(rhs : Binding::QMarginsF*) : RectF
      RectF.new(unwrap: Binding.bg_QRectF__OPERATOR_sub_const_QMarginsF_R(self, rhs))
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QRectF*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class SocketNotifier < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QSocketNotifier_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSocketNotifier_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSocketNotifier_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSocketNotifier_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(socket : Int64, unnamed_arg_1 : SocketNotifier::Type, parent : Object? = nil)
      result = Binding.bg_QSocketNotifier__CONSTRUCT_qintptr_QSocketNotifier__Type_QObject_X(socket, unnamed_arg_1, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SocketNotifier)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSocketNotifier.new(
      bg_QSocketNotifier_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QSocketNotifier_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSocketNotifier_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSocketNotifier_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSocketNotifier_JUMPTABLE_BgJumptable_QSocketNotifier_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def socket() : Int64
      Binding.bg_QSocketNotifier_socket_(self)
    end
    
    def type() : SocketNotifier::Type
      Binding.bg_QSocketNotifier_type_(self)
    end
    
    def enabled?() : Bool
      Binding.bg_QSocketNotifier_isEnabled_(self)
    end
    
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QSocketNotifier_setEnabled_bool(self, unnamed_arg_0)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QSocketNotifier_event_QEvent_X(self, unnamed_arg_0)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QSocketNotifier_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Type : UInt32
      Read = 0
      Write = 1
      Exception = 2
    end
    def on_activated(&_proc_ : Proc(Binding::QSocketDescriptor, SocketNotifier::Type, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSocketNotifier_CONNECT_activated_CrystalProc_void__QSocketDescriptor__QSocketNotifier__Type_(self, BindgenHelper.wrap_proc(Proc(Binding::QSocketDescriptor*, SocketNotifier::Type, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def initialize(unwrap : Binding::QSocketNotifier*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : SocketNotifier)
      end
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QSocketNotifier_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class StandardPaths
    @unwrap : Binding::QStandardPaths*
    
    def self.writable_location(type : StandardPaths::StandardLocation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_writableLocation_STATIC_QStandardPaths__StandardLocation(type))
    end
    
    def self.standard_locations(type : StandardPaths::StandardLocation) : Binding::QStringList*
      Binding.bg_QStandardPaths_standardLocations_STATIC_QStandardPaths__StandardLocation(type)
    end
    
    def self.locate(type : StandardPaths::StandardLocation, file_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R(type, Qt::Converter::QString.wrap(file_name)))
    end
    
    def self.locate(type : StandardPaths::StandardLocation, file_name : String, options : StandardPaths::LocateOptions) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_locate_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type, Qt::Converter::QString.wrap(file_name), options))
    end
    
    def self.locate_all(type : StandardPaths::StandardLocation, file_name : String) : Binding::QStringList*
      Binding.bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R(type, Qt::Converter::QString.wrap(file_name))
    end
    
    def self.locate_all(type : StandardPaths::StandardLocation, file_name : String, options : StandardPaths::LocateOptions) : Binding::QStringList*
      Binding.bg_QStandardPaths_locateAll_STATIC_QStandardPaths__StandardLocation_const_QString_R_QStandardPaths__LocateOptions(type, Qt::Converter::QString.wrap(file_name), options)
    end
    
    def self.display_name(type : StandardPaths::StandardLocation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_displayName_STATIC_QStandardPaths__StandardLocation(type))
    end
    
    def self.find_executable(executable_name : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_findExecutable_STATIC_const_QString_R(Qt::Converter::QString.wrap(executable_name)))
    end
    
    def self.find_executable(executable_name : String, paths : Binding::QStringList*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStandardPaths_findExecutable_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(executable_name), paths))
    end
    
    def self.test_mode_enabled=(test_mode : Bool) : Void
      Binding.bg_QStandardPaths_setTestModeEnabled_STATIC_bool(test_mode)
    end
    
    def self.test_mode_enabled?() : Bool
      Binding.bg_QStandardPaths_isTestModeEnabled_STATIC_()
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QStandardPaths_staticMetaObject_STATIC_GETTER_()
    end
    
    enum StandardLocation : UInt32
      DesktopLocation = 0
      DocumentsLocation = 1
      FontsLocation = 2
      ApplicationsLocation = 3
      MusicLocation = 4
      MoviesLocation = 5
      PicturesLocation = 6
      TempLocation = 7
      HomeLocation = 8
      DataLocation = 9
      CacheLocation = 10
      GenericDataLocation = 11
      RuntimeLocation = 12
      ConfigLocation = 13
      DownloadLocation = 14
      GenericCacheLocation = 15
      GenericConfigLocation = 16
      AppDataLocation = 17
      AppConfigLocation = 18
      AppLocalDataLocation = 9
    end
    enum LocateOption : UInt32
      LocateFile = 0
      LocateDirectory = 1
    end
    @[Flags]
    enum LocateOptions : UInt32
      LocateFile = 0
      LocateDirectory = 1
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QStandardPaths*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Timer < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTimer_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTimer_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTimer_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTimer_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTimer_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QTimer__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Timer)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall timer_event event event_filter child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTimer.new(
      bg_QTimer_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTimer_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTimer_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTimer_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTimer_JUMPTABLE_BgJumptable_QTimer_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def active?() : Bool
      Binding.bg_QTimer_isActive_(self)
    end
    
    def timer_id() : Int32
      Binding.bg_QTimer_timerId_(self)
    end
    
    def interval=(msec : Int32) : Void
      Binding.bg_QTimer_setInterval_int(self, msec)
    end
    
    def interval() : Int32
      Binding.bg_QTimer_interval_(self)
    end
    
    def remaining_time() : Int32
      Binding.bg_QTimer_remainingTime_(self)
    end
    
    def timer_type=(atype : TimerType) : Void
      Binding.bg_QTimer_setTimerType_Qt__TimerType(self, atype)
    end
    
    def timer_type() : TimerType
      Binding.bg_QTimer_timerType_(self)
    end
    
    def single_shot=(single_shot : Bool) : Void
      Binding.bg_QTimer_setSingleShot_bool(self, single_shot)
    end
    
    def single_shot?() : Bool
      Binding.bg_QTimer_isSingleShot_(self)
    end
    
    def self.single_shot(msec : Int32, receiver : Object, member : UInt8*) : Void
      Binding.bg_QTimer_singleShot_STATIC_int_const_QObject_X_const_char_X(msec, receiver, member)
    end
    
    def self.single_shot(msec : Int32, timer_type : TimerType, receiver : Object, member : UInt8*) : Void
      Binding.bg_QTimer_singleShot_STATIC_int_Qt__TimerType_const_QObject_X_const_char_X(msec, timer_type, receiver, member)
    end
    
    def start(msec : Int32) : Void
      Binding.bg_QTimer_start_int(self, msec)
    end
    
    def start() : Void
      Binding.bg_QTimer_start_(self)
    end
    
    def stop() : Void
      Binding.bg_QTimer_stop_(self)
    end
    
    def interval=(value : Time::Span) : Void
      Binding.bg_QTimer_setInterval_std__chrono__milliseconds(self, Qt::Converter::TimeSpan.wrap(value))
    end
    
    def interval_as_duration() : Time::Span
      Qt::Converter::TimeSpan.unwrap(Binding.bg_QTimer_intervalAsDuration_(self))
    end
    
    def remaining_time_as_duration() : Time::Span
      Qt::Converter::TimeSpan.unwrap(Binding.bg_QTimer_remainingTimeAsDuration_(self))
    end
    
    def self.single_shot(value : Time::Span, receiver : Object, member : UInt8*) : Void
      Binding.bg_QTimer_singleShot_STATIC_std__chrono__milliseconds_const_QObject_X_const_char_X(Qt::Converter::TimeSpan.wrap(value), receiver, member)
    end
    
    def self.single_shot(value : Time::Span, timer_type : TimerType, receiver : Object, member : UInt8*) : Void
      Binding.bg_QTimer_singleShot_STATIC_std__chrono__milliseconds_Qt__TimerType_const_QObject_X_const_char_X(Qt::Converter::TimeSpan.wrap(value), timer_type, receiver, member)
    end
    
    def start(value : Time::Span) : Void
      Binding.bg_QTimer_start_std__chrono__milliseconds(self, Qt::Converter::TimeSpan.wrap(value))
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QTimer_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTimer_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_timeout(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTimer_CONNECT_timeout_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QTimer*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Timer)
      end
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QTimer_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Color
    @unwrap : Binding::QColor*
    
    def initialize()
      result = Binding.bg_QColor__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(color : GlobalColor)
      result = Binding.bg_QColor__CONSTRUCT_Qt__GlobalColor(color)
    @unwrap = result
    end
    
    def initialize(r : Int32, g : Int32, b : Int32, a : Int32 = 255)
      result = Binding.bg_QColor__CONSTRUCT_int_int_int_int(r, g, b, a)
    @unwrap = result
    end
    
    def initialize(rgb : UInt32)
      result = Binding.bg_QColor__CONSTRUCT_QRgb(rgb)
    @unwrap = result
    end
    
    def initialize(rgba64 : Binding::QRgba64*)
      result = Binding.bg_QColor__CONSTRUCT_QRgba64(rgba64)
    @unwrap = result
    end
    
    def initialize(name : String)
      result = Binding.bg_QColor__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(name))
    @unwrap = result
    end
    
    def initialize(name : Binding::QStringView*)
      result = Binding.bg_QColor__CONSTRUCT_QStringView(name)
    @unwrap = result
    end
    
    def initialize(aname : UInt8*)
      result = Binding.bg_QColor__CONSTRUCT_const_char_X(aname)
    @unwrap = result
    end
    
    def initialize(name : Binding::QLatin1String*)
      result = Binding.bg_QColor__CONSTRUCT_QLatin1String(name)
    @unwrap = result
    end
    
    def initialize(spec : Color::Spec)
      result = Binding.bg_QColor__CONSTRUCT_QColor__Spec(spec)
    @unwrap = result
    end
    
    def valid?() : Bool
      Binding.bg_QColor_isValid_(self)
    end
    
    def name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QColor_name_(self))
    end
    
    def name(format : Color::NameFormat) : String
      Qt::Converter::QString.unwrap(Binding.bg_QColor_name_QColor__NameFormat(self, format))
    end
    
    def named_color=(name : String) : Void
      Binding.bg_QColor_setNamedColor_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    
    def named_color=(name : Binding::QStringView*) : Void
      Binding.bg_QColor_setNamedColor_QStringView(self, name)
    end
    
    def named_color=(name : Binding::QLatin1String*) : Void
      Binding.bg_QColor_setNamedColor_QLatin1String(self, name)
    end
    
    def self.color_names() : Binding::QStringList*
      Binding.bg_QColor_colorNames_STATIC_()
    end
    
    def spec() : Color::Spec
      Binding.bg_QColor_spec_(self)
    end
    
    def alpha() : Int32
      Binding.bg_QColor_alpha_(self)
    end
    
    def alpha=(alpha : Int32) : Void
      Binding.bg_QColor_setAlpha_int(self, alpha)
    end
    
    def alpha_f() : Float64
      Binding.bg_QColor_alphaF_(self)
    end
    
    def alpha_f=(alpha : Float64) : Void
      Binding.bg_QColor_setAlphaF_qreal(self, alpha)
    end
    
    def red() : Int32
      Binding.bg_QColor_red_(self)
    end
    
    def green() : Int32
      Binding.bg_QColor_green_(self)
    end
    
    def blue() : Int32
      Binding.bg_QColor_blue_(self)
    end
    
    def red=(red : Int32) : Void
      Binding.bg_QColor_setRed_int(self, red)
    end
    
    def green=(green : Int32) : Void
      Binding.bg_QColor_setGreen_int(self, green)
    end
    
    def blue=(blue : Int32) : Void
      Binding.bg_QColor_setBlue_int(self, blue)
    end
    
    def red_f() : Float64
      Binding.bg_QColor_redF_(self)
    end
    
    def green_f() : Float64
      Binding.bg_QColor_greenF_(self)
    end
    
    def blue_f() : Float64
      Binding.bg_QColor_blueF_(self)
    end
    
    def red_f=(red : Float64) : Void
      Binding.bg_QColor_setRedF_qreal(self, red)
    end
    
    def green_f=(green : Float64) : Void
      Binding.bg_QColor_setGreenF_qreal(self, green)
    end
    
    def blue_f=(blue : Float64) : Void
      Binding.bg_QColor_setBlueF_qreal(self, blue)
    end
    
    def get_rgb(r : Int32*, g : Int32*, b : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getRgb_int_X_int_X_int_X_int_X(self, r, g, b, a)
    end
    
    def set_rgb(r : Int32, g : Int32, b : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setRgb_int_int_int_int(self, r, g, b, a)
    end
    
    def get_rgb_f(r : Float64*, g : Float64*, b : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getRgbF_qreal_X_qreal_X_qreal_X_qreal_X(self, r, g, b, a)
    end
    
    def set_rgb_f(r : Float64, g : Float64, b : Float64, a : Float64 = 1.0f64) : Void
      Binding.bg_QColor_setRgbF_qreal_qreal_qreal_qreal(self, r, g, b, a)
    end
    
    def rgba64() : Binding::QRgba64*
      Binding.bg_QColor_rgba64_(self)
    end
    
    def rgba64=(rgba : Binding::QRgba64*) : Void
      Binding.bg_QColor_setRgba64_QRgba64(self, rgba)
    end
    
    def rgba() : UInt32
      Binding.bg_QColor_rgba_(self)
    end
    
    def rgba=(rgba : UInt32) : Void
      Binding.bg_QColor_setRgba_QRgb(self, rgba)
    end
    
    def rgb() : UInt32
      Binding.bg_QColor_rgb_(self)
    end
    
    def rgb=(rgb : UInt32) : Void
      Binding.bg_QColor_setRgb_QRgb(self, rgb)
    end
    
    def hue() : Int32
      Binding.bg_QColor_hue_(self)
    end
    
    def saturation() : Int32
      Binding.bg_QColor_saturation_(self)
    end
    
    def hsv_hue() : Int32
      Binding.bg_QColor_hsvHue_(self)
    end
    
    def hsv_saturation() : Int32
      Binding.bg_QColor_hsvSaturation_(self)
    end
    
    def value() : Int32
      Binding.bg_QColor_value_(self)
    end
    
    def hue_f() : Float64
      Binding.bg_QColor_hueF_(self)
    end
    
    def saturation_f() : Float64
      Binding.bg_QColor_saturationF_(self)
    end
    
    def hsv_hue_f() : Float64
      Binding.bg_QColor_hsvHueF_(self)
    end
    
    def hsv_saturation_f() : Float64
      Binding.bg_QColor_hsvSaturationF_(self)
    end
    
    def value_f() : Float64
      Binding.bg_QColor_valueF_(self)
    end
    
    def get_hsv(h : Int32*, s : Int32*, v : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getHsv_int_X_int_X_int_X_int_X(self, h, s, v, a)
    end
    
    def set_hsv(h : Int32, s : Int32, v : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setHsv_int_int_int_int(self, h, s, v, a)
    end
    
    def get_hsv_f(h : Float64*, s : Float64*, v : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getHsvF_qreal_X_qreal_X_qreal_X_qreal_X(self, h, s, v, a)
    end
    
    def set_hsv_f(h : Float64, s : Float64, v : Float64, a : Float64 = 1.0f64) : Void
      Binding.bg_QColor_setHsvF_qreal_qreal_qreal_qreal(self, h, s, v, a)
    end
    
    def cyan() : Int32
      Binding.bg_QColor_cyan_(self)
    end
    
    def magenta() : Int32
      Binding.bg_QColor_magenta_(self)
    end
    
    def yellow() : Int32
      Binding.bg_QColor_yellow_(self)
    end
    
    def black() : Int32
      Binding.bg_QColor_black_(self)
    end
    
    def cyan_f() : Float64
      Binding.bg_QColor_cyanF_(self)
    end
    
    def magenta_f() : Float64
      Binding.bg_QColor_magentaF_(self)
    end
    
    def yellow_f() : Float64
      Binding.bg_QColor_yellowF_(self)
    end
    
    def black_f() : Float64
      Binding.bg_QColor_blackF_(self)
    end
    
    def get_cmyk(c : Int32*, m : Int32*, y : Int32*, k : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getCmyk_int_X_int_X_int_X_int_X_int_X(self, c, m, y, k, a)
    end
    
    def set_cmyk(c : Int32, m : Int32, y : Int32, k : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setCmyk_int_int_int_int_int(self, c, m, y, k, a)
    end
    
    def get_cmyk_f(c : Float64*, m : Float64*, y : Float64*, k : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getCmykF_qreal_X_qreal_X_qreal_X_qreal_X_qreal_X(self, c, m, y, k, a)
    end
    
    def set_cmyk_f(c : Float64, m : Float64, y : Float64, k : Float64, a : Float64 = 1.0f64) : Void
      Binding.bg_QColor_setCmykF_qreal_qreal_qreal_qreal_qreal(self, c, m, y, k, a)
    end
    
    def hsl_hue() : Int32
      Binding.bg_QColor_hslHue_(self)
    end
    
    def hsl_saturation() : Int32
      Binding.bg_QColor_hslSaturation_(self)
    end
    
    def lightness() : Int32
      Binding.bg_QColor_lightness_(self)
    end
    
    def hsl_hue_f() : Float64
      Binding.bg_QColor_hslHueF_(self)
    end
    
    def hsl_saturation_f() : Float64
      Binding.bg_QColor_hslSaturationF_(self)
    end
    
    def lightness_f() : Float64
      Binding.bg_QColor_lightnessF_(self)
    end
    
    def get_hsl(h : Int32*, s : Int32*, l : Int32*, a : Int32*? = nil) : Void
      Binding.bg_QColor_getHsl_int_X_int_X_int_X_int_X(self, h, s, l, a)
    end
    
    def set_hsl(h : Int32, s : Int32, l : Int32, a : Int32 = 255) : Void
      Binding.bg_QColor_setHsl_int_int_int_int(self, h, s, l, a)
    end
    
    def get_hsl_f(h : Float64*, s : Float64*, l : Float64*, a : Float64*? = nil) : Void
      Binding.bg_QColor_getHslF_qreal_X_qreal_X_qreal_X_qreal_X(self, h, s, l, a)
    end
    
    def set_hsl_f(h : Float64, s : Float64, l : Float64, a : Float64 = 1.0f64) : Void
      Binding.bg_QColor_setHslF_qreal_qreal_qreal_qreal(self, h, s, l, a)
    end
    
    def to_rgb() : Color
      Color.new(unwrap: Binding.bg_QColor_toRgb_(self))
    end
    
    def to_hsv() : Color
      Color.new(unwrap: Binding.bg_QColor_toHsv_(self))
    end
    
    def to_cmyk() : Color
      Color.new(unwrap: Binding.bg_QColor_toCmyk_(self))
    end
    
    def to_hsl() : Color
      Color.new(unwrap: Binding.bg_QColor_toHsl_(self))
    end
    
    def to_extended_rgb() : Color
      Color.new(unwrap: Binding.bg_QColor_toExtendedRgb_(self))
    end
    
    def convert_to(color_spec : Color::Spec) : Color
      Color.new(unwrap: Binding.bg_QColor_convertTo_QColor__Spec(self, color_spec))
    end
    
    def self.from_rgb(rgb : UInt32) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgb_STATIC_QRgb(rgb))
    end
    
    def self.from_rgba(rgba : UInt32) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgba_STATIC_QRgb(rgba))
    end
    
    def self.from_rgb(r : Int32, g : Int32, b : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgb_STATIC_int_int_int_int(r, g, b, a))
    end
    
    def self.from_rgb_f(r : Float64, g : Float64, b : Float64, a : Float64 = 1.0f64) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgbF_STATIC_qreal_qreal_qreal_qreal(r, g, b, a))
    end
    
    def self.from_rgba64(r : UInt16, g : UInt16, b : UInt16, a : UInt16 = 65535u16) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgba64_STATIC_ushort_ushort_ushort_ushort(r, g, b, a))
    end
    
    def self.from_rgba64(rgba : Binding::QRgba64*) : Color
      Color.new(unwrap: Binding.bg_QColor_fromRgba64_STATIC_QRgba64(rgba))
    end
    
    def self.from_hsv(h : Int32, s : Int32, v : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHsv_STATIC_int_int_int_int(h, s, v, a))
    end
    
    def self.from_hsv_f(h : Float64, s : Float64, v : Float64, a : Float64 = 1.0f64) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHsvF_STATIC_qreal_qreal_qreal_qreal(h, s, v, a))
    end
    
    def self.from_cmyk(c : Int32, m : Int32, y : Int32, k : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromCmyk_STATIC_int_int_int_int_int(c, m, y, k, a))
    end
    
    def self.from_cmyk_f(c : Float64, m : Float64, y : Float64, k : Float64, a : Float64 = 1.0f64) : Color
      Color.new(unwrap: Binding.bg_QColor_fromCmykF_STATIC_qreal_qreal_qreal_qreal_qreal(c, m, y, k, a))
    end
    
    def self.from_hsl(h : Int32, s : Int32, l : Int32, a : Int32 = 255) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHsl_STATIC_int_int_int_int(h, s, l, a))
    end
    
    def self.from_hsl_f(h : Float64, s : Float64, l : Float64, a : Float64 = 1.0f64) : Color
      Color.new(unwrap: Binding.bg_QColor_fromHslF_STATIC_qreal_qreal_qreal_qreal(h, s, l, a))
    end
    
    def lighter(f : Int32 = 150) : Color
      Color.new(unwrap: Binding.bg_QColor_lighter_int(self, f))
    end
    
    def darker(f : Int32 = 200) : Color
      Color.new(unwrap: Binding.bg_QColor_darker_int(self, f))
    end
    
    def ==(c : Color) : Bool
      Binding.bg_QColor__OPERATOR_eq_const_QColor_R(self, c)
    end
    
    def !=(c : Color) : Bool
      Binding.bg_QColor__OPERATOR_ne_const_QColor_R(self, c)
    end
    
    def self.is_valid_color(name : String) : Bool
      Binding.bg_QColor_isValidColor_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    
    def self.is_valid_color(unnamed_arg_0 : Binding::QStringView*) : Bool
      Binding.bg_QColor_isValidColor_STATIC_QStringView(unnamed_arg_0)
    end
    
    def self.is_valid_color(unnamed_arg_0 : Binding::QLatin1String*) : Bool
      Binding.bg_QColor_isValidColor_STATIC_QLatin1String(unnamed_arg_0)
    end
    
    def initialize(spec : Color::Spec, a1 : UInt16, a2 : UInt16, a3 : UInt16, a4 : UInt16, a5 : UInt16 = 0u16)
      result = Binding.bg_QColor__CONSTRUCT_QColor__Spec_ushort_ushort_ushort_ushort_ushort(spec, a1, a2, a3, a4, a5)
    @unwrap = result
    end
    
    enum Spec : UInt32
      Invalid = 0
      Rgb = 1
      Hsv = 2
      Cmyk = 3
      Hsl = 4
      ExtendedRgb = 5
    end
    enum NameFormat : UInt32
      HexRgb = 0
      HexArgb = 1
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QColor*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class KeySequence
    @unwrap : Binding::QKeySequence*
    
    def initialize()
      result = Binding.bg_QKeySequence__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(key : String, format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::NativeText)
      result = Binding.bg_QKeySequence__CONSTRUCT_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(key), format)
    @unwrap = result
    end
    
    def initialize(k1 : Int32, k2 : Int32 = 0, k3 : Int32 = 0, k4 : Int32 = 0)
      result = Binding.bg_QKeySequence__CONSTRUCT_int_int_int_int(k1, k2, k3, k4)
    @unwrap = result
    end
    
    def initialize(key : KeySequence::StandardKey)
      result = Binding.bg_QKeySequence__CONSTRUCT_QKeySequence__StandardKey(key)
    @unwrap = result
    end
    
    def count() : Int32
      Binding.bg_QKeySequence_count_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QKeySequence_isEmpty_(self)
    end
    
    def to_string(format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeySequence_toString_QKeySequence__SequenceFormat(self, format))
    end
    
    def self.from_string(str : String, format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_fromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(str), format))
    end
    
    def self.list_from_string(str : String, format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : Enumerable(KeySequence)
      Container_QList_QKeySequence_.new(unwrap: Binding.bg_QKeySequence_listFromString_STATIC_const_QString_R_QKeySequence__SequenceFormat(Qt::Converter::QString.wrap(str), format))
    end
    
    def self.list_to_string(list : Enumerable(KeySequence), format : KeySequence::SequenceFormat = KeySequence::SequenceFormat::PortableText) : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeySequence_listToString_STATIC_const_QList_QKeySequence__R_QKeySequence__SequenceFormat(BindgenHelper.wrap_container(Container_QList_QKeySequence_, list).to_unsafe, format))
    end
    
    def matches(seq : KeySequence) : KeySequence::SequenceMatch
      Binding.bg_QKeySequence_matches_const_QKeySequence_R(self, seq)
    end
    
    def self.mnemonic(text : String) : KeySequence
      KeySequence.new(unwrap: Binding.bg_QKeySequence_mnemonic_STATIC_const_QString_R(Qt::Converter::QString.wrap(text)))
    end
    
    def self.key_bindings(key : KeySequence::StandardKey) : Enumerable(KeySequence)
      Container_QList_QKeySequence_.new(unwrap: Binding.bg_QKeySequence_keyBindings_STATIC_QKeySequence__StandardKey(key))
    end
    
    def [](i : UInt32) : Int32
      Binding.bg_QKeySequence__OPERATOR_at_uint(self, i)
    end
    
    def swap(other : KeySequence) : Void
      Binding.bg_QKeySequence_swap_QKeySequence_R(self, other)
    end
    
    def ==(other : KeySequence) : Bool
      Binding.bg_QKeySequence__OPERATOR_eq_const_QKeySequence_R(self, other)
    end
    
    def !=(other : KeySequence) : Bool
      Binding.bg_QKeySequence__OPERATOR_ne_const_QKeySequence_R(self, other)
    end
    
    def <(ks : KeySequence) : Bool
      Binding.bg_QKeySequence__OPERATOR_lt_const_QKeySequence_R(self, ks)
    end
    
    def >(other : KeySequence) : Bool
      Binding.bg_QKeySequence__OPERATOR_gt_const_QKeySequence_R(self, other)
    end
    
    def <=(other : KeySequence) : Bool
      Binding.bg_QKeySequence__OPERATOR_le_const_QKeySequence_R(self, other)
    end
    
    def >=(other : KeySequence) : Bool
      Binding.bg_QKeySequence__OPERATOR_ge_const_QKeySequence_R(self, other)
    end
    
    def detached?() : Bool
      Binding.bg_QKeySequence_isDetached_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QKeySequence_staticMetaObject_STATIC_GETTER_()
    end
    
    enum StandardKey : UInt32
      UnknownKey = 0
      HelpContents = 1
      WhatsThis = 2
      Open = 3
      Close = 4
      Save = 5
      New = 6
      Delete = 7
      Cut = 8
      Copy = 9
      Paste = 10
      Undo = 11
      Redo = 12
      Back = 13
      Forward = 14
      Refresh = 15
      ZoomIn = 16
      ZoomOut = 17
      Print = 18
      AddTab = 19
      NextChild = 20
      PreviousChild = 21
      Find = 22
      FindNext = 23
      FindPrevious = 24
      Replace = 25
      SelectAll = 26
      Bold = 27
      Italic = 28
      Underline = 29
      MoveToNextChar = 30
      MoveToPreviousChar = 31
      MoveToNextWord = 32
      MoveToPreviousWord = 33
      MoveToNextLine = 34
      MoveToPreviousLine = 35
      MoveToNextPage = 36
      MoveToPreviousPage = 37
      MoveToStartOfLine = 38
      MoveToEndOfLine = 39
      MoveToStartOfBlock = 40
      MoveToEndOfBlock = 41
      MoveToStartOfDocument = 42
      MoveToEndOfDocument = 43
      SelectNextChar = 44
      SelectPreviousChar = 45
      SelectNextWord = 46
      SelectPreviousWord = 47
      SelectNextLine = 48
      SelectPreviousLine = 49
      SelectNextPage = 50
      SelectPreviousPage = 51
      SelectStartOfLine = 52
      SelectEndOfLine = 53
      SelectStartOfBlock = 54
      SelectEndOfBlock = 55
      SelectStartOfDocument = 56
      SelectEndOfDocument = 57
      DeleteStartOfWord = 58
      DeleteEndOfWord = 59
      DeleteEndOfLine = 60
      InsertParagraphSeparator = 61
      InsertLineSeparator = 62
      SaveAs = 63
      Preferences = 64
      Quit = 65
      FullScreen = 66
      Deselect = 67
      DeleteCompleteLine = 68
      Backspace = 69
      Cancel = 70
    end
    enum SequenceFormat : UInt32
      NativeText = 0
      PortableText = 1
    end
    enum SequenceMatch : UInt32
      NoMatch = 0
      PartialMatch = 1
      ExactMatch = 2
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QKeySequence*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class InputEvent < Event
    def initialize(type : Event::Type)
      result = Binding.bg_QInputEvent__CONSTRUCT_QEvent__Type(type)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, modifiers : KeyboardModifiers)
      result = Binding.bg_QInputEvent__CONSTRUCT_QEvent__Type_Qt__KeyboardModifiers(type, modifiers)
    @unwrap = result
    end
    
    def modifiers() : KeyboardModifiers
      Binding.bg_QInputEvent_modifiers_(self)
    end
    
    def modifiers=(amodifiers : KeyboardModifiers) : Void
      Binding.bg_QInputEvent_setModifiers_Qt__KeyboardModifiers(self, amodifiers)
    end
    
    def timestamp() : UInt64
      Binding.bg_QInputEvent_timestamp_(self)
    end
    
    def timestamp=(atimestamp : UInt64) : Void
      Binding.bg_QInputEvent_setTimestamp_ulong(self, atimestamp)
    end
    
    def initialize(unwrap : Binding::QInputEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class EnterEvent < Event
    def initialize(local_pos : PointF, window_pos : PointF, screen_pos : PointF)
      result = Binding.bg_QEnterEvent__CONSTRUCT_const_QPointF_R_const_QPointF_R_const_QPointF_R(local_pos, window_pos, screen_pos)
    @unwrap = result
    end
    
    def pos() : Point
      Point.new(unwrap: Binding.bg_QEnterEvent_pos_(self))
    end
    
    def global_pos() : Point
      Point.new(unwrap: Binding.bg_QEnterEvent_globalPos_(self))
    end
    
    def x() : Int32
      Binding.bg_QEnterEvent_x_(self)
    end
    
    def y() : Int32
      Binding.bg_QEnterEvent_y_(self)
    end
    
    def global_x() : Int32
      Binding.bg_QEnterEvent_globalX_(self)
    end
    
    def global_y() : Int32
      Binding.bg_QEnterEvent_globalY_(self)
    end
    
    def local_pos() : PointF
      PointF.new(unwrap: Binding.bg_QEnterEvent_localPos_(self))
    end
    
    def window_pos() : PointF
      PointF.new(unwrap: Binding.bg_QEnterEvent_windowPos_(self))
    end
    
    def screen_pos() : PointF
      PointF.new(unwrap: Binding.bg_QEnterEvent_screenPos_(self))
    end
    
    def initialize(unwrap : Binding::QEnterEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class MouseEvent < InputEvent
    def initialize(type : Event::Type, local_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers)
      result = Binding.bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type, local_pos, button, buttons, modifiers)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, local_pos : PointF, screen_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers)
      result = Binding.bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type, local_pos, screen_pos, button, buttons, modifiers)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, local_pos : PointF, window_pos : PointF, screen_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers)
      result = Binding.bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers(type, local_pos, window_pos, screen_pos, button, buttons, modifiers)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, local_pos : PointF, window_pos : PointF, screen_pos : PointF, button : MouseButton, buttons : MouseButtons, modifiers : KeyboardModifiers, source : MouseEventSource)
      result = Binding.bg_QMouseEvent__CONSTRUCT_QEvent__Type_const_QPointF_R_const_QPointF_R_const_QPointF_R_Qt__MouseButton_Qt__MouseButtons_Qt__KeyboardModifiers_Qt__MouseEventSource(type, local_pos, window_pos, screen_pos, button, buttons, modifiers, source)
    @unwrap = result
    end
    
    def pos() : Point
      Point.new(unwrap: Binding.bg_QMouseEvent_pos_(self))
    end
    
    def global_pos() : Point
      Point.new(unwrap: Binding.bg_QMouseEvent_globalPos_(self))
    end
    
    def x() : Int32
      Binding.bg_QMouseEvent_x_(self)
    end
    
    def y() : Int32
      Binding.bg_QMouseEvent_y_(self)
    end
    
    def global_x() : Int32
      Binding.bg_QMouseEvent_globalX_(self)
    end
    
    def global_y() : Int32
      Binding.bg_QMouseEvent_globalY_(self)
    end
    
    def local_pos() : PointF
      PointF.new(unwrap: Binding.bg_QMouseEvent_localPos_(self))
    end
    
    def window_pos() : PointF
      PointF.new(unwrap: Binding.bg_QMouseEvent_windowPos_(self))
    end
    
    def screen_pos() : PointF
      PointF.new(unwrap: Binding.bg_QMouseEvent_screenPos_(self))
    end
    
    def button() : MouseButton
      Binding.bg_QMouseEvent_button_(self)
    end
    
    def buttons() : MouseButtons
      Binding.bg_QMouseEvent_buttons_(self)
    end
    
    def local_pos=(local_position : PointF) : Void
      Binding.bg_QMouseEvent_setLocalPos_const_QPointF_R(self, local_position)
    end
    
    def source() : MouseEventSource
      Binding.bg_QMouseEvent_source_(self)
    end
    
    def flags() : MouseEventFlags
      Binding.bg_QMouseEvent_flags_(self)
    end
    
    def initialize(unwrap : Binding::QMouseEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class KeyEvent < InputEvent
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers(type, key, modifiers)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, text : String)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R(type, key, modifiers, Qt::Converter::QString.wrap(text))
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, text : String, autorep : Bool = false)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R_bool(type, key, modifiers, Qt::Converter::QString.wrap(text), autorep)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, text : String, autorep : Bool = false, count : UInt16 = 1u16)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_const_QString_R_bool_ushort(type, key, modifiers, Qt::Converter::QString.wrap(text), autorep, count)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32(type, key, modifiers, native_scan_code, native_virtual_key, native_modifiers)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32, text : String)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R(type, key, modifiers, native_scan_code, native_virtual_key, native_modifiers, Qt::Converter::QString.wrap(text))
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32, text : String, autorep : Bool = false)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R_bool(type, key, modifiers, native_scan_code, native_virtual_key, native_modifiers, Qt::Converter::QString.wrap(text), autorep)
    @unwrap = result
    end
    
    def initialize(type : Event::Type, key : Int32, modifiers : KeyboardModifiers, native_scan_code : UInt32, native_virtual_key : UInt32, native_modifiers : UInt32, text : String, autorep : Bool = false, count : UInt16 = 1u16)
      result = Binding.bg_QKeyEvent__CONSTRUCT_QEvent__Type_int_Qt__KeyboardModifiers_quint32_quint32_quint32_const_QString_R_bool_ushort(type, key, modifiers, native_scan_code, native_virtual_key, native_modifiers, Qt::Converter::QString.wrap(text), autorep, count)
    @unwrap = result
    end
    
    def key() : Int32
      Binding.bg_QKeyEvent_key_(self)
    end
    
    def matches(key : KeySequence::StandardKey) : Bool
      Binding.bg_QKeyEvent_matches_QKeySequence__StandardKey(self, key)
    end
    
    def modifiers() : KeyboardModifiers
      Binding.bg_QKeyEvent_modifiers_(self)
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QKeyEvent_text_(self))
    end
    
    def auto_repeat?() : Bool
      Binding.bg_QKeyEvent_isAutoRepeat_(self)
    end
    
    def count() : Int32
      Binding.bg_QKeyEvent_count_(self)
    end
    
    def native_scan_code() : UInt32
      Binding.bg_QKeyEvent_nativeScanCode_(self)
    end
    
    def native_virtual_key() : UInt32
      Binding.bg_QKeyEvent_nativeVirtualKey_(self)
    end
    
    def native_modifiers() : UInt32
      Binding.bg_QKeyEvent_nativeModifiers_(self)
    end
    
    def initialize(unwrap : Binding::QKeyEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class FocusEvent < Event
    def initialize(type : Event::Type, reason : FocusReason = FocusReason::OtherFocusReason)
      result = Binding.bg_QFocusEvent__CONSTRUCT_QEvent__Type_Qt__FocusReason(type, reason)
    @unwrap = result
    end
    
    def got_focus() : Bool
      Binding.bg_QFocusEvent_gotFocus_(self)
    end
    
    def lost_focus() : Bool
      Binding.bg_QFocusEvent_lostFocus_(self)
    end
    
    def reason() : FocusReason
      Binding.bg_QFocusEvent_reason_(self)
    end
    
    def initialize(unwrap : Binding::QFocusEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class PaintEvent < Event
    def initialize(paint_region : Binding::QRegion*)
      result = Binding.bg_QPaintEvent__CONSTRUCT_const_QRegion_R(paint_region)
    @unwrap = result
    end
    
    def initialize(paint_rect : Rect)
      result = Binding.bg_QPaintEvent__CONSTRUCT_const_QRect_R(paint_rect)
    @unwrap = result
    end
    
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QPaintEvent_rect_(self))
    end
    
    def region() : Binding::QRegion*
      Binding.bg_QPaintEvent_region_(self)
    end
    
    def initialize(unwrap : Binding::QPaintEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class MoveEvent < Event
    def initialize(pos : Point, old_pos : Point)
      result = Binding.bg_QMoveEvent__CONSTRUCT_const_QPoint_R_const_QPoint_R(pos, old_pos)
    @unwrap = result
    end
    
    def pos() : Point
      Point.new(unwrap: Binding.bg_QMoveEvent_pos_(self))
    end
    
    def old_pos() : Point
      Point.new(unwrap: Binding.bg_QMoveEvent_oldPos_(self))
    end
    
    def initialize(unwrap : Binding::QMoveEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ExposeEvent < Event
    def initialize(rgn : Binding::QRegion*)
      result = Binding.bg_QExposeEvent__CONSTRUCT_const_QRegion_R(rgn)
    @unwrap = result
    end
    
    def region() : Binding::QRegion*
      Binding.bg_QExposeEvent_region_(self)
    end
    
    def initialize(unwrap : Binding::QExposeEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class PlatformSurfaceEvent < Event
    def initialize(surface_event_type : PlatformSurfaceEvent::SurfaceEventType)
      result = Binding.bg_QPlatformSurfaceEvent__CONSTRUCT_QPlatformSurfaceEvent__SurfaceEventType(surface_event_type)
    @unwrap = result
    end
    
    def surface_event_type() : PlatformSurfaceEvent::SurfaceEventType
      Binding.bg_QPlatformSurfaceEvent_surfaceEventType_(self)
    end
    
    enum SurfaceEventType : UInt32
      SurfaceCreated = 0
      SurfaceAboutToBeDestroyed = 1
    end
    def initialize(unwrap : Binding::QPlatformSurfaceEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ResizeEvent < Event
    def initialize(size : Binding::QSize*, old_size : Binding::QSize*)
      result = Binding.bg_QResizeEvent__CONSTRUCT_const_QSize_R_const_QSize_R(size, old_size)
    @unwrap = result
    end
    
    def size() : Binding::QSize*
      Binding.bg_QResizeEvent_size_(self)
    end
    
    def old_size() : Binding::QSize*
      Binding.bg_QResizeEvent_oldSize_(self)
    end
    
    def initialize(unwrap : Binding::QResizeEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class CloseEvent < Event
    def initialize()
      result = Binding.bg_QCloseEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(unwrap : Binding::QCloseEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class IconDragEvent < Event
    def initialize()
      result = Binding.bg_QIconDragEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(unwrap : Binding::QIconDragEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ShowEvent < Event
    def initialize()
      result = Binding.bg_QShowEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(unwrap : Binding::QShowEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class HideEvent < Event
    def initialize()
      result = Binding.bg_QHideEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(unwrap : Binding::QHideEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class InputMethodEvent < Event
    def initialize()
      result = Binding.bg_QInputMethodEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def set_commit_string(commit_string : String, replace_from : Int32 = 0, replace_length : Int32 = 0) : Void
      Binding.bg_QInputMethodEvent_setCommitString_const_QString_R_int_int(self, Qt::Converter::QString.wrap(commit_string), replace_from, replace_length)
    end
    
    def preedit_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QInputMethodEvent_preeditString_(self))
    end
    
    def commit_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QInputMethodEvent_commitString_(self))
    end
    
    def replacement_start() : Int32
      Binding.bg_QInputMethodEvent_replacementStart_(self)
    end
    
    def replacement_length() : Int32
      Binding.bg_QInputMethodEvent_replacementLength_(self)
    end
    
    enum AttributeType : UInt32
      TextFormat = 0
      Cursor = 1
      Language = 2
      Ruby = 3
      Selection = 4
    end
    def initialize(unwrap : Binding::QInputMethodEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class InputMethodQueryEvent < Event
    def initialize(queries : InputMethodQueries)
      result = Binding.bg_QInputMethodQueryEvent__CONSTRUCT_Qt__InputMethodQueries(queries)
    @unwrap = result
    end
    
    def queries() : InputMethodQueries
      Binding.bg_QInputMethodQueryEvent_queries_(self)
    end
    
    def set_value(query : InputMethodQuery, value : Variant) : Void
      Binding.bg_QInputMethodQueryEvent_setValue_Qt__InputMethodQuery_const_QVariant_R(self, query, (value.to_unsafe))
    end
    
    def value(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QInputMethodQueryEvent_value_Qt__InputMethodQuery(self, query))
    end
    
    def initialize(unwrap : Binding::QInputMethodQueryEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class DropEvent < Event
    def initialize(pos : PointF, actions : DropActions, data : MimeData, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type = Event::Type::Drop)
      result = Binding.bg_QDropEvent__CONSTRUCT_const_QPointF_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos, actions, data, buttons, modifiers, type)
    @unwrap = result
    end
    
    def pos() : Point
      Point.new(unwrap: Binding.bg_QDropEvent_pos_(self))
    end
    
    def pos_f() : PointF
      PointF.new(unwrap: Binding.bg_QDropEvent_posF_(self))
    end
    
    def mouse_buttons() : MouseButtons
      Binding.bg_QDropEvent_mouseButtons_(self)
    end
    
    def keyboard_modifiers() : KeyboardModifiers
      Binding.bg_QDropEvent_keyboardModifiers_(self)
    end
    
    def possible_actions() : DropActions
      Binding.bg_QDropEvent_possibleActions_(self)
    end
    
    def proposed_action() : DropAction
      Binding.bg_QDropEvent_proposedAction_(self)
    end
    
    def accept_proposed_action() : Void
      Binding.bg_QDropEvent_acceptProposedAction_(self)
    end
    
    def drop_action() : DropAction
      Binding.bg_QDropEvent_dropAction_(self)
    end
    
    def drop_action=(action : DropAction) : Void
      Binding.bg_QDropEvent_setDropAction_Qt__DropAction(self, action)
    end
    
    def source() : Object
      Object.new(unwrap: Binding.bg_QDropEvent_source_(self))
    end
    
    def mime_data() : MimeData
      MimeData.new(unwrap: Binding.bg_QDropEvent_mimeData_(self))
    end
    
    def initialize(unwrap : Binding::QDropEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class DragMoveEvent < DropEvent
    def initialize(pos : Point, actions : DropActions, data : MimeData, buttons : MouseButtons, modifiers : KeyboardModifiers, type : Event::Type = Event::Type::DragMove)
      result = Binding.bg_QDragMoveEvent__CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers_QEvent__Type(pos, actions, data, buttons, modifiers, type)
    @unwrap = result
    end
    
    def answer_rect() : Rect
      Rect.new(unwrap: Binding.bg_QDragMoveEvent_answerRect_(self))
    end
    
    def accept() : Void
      Binding.bg_QDragMoveEvent_accept_(self)
    end
    
    def ignore() : Void
      Binding.bg_QDragMoveEvent_ignore_(self)
    end
    
    def accept(r : Rect) : Void
      Binding.bg_QDragMoveEvent_accept_const_QRect_R(self, r)
    end
    
    def ignore(r : Rect) : Void
      Binding.bg_QDragMoveEvent_ignore_const_QRect_R(self, r)
    end
    
    def initialize(unwrap : Binding::QDragMoveEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class DragEnterEvent < DragMoveEvent
    def initialize(pos : Point, actions : DropActions, data : MimeData, buttons : MouseButtons, modifiers : KeyboardModifiers)
      result = Binding.bg_QDragEnterEvent__CONSTRUCT_const_QPoint_R_Qt__DropActions_const_QMimeData_X_Qt__MouseButtons_Qt__KeyboardModifiers(pos, actions, data, buttons, modifiers)
    @unwrap = result
    end
    
    def initialize(unwrap : Binding::QDragEnterEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class DragLeaveEvent < Event
    def initialize()
      result = Binding.bg_QDragLeaveEvent__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(unwrap : Binding::QDragLeaveEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class HelpEvent < Event
    def initialize(type : Event::Type, pos : Point, global_pos : Point)
      result = Binding.bg_QHelpEvent__CONSTRUCT_QEvent__Type_const_QPoint_R_const_QPoint_R(type, pos, global_pos)
    @unwrap = result
    end
    
    def x() : Int32
      Binding.bg_QHelpEvent_x_(self)
    end
    
    def y() : Int32
      Binding.bg_QHelpEvent_y_(self)
    end
    
    def global_x() : Int32
      Binding.bg_QHelpEvent_globalX_(self)
    end
    
    def global_y() : Int32
      Binding.bg_QHelpEvent_globalY_(self)
    end
    
    def pos() : Point
      Point.new(unwrap: Binding.bg_QHelpEvent_pos_(self))
    end
    
    def global_pos() : Point
      Point.new(unwrap: Binding.bg_QHelpEvent_globalPos_(self))
    end
    
    def initialize(unwrap : Binding::QHelpEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class StatusTipEvent < Event
    def initialize(tip : String)
      result = Binding.bg_QStatusTipEvent__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(tip))
    @unwrap = result
    end
    
    def tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusTipEvent_tip_(self))
    end
    
    def initialize(unwrap : Binding::QStatusTipEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class WhatsThisClickedEvent < Event
    def initialize(href : String)
      result = Binding.bg_QWhatsThisClickedEvent__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(href))
    @unwrap = result
    end
    
    def href() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWhatsThisClickedEvent_href_(self))
    end
    
    def initialize(unwrap : Binding::QWhatsThisClickedEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ActionEvent < Event
    def initialize(type : Int32, action : Action, before : Action? = nil)
      result = Binding.bg_QActionEvent__CONSTRUCT_int_QAction_X_QAction_X(type, action, before)
    @unwrap = result
    end
    
    def action() : Action
      Action.new(unwrap: Binding.bg_QActionEvent_action_(self))
    end
    
    def before() : Action
      Action.new(unwrap: Binding.bg_QActionEvent_before_(self))
    end
    
    def initialize(unwrap : Binding::QActionEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class FileOpenEvent < Event
    def initialize(file : String)
      result = Binding.bg_QFileOpenEvent__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file))
    @unwrap = result
    end
    
    def initialize(url : Url)
      result = Binding.bg_QFileOpenEvent__CONSTRUCT_const_QUrl_R(url)
    @unwrap = result
    end
    
    def file() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileOpenEvent_file_(self))
    end
    
    def url() : Url
      Url.new(unwrap: Binding.bg_QFileOpenEvent_url_(self))
    end
    
    def open_file(file : Binding::QFile*, flags : IODevice::OpenMode) : Bool
      Binding.bg_QFileOpenEvent_openFile_QFile_R_QIODevice__OpenMode(self, file, flags)
    end
    
    def initialize(unwrap : Binding::QFileOpenEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ToolBarChangeEvent < Event
    def initialize(t : Bool)
      result = Binding.bg_QToolBarChangeEvent__CONSTRUCT_bool(t)
    @unwrap = result
    end
    
    def toggle() : Bool
      Binding.bg_QToolBarChangeEvent_toggle_(self)
    end
    
    def initialize(unwrap : Binding::QToolBarChangeEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ShortcutEvent < Event
    def initialize(key : KeySequence, id : Int32, ambiguous : Bool = false)
      result = Binding.bg_QShortcutEvent__CONSTRUCT_const_QKeySequence_R_int_bool(key, id, ambiguous)
    @unwrap = result
    end
    
    def key() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QShortcutEvent_key_(self))
    end
    
    def shortcut_id() : Int32
      Binding.bg_QShortcutEvent_shortcutId_(self)
    end
    
    def ambiguous?() : Bool
      Binding.bg_QShortcutEvent_isAmbiguous_(self)
    end
    
    def initialize(unwrap : Binding::QShortcutEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ScrollPrepareEvent < Event
    def initialize(start_pos : PointF)
      result = Binding.bg_QScrollPrepareEvent__CONSTRUCT_const_QPointF_R(start_pos)
    @unwrap = result
    end
    
    def start_pos() : PointF
      PointF.new(unwrap: Binding.bg_QScrollPrepareEvent_startPos_(self))
    end
    
    def viewport_size() : Binding::QSizeF*
      Binding.bg_QScrollPrepareEvent_viewportSize_(self)
    end
    
    def content_pos_range() : RectF
      RectF.new(unwrap: Binding.bg_QScrollPrepareEvent_contentPosRange_(self))
    end
    
    def content_pos() : PointF
      PointF.new(unwrap: Binding.bg_QScrollPrepareEvent_contentPos_(self))
    end
    
    def viewport_size=(size : Binding::QSizeF*) : Void
      Binding.bg_QScrollPrepareEvent_setViewportSize_const_QSizeF_R(self, size)
    end
    
    def content_pos_range=(rect : RectF) : Void
      Binding.bg_QScrollPrepareEvent_setContentPosRange_const_QRectF_R(self, rect)
    end
    
    def content_pos=(pos : PointF) : Void
      Binding.bg_QScrollPrepareEvent_setContentPos_const_QPointF_R(self, pos)
    end
    
    def initialize(unwrap : Binding::QScrollPrepareEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ScrollEvent < Event
    def initialize(content_pos : PointF, overshoot : PointF, scroll_state : ScrollEvent::ScrollState)
      result = Binding.bg_QScrollEvent__CONSTRUCT_const_QPointF_R_const_QPointF_R_QScrollEvent__ScrollState(content_pos, overshoot, scroll_state)
    @unwrap = result
    end
    
    def content_pos() : PointF
      PointF.new(unwrap: Binding.bg_QScrollEvent_contentPos_(self))
    end
    
    def overshoot_distance() : PointF
      PointF.new(unwrap: Binding.bg_QScrollEvent_overshootDistance_(self))
    end
    
    def scroll_state() : ScrollEvent::ScrollState
      Binding.bg_QScrollEvent_scrollState_(self)
    end
    
    enum ScrollState : UInt32
      ScrollStarted = 0
      ScrollUpdated = 1
      ScrollFinished = 2
    end
    def initialize(unwrap : Binding::QScrollEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ScreenOrientationChangeEvent < Event
    def initialize(screen : Screen, orientation : ScreenOrientation)
      result = Binding.bg_QScreenOrientationChangeEvent__CONSTRUCT_QScreen_X_Qt__ScreenOrientation(screen, orientation)
    @unwrap = result
    end
    
    def screen() : Screen
      Screen.new(unwrap: Binding.bg_QScreenOrientationChangeEvent_screen_(self))
    end
    
    def orientation() : ScreenOrientation
      Binding.bg_QScreenOrientationChangeEvent_orientation_(self)
    end
    
    def initialize(unwrap : Binding::QScreenOrientationChangeEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class ApplicationStateChangeEvent < Event
    def initialize(state : ApplicationState)
      result = Binding.bg_QApplicationStateChangeEvent__CONSTRUCT_Qt__ApplicationState(state)
    @unwrap = result
    end
    
    def application_state() : ApplicationState
      Binding.bg_QApplicationStateChangeEvent_applicationState_(self)
    end
    
    def initialize(unwrap : Binding::QApplicationStateChangeEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Font
    @unwrap : Binding::QFont*
    
    def initialize()
      result = Binding.bg_QFont__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(family : String, point_size : Int32 = -1, weight : Int32 = -1, italic : Bool = false)
      result = Binding.bg_QFont__CONSTRUCT_const_QString_R_int_int_bool(Qt::Converter::QString.wrap(family), point_size, weight, italic)
    @unwrap = result
    end
    
    def initialize(font : Font, pd : PaintDevice)
      result = Binding.bg_QFont__CONSTRUCT_const_QFont_R_QPaintDevice_X(font, pd)
    @unwrap = result
    end
    
    def initialize(font : Font, pd : PaintDevice)
      result = Binding.bg_QFont__CONSTRUCT_const_QFont_R_const_QPaintDevice_X(font, pd)
    @unwrap = result
    end
    
    def swap(other : Font) : Void
      Binding.bg_QFont_swap_QFont_R(self, other)
    end
    
    def family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_family_(self))
    end
    
    def family=(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_setFamily_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def families() : Binding::QStringList*
      Binding.bg_QFont_families_(self)
    end
    
    def families=(unnamed_arg_0 : Binding::QStringList*) : Void
      Binding.bg_QFont_setFamilies_const_QStringList_R(self, unnamed_arg_0)
    end
    
    def style_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_styleName_(self))
    end
    
    def style_name=(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_setStyleName_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def point_size() : Int32
      Binding.bg_QFont_pointSize_(self)
    end
    
    def point_size=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setPointSize_int(self, unnamed_arg_0)
    end
    
    def point_size_f() : Float64
      Binding.bg_QFont_pointSizeF_(self)
    end
    
    def point_size_f=(unnamed_arg_0 : Float64) : Void
      Binding.bg_QFont_setPointSizeF_qreal(self, unnamed_arg_0)
    end
    
    def pixel_size() : Int32
      Binding.bg_QFont_pixelSize_(self)
    end
    
    def pixel_size=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setPixelSize_int(self, unnamed_arg_0)
    end
    
    def weight() : Int32
      Binding.bg_QFont_weight_(self)
    end
    
    def weight=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setWeight_int(self, unnamed_arg_0)
    end
    
    def bold() : Bool
      Binding.bg_QFont_bold_(self)
    end
    
    def bold=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setBold_bool(self, unnamed_arg_0)
    end
    
    def style=(style : Font::Style) : Void
      Binding.bg_QFont_setStyle_QFont__Style(self, style)
    end
    
    def style() : Font::Style
      Binding.bg_QFont_style_(self)
    end
    
    def italic() : Bool
      Binding.bg_QFont_italic_(self)
    end
    
    def italic=(b : Bool) : Void
      Binding.bg_QFont_setItalic_bool(self, b)
    end
    
    def underline() : Bool
      Binding.bg_QFont_underline_(self)
    end
    
    def underline=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setUnderline_bool(self, unnamed_arg_0)
    end
    
    def overline() : Bool
      Binding.bg_QFont_overline_(self)
    end
    
    def overline=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setOverline_bool(self, unnamed_arg_0)
    end
    
    def strike_out() : Bool
      Binding.bg_QFont_strikeOut_(self)
    end
    
    def strike_out=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setStrikeOut_bool(self, unnamed_arg_0)
    end
    
    def fixed_pitch() : Bool
      Binding.bg_QFont_fixedPitch_(self)
    end
    
    def fixed_pitch=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setFixedPitch_bool(self, unnamed_arg_0)
    end
    
    def kerning() : Bool
      Binding.bg_QFont_kerning_(self)
    end
    
    def kerning=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setKerning_bool(self, unnamed_arg_0)
    end
    
    def style_hint() : Font::StyleHint
      Binding.bg_QFont_styleHint_(self)
    end
    
    def style_strategy() : Font::StyleStrategy
      Binding.bg_QFont_styleStrategy_(self)
    end
    
    def set_style_hint(unnamed_arg_0 : Font::StyleHint, unnamed_arg_1 : Font::StyleStrategy = Font::StyleStrategy::PreferDefault) : Void
      Binding.bg_QFont_setStyleHint_QFont__StyleHint_QFont__StyleStrategy(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def style_strategy=(s : Font::StyleStrategy) : Void
      Binding.bg_QFont_setStyleStrategy_QFont__StyleStrategy(self, s)
    end
    
    def stretch() : Int32
      Binding.bg_QFont_stretch_(self)
    end
    
    def stretch=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFont_setStretch_int(self, unnamed_arg_0)
    end
    
    def letter_spacing() : Float64
      Binding.bg_QFont_letterSpacing_(self)
    end
    
    def letter_spacing_type() : Font::SpacingType
      Binding.bg_QFont_letterSpacingType_(self)
    end
    
    def set_letter_spacing(type : Font::SpacingType, spacing : Float64) : Void
      Binding.bg_QFont_setLetterSpacing_QFont__SpacingType_qreal(self, type, spacing)
    end
    
    def word_spacing() : Float64
      Binding.bg_QFont_wordSpacing_(self)
    end
    
    def word_spacing=(spacing : Float64) : Void
      Binding.bg_QFont_setWordSpacing_qreal(self, spacing)
    end
    
    def capitalization=(unnamed_arg_0 : Font::Capitalization) : Void
      Binding.bg_QFont_setCapitalization_QFont__Capitalization(self, unnamed_arg_0)
    end
    
    def capitalization() : Font::Capitalization
      Binding.bg_QFont_capitalization_(self)
    end
    
    def hinting_preference=(hinting_preference : Font::HintingPreference) : Void
      Binding.bg_QFont_setHintingPreference_QFont__HintingPreference(self, hinting_preference)
    end
    
    def hinting_preference() : Font::HintingPreference
      Binding.bg_QFont_hintingPreference_(self)
    end
    
    def raw_mode() : Bool
      Binding.bg_QFont_rawMode_(self)
    end
    
    def raw_mode=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QFont_setRawMode_bool(self, unnamed_arg_0)
    end
    
    def exact_match() : Bool
      Binding.bg_QFont_exactMatch_(self)
    end
    
    def ==(unnamed_arg_0 : Font) : Bool
      Binding.bg_QFont__OPERATOR_eq_const_QFont_R(self, unnamed_arg_0)
    end
    
    def !=(unnamed_arg_0 : Font) : Bool
      Binding.bg_QFont__OPERATOR_ne_const_QFont_R(self, unnamed_arg_0)
    end
    
    def <(unnamed_arg_0 : Font) : Bool
      Binding.bg_QFont__OPERATOR_lt_const_QFont_R(self, unnamed_arg_0)
    end
    
    def is_copy_of(unnamed_arg_0 : Font) : Bool
      Binding.bg_QFont_isCopyOf_const_QFont_R(self, unnamed_arg_0)
    end
    
    def key() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_key_(self))
    end
    
    def to_string() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_toString_(self))
    end
    
    def from_string(unnamed_arg_0 : String) : Bool
      Binding.bg_QFont_fromString_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.substitute(unnamed_arg_0 : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_substitute_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0)))
    end
    
    def self.substitutes(unnamed_arg_0 : String) : Binding::QStringList*
      Binding.bg_QFont_substitutes_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.substitutions() : Binding::QStringList*
      Binding.bg_QFont_substitutions_STATIC_()
    end
    
    def self.insert_substitution(unnamed_arg_0 : String, unnamed_arg_1 : String) : Void
      Binding.bg_QFont_insertSubstitution_STATIC_const_QString_R_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0), Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    
    def self.insert_substitutions(unnamed_arg_0 : String, unnamed_arg_1 : Binding::QStringList*) : Void
      Binding.bg_QFont_insertSubstitutions_STATIC_const_QString_R_const_QStringList_R(Qt::Converter::QString.wrap(unnamed_arg_0), unnamed_arg_1)
    end
    
    def self.remove_substitutions(unnamed_arg_0 : String) : Void
      Binding.bg_QFont_removeSubstitutions_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.initialize() : Void
      Binding.bg_QFont_initialize_STATIC_()
    end
    
    def self.cleanup() : Void
      Binding.bg_QFont_cleanup_STATIC_()
    end
    
    def self.cache_statistics() : Void
      Binding.bg_QFont_cacheStatistics_STATIC_()
    end
    
    def default_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFont_defaultFamily_(self))
    end
    
    def resolve(unnamed_arg_0 : Font) : Font
      Font.new(unwrap: Binding.bg_QFont_resolve_const_QFont_R(self, unnamed_arg_0))
    end
    
    def resolve() : UInt32
      Binding.bg_QFont_resolve_(self)
    end
    
    def resolve(mask : UInt32) : Void
      Binding.bg_QFont_resolve_uint(self, mask)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QFont_staticMetaObject_STATIC_GETTER_()
    end
    
    enum StyleHint : UInt32
      Helvetica = 0
      SansSerif = 0
      Times = 1
      Serif = 1
      Courier = 2
      TypeWriter = 2
      OldEnglish = 3
      Decorative = 3
      System = 4
      AnyStyle = 5
      Cursive = 6
      Monospace = 7
      Fantasy = 8
    end
    enum StyleStrategy : UInt32
      PreferDefault = 1
      PreferBitmap = 2
      PreferDevice = 4
      PreferOutline = 8
      ForceOutline = 16
      PreferMatch = 32
      PreferQuality = 64
      PreferAntialias = 128
      NoAntialias = 256
      OpenGLCompatible = 512
      ForceIntegerMetrics = 1024
      NoSubpixelAntialias = 2048
      PreferNoShaping = 4096
      NoFontMerging = 32768
    end
    enum HintingPreference : UInt32
      PreferDefaultHinting = 0
      PreferNoHinting = 1
      PreferVerticalHinting = 2
      PreferFullHinting = 3
    end
    enum Weight : UInt32
      Thin = 0
      ExtraLight = 12
      Light = 25
      Normal = 50
      Medium = 57
      DemiBold = 63
      Bold = 75
      ExtraBold = 81
      Black = 87
    end
    enum Style : UInt32
      StyleNormal = 0
      StyleItalic = 1
      StyleOblique = 2
    end
    enum Stretch : UInt32
      AnyStretch = 0
      UltraCondensed = 50
      ExtraCondensed = 62
      Condensed = 75
      SemiCondensed = 87
      Unstretched = 100
      SemiExpanded = 112
      Expanded = 125
      ExtraExpanded = 150
      UltraExpanded = 200
    end
    enum Capitalization : UInt32
      MixedCase = 0
      AllUppercase = 1
      AllLowercase = 2
      SmallCaps = 3
      Capitalize = 4
    end
    enum SpacingType : UInt32
      PercentageSpacing = 0
      AbsoluteSpacing = 1
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QFont*)
      result = unwrap
    @unwrap = result
    end
    
  end
  abstract class PaintDevice
    @unwrap : Binding::QPaintDevice*
    
    def dev_type() : Int32
      Binding.bg_QPaintDevice_devType_(self)
    end
    
    def painting_active() : Bool
      Binding.bg_QPaintDevice_paintingActive_(self)
    end
    
    abstract def paint_engine() : Binding::QPaintEngine*
    def width() : Int32
      Binding.bg_QPaintDevice_width_(self)
    end
    
    def height() : Int32
      Binding.bg_QPaintDevice_height_(self)
    end
    
    def width_mm() : Int32
      Binding.bg_QPaintDevice_widthMM_(self)
    end
    
    def height_mm() : Int32
      Binding.bg_QPaintDevice_heightMM_(self)
    end
    
    def logical_dpi_x() : Int32
      Binding.bg_QPaintDevice_logicalDpiX_(self)
    end
    
    def logical_dpi_y() : Int32
      Binding.bg_QPaintDevice_logicalDpiY_(self)
    end
    
    def physical_dpi_x() : Int32
      Binding.bg_QPaintDevice_physicalDpiX_(self)
    end
    
    def physical_dpi_y() : Int32
      Binding.bg_QPaintDevice_physicalDpiY_(self)
    end
    
    def device_pixel_ratio() : Int32
      Binding.bg_QPaintDevice_devicePixelRatio_(self)
    end
    
    def device_pixel_ratio_f() : Float64
      Binding.bg_QPaintDevice_devicePixelRatioF_(self)
    end
    
    def color_count() : Int32
      Binding.bg_QPaintDevice_colorCount_(self)
    end
    
    def depth() : Int32
      Binding.bg_QPaintDevice_depth_(self)
    end
    
    def self.device_pixel_ratio_f_scale() : Float64
      Binding.bg_QPaintDevice_devicePixelRatioFScale_STATIC_()
    end
    
    protected def initialize()
      result = Binding.bg_QPaintDevice__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PaintDevice)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPaintDevice.new(
      bg_QPaintDevice_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPaintDevice_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPaintDevice_JUMPTABLE_BgJumptable_QPaintDevice_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def metric(metric : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QPaintDevice_metric_QPaintDevice__PaintDeviceMetric(self, metric)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QPaintDevice_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_(self))
    end
    
    enum PaintDeviceMetric : UInt32
      PdmWidth = 1
      PdmHeight = 2
      PdmWidthMM = 3
      PdmHeightMM = 4
      PdmNumColors = 5
      PdmDepth = 6
      PdmDpiX = 7
      PdmDpiY = 8
      PdmPhysicalDpiX = 9
      PdmPhysicalDpiY = 10
      PdmDevicePixelRatio = 11
      PdmDevicePixelRatioScaled = 12
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QPaintDevice*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : PaintDevice)
      end
      def dev_type() : Int32
        Binding.bg_QPaintDevice_devType_SUPER_(@myself)
      end
      
      protected def metric(metric : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QPaintDevice_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, metric)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QPaintDevice_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_SUPER_(@myself))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class PixelFormat
    @unwrap : Binding::QPixelFormat*
    
    def initialize()
      result = Binding.bg_QPixelFormat__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(color_model : PixelFormat::ColorModel, first_size : UInt8, second_size : UInt8, third_size : UInt8, fourth_size : UInt8, fifth_size : UInt8, alpha_size : UInt8, alpha_usage : PixelFormat::AlphaUsage, alpha_position : PixelFormat::AlphaPosition, premultiplied : PixelFormat::AlphaPremultiplied, type_interpretation : PixelFormat::TypeInterpretation, byte_order : PixelFormat::ByteOrder = PixelFormat::ByteOrder::CurrentSystemEndian, sub_enum : UInt8 = 0u8)
      result = Binding.bg_QPixelFormat__CONSTRUCT_QPixelFormat__ColorModel_uchar_uchar_uchar_uchar_uchar_uchar_QPixelFormat__AlphaUsage_QPixelFormat__AlphaPosition_QPixelFormat__AlphaPremultiplied_QPixelFormat__TypeInterpretation_QPixelFormat__ByteOrder_uchar(color_model, first_size, second_size, third_size, fourth_size, fifth_size, alpha_size, alpha_usage, alpha_position, premultiplied, type_interpretation, byte_order, sub_enum)
    @unwrap = result
    end
    
    def color_model() : PixelFormat::ColorModel
      Binding.bg_QPixelFormat_colorModel_(self)
    end
    
    def channel_count() : UInt8
      Binding.bg_QPixelFormat_channelCount_(self)
    end
    
    def red_size() : UInt8
      Binding.bg_QPixelFormat_redSize_(self)
    end
    
    def green_size() : UInt8
      Binding.bg_QPixelFormat_greenSize_(self)
    end
    
    def blue_size() : UInt8
      Binding.bg_QPixelFormat_blueSize_(self)
    end
    
    def cyan_size() : UInt8
      Binding.bg_QPixelFormat_cyanSize_(self)
    end
    
    def magenta_size() : UInt8
      Binding.bg_QPixelFormat_magentaSize_(self)
    end
    
    def yellow_size() : UInt8
      Binding.bg_QPixelFormat_yellowSize_(self)
    end
    
    def black_size() : UInt8
      Binding.bg_QPixelFormat_blackSize_(self)
    end
    
    def hue_size() : UInt8
      Binding.bg_QPixelFormat_hueSize_(self)
    end
    
    def saturation_size() : UInt8
      Binding.bg_QPixelFormat_saturationSize_(self)
    end
    
    def lightness_size() : UInt8
      Binding.bg_QPixelFormat_lightnessSize_(self)
    end
    
    def brightness_size() : UInt8
      Binding.bg_QPixelFormat_brightnessSize_(self)
    end
    
    def alpha_size() : UInt8
      Binding.bg_QPixelFormat_alphaSize_(self)
    end
    
    def bits_per_pixel() : UInt8
      Binding.bg_QPixelFormat_bitsPerPixel_(self)
    end
    
    def alpha_usage() : PixelFormat::AlphaUsage
      Binding.bg_QPixelFormat_alphaUsage_(self)
    end
    
    def alpha_position() : PixelFormat::AlphaPosition
      Binding.bg_QPixelFormat_alphaPosition_(self)
    end
    
    def premultiplied() : PixelFormat::AlphaPremultiplied
      Binding.bg_QPixelFormat_premultiplied_(self)
    end
    
    def type_interpretation() : PixelFormat::TypeInterpretation
      Binding.bg_QPixelFormat_typeInterpretation_(self)
    end
    
    def byte_order() : PixelFormat::ByteOrder
      Binding.bg_QPixelFormat_byteOrder_(self)
    end
    
    def yuv_layout() : PixelFormat::YUVLayout
      Binding.bg_QPixelFormat_yuvLayout_(self)
    end
    
    def sub_enum() : UInt8
      Binding.bg_QPixelFormat_subEnum_(self)
    end
    
    enum ColorModel : UInt32
      Rgb = 0
      Bgr = 1
      Indexed = 2
      Grayscale = 3
      Cmyk = 4
      Hsl = 5
      Hsv = 6
      Yuv = 7
      Alpha = 8
    end
    enum AlphaUsage : UInt32
      UsesAlpha = 0
      IgnoresAlpha = 1
    end
    enum AlphaPosition : UInt32
      AtBeginning = 0
      AtEnd = 1
    end
    enum AlphaPremultiplied : UInt32
      NotPremultiplied = 0
      Premultiplied = 1
    end
    enum TypeInterpretation : UInt32
      UnsignedInteger = 0
      UnsignedShort = 1
      UnsignedByte = 2
      FloatingPoint = 3
    end
    enum YUVLayout : UInt32
      Yuv444 = 0
      Yuv422 = 1
      Yuv411 = 2
      Yuv420p = 3
      Yuv420sp = 4
      Yv12 = 5
      Uyvy = 6
      Yuyv = 7
      Nv12 = 8
      Nv21 = 9
      Imc1 = 10
      Imc2 = 11
      Imc3 = 12
      Imc4 = 13
      Y8 = 14
      Y16 = 15
    end
    enum ByteOrder : UInt32
      LittleEndian = 0
      BigEndian = 1
      CurrentSystemEndian = 2
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QPixelFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Image < PaintDevice
    def initialize()
      result = Binding.bg_QImage__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Image)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QImage.new(
      bg_QImage_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QImage_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(size : Binding::QSize*, format : Image::Format)
      result = Binding.bg_QImage__CONSTRUCT_const_QSize_R_QImage__Format(size, format)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Image)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QImage.new(
      bg_QImage_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QImage_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(width : Int32, height : Int32, format : Image::Format)
      result = Binding.bg_QImage__CONSTRUCT_int_int_QImage__Format(width, height, format)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Image)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QImage.new(
      bg_QImage_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QImage_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(xpm : UInt8**)
      result = Binding.bg_QImage__CONSTRUCT_const_char_Xconst_X(xpm)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Image)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QImage.new(
      bg_QImage_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QImage_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String)
      result = Binding.bg_QImage__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Image)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QImage.new(
      bg_QImage_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QImage_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String, format : UInt8*)
      result = Binding.bg_QImage__CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Image)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QImage.new(
      bg_QImage_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QImage_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QImage_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|metric| self.metric(metric) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QImage_JUMPTABLE_BgJumptable_QImage_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def swap(other : Image) : Void
      Binding.bg_QImage_swap_QImage_R(self, other)
    end
    
    def null?() : Bool
      Binding.bg_QImage_isNull_(self)
    end
    
    def dev_type() : Int32
      Binding.bg_QImage_devType_(self)
    end
    
    def ==(unnamed_arg_0 : Image) : Bool
      Binding.bg_QImage__OPERATOR_eq_const_QImage_R(self, unnamed_arg_0)
    end
    
    def !=(unnamed_arg_0 : Image) : Bool
      Binding.bg_QImage__OPERATOR_ne_const_QImage_R(self, unnamed_arg_0)
    end
    
    def detach() : Void
      Binding.bg_QImage_detach_(self)
    end
    
    def detached?() : Bool
      Binding.bg_QImage_isDetached_(self)
    end
    
    def copy() : Image
      Image.new(unwrap: Binding.bg_QImage_copy_(self))
    end
    
    def copy(rect : Rect) : Image
      Image.new(unwrap: Binding.bg_QImage_copy_const_QRect_R(self, rect))
    end
    
    def copy(x : Int32, y : Int32, w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_copy_int_int_int_int(self, x, y, w, h))
    end
    
    def format() : Image::Format
      Binding.bg_QImage_format_(self)
    end
    
    def convert_to_format(f : Image::Format) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format(self, f))
    end
    
    def convert_to_format(f : Image::Format, flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_Qt__ImageConversionFlags(self, f, flags))
    end
    
    def convert_to_format(f : Image::Format, color_table : Enumerable(UInt32)) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R(self, f, BindgenHelper.wrap_container(Container_QVector_unsigned_int_, color_table).to_unsafe))
    end
    
    def convert_to_format(f : Image::Format, color_table : Enumerable(UInt32), flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_QImage__Format_const_QVector_QRgb__R_Qt__ImageConversionFlags(self, f, BindgenHelper.wrap_container(Container_QVector_unsigned_int_, color_table).to_unsafe, flags))
    end
    
    def reinterpret_as_format(f : Image::Format) : Bool
      Binding.bg_QImage_reinterpretAsFormat_QImage__Format(self, f)
    end
    
    def convert_to(f : Image::Format) : Void
      Binding.bg_QImage_convertTo_QImage__Format(self, f)
    end
    
    def convert_to(f : Image::Format, flags : ImageConversionFlags) : Void
      Binding.bg_QImage_convertTo_QImage__Format_Qt__ImageConversionFlags(self, f, flags)
    end
    
    def width() : Int32
      Binding.bg_QImage_width_(self)
    end
    
    def height() : Int32
      Binding.bg_QImage_height_(self)
    end
    
    def size() : Binding::QSize*
      Binding.bg_QImage_size_(self)
    end
    
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QImage_rect_(self))
    end
    
    def depth() : Int32
      Binding.bg_QImage_depth_(self)
    end
    
    def color_count() : Int32
      Binding.bg_QImage_colorCount_(self)
    end
    
    def bit_plane_count() : Int32
      Binding.bg_QImage_bitPlaneCount_(self)
    end
    
    def color(i : Int32) : UInt32
      Binding.bg_QImage_color_int(self, i)
    end
    
    def set_color(i : Int32, c : UInt32) : Void
      Binding.bg_QImage_setColor_int_QRgb(self, i, c)
    end
    
    def color_count=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setColorCount_int(self, unnamed_arg_0)
    end
    
    def all_gray() : Bool
      Binding.bg_QImage_allGray_(self)
    end
    
    def grayscale?() : Bool
      Binding.bg_QImage_isGrayscale_(self)
    end
    
    def bits() : UInt8*
      Binding.bg_QImage_bits_(self)
    end
    
    def const_bits() : UInt8*
      Binding.bg_QImage_constBits_(self)
    end
    
    def size_in_bytes() : LibC::SizeT
      Binding.bg_QImage_sizeInBytes_(self)
    end
    
    def scan_line(unnamed_arg_0 : Int32) : UInt8*
      Binding.bg_QImage_scanLine_int(self, unnamed_arg_0)
    end
    
    def const_scan_line(unnamed_arg_0 : Int32) : UInt8*
      Binding.bg_QImage_constScanLine_int(self, unnamed_arg_0)
    end
    
    def bytes_per_line() : Int32
      Binding.bg_QImage_bytesPerLine_(self)
    end
    
    def valid(x : Int32, y : Int32) : Bool
      Binding.bg_QImage_valid_int_int(self, x, y)
    end
    
    def valid(pt : Point) : Bool
      Binding.bg_QImage_valid_const_QPoint_R(self, pt)
    end
    
    def pixel_index(x : Int32, y : Int32) : Int32
      Binding.bg_QImage_pixelIndex_int_int(self, x, y)
    end
    
    def pixel_index(pt : Point) : Int32
      Binding.bg_QImage_pixelIndex_const_QPoint_R(self, pt)
    end
    
    def pixel(x : Int32, y : Int32) : UInt32
      Binding.bg_QImage_pixel_int_int(self, x, y)
    end
    
    def pixel(pt : Point) : UInt32
      Binding.bg_QImage_pixel_const_QPoint_R(self, pt)
    end
    
    def set_pixel(x : Int32, y : Int32, index_or_rgb : UInt32) : Void
      Binding.bg_QImage_setPixel_int_int_uint(self, x, y, index_or_rgb)
    end
    
    def set_pixel(pt : Point, index_or_rgb : UInt32) : Void
      Binding.bg_QImage_setPixel_const_QPoint_R_uint(self, pt, index_or_rgb)
    end
    
    def pixel_color(x : Int32, y : Int32) : Color
      Color.new(unwrap: Binding.bg_QImage_pixelColor_int_int(self, x, y))
    end
    
    def pixel_color(pt : Point) : Color
      Color.new(unwrap: Binding.bg_QImage_pixelColor_const_QPoint_R(self, pt))
    end
    
    def set_pixel_color(x : Int32, y : Int32, c : Color) : Void
      Binding.bg_QImage_setPixelColor_int_int_const_QColor_R(self, x, y, c)
    end
    
    def set_pixel_color(pt : Point, c : Color) : Void
      Binding.bg_QImage_setPixelColor_const_QPoint_R_const_QColor_R(self, pt, c)
    end
    
    def color_table() : Enumerable(UInt32)
      Container_QVector_unsigned_int_.new(unwrap: Binding.bg_QImage_colorTable_(self))
    end
    
    def color_table=(colors : Enumerable(UInt32)) : Void
      Binding.bg_QImage_setColorTable_const_QVector_QRgb_(self, BindgenHelper.wrap_container(Container_QVector_unsigned_int_, colors).to_unsafe)
    end
    
    def device_pixel_ratio() : Float64
      Binding.bg_QImage_devicePixelRatio_(self)
    end
    
    def device_pixel_ratio=(scale_factor : Float64) : Void
      Binding.bg_QImage_setDevicePixelRatio_qreal(self, scale_factor)
    end
    
    def fill(pixel : UInt32) : Void
      Binding.bg_QImage_fill_uint(self, pixel)
    end
    
    def fill(color : Color) : Void
      Binding.bg_QImage_fill_const_QColor_R(self, color)
    end
    
    def fill(color : GlobalColor) : Void
      Binding.bg_QImage_fill_Qt__GlobalColor(self, color)
    end
    
    def has_alpha_channel?() : Bool
      Binding.bg_QImage_hasAlphaChannel_(self)
    end
    
    def alpha_channel=(alpha_channel : Image) : Void
      Binding.bg_QImage_setAlphaChannel_const_QImage_R(self, alpha_channel)
    end
    
    def create_alpha_mask() : Image
      Image.new(unwrap: Binding.bg_QImage_createAlphaMask_(self))
    end
    
    def create_alpha_mask(flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_createAlphaMask_Qt__ImageConversionFlags(self, flags))
    end
    
    def create_heuristic_mask(clip_tight : Bool = true) : Image
      Image.new(unwrap: Binding.bg_QImage_createHeuristicMask_bool(self, clip_tight))
    end
    
    def create_mask_from_color(color : UInt32, mode : MaskMode = MaskMode::MaskInColor) : Image
      Image.new(unwrap: Binding.bg_QImage_createMaskFromColor_QRgb_Qt__MaskMode(self, color, mode))
    end
    
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(self, w, h, aspect_mode, mode))
    end
    
    def scaled(s : Binding::QSize*, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(self, s, aspect_mode, mode))
    end
    
    def scaled_to_width(w : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToWidth_int_Qt__TransformationMode(self, w, mode))
    end
    
    def scaled_to_height(h : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Image
      Image.new(unwrap: Binding.bg_QImage_scaledToHeight_int_Qt__TransformationMode(self, h, mode))
    end
    
    def mirrored(horizontally : Bool = false, vertically : Bool = true) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_bool_bool(self, horizontally, vertically))
    end
    
    def rgb_swapped() : Image
      Image.new(unwrap: Binding.bg_QImage_rgbSwapped_(self))
    end
    
    def invert_pixels(unnamed_arg_0 : Image::InvertMode = Image::InvertMode::InvertRgb) : Void
      Binding.bg_QImage_invertPixels_QImage__InvertMode(self, unnamed_arg_0)
    end
    
    def color_space() : Binding::QColorSpace*
      Binding.bg_QImage_colorSpace_(self)
    end
    
    def converted_to_color_space(unnamed_arg_0 : Binding::QColorSpace*) : Image
      Image.new(unwrap: Binding.bg_QImage_convertedToColorSpace_const_QColorSpace_R(self, unnamed_arg_0))
    end
    
    def convert_to_color_space(unnamed_arg_0 : Binding::QColorSpace*) : Void
      Binding.bg_QImage_convertToColorSpace_const_QColorSpace_R(self, unnamed_arg_0)
    end
    
    def color_space=(unnamed_arg_0 : Binding::QColorSpace*) : Void
      Binding.bg_QImage_setColorSpace_const_QColorSpace_R(self, unnamed_arg_0)
    end
    
    def apply_color_transform(transform : Binding::QColorTransform*) : Void
      Binding.bg_QImage_applyColorTransform_const_QColorTransform_R(self, transform)
    end
    
    def load(device : IODevice, format : UInt8*) : Bool
      Binding.bg_QImage_load_QIODevice_X_const_char_X(self, device, format)
    end
    
    def load(file_name : String) : Bool
      Binding.bg_QImage_load_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    
    def load(file_name : String, format : UInt8*) : Bool
      Binding.bg_QImage_load_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    
    def load_from_data(buf : UInt8*, len : Int32) : Bool
      Binding.bg_QImage_loadFromData_const_uchar_X_int(self, buf, len)
    end
    
    def load_from_data(buf : UInt8*, len : Int32, format : UInt8*) : Bool
      Binding.bg_QImage_loadFromData_const_uchar_X_int_const_char_X(self, buf, len, format)
    end
    
    def load_from_data(data : Binding::QByteArray*) : Bool
      Binding.bg_QImage_loadFromData_const_QByteArray_R(self, data)
    end
    
    def load_from_data(data : Binding::QByteArray*, aformat : UInt8*) : Bool
      Binding.bg_QImage_loadFromData_const_QByteArray_R_const_char_X(self, data, aformat)
    end
    
    def save(file_name : String) : Bool
      Binding.bg_QImage_save_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    
    def save(file_name : String, format : UInt8*) : Bool
      Binding.bg_QImage_save_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    
    def save(file_name : String, format : UInt8*, quality : Int32 = -1) : Bool
      Binding.bg_QImage_save_const_QString_R_const_char_X_int(self, Qt::Converter::QString.wrap(file_name), format, quality)
    end
    
    def save(device : IODevice) : Bool
      Binding.bg_QImage_save_QIODevice_X(self, device)
    end
    
    def save(device : IODevice, format : UInt8*) : Bool
      Binding.bg_QImage_save_QIODevice_X_const_char_X(self, device, format)
    end
    
    def save(device : IODevice, format : UInt8*, quality : Int32 = -1) : Bool
      Binding.bg_QImage_save_QIODevice_X_const_char_X_int(self, device, format, quality)
    end
    
    def self.from_data(data : UInt8*, size : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_uchar_X_int(data, size))
    end
    
    def self.from_data(data : UInt8*, size : Int32, format : UInt8*) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_uchar_X_int_const_char_X(data, size, format))
    end
    
    def self.from_data(data : Binding::QByteArray*) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_QByteArray_R(data))
    end
    
    def self.from_data(data : Binding::QByteArray*, format : UInt8*) : Image
      Image.new(unwrap: Binding.bg_QImage_fromData_STATIC_const_QByteArray_R_const_char_X(data, format))
    end
    
    def cache_key() : Int64
      Binding.bg_QImage_cacheKey_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QImage_paintEngine_(self)
    end
    
    def dots_per_meter_x() : Int32
      Binding.bg_QImage_dotsPerMeterX_(self)
    end
    
    def dots_per_meter_y() : Int32
      Binding.bg_QImage_dotsPerMeterY_(self)
    end
    
    def dots_per_meter_x=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setDotsPerMeterX_int(self, unnamed_arg_0)
    end
    
    def dots_per_meter_y=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QImage_setDotsPerMeterY_int(self, unnamed_arg_0)
    end
    
    def offset() : Point
      Point.new(unwrap: Binding.bg_QImage_offset_(self))
    end
    
    def offset=(unnamed_arg_0 : Point) : Void
      Binding.bg_QImage_setOffset_const_QPoint_R(self, unnamed_arg_0)
    end
    
    def text_keys() : Binding::QStringList*
      Binding.bg_QImage_textKeys_(self)
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QImage_text_(self))
    end
    
    def text(key : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QImage_text_const_QString_R(self, Qt::Converter::QString.wrap(key)))
    end
    
    def set_text(key : String, value : String) : Void
      Binding.bg_QImage_setText_const_QString_R_const_QString_R(self, Qt::Converter::QString.wrap(key), Qt::Converter::QString.wrap(value))
    end
    
    def pixel_format() : PixelFormat
      PixelFormat.new(unwrap: Binding.bg_QImage_pixelFormat_(self))
    end
    
    def self.to_pixel_format(format : Image::Format) : PixelFormat
      PixelFormat.new(unwrap: Binding.bg_QImage_toPixelFormat_STATIC_QImage__Format(format))
    end
    
    def self.to_image_format(format : PixelFormat) : Image::Format
      Binding.bg_QImage_toImageFormat_STATIC_QPixelFormat(format)
    end
    
    def to_cg_image() : Binding::CGImage*
      Binding.bg_QImage_toCGImage_(self)
    end
    
    protected def metric(metric : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QImage_metric_QPaintDevice__PaintDeviceMetric(self, metric)
    end
    
    protected def mirrored_helper(horizontal : Bool, vertical : Bool) : Image
      Image.new(unwrap: Binding.bg_QImage_mirrored_helper_bool_bool(self, horizontal, vertical))
    end
    
    protected def rgb_swapped_helper() : Image
      Image.new(unwrap: Binding.bg_QImage_rgbSwapped_helper_(self))
    end
    
    protected def mirrored_inplace(horizontal : Bool, vertical : Bool) : Void
      Binding.bg_QImage_mirrored_inplace_bool_bool(self, horizontal, vertical)
    end
    
    protected def rgb_swapped_inplace() : Void
      Binding.bg_QImage_rgbSwapped_inplace_(self)
    end
    
    protected def convert_to_format_helper(format : Image::Format, flags : ImageConversionFlags) : Image
      Image.new(unwrap: Binding.bg_QImage_convertToFormat_helper_QImage__Format_Qt__ImageConversionFlags(self, format, flags))
    end
    
    protected def convert_to_format_inplace(format : Image::Format, flags : ImageConversionFlags) : Bool
      Binding.bg_QImage_convertToFormat_inplace_QImage__Format_Qt__ImageConversionFlags(self, format, flags)
    end
    
    protected def smooth_scaled(w : Int32, h : Int32) : Image
      Image.new(unwrap: Binding.bg_QImage_smoothScaled_int_int(self, w, h))
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QPaintDevice_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_(self))
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QImage_staticMetaObject_STATIC_GETTER_()
    end
    
    enum InvertMode : UInt32
      InvertRgb = 0
      InvertRgba = 1
    end
    enum Format : UInt32
      Invalid = 0
      Mono = 1
      MonoLSB = 2
      Indexed8 = 3
      Rgb32 = 4
      Argb32 = 5
      Argb32Premultiplied = 6
      Rgb16 = 7
      Argb8565Premultiplied = 8
      Rgb666 = 9
      Argb6666Premultiplied = 10
      Rgb555 = 11
      Argb8555Premultiplied = 12
      Rgb888 = 13
      Rgb444 = 14
      Argb4444Premultiplied = 15
      Rgbx8888 = 16
      Rgba8888 = 17
      Rgba8888Premultiplied = 18
      Bgr30 = 19
      A2bgr30Premultiplied = 20
      Rgb30 = 21
      A2rgb30Premultiplied = 22
      Alpha8 = 23
      Grayscale8 = 24
      Rgbx64 = 25
      Rgba64 = 26
      Rgba64Premultiplied = 27
      Grayscale16 = 28
      Bgr888 = 29
      Nimageformats = 30
    end
    def initialize(unwrap : Binding::QImage*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Image)
      end
      def dev_type() : Int32
        Binding.bg_QImage_devType_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QImage_paintEngine_SUPER_(@myself)
      end
      
      protected def metric(metric : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QImage_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, metric)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QPaintDevice_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_SUPER_(@myself))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Pixmap < PaintDevice
    def initialize()
      result = Binding.bg_QPixmap__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(data : Binding::QPlatformPixmap*)
      result = Binding.bg_QPixmap__CONSTRUCT_QPlatformPixmap_X(data)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(w : Int32, h : Int32)
      result = Binding.bg_QPixmap__CONSTRUCT_int_int(w, h)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(unnamed_arg_0 : Binding::QSize*)
      result = Binding.bg_QPixmap__CONSTRUCT_const_QSize_R(unnamed_arg_0)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String)
      result = Binding.bg_QPixmap__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String, format : UInt8*)
      result = Binding.bg_QPixmap__CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String, format : UInt8*, flags : ImageConversionFlags)
      result = Binding.bg_QPixmap__CONSTRUCT_const_QString_R_const_char_X_Qt__ImageConversionFlags(Qt::Converter::QString.wrap(file_name), format, flags)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(xpm : UInt8**)
      result = Binding.bg_QPixmap__CONSTRUCT_const_char_Xconst_X(xpm)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Pixmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric init_painter shared_painter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPixmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPaintDevice_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QPaintDevice_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPixmap_JUMPTABLE_BgJumptable_QPixmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def swap(other : Pixmap) : Void
      Binding.bg_QPixmap_swap_QPixmap_R(self, other)
    end
    
    def null?() : Bool
      Binding.bg_QPixmap_isNull_(self)
    end
    
    def dev_type() : Int32
      Binding.bg_QPixmap_devType_(self)
    end
    
    def width() : Int32
      Binding.bg_QPixmap_width_(self)
    end
    
    def height() : Int32
      Binding.bg_QPixmap_height_(self)
    end
    
    def size() : Binding::QSize*
      Binding.bg_QPixmap_size_(self)
    end
    
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QPixmap_rect_(self))
    end
    
    def depth() : Int32
      Binding.bg_QPixmap_depth_(self)
    end
    
    def self.default_depth() : Int32
      Binding.bg_QPixmap_defaultDepth_STATIC_()
    end
    
    def mask() : Bitmap
      Bitmap.new(unwrap: Binding.bg_QPixmap_mask_(self))
    end
    
    def mask=(unnamed_arg_0 : Bitmap) : Void
      Binding.bg_QPixmap_setMask_const_QBitmap_R(self, unnamed_arg_0)
    end
    
    def device_pixel_ratio() : Float64
      Binding.bg_QPixmap_devicePixelRatio_(self)
    end
    
    def device_pixel_ratio=(scale_factor : Float64) : Void
      Binding.bg_QPixmap_setDevicePixelRatio_qreal(self, scale_factor)
    end
    
    def has_alpha?() : Bool
      Binding.bg_QPixmap_hasAlpha_(self)
    end
    
    def has_alpha_channel?() : Bool
      Binding.bg_QPixmap_hasAlphaChannel_(self)
    end
    
    def create_heuristic_mask(clip_tight : Bool = true) : Bitmap
      Bitmap.new(unwrap: Binding.bg_QPixmap_createHeuristicMask_bool(self, clip_tight))
    end
    
    def create_mask_from_color(mask_color : Color, mode : MaskMode = MaskMode::MaskInColor) : Bitmap
      Bitmap.new(unwrap: Binding.bg_QPixmap_createMaskFromColor_const_QColor_R_Qt__MaskMode(self, mask_color, mode))
    end
    
    def scaled(w : Int32, h : Int32, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_int_int_Qt__AspectRatioMode_Qt__TransformationMode(self, w, h, aspect_mode, mode))
    end
    
    def scaled(s : Binding::QSize*, aspect_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaled_const_QSize_R_Qt__AspectRatioMode_Qt__TransformationMode(self, s, aspect_mode, mode))
    end
    
    def scaled_to_width(w : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToWidth_int_Qt__TransformationMode(self, w, mode))
    end
    
    def scaled_to_height(h : Int32, mode : TransformationMode = TransformationMode::FastTransformation) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_scaledToHeight_int_Qt__TransformationMode(self, h, mode))
    end
    
    def to_image() : Image
      Image.new(unwrap: Binding.bg_QPixmap_toImage_(self))
    end
    
    def self.from_image(image : Image) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImage_STATIC_const_QImage_R(image))
    end
    
    def self.from_image(image : Image, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    
    def self.from_image_reader(image_reader : Binding::QImageReader*) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageReader_STATIC_QImageReader_X(image_reader))
    end
    
    def self.from_image_reader(image_reader : Binding::QImageReader*, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageReader_STATIC_QImageReader_X_Qt__ImageConversionFlags(image_reader, flags))
    end
    
    def load(file_name : String) : Bool
      Binding.bg_QPixmap_load_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    
    def load(file_name : String, format : UInt8*) : Bool
      Binding.bg_QPixmap_load_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    
    def load(file_name : String, format : UInt8*, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_load_const_QString_R_const_char_X_Qt__ImageConversionFlags(self, Qt::Converter::QString.wrap(file_name), format, flags)
    end
    
    def load_from_data(buf : UInt8*, len : UInt32) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint(self, buf, len)
    end
    
    def load_from_data(buf : UInt8*, len : UInt32, format : UInt8*) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X(self, buf, len, format)
    end
    
    def load_from_data(buf : UInt8*, len : UInt32, format : UInt8*, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_loadFromData_const_uchar_X_uint_const_char_X_Qt__ImageConversionFlags(self, buf, len, format, flags)
    end
    
    def load_from_data(data : Binding::QByteArray*) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R(self, data)
    end
    
    def load_from_data(data : Binding::QByteArray*, format : UInt8*) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X(self, data, format)
    end
    
    def load_from_data(data : Binding::QByteArray*, format : UInt8*, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_loadFromData_const_QByteArray_R_const_char_X_Qt__ImageConversionFlags(self, data, format, flags)
    end
    
    def save(file_name : String) : Bool
      Binding.bg_QPixmap_save_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    
    def save(file_name : String, format : UInt8*) : Bool
      Binding.bg_QPixmap_save_const_QString_R_const_char_X(self, Qt::Converter::QString.wrap(file_name), format)
    end
    
    def save(file_name : String, format : UInt8*, quality : Int32 = -1) : Bool
      Binding.bg_QPixmap_save_const_QString_R_const_char_X_int(self, Qt::Converter::QString.wrap(file_name), format, quality)
    end
    
    def save(device : IODevice) : Bool
      Binding.bg_QPixmap_save_QIODevice_X(self, device)
    end
    
    def save(device : IODevice, format : UInt8*) : Bool
      Binding.bg_QPixmap_save_QIODevice_X_const_char_X(self, device, format)
    end
    
    def save(device : IODevice, format : UInt8*, quality : Int32 = -1) : Bool
      Binding.bg_QPixmap_save_QIODevice_X_const_char_X_int(self, device, format, quality)
    end
    
    def convert_from_image(img : Image) : Bool
      Binding.bg_QPixmap_convertFromImage_const_QImage_R(self, img)
    end
    
    def convert_from_image(img : Image, flags : ImageConversionFlags) : Bool
      Binding.bg_QPixmap_convertFromImage_const_QImage_R_Qt__ImageConversionFlags(self, img, flags)
    end
    
    def copy(x : Int32, y : Int32, width : Int32, height : Int32) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_int_int_int_int(self, x, y, width, height))
    end
    
    def copy() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_(self))
    end
    
    def copy(rect : Rect) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_copy_const_QRect_R(self, rect))
    end
    
    def scroll(dx : Int32, dy : Int32, x : Int32, y : Int32, width : Int32, height : Int32, exposed : Binding::QRegion*? = nil) : Void
      Binding.bg_QPixmap_scroll_int_int_int_int_int_int_QRegion_X(self, dx, dy, x, y, width, height, exposed)
    end
    
    def scroll(dx : Int32, dy : Int32, rect : Rect, exposed : Binding::QRegion*? = nil) : Void
      Binding.bg_QPixmap_scroll_int_int_const_QRect_R_QRegion_X(self, dx, dy, rect, exposed)
    end
    
    def cache_key() : Int64
      Binding.bg_QPixmap_cacheKey_(self)
    end
    
    def detached?() : Bool
      Binding.bg_QPixmap_isDetached_(self)
    end
    
    def detach() : Void
      Binding.bg_QPixmap_detach_(self)
    end
    
    def q_bitmap?() : Bool
      Binding.bg_QPixmap_isQBitmap_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QPixmap_paintEngine_(self)
    end
    
    def not() : Bool
      Binding.bg_QPixmap__OPERATOR_not_(self)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def self.from_image_in_place(image : Image) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageInPlace_STATIC_QImage_R(image))
    end
    
    protected def self.from_image_in_place(image : Image, flags : ImageConversionFlags) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QPixmap_fromImageInPlace_STATIC_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    
    def handle() : Binding::QPlatformPixmap*
      Binding.bg_QPixmap_handle_(self)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QPaintDevice_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_(self))
    end
    
    def initialize(unwrap : Binding::QPixmap*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Pixmap)
      end
      def dev_type() : Int32
        Binding.bg_QPixmap_devType_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QPixmap_paintEngine_SUPER_(@myself)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QPixmap_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QPaintDevice_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QPaintDevice_sharedPainter_SUPER_(@myself))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Brush
    @unwrap : Binding::QBrush*
    
    def initialize()
      result = Binding.bg_QBrush__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(bs : BrushStyle)
      result = Binding.bg_QBrush__CONSTRUCT_Qt__BrushStyle(bs)
    @unwrap = result
    end
    
    def initialize(color : Color, bs : BrushStyle = BrushStyle::SolidPattern)
      result = Binding.bg_QBrush__CONSTRUCT_const_QColor_R_Qt__BrushStyle(color, bs)
    @unwrap = result
    end
    
    def initialize(color : GlobalColor, bs : BrushStyle = BrushStyle::SolidPattern)
      result = Binding.bg_QBrush__CONSTRUCT_Qt__GlobalColor_Qt__BrushStyle(color, bs)
    @unwrap = result
    end
    
    def initialize(color : Color, pixmap : Pixmap)
      result = Binding.bg_QBrush__CONSTRUCT_const_QColor_R_const_QPixmap_R(color, pixmap)
    @unwrap = result
    end
    
    def initialize(color : GlobalColor, pixmap : Pixmap)
      result = Binding.bg_QBrush__CONSTRUCT_Qt__GlobalColor_const_QPixmap_R(color, pixmap)
    @unwrap = result
    end
    
    def initialize(pixmap : Pixmap)
      result = Binding.bg_QBrush__CONSTRUCT_const_QPixmap_R(pixmap)
    @unwrap = result
    end
    
    def initialize(image : Image)
      result = Binding.bg_QBrush__CONSTRUCT_const_QImage_R(image)
    @unwrap = result
    end
    
    def initialize(gradient : Binding::QGradient*)
      result = Binding.bg_QBrush__CONSTRUCT_const_QGradient_R(gradient)
    @unwrap = result
    end
    
    def swap(other : Brush) : Void
      Binding.bg_QBrush_swap_QBrush_R(self, other)
    end
    
    def style() : BrushStyle
      Binding.bg_QBrush_style_(self)
    end
    
    def style=(unnamed_arg_0 : BrushStyle) : Void
      Binding.bg_QBrush_setStyle_Qt__BrushStyle(self, unnamed_arg_0)
    end
    
    def transform() : Binding::QTransform*
      Binding.bg_QBrush_transform_(self)
    end
    
    def transform=(unnamed_arg_0 : Binding::QTransform*) : Void
      Binding.bg_QBrush_setTransform_const_QTransform_R(self, unnamed_arg_0)
    end
    
    def texture() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QBrush_texture_(self))
    end
    
    def texture=(pixmap : Pixmap) : Void
      Binding.bg_QBrush_setTexture_const_QPixmap_R(self, pixmap)
    end
    
    def texture_image() : Image
      Image.new(unwrap: Binding.bg_QBrush_textureImage_(self))
    end
    
    def texture_image=(image : Image) : Void
      Binding.bg_QBrush_setTextureImage_const_QImage_R(self, image)
    end
    
    def color() : Color
      Color.new(unwrap: Binding.bg_QBrush_color_(self))
    end
    
    def color=(color : Color) : Void
      Binding.bg_QBrush_setColor_const_QColor_R(self, color)
    end
    
    def color=(color : GlobalColor) : Void
      Binding.bg_QBrush_setColor_Qt__GlobalColor(self, color)
    end
    
    def gradient() : Binding::QGradient*
      Binding.bg_QBrush_gradient_(self)
    end
    
    def opaque?() : Bool
      Binding.bg_QBrush_isOpaque_(self)
    end
    
    def ==(b : Brush) : Bool
      Binding.bg_QBrush__OPERATOR_eq_const_QBrush_R(self, b)
    end
    
    def !=(b : Brush) : Bool
      Binding.bg_QBrush__OPERATOR_ne_const_QBrush_R(self, b)
    end
    
    def detached?() : Bool
      Binding.bg_QBrush_isDetached_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QBrush*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextOption
    @unwrap : Binding::QTextOption*
    
    def initialize()
      result = Binding.bg_QTextOption__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(alignment : Alignment)
      result = Binding.bg_QTextOption__CONSTRUCT_Qt__Alignment(alignment)
    @unwrap = result
    end
    
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QTextOption_setAlignment_Qt__Alignment(self, alignment)
    end
    
    def alignment() : Alignment
      Binding.bg_QTextOption_alignment_(self)
    end
    
    def text_direction=(a_direction : LayoutDirection) : Void
      Binding.bg_QTextOption_setTextDirection_Qt__LayoutDirection(self, a_direction)
    end
    
    def text_direction() : LayoutDirection
      Binding.bg_QTextOption_textDirection_(self)
    end
    
    def wrap_mode=(wrap : TextOption::WrapMode) : Void
      Binding.bg_QTextOption_setWrapMode_QTextOption__WrapMode(self, wrap)
    end
    
    def wrap_mode() : TextOption::WrapMode
      Binding.bg_QTextOption_wrapMode_(self)
    end
    
    def flags=(flags : TextOption::Flags) : Void
      Binding.bg_QTextOption_setFlags_QTextOption__Flags(self, flags)
    end
    
    def flags() : TextOption::Flags
      Binding.bg_QTextOption_flags_(self)
    end
    
    def tab_stop_distance=(tab_stop_distance : Float64) : Void
      Binding.bg_QTextOption_setTabStopDistance_qreal(self, tab_stop_distance)
    end
    
    def tab_stop_distance() : Float64
      Binding.bg_QTextOption_tabStopDistance_(self)
    end
    
    def tab_array=(tab_stops : Enumerable(Float64)) : Void
      Binding.bg_QTextOption_setTabArray_const_QList_qreal__R(self, BindgenHelper.wrap_container(Container_QList_qreal_, tab_stops).to_unsafe)
    end
    
    def tab_array() : Enumerable(Float64)
      Container_QList_qreal_.new(unwrap: Binding.bg_QTextOption_tabArray_(self))
    end
    
    def use_design_metrics=(b : Bool) : Void
      Binding.bg_QTextOption_setUseDesignMetrics_bool(self, b)
    end
    
    def use_design_metrics() : Bool
      Binding.bg_QTextOption_useDesignMetrics_(self)
    end
    
    enum TabType : UInt32
      LeftTab = 0
      RightTab = 1
      CenterTab = 2
      DelimiterTab = 3
    end
    enum WrapMode : UInt32
      NoWrap = 0
      WordWrap = 1
      ManualWrap = 2
      WrapAnywhere = 3
      WrapAtWordBoundaryOrAnywhere = 4
    end
    @[Flags]
    enum Flags : UInt32
      ShowTabsAndSpaces = 1
      ShowLineAndParagraphSeparators = 2
      AddSpaceForLineAndParagraphSeparators = 4
      SuppressColors = 8
      ShowDocumentTerminator = 16
      IncludeTrailingSpaces = 2147483648
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QTextOption*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextLength
    @unwrap : Binding::QTextLength*
    
    def initialize()
      result = Binding.bg_QTextLength__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(type : TextLength::Type, value : Float64)
      result = Binding.bg_QTextLength__CONSTRUCT_QTextLength__Type_qreal(type, value)
    @unwrap = result
    end
    
    def type() : TextLength::Type
      Binding.bg_QTextLength_type_(self)
    end
    
    def value(maximum_length : Float64) : Float64
      Binding.bg_QTextLength_value_qreal(self, maximum_length)
    end
    
    def raw_value() : Float64
      Binding.bg_QTextLength_rawValue_(self)
    end
    
    def ==(other : TextLength) : Bool
      Binding.bg_QTextLength__OPERATOR_eq_const_QTextLength_R(self, other)
    end
    
    def !=(other : TextLength) : Bool
      Binding.bg_QTextLength__OPERATOR_ne_const_QTextLength_R(self, other)
    end
    
    enum Type : UInt32
      VariableLength = 0
      FixedLength = 1
      PercentageLength = 2
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QTextLength*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextFormat
    @unwrap : Binding::QTextFormat*
    
    def initialize()
      result = Binding.bg_QTextFormat__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(type : Int32)
      result = Binding.bg_QTextFormat__CONSTRUCT_int(type)
    @unwrap = result
    end
    
    def swap(other : TextFormat) : Void
      Binding.bg_QTextFormat_swap_QTextFormat_R(self, other)
    end
    
    def merge(other : TextFormat) : Void
      Binding.bg_QTextFormat_merge_const_QTextFormat_R(self, other)
    end
    
    def valid?() : Bool
      Binding.bg_QTextFormat_isValid_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QTextFormat_isEmpty_(self)
    end
    
    def type() : Int32
      Binding.bg_QTextFormat_type_(self)
    end
    
    def object_index() : Int32
      Binding.bg_QTextFormat_objectIndex_(self)
    end
    
    def object_index=(object : Int32) : Void
      Binding.bg_QTextFormat_setObjectIndex_int(self, object)
    end
    
    def property(property_id : Int32) : Variant
      Qt::Variant.new(Binding.bg_QTextFormat_property_int(self, property_id))
    end
    
    def set_property(property_id : Int32, value : Variant) : Void
      Binding.bg_QTextFormat_setProperty_int_const_QVariant_R(self, property_id, (value.to_unsafe))
    end
    
    def clear_property(property_id : Int32) : Void
      Binding.bg_QTextFormat_clearProperty_int(self, property_id)
    end
    
    def has_property(property_id : Int32) : Bool
      Binding.bg_QTextFormat_hasProperty_int(self, property_id)
    end
    
    def bool_property(property_id : Int32) : Bool
      Binding.bg_QTextFormat_boolProperty_int(self, property_id)
    end
    
    def int_property(property_id : Int32) : Int32
      Binding.bg_QTextFormat_intProperty_int(self, property_id)
    end
    
    def double_property(property_id : Int32) : Float64
      Binding.bg_QTextFormat_doubleProperty_int(self, property_id)
    end
    
    def string_property(property_id : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextFormat_stringProperty_int(self, property_id))
    end
    
    def color_property(property_id : Int32) : Color
      Color.new(unwrap: Binding.bg_QTextFormat_colorProperty_int(self, property_id))
    end
    
    def pen_property(property_id : Int32) : Binding::QPen*
      Binding.bg_QTextFormat_penProperty_int(self, property_id)
    end
    
    def brush_property(property_id : Int32) : Brush
      Brush.new(unwrap: Binding.bg_QTextFormat_brushProperty_int(self, property_id))
    end
    
    def length_property(property_id : Int32) : TextLength
      TextLength.new(unwrap: Binding.bg_QTextFormat_lengthProperty_int(self, property_id))
    end
    
    def length_vector_property(property_id : Int32) : Enumerable(TextLength)
      Container_QVector_QTextLength_.new(unwrap: Binding.bg_QTextFormat_lengthVectorProperty_int(self, property_id))
    end
    
    def set_property(property_id : Int32, lengths : Enumerable(TextLength)) : Void
      Binding.bg_QTextFormat_setProperty_int_const_QVector_QTextLength__R(self, property_id, BindgenHelper.wrap_container(Container_QVector_QTextLength_, lengths).to_unsafe)
    end
    
    def property_count() : Int32
      Binding.bg_QTextFormat_propertyCount_(self)
    end
    
    def object_type=(type : Int32) : Void
      Binding.bg_QTextFormat_setObjectType_int(self, type)
    end
    
    def object_type() : Int32
      Binding.bg_QTextFormat_objectType_(self)
    end
    
    def char_format?() : Bool
      Binding.bg_QTextFormat_isCharFormat_(self)
    end
    
    def block_format?() : Bool
      Binding.bg_QTextFormat_isBlockFormat_(self)
    end
    
    def list_format?() : Bool
      Binding.bg_QTextFormat_isListFormat_(self)
    end
    
    def frame_format?() : Bool
      Binding.bg_QTextFormat_isFrameFormat_(self)
    end
    
    def image_format?() : Bool
      Binding.bg_QTextFormat_isImageFormat_(self)
    end
    
    def table_format?() : Bool
      Binding.bg_QTextFormat_isTableFormat_(self)
    end
    
    def table_cell_format?() : Bool
      Binding.bg_QTextFormat_isTableCellFormat_(self)
    end
    
    def to_block_format() : TextBlockFormat
      TextBlockFormat.new(unwrap: Binding.bg_QTextFormat_toBlockFormat_(self))
    end
    
    def to_char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextFormat_toCharFormat_(self))
    end
    
    def to_list_format() : TextListFormat
      TextListFormat.new(unwrap: Binding.bg_QTextFormat_toListFormat_(self))
    end
    
    def to_table_format() : Binding::QTextTableFormat*
      Binding.bg_QTextFormat_toTableFormat_(self)
    end
    
    def to_frame_format() : TextFrameFormat
      TextFrameFormat.new(unwrap: Binding.bg_QTextFormat_toFrameFormat_(self))
    end
    
    def to_image_format() : Binding::QTextImageFormat*
      Binding.bg_QTextFormat_toImageFormat_(self)
    end
    
    def to_table_cell_format() : Binding::QTextTableCellFormat*
      Binding.bg_QTextFormat_toTableCellFormat_(self)
    end
    
    def ==(rhs : TextFormat) : Bool
      Binding.bg_QTextFormat__OPERATOR_eq_const_QTextFormat_R(self, rhs)
    end
    
    def !=(rhs : TextFormat) : Bool
      Binding.bg_QTextFormat__OPERATOR_ne_const_QTextFormat_R(self, rhs)
    end
    
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QTextFormat_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    
    def layout_direction() : LayoutDirection
      Binding.bg_QTextFormat_layoutDirection_(self)
    end
    
    def background=(brush : Brush) : Void
      Binding.bg_QTextFormat_setBackground_const_QBrush_R(self, brush)
    end
    
    def background() : Brush
      Brush.new(unwrap: Binding.bg_QTextFormat_background_(self))
    end
    
    def clear_background() : Void
      Binding.bg_QTextFormat_clearBackground_(self)
    end
    
    def foreground=(brush : Brush) : Void
      Binding.bg_QTextFormat_setForeground_const_QBrush_R(self, brush)
    end
    
    def foreground() : Brush
      Brush.new(unwrap: Binding.bg_QTextFormat_foreground_(self))
    end
    
    def clear_foreground() : Void
      Binding.bg_QTextFormat_clearForeground_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTextFormat_staticMetaObject_STATIC_GETTER_()
    end
    
    enum FormatType : Int32
      InvalidFormat = -1
      BlockFormat = 1
      CharFormat = 2
      ListFormat = 3
      TableFormat = 4
      FrameFormat = 5
      UserFormat = 100
    end
    enum Property : UInt32
      ObjectIndex = 0
      CssFloat = 2048
      LayoutDirection = 2049
      OutlinePen = 2064
      BackgroundBrush = 2080
      ForegroundBrush = 2081
      BackgroundImageUrl = 2083
      BlockAlignment = 4112
      BlockTopMargin = 4144
      BlockBottomMargin = 4145
      BlockLeftMargin = 4146
      BlockRightMargin = 4147
      TextIndent = 4148
      TabPositions = 4149
      BlockIndent = 4160
      LineHeight = 4168
      LineHeightType = 4169
      BlockNonBreakableLines = 4176
      BlockTrailingHorizontalRulerWidth = 4192
      HeadingLevel = 4208
      BlockQuoteLevel = 4224
      BlockCodeLanguage = 4240
      BlockCodeFence = 4241
      BlockMarker = 4256
      FirstFontProperty = 8160
      FontCapitalization = 8160
      FontLetterSpacingType = 8243
      FontLetterSpacing = 8161
      FontWordSpacing = 8162
      FontStretch = 8244
      FontStyleHint = 8163
      FontStyleStrategy = 8164
      FontKerning = 8165
      FontHintingPreference = 8166
      FontFamilies = 8167
      FontStyleName = 8168
      FontFamily = 8192
      FontPointSize = 8193
      FontSizeAdjustment = 8194
      FontSizeIncrement = 8194
      FontWeight = 8195
      FontItalic = 8196
      FontUnderline = 8197
      FontOverline = 8198
      FontStrikeOut = 8199
      FontFixedPitch = 8200
      FontPixelSize = 8201
      LastFontProperty = 8201
      TextUnderlineColor = 8208
      TextVerticalAlignment = 8225
      TextOutline = 8226
      TextUnderlineStyle = 8227
      TextToolTip = 8228
      IsAnchor = 8240
      AnchorHref = 8241
      AnchorName = 8242
      ObjectType = 12032
      ListStyle = 12288
      ListIndent = 12289
      ListNumberPrefix = 12290
      ListNumberSuffix = 12291
      FrameBorder = 16384
      FrameMargin = 16385
      FramePadding = 16386
      FrameWidth = 16387
      FrameHeight = 16388
      FrameTopMargin = 16389
      FrameBottomMargin = 16390
      FrameLeftMargin = 16391
      FrameRightMargin = 16392
      FrameBorderBrush = 16393
      FrameBorderStyle = 16400
      TableColumns = 16640
      TableColumnWidthConstraints = 16641
      TableCellSpacing = 16642
      TableCellPadding = 16643
      TableHeaderRowCount = 16644
      TableBorderCollapse = 16645
      TableCellRowSpan = 18448
      TableCellColumnSpan = 18449
      TableCellTopPadding = 18450
      TableCellBottomPadding = 18451
      TableCellLeftPadding = 18452
      TableCellRightPadding = 18453
      TableCellTopBorder = 18454
      TableCellBottomBorder = 18455
      TableCellLeftBorder = 18456
      TableCellRightBorder = 18457
      TableCellTopBorderStyle = 18458
      TableCellBottomBorderStyle = 18459
      TableCellLeftBorderStyle = 18460
      TableCellRightBorderStyle = 18461
      TableCellTopBorderBrush = 18462
      TableCellBottomBorderBrush = 18463
      TableCellLeftBorderBrush = 18464
      TableCellRightBorderBrush = 18465
      ImageName = 20480
      ImageTitle = 20481
      ImageAltText = 20482
      ImageWidth = 20496
      ImageHeight = 20497
      ImageQuality = 20500
      FullWidthSelection = 24576
      PageBreakPolicy = 28672
      UserProperty = 1048576
    end
    enum ObjectTypes : UInt32
      NoObject = 0
      ImageObject = 1
      TableObject = 2
      TableCellObject = 3
      UserObject = 4096
    end
    enum PageBreakFlag : UInt32
      PageBreak_Auto = 0
      PageBreak_AlwaysBefore = 1
      PageBreak_AlwaysAfter = 16
    end
    @[Flags]
    enum PageBreakFlags : UInt32
      PageBreak_Auto = 0
      PageBreak_AlwaysBefore = 1
      PageBreak_AlwaysAfter = 16
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QTextFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextCharFormat < TextFormat
    def initialize()
      result = Binding.bg_QTextCharFormat__CONSTRUCT_()
    @unwrap = result
    end
    
    def valid?() : Bool
      Binding.bg_QTextCharFormat_isValid_(self)
    end
    
    def set_font(font : Font, behavior : TextCharFormat::FontPropertiesInheritanceBehavior) : Void
      Binding.bg_QTextCharFormat_setFont_const_QFont_R_QTextCharFormat__FontPropertiesInheritanceBehavior(self, font, behavior)
    end
    
    def font=(font : Font) : Void
      Binding.bg_QTextCharFormat_setFont_const_QFont_R(self, font)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QTextCharFormat_font_(self))
    end
    
    def font_family=(family : String) : Void
      Binding.bg_QTextCharFormat_setFontFamily_const_QString_R(self, Qt::Converter::QString.wrap(family))
    end
    
    def font_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_fontFamily_(self))
    end
    
    def font_families=(families : Binding::QStringList*) : Void
      Binding.bg_QTextCharFormat_setFontFamilies_const_QStringList_R(self, families)
    end
    
    def font_families() : Variant
      Qt::Variant.new(Binding.bg_QTextCharFormat_fontFamilies_(self))
    end
    
    def font_style_name=(style_name : String) : Void
      Binding.bg_QTextCharFormat_setFontStyleName_const_QString_R(self, Qt::Converter::QString.wrap(style_name))
    end
    
    def font_style_name() : Variant
      Qt::Variant.new(Binding.bg_QTextCharFormat_fontStyleName_(self))
    end
    
    def font_point_size=(size : Float64) : Void
      Binding.bg_QTextCharFormat_setFontPointSize_qreal(self, size)
    end
    
    def font_point_size() : Float64
      Binding.bg_QTextCharFormat_fontPointSize_(self)
    end
    
    def font_weight=(weight : Int32) : Void
      Binding.bg_QTextCharFormat_setFontWeight_int(self, weight)
    end
    
    def font_weight() : Int32
      Binding.bg_QTextCharFormat_fontWeight_(self)
    end
    
    def font_italic=(italic : Bool) : Void
      Binding.bg_QTextCharFormat_setFontItalic_bool(self, italic)
    end
    
    def font_italic() : Bool
      Binding.bg_QTextCharFormat_fontItalic_(self)
    end
    
    def font_capitalization=(capitalization : Font::Capitalization) : Void
      Binding.bg_QTextCharFormat_setFontCapitalization_QFont__Capitalization(self, capitalization)
    end
    
    def font_capitalization() : Font::Capitalization
      Binding.bg_QTextCharFormat_fontCapitalization_(self)
    end
    
    def font_letter_spacing_type=(letter_spacing_type : Font::SpacingType) : Void
      Binding.bg_QTextCharFormat_setFontLetterSpacingType_QFont__SpacingType(self, letter_spacing_type)
    end
    
    def font_letter_spacing_type() : Font::SpacingType
      Binding.bg_QTextCharFormat_fontLetterSpacingType_(self)
    end
    
    def font_letter_spacing=(spacing : Float64) : Void
      Binding.bg_QTextCharFormat_setFontLetterSpacing_qreal(self, spacing)
    end
    
    def font_letter_spacing() : Float64
      Binding.bg_QTextCharFormat_fontLetterSpacing_(self)
    end
    
    def font_word_spacing=(spacing : Float64) : Void
      Binding.bg_QTextCharFormat_setFontWordSpacing_qreal(self, spacing)
    end
    
    def font_word_spacing() : Float64
      Binding.bg_QTextCharFormat_fontWordSpacing_(self)
    end
    
    def font_underline=(underline : Bool) : Void
      Binding.bg_QTextCharFormat_setFontUnderline_bool(self, underline)
    end
    
    def font_underline() : Bool
      Binding.bg_QTextCharFormat_fontUnderline_(self)
    end
    
    def font_overline=(overline : Bool) : Void
      Binding.bg_QTextCharFormat_setFontOverline_bool(self, overline)
    end
    
    def font_overline() : Bool
      Binding.bg_QTextCharFormat_fontOverline_(self)
    end
    
    def font_strike_out=(strike_out : Bool) : Void
      Binding.bg_QTextCharFormat_setFontStrikeOut_bool(self, strike_out)
    end
    
    def font_strike_out() : Bool
      Binding.bg_QTextCharFormat_fontStrikeOut_(self)
    end
    
    def underline_color=(color : Color) : Void
      Binding.bg_QTextCharFormat_setUnderlineColor_const_QColor_R(self, color)
    end
    
    def underline_color() : Color
      Color.new(unwrap: Binding.bg_QTextCharFormat_underlineColor_(self))
    end
    
    def font_fixed_pitch=(fixed_pitch : Bool) : Void
      Binding.bg_QTextCharFormat_setFontFixedPitch_bool(self, fixed_pitch)
    end
    
    def font_fixed_pitch() : Bool
      Binding.bg_QTextCharFormat_fontFixedPitch_(self)
    end
    
    def font_stretch=(factor : Int32) : Void
      Binding.bg_QTextCharFormat_setFontStretch_int(self, factor)
    end
    
    def font_stretch() : Int32
      Binding.bg_QTextCharFormat_fontStretch_(self)
    end
    
    def set_font_style_hint(hint : Font::StyleHint, strategy : Font::StyleStrategy = Font::StyleStrategy::PreferDefault) : Void
      Binding.bg_QTextCharFormat_setFontStyleHint_QFont__StyleHint_QFont__StyleStrategy(self, hint, strategy)
    end
    
    def font_style_strategy=(strategy : Font::StyleStrategy) : Void
      Binding.bg_QTextCharFormat_setFontStyleStrategy_QFont__StyleStrategy(self, strategy)
    end
    
    def font_style_hint() : Font::StyleHint
      Binding.bg_QTextCharFormat_fontStyleHint_(self)
    end
    
    def font_style_strategy() : Font::StyleStrategy
      Binding.bg_QTextCharFormat_fontStyleStrategy_(self)
    end
    
    def font_hinting_preference=(hinting_preference : Font::HintingPreference) : Void
      Binding.bg_QTextCharFormat_setFontHintingPreference_QFont__HintingPreference(self, hinting_preference)
    end
    
    def font_hinting_preference() : Font::HintingPreference
      Binding.bg_QTextCharFormat_fontHintingPreference_(self)
    end
    
    def font_kerning=(enable : Bool) : Void
      Binding.bg_QTextCharFormat_setFontKerning_bool(self, enable)
    end
    
    def font_kerning() : Bool
      Binding.bg_QTextCharFormat_fontKerning_(self)
    end
    
    def underline_style=(style : TextCharFormat::UnderlineStyle) : Void
      Binding.bg_QTextCharFormat_setUnderlineStyle_QTextCharFormat__UnderlineStyle(self, style)
    end
    
    def underline_style() : TextCharFormat::UnderlineStyle
      Binding.bg_QTextCharFormat_underlineStyle_(self)
    end
    
    def vertical_alignment=(alignment : TextCharFormat::VerticalAlignment) : Void
      Binding.bg_QTextCharFormat_setVerticalAlignment_QTextCharFormat__VerticalAlignment(self, alignment)
    end
    
    def vertical_alignment() : TextCharFormat::VerticalAlignment
      Binding.bg_QTextCharFormat_verticalAlignment_(self)
    end
    
    def text_outline=(pen : Binding::QPen*) : Void
      Binding.bg_QTextCharFormat_setTextOutline_const_QPen_R(self, pen)
    end
    
    def text_outline() : Binding::QPen*
      Binding.bg_QTextCharFormat_textOutline_(self)
    end
    
    def tool_tip=(tip : String) : Void
      Binding.bg_QTextCharFormat_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_toolTip_(self))
    end
    
    def anchor=(anchor : Bool) : Void
      Binding.bg_QTextCharFormat_setAnchor_bool(self, anchor)
    end
    
    def anchor?() : Bool
      Binding.bg_QTextCharFormat_isAnchor_(self)
    end
    
    def anchor_href=(value : String) : Void
      Binding.bg_QTextCharFormat_setAnchorHref_const_QString_R(self, Qt::Converter::QString.wrap(value))
    end
    
    def anchor_href() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCharFormat_anchorHref_(self))
    end
    
    def anchor_names=(names : Binding::QStringList*) : Void
      Binding.bg_QTextCharFormat_setAnchorNames_const_QStringList_R(self, names)
    end
    
    def anchor_names() : Binding::QStringList*
      Binding.bg_QTextCharFormat_anchorNames_(self)
    end
    
    def table_cell_row_span=(table_cell_row_span : Int32) : Void
      Binding.bg_QTextCharFormat_setTableCellRowSpan_int(self, table_cell_row_span)
    end
    
    def table_cell_row_span() : Int32
      Binding.bg_QTextCharFormat_tableCellRowSpan_(self)
    end
    
    def table_cell_column_span=(table_cell_column_span : Int32) : Void
      Binding.bg_QTextCharFormat_setTableCellColumnSpan_int(self, table_cell_column_span)
    end
    
    def table_cell_column_span() : Int32
      Binding.bg_QTextCharFormat_tableCellColumnSpan_(self)
    end
    
    protected def initialize(fmt : TextFormat)
      result = Binding.bg_QTextCharFormat__CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = result
    end
    
    enum VerticalAlignment : UInt32
      AlignNormal = 0
      AlignSuperScript = 1
      AlignSubScript = 2
      AlignMiddle = 3
      AlignTop = 4
      AlignBottom = 5
      AlignBaseline = 6
    end
    enum UnderlineStyle : UInt32
      NoUnderline = 0
      SingleUnderline = 1
      DashUnderline = 2
      DotLine = 3
      DashDotLine = 4
      DashDotDotLine = 5
      WaveUnderline = 6
      SpellCheckUnderline = 7
    end
    enum FontPropertiesInheritanceBehavior : UInt32
      FontPropertiesSpecifiedOnly = 0
      FontPropertiesAll = 1
    end
    def initialize(unwrap : Binding::QTextCharFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextBlockFormat < TextFormat
    def initialize()
      result = Binding.bg_QTextBlockFormat__CONSTRUCT_()
    @unwrap = result
    end
    
    def valid?() : Bool
      Binding.bg_QTextBlockFormat_isValid_(self)
    end
    
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QTextBlockFormat_setAlignment_Qt__Alignment(self, alignment)
    end
    
    def alignment() : Alignment
      Binding.bg_QTextBlockFormat_alignment_(self)
    end
    
    def top_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setTopMargin_qreal(self, margin)
    end
    
    def top_margin() : Float64
      Binding.bg_QTextBlockFormat_topMargin_(self)
    end
    
    def bottom_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setBottomMargin_qreal(self, margin)
    end
    
    def bottom_margin() : Float64
      Binding.bg_QTextBlockFormat_bottomMargin_(self)
    end
    
    def left_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setLeftMargin_qreal(self, margin)
    end
    
    def left_margin() : Float64
      Binding.bg_QTextBlockFormat_leftMargin_(self)
    end
    
    def right_margin=(margin : Float64) : Void
      Binding.bg_QTextBlockFormat_setRightMargin_qreal(self, margin)
    end
    
    def right_margin() : Float64
      Binding.bg_QTextBlockFormat_rightMargin_(self)
    end
    
    def text_indent=(aindent : Float64) : Void
      Binding.bg_QTextBlockFormat_setTextIndent_qreal(self, aindent)
    end
    
    def text_indent() : Float64
      Binding.bg_QTextBlockFormat_textIndent_(self)
    end
    
    def indent=(indent : Int32) : Void
      Binding.bg_QTextBlockFormat_setIndent_int(self, indent)
    end
    
    def indent() : Int32
      Binding.bg_QTextBlockFormat_indent_(self)
    end
    
    def heading_level=(alevel : Int32) : Void
      Binding.bg_QTextBlockFormat_setHeadingLevel_int(self, alevel)
    end
    
    def heading_level() : Int32
      Binding.bg_QTextBlockFormat_headingLevel_(self)
    end
    
    def set_line_height(height : Float64, height_type : Int32) : Void
      Binding.bg_QTextBlockFormat_setLineHeight_qreal_int(self, height, height_type)
    end
    
    def line_height(script_line_height : Float64, scaling : Float64) : Float64
      Binding.bg_QTextBlockFormat_lineHeight_qreal_qreal(self, script_line_height, scaling)
    end
    
    def line_height() : Float64
      Binding.bg_QTextBlockFormat_lineHeight_(self)
    end
    
    def line_height_type() : Int32
      Binding.bg_QTextBlockFormat_lineHeightType_(self)
    end
    
    def non_breakable_lines=(b : Bool) : Void
      Binding.bg_QTextBlockFormat_setNonBreakableLines_bool(self, b)
    end
    
    def non_breakable_lines() : Bool
      Binding.bg_QTextBlockFormat_nonBreakableLines_(self)
    end
    
    def page_break_policy=(flags : TextFormat::PageBreakFlags) : Void
      Binding.bg_QTextBlockFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(self, flags)
    end
    
    def page_break_policy() : TextFormat::PageBreakFlags
      Binding.bg_QTextBlockFormat_pageBreakPolicy_(self)
    end
    
    def marker=(marker : TextBlockFormat::MarkerType) : Void
      Binding.bg_QTextBlockFormat_setMarker_QTextBlockFormat__MarkerType(self, marker)
    end
    
    def marker() : TextBlockFormat::MarkerType
      Binding.bg_QTextBlockFormat_marker_(self)
    end
    
    protected def initialize(fmt : TextFormat)
      result = Binding.bg_QTextBlockFormat__CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = result
    end
    
    enum LineHeightTypes : UInt32
      SingleHeight = 0
      ProportionalHeight = 1
      FixedHeight = 2
      MinimumHeight = 3
      LineDistanceHeight = 4
    end
    enum MarkerType : Int32
      NoMarker = 0
      Unchecked = 1
      Checked = 2
    end
    def initialize(unwrap : Binding::QTextBlockFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextListFormat < TextFormat
    def initialize()
      result = Binding.bg_QTextListFormat__CONSTRUCT_()
    @unwrap = result
    end
    
    def valid?() : Bool
      Binding.bg_QTextListFormat_isValid_(self)
    end
    
    def style=(style : TextListFormat::Style) : Void
      Binding.bg_QTextListFormat_setStyle_QTextListFormat__Style(self, style)
    end
    
    def style() : TextListFormat::Style
      Binding.bg_QTextListFormat_style_(self)
    end
    
    def indent=(indent : Int32) : Void
      Binding.bg_QTextListFormat_setIndent_int(self, indent)
    end
    
    def indent() : Int32
      Binding.bg_QTextListFormat_indent_(self)
    end
    
    def number_prefix=(number_prefix : String) : Void
      Binding.bg_QTextListFormat_setNumberPrefix_const_QString_R(self, Qt::Converter::QString.wrap(number_prefix))
    end
    
    def number_prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextListFormat_numberPrefix_(self))
    end
    
    def number_suffix=(number_suffix : String) : Void
      Binding.bg_QTextListFormat_setNumberSuffix_const_QString_R(self, Qt::Converter::QString.wrap(number_suffix))
    end
    
    def number_suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextListFormat_numberSuffix_(self))
    end
    
    protected def initialize(fmt : TextFormat)
      result = Binding.bg_QTextListFormat__CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = result
    end
    
    enum Style : Int32
      ListDisc = -1
      ListCircle = -2
      ListSquare = -3
      ListDecimal = -4
      ListLowerAlpha = -5
      ListUpperAlpha = -6
      ListLowerRoman = -7
      ListUpperRoman = -8
      ListStyleUndefined = 0
    end
    def initialize(unwrap : Binding::QTextListFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextFrameFormat < TextFormat
    def initialize()
      result = Binding.bg_QTextFrameFormat__CONSTRUCT_()
    @unwrap = result
    end
    
    def valid?() : Bool
      Binding.bg_QTextFrameFormat_isValid_(self)
    end
    
    def position=(f : TextFrameFormat::Position) : Void
      Binding.bg_QTextFrameFormat_setPosition_QTextFrameFormat__Position(self, f)
    end
    
    def position() : TextFrameFormat::Position
      Binding.bg_QTextFrameFormat_position_(self)
    end
    
    def border=(border : Float64) : Void
      Binding.bg_QTextFrameFormat_setBorder_qreal(self, border)
    end
    
    def border() : Float64
      Binding.bg_QTextFrameFormat_border_(self)
    end
    
    def border_brush=(brush : Brush) : Void
      Binding.bg_QTextFrameFormat_setBorderBrush_const_QBrush_R(self, brush)
    end
    
    def border_brush() : Brush
      Brush.new(unwrap: Binding.bg_QTextFrameFormat_borderBrush_(self))
    end
    
    def border_style=(style : TextFrameFormat::BorderStyle) : Void
      Binding.bg_QTextFrameFormat_setBorderStyle_QTextFrameFormat__BorderStyle(self, style)
    end
    
    def border_style() : TextFrameFormat::BorderStyle
      Binding.bg_QTextFrameFormat_borderStyle_(self)
    end
    
    def margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setMargin_qreal(self, margin)
    end
    
    def margin() : Float64
      Binding.bg_QTextFrameFormat_margin_(self)
    end
    
    def top_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setTopMargin_qreal(self, margin)
    end
    
    def top_margin() : Float64
      Binding.bg_QTextFrameFormat_topMargin_(self)
    end
    
    def bottom_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setBottomMargin_qreal(self, margin)
    end
    
    def bottom_margin() : Float64
      Binding.bg_QTextFrameFormat_bottomMargin_(self)
    end
    
    def left_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setLeftMargin_qreal(self, margin)
    end
    
    def left_margin() : Float64
      Binding.bg_QTextFrameFormat_leftMargin_(self)
    end
    
    def right_margin=(margin : Float64) : Void
      Binding.bg_QTextFrameFormat_setRightMargin_qreal(self, margin)
    end
    
    def right_margin() : Float64
      Binding.bg_QTextFrameFormat_rightMargin_(self)
    end
    
    def padding=(padding : Float64) : Void
      Binding.bg_QTextFrameFormat_setPadding_qreal(self, padding)
    end
    
    def padding() : Float64
      Binding.bg_QTextFrameFormat_padding_(self)
    end
    
    def width=(width : Float64) : Void
      Binding.bg_QTextFrameFormat_setWidth_qreal(self, width)
    end
    
    def width=(length : TextLength) : Void
      Binding.bg_QTextFrameFormat_setWidth_const_QTextLength_R(self, length)
    end
    
    def width() : TextLength
      TextLength.new(unwrap: Binding.bg_QTextFrameFormat_width_(self))
    end
    
    def height=(height : Float64) : Void
      Binding.bg_QTextFrameFormat_setHeight_qreal(self, height)
    end
    
    def height=(height : TextLength) : Void
      Binding.bg_QTextFrameFormat_setHeight_const_QTextLength_R(self, height)
    end
    
    def height() : TextLength
      TextLength.new(unwrap: Binding.bg_QTextFrameFormat_height_(self))
    end
    
    def page_break_policy=(flags : TextFormat::PageBreakFlags) : Void
      Binding.bg_QTextFrameFormat_setPageBreakPolicy_QTextFormat__PageBreakFlags(self, flags)
    end
    
    def page_break_policy() : TextFormat::PageBreakFlags
      Binding.bg_QTextFrameFormat_pageBreakPolicy_(self)
    end
    
    protected def initialize(fmt : TextFormat)
      result = Binding.bg_QTextFrameFormat__CONSTRUCT_const_QTextFormat_R(fmt)
    @unwrap = result
    end
    
    enum Position : UInt32
      InFlow = 0
      FloatLeft = 1
      FloatRight = 2
    end
    enum BorderStyle : UInt32
      BorderStyle_None = 0
      BorderStyle_Dotted = 1
      BorderStyle_Dashed = 2
      BorderStyle_Solid = 3
      BorderStyle_Double = 4
      BorderStyle_DotDash = 5
      BorderStyle_DotDotDash = 6
      BorderStyle_Groove = 7
      BorderStyle_Ridge = 8
      BorderStyle_Inset = 9
      BorderStyle_Outset = 10
    end
    def initialize(unwrap : Binding::QTextFrameFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextCursor
    @unwrap : Binding::QTextCursor*
    
    def initialize()
      result = Binding.bg_QTextCursor__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(document : TextDocument)
      result = Binding.bg_QTextCursor__CONSTRUCT_QTextDocument_X(document)
    @unwrap = result
    end
    
    def initialize(p : Binding::QTextDocumentPrivate*, pos : Int32)
      result = Binding.bg_QTextCursor__CONSTRUCT_QTextDocumentPrivate_X_int(p, pos)
    @unwrap = result
    end
    
    def initialize(d : Binding::QTextCursorPrivate*)
      result = Binding.bg_QTextCursor__CONSTRUCT_QTextCursorPrivate_X(d)
    @unwrap = result
    end
    
    def initialize(frame : Binding::QTextFrame*)
      result = Binding.bg_QTextCursor__CONSTRUCT_QTextFrame_X(frame)
    @unwrap = result
    end
    
    def initialize(block : Binding::QTextBlock*)
      result = Binding.bg_QTextCursor__CONSTRUCT_const_QTextBlock_R(block)
    @unwrap = result
    end
    
    def swap(other : TextCursor) : Void
      Binding.bg_QTextCursor_swap_QTextCursor_R(self, other)
    end
    
    def null?() : Bool
      Binding.bg_QTextCursor_isNull_(self)
    end
    
    def set_position(pos : Int32, mode : TextCursor::MoveMode = TextCursor::MoveMode::MoveAnchor) : Void
      Binding.bg_QTextCursor_setPosition_int_QTextCursor__MoveMode(self, pos, mode)
    end
    
    def position() : Int32
      Binding.bg_QTextCursor_position_(self)
    end
    
    def position_in_block() : Int32
      Binding.bg_QTextCursor_positionInBlock_(self)
    end
    
    def anchor() : Int32
      Binding.bg_QTextCursor_anchor_(self)
    end
    
    def insert_text(text : String) : Void
      Binding.bg_QTextCursor_insertText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def insert_text(text : String, format : TextCharFormat) : Void
      Binding.bg_QTextCursor_insertText_const_QString_R_const_QTextCharFormat_R(self, Qt::Converter::QString.wrap(text), format)
    end
    
    def move_position(op : TextCursor::MoveOperation, unnamed_arg_1 : TextCursor::MoveMode = TextCursor::MoveMode::MoveAnchor, n : Int32 = 1) : Bool
      Binding.bg_QTextCursor_movePosition_QTextCursor__MoveOperation_QTextCursor__MoveMode_int(self, op, unnamed_arg_1, n)
    end
    
    def visual_navigation() : Bool
      Binding.bg_QTextCursor_visualNavigation_(self)
    end
    
    def visual_navigation=(b : Bool) : Void
      Binding.bg_QTextCursor_setVisualNavigation_bool(self, b)
    end
    
    def vertical_movement_x=(x : Int32) : Void
      Binding.bg_QTextCursor_setVerticalMovementX_int(self, x)
    end
    
    def vertical_movement_x() : Int32
      Binding.bg_QTextCursor_verticalMovementX_(self)
    end
    
    def keep_position_on_insert=(b : Bool) : Void
      Binding.bg_QTextCursor_setKeepPositionOnInsert_bool(self, b)
    end
    
    def keep_position_on_insert() : Bool
      Binding.bg_QTextCursor_keepPositionOnInsert_(self)
    end
    
    def delete_char() : Void
      Binding.bg_QTextCursor_deleteChar_(self)
    end
    
    def delete_previous_char() : Void
      Binding.bg_QTextCursor_deletePreviousChar_(self)
    end
    
    def select(selection : TextCursor::SelectionType) : Void
      Binding.bg_QTextCursor_select_QTextCursor__SelectionType(self, selection)
    end
    
    def has_selection?() : Bool
      Binding.bg_QTextCursor_hasSelection_(self)
    end
    
    def has_complex_selection?() : Bool
      Binding.bg_QTextCursor_hasComplexSelection_(self)
    end
    
    def remove_selected_text() : Void
      Binding.bg_QTextCursor_removeSelectedText_(self)
    end
    
    def clear_selection() : Void
      Binding.bg_QTextCursor_clearSelection_(self)
    end
    
    def selection_start() : Int32
      Binding.bg_QTextCursor_selectionStart_(self)
    end
    
    def selection_end() : Int32
      Binding.bg_QTextCursor_selectionEnd_(self)
    end
    
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextCursor_selectedText_(self))
    end
    
    def selection() : Binding::QTextDocumentFragment*
      Binding.bg_QTextCursor_selection_(self)
    end
    
    def selected_table_cells(first_row : Int32*, num_rows : Int32*, first_column : Int32*, num_columns : Int32*) : Void
      Binding.bg_QTextCursor_selectedTableCells_int_X_int_X_int_X_int_X(self, first_row, num_rows, first_column, num_columns)
    end
    
    def block() : Binding::QTextBlock*
      Binding.bg_QTextCursor_block_(self)
    end
    
    def char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextCursor_charFormat_(self))
    end
    
    def char_format=(format : TextCharFormat) : Void
      Binding.bg_QTextCursor_setCharFormat_const_QTextCharFormat_R(self, format)
    end
    
    def merge_char_format(modifier : TextCharFormat) : Void
      Binding.bg_QTextCursor_mergeCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    
    def block_format() : TextBlockFormat
      TextBlockFormat.new(unwrap: Binding.bg_QTextCursor_blockFormat_(self))
    end
    
    def block_format=(format : TextBlockFormat) : Void
      Binding.bg_QTextCursor_setBlockFormat_const_QTextBlockFormat_R(self, format)
    end
    
    def merge_block_format(modifier : TextBlockFormat) : Void
      Binding.bg_QTextCursor_mergeBlockFormat_const_QTextBlockFormat_R(self, modifier)
    end
    
    def block_char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextCursor_blockCharFormat_(self))
    end
    
    def block_char_format=(format : TextCharFormat) : Void
      Binding.bg_QTextCursor_setBlockCharFormat_const_QTextCharFormat_R(self, format)
    end
    
    def merge_block_char_format(modifier : TextCharFormat) : Void
      Binding.bg_QTextCursor_mergeBlockCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    
    def at_block_start() : Bool
      Binding.bg_QTextCursor_atBlockStart_(self)
    end
    
    def at_block_end() : Bool
      Binding.bg_QTextCursor_atBlockEnd_(self)
    end
    
    def at_start() : Bool
      Binding.bg_QTextCursor_atStart_(self)
    end
    
    def at_end() : Bool
      Binding.bg_QTextCursor_atEnd_(self)
    end
    
    def insert_block() : Void
      Binding.bg_QTextCursor_insertBlock_(self)
    end
    
    def insert_block(format : TextBlockFormat) : Void
      Binding.bg_QTextCursor_insertBlock_const_QTextBlockFormat_R(self, format)
    end
    
    def insert_block(format : TextBlockFormat, char_format : TextCharFormat) : Void
      Binding.bg_QTextCursor_insertBlock_const_QTextBlockFormat_R_const_QTextCharFormat_R(self, format, char_format)
    end
    
    def insert_list(format : TextListFormat) : Binding::QTextList*
      Binding.bg_QTextCursor_insertList_const_QTextListFormat_R(self, format)
    end
    
    def insert_list(style : TextListFormat::Style) : Binding::QTextList*
      Binding.bg_QTextCursor_insertList_QTextListFormat__Style(self, style)
    end
    
    def create_list(format : TextListFormat) : Binding::QTextList*
      Binding.bg_QTextCursor_createList_const_QTextListFormat_R(self, format)
    end
    
    def create_list(style : TextListFormat::Style) : Binding::QTextList*
      Binding.bg_QTextCursor_createList_QTextListFormat__Style(self, style)
    end
    
    def current_list() : Binding::QTextList*
      Binding.bg_QTextCursor_currentList_(self)
    end
    
    def insert_table(rows : Int32, cols : Int32, format : Binding::QTextTableFormat*) : Binding::QTextTable*
      Binding.bg_QTextCursor_insertTable_int_int_const_QTextTableFormat_R(self, rows, cols, format)
    end
    
    def insert_table(rows : Int32, cols : Int32) : Binding::QTextTable*
      Binding.bg_QTextCursor_insertTable_int_int(self, rows, cols)
    end
    
    def current_table() : Binding::QTextTable*
      Binding.bg_QTextCursor_currentTable_(self)
    end
    
    def insert_frame(format : TextFrameFormat) : Binding::QTextFrame*
      Binding.bg_QTextCursor_insertFrame_const_QTextFrameFormat_R(self, format)
    end
    
    def current_frame() : Binding::QTextFrame*
      Binding.bg_QTextCursor_currentFrame_(self)
    end
    
    def insert_fragment(fragment : Binding::QTextDocumentFragment*) : Void
      Binding.bg_QTextCursor_insertFragment_const_QTextDocumentFragment_R(self, fragment)
    end
    
    def insert_html(html : String) : Void
      Binding.bg_QTextCursor_insertHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    
    def insert_image(format : Binding::QTextImageFormat*, alignment : TextFrameFormat::Position) : Void
      Binding.bg_QTextCursor_insertImage_const_QTextImageFormat_R_QTextFrameFormat__Position(self, format, alignment)
    end
    
    def insert_image(format : Binding::QTextImageFormat*) : Void
      Binding.bg_QTextCursor_insertImage_const_QTextImageFormat_R(self, format)
    end
    
    def insert_image(name : String) : Void
      Binding.bg_QTextCursor_insertImage_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    
    def insert_image(image : Image) : Void
      Binding.bg_QTextCursor_insertImage_const_QImage_R(self, image)
    end
    
    def insert_image(image : Image, name : String) : Void
      Binding.bg_QTextCursor_insertImage_const_QImage_R_const_QString_R(self, image, Qt::Converter::QString.wrap(name))
    end
    
    def begin_edit_block() : Void
      Binding.bg_QTextCursor_beginEditBlock_(self)
    end
    
    def join_previous_edit_block() : Void
      Binding.bg_QTextCursor_joinPreviousEditBlock_(self)
    end
    
    def end_edit_block() : Void
      Binding.bg_QTextCursor_endEditBlock_(self)
    end
    
    def !=(rhs : TextCursor) : Bool
      Binding.bg_QTextCursor__OPERATOR_ne_const_QTextCursor_R(self, rhs)
    end
    
    def <(rhs : TextCursor) : Bool
      Binding.bg_QTextCursor__OPERATOR_lt_const_QTextCursor_R(self, rhs)
    end
    
    def <=(rhs : TextCursor) : Bool
      Binding.bg_QTextCursor__OPERATOR_le_const_QTextCursor_R(self, rhs)
    end
    
    def ==(rhs : TextCursor) : Bool
      Binding.bg_QTextCursor__OPERATOR_eq_const_QTextCursor_R(self, rhs)
    end
    
    def >=(rhs : TextCursor) : Bool
      Binding.bg_QTextCursor__OPERATOR_ge_const_QTextCursor_R(self, rhs)
    end
    
    def >(rhs : TextCursor) : Bool
      Binding.bg_QTextCursor__OPERATOR_gt_const_QTextCursor_R(self, rhs)
    end
    
    def is_copy_of(other : TextCursor) : Bool
      Binding.bg_QTextCursor_isCopyOf_const_QTextCursor_R(self, other)
    end
    
    def block_number() : Int32
      Binding.bg_QTextCursor_blockNumber_(self)
    end
    
    def column_number() : Int32
      Binding.bg_QTextCursor_columnNumber_(self)
    end
    
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextCursor_document_(self))
    end
    
    enum MoveMode : UInt32
      MoveAnchor = 0
      KeepAnchor = 1
    end
    enum MoveOperation : UInt32
      NoMove = 0
      Start = 1
      Up = 2
      StartOfLine = 3
      StartOfBlock = 4
      StartOfWord = 5
      PreviousBlock = 6
      PreviousCharacter = 7
      PreviousWord = 8
      Left = 9
      WordLeft = 10
      End = 11
      Down = 12
      EndOfLine = 13
      EndOfWord = 14
      EndOfBlock = 15
      NextBlock = 16
      NextCharacter = 17
      NextWord = 18
      Right = 19
      WordRight = 20
      NextCell = 21
      PreviousCell = 22
      NextRow = 23
      PreviousRow = 24
    end
    enum SelectionType : UInt32
      WordUnderCursor = 0
      LineUnderCursor = 1
      BlockUnderCursor = 2
      Document = 3
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QTextCursor*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class TextDocument < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTextDocument_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTextDocument_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QTextDocument__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall clear create_object load_resource event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} Proc(Binding::QTextFormat*, Binding::QTextObject*).new{|f| self.create_object(TextFormat.new(unwrap: f)) } {% else %} nil {% end %}),
      bg_QTextDocument_loadResource_int_const_QUrl_R: BindgenHelper.wrap_proc({% if forwarded.includes?("load_resource") %} Proc(Int32, Binding::QUrl*, Binding::CrystalVariant).new{|type, name| (self.load_resource(type, Url.new(unwrap: name)).to_unsafe) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTextDocument_JUMPTABLE_BgJumptable_QTextDocument_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Object? = nil)
      result = Binding.bg_QTextDocument__CONSTRUCT_const_QString_R_QObject_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall clear create_object load_resource event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} Proc(Binding::QTextFormat*, Binding::QTextObject*).new{|f| self.create_object(TextFormat.new(unwrap: f)) } {% else %} nil {% end %}),
      bg_QTextDocument_loadResource_int_const_QUrl_R: BindgenHelper.wrap_proc({% if forwarded.includes?("load_resource") %} Proc(Int32, Binding::QUrl*, Binding::CrystalVariant).new{|type, name| (self.load_resource(type, Url.new(unwrap: name)).to_unsafe) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTextDocument_JUMPTABLE_BgJumptable_QTextDocument_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def clone(parent : Object? = nil) : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextDocument_clone_QObject_X(self, parent))
    end
    
    def empty?() : Bool
      Binding.bg_QTextDocument_isEmpty_(self)
    end
    
    def clear() : Void
      Binding.bg_QTextDocument_clear_(self)
    end
    
    def undo_redo_enabled=(enable : Bool) : Void
      Binding.bg_QTextDocument_setUndoRedoEnabled_bool(self, enable)
    end
    
    def undo_redo_enabled?() : Bool
      Binding.bg_QTextDocument_isUndoRedoEnabled_(self)
    end
    
    def undo_available?() : Bool
      Binding.bg_QTextDocument_isUndoAvailable_(self)
    end
    
    def redo_available?() : Bool
      Binding.bg_QTextDocument_isRedoAvailable_(self)
    end
    
    def available_undo_steps() : Int32
      Binding.bg_QTextDocument_availableUndoSteps_(self)
    end
    
    def available_redo_steps() : Int32
      Binding.bg_QTextDocument_availableRedoSteps_(self)
    end
    
    def revision() : Int32
      Binding.bg_QTextDocument_revision_(self)
    end
    
    def document_layout=(layout : Binding::QAbstractTextDocumentLayout*) : Void
      Binding.bg_QTextDocument_setDocumentLayout_QAbstractTextDocumentLayout_X(self, layout)
    end
    
    def document_layout() : Binding::QAbstractTextDocumentLayout*
      Binding.bg_QTextDocument_documentLayout_(self)
    end
    
    def set_meta_information(info : TextDocument::MetaInformation, unnamed_arg_1 : String) : Void
      Binding.bg_QTextDocument_setMetaInformation_QTextDocument__MetaInformation_const_QString_R(self, info, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    
    def meta_information(info : TextDocument::MetaInformation) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_metaInformation_QTextDocument__MetaInformation(self, info))
    end
    
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toHtml_(self))
    end
    
    def to_html(encoding : Binding::QByteArray*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toHtml_const_QByteArray_R(self, encoding))
    end
    
    def html=(html : String) : Void
      Binding.bg_QTextDocument_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    
    def to_markdown() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toMarkdown_(self))
    end
    
    def to_markdown(features : TextDocument::MarkdownFeatures) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toMarkdown_QTextDocument__MarkdownFeatures(self, features))
    end
    
    def markdown=(markdown : String) : Void
      Binding.bg_QTextDocument_setMarkdown_const_QString_R(self, Qt::Converter::QString.wrap(markdown))
    end
    
    def set_markdown(markdown : String, features : TextDocument::MarkdownFeatures) : Void
      Binding.bg_QTextDocument_setMarkdown_const_QString_R_QTextDocument__MarkdownFeatures(self, Qt::Converter::QString.wrap(markdown), features)
    end
    
    def to_raw_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toRawText_(self))
    end
    
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_toPlainText_(self))
    end
    
    def plain_text=(text : String) : Void
      Binding.bg_QTextDocument_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def character_at(pos : Int32) : Char
      (Binding.bg_QTextDocument_characterAt_int(self, pos).chr)
    end
    
    def find(sub_string : String, from : Int32 = 0) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_int(self, Qt::Converter::QString.wrap(sub_string), from))
    end
    
    def find(sub_string : String, from : Int32, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_int_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(sub_string), from, options))
    end
    
    def find(sub_string : String, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_const_QTextCursor_R(self, Qt::Converter::QString.wrap(sub_string), cursor))
    end
    
    def find(sub_string : String, cursor : TextCursor, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QString_R_const_QTextCursor_R_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(sub_string), cursor, options))
    end
    
    def find(expr : Binding::QRegExp*, from : Int32 = 0) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_int(self, expr, from))
    end
    
    def find(expr : Binding::QRegExp*, from : Int32, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_int_QTextDocument__FindFlags(self, expr, from, options))
    end
    
    def find(expr : Binding::QRegExp*, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R(self, expr, cursor))
    end
    
    def find(expr : Binding::QRegExp*, cursor : TextCursor, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegExp_R_const_QTextCursor_R_QTextDocument__FindFlags(self, expr, cursor, options))
    end
    
    def find(expr : Binding::QRegularExpression*, from : Int32 = 0) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_int(self, expr, from))
    end
    
    def find(expr : Binding::QRegularExpression*, from : Int32, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_int_QTextDocument__FindFlags(self, expr, from, options))
    end
    
    def find(expr : Binding::QRegularExpression*, cursor : TextCursor) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R(self, expr, cursor))
    end
    
    def find(expr : Binding::QRegularExpression*, cursor : TextCursor, options : TextDocument::FindFlags) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextDocument_find_const_QRegularExpression_R_const_QTextCursor_R_QTextDocument__FindFlags(self, expr, cursor, options))
    end
    
    def frame_at(pos : Int32) : Binding::QTextFrame*
      Binding.bg_QTextDocument_frameAt_int(self, pos)
    end
    
    def root_frame() : Binding::QTextFrame*
      Binding.bg_QTextDocument_rootFrame_(self)
    end
    
    def object(object_index : Int32) : Binding::QTextObject*
      Binding.bg_QTextDocument_object_int(self, object_index)
    end
    
    def object_for_format(unnamed_arg_0 : TextFormat) : Binding::QTextObject*
      Binding.bg_QTextDocument_objectForFormat_const_QTextFormat_R(self, unnamed_arg_0)
    end
    
    def find_block(pos : Int32) : Binding::QTextBlock*
      Binding.bg_QTextDocument_findBlock_int(self, pos)
    end
    
    def find_block_by_number(block_number : Int32) : Binding::QTextBlock*
      Binding.bg_QTextDocument_findBlockByNumber_int(self, block_number)
    end
    
    def find_block_by_line_number(block_number : Int32) : Binding::QTextBlock*
      Binding.bg_QTextDocument_findBlockByLineNumber_int(self, block_number)
    end
    
    def begin() : Binding::QTextBlock*
      Binding.bg_QTextDocument_begin_(self)
    end
    
    def end() : Binding::QTextBlock*
      Binding.bg_QTextDocument_end_(self)
    end
    
    def first_block() : Binding::QTextBlock*
      Binding.bg_QTextDocument_firstBlock_(self)
    end
    
    def last_block() : Binding::QTextBlock*
      Binding.bg_QTextDocument_lastBlock_(self)
    end
    
    def page_size=(size : Binding::QSizeF*) : Void
      Binding.bg_QTextDocument_setPageSize_const_QSizeF_R(self, size)
    end
    
    def page_size() : Binding::QSizeF*
      Binding.bg_QTextDocument_pageSize_(self)
    end
    
    def default_font=(font : Font) : Void
      Binding.bg_QTextDocument_setDefaultFont_const_QFont_R(self, font)
    end
    
    def default_font() : Font
      Font.new(unwrap: Binding.bg_QTextDocument_defaultFont_(self))
    end
    
    def page_count() : Int32
      Binding.bg_QTextDocument_pageCount_(self)
    end
    
    def modified?() : Bool
      Binding.bg_QTextDocument_isModified_(self)
    end
    
    def print(printer : Binding::QPagedPaintDevice*) : Void
      Binding.bg_QTextDocument_print_QPagedPaintDevice_X(self, printer)
    end
    
    def resource(type : Int32, name : Url) : Variant
      Qt::Variant.new(Binding.bg_QTextDocument_resource_int_const_QUrl_R(self, type, name))
    end
    
    def add_resource(type : Int32, name : Url, resource : Variant) : Void
      Binding.bg_QTextDocument_addResource_int_const_QUrl_R_const_QVariant_R(self, type, name, (resource.to_unsafe))
    end
    
    def all_formats() : Enumerable(TextFormat)
      Container_QVector_QTextFormat_.new(unwrap: Binding.bg_QTextDocument_allFormats_(self))
    end
    
    def mark_contents_dirty(from : Int32, length : Int32) : Void
      Binding.bg_QTextDocument_markContentsDirty_int_int(self, from, length)
    end
    
    def use_design_metrics=(b : Bool) : Void
      Binding.bg_QTextDocument_setUseDesignMetrics_bool(self, b)
    end
    
    def use_design_metrics() : Bool
      Binding.bg_QTextDocument_useDesignMetrics_(self)
    end
    
    def draw_contents(painter : Painter) : Void
      Binding.bg_QTextDocument_drawContents_QPainter_X(self, painter)
    end
    
    def draw_contents(painter : Painter, rect : RectF) : Void
      Binding.bg_QTextDocument_drawContents_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    
    def text_width=(width : Float64) : Void
      Binding.bg_QTextDocument_setTextWidth_qreal(self, width)
    end
    
    def text_width() : Float64
      Binding.bg_QTextDocument_textWidth_(self)
    end
    
    def ideal_width() : Float64
      Binding.bg_QTextDocument_idealWidth_(self)
    end
    
    def indent_width() : Float64
      Binding.bg_QTextDocument_indentWidth_(self)
    end
    
    def indent_width=(width : Float64) : Void
      Binding.bg_QTextDocument_setIndentWidth_qreal(self, width)
    end
    
    def document_margin() : Float64
      Binding.bg_QTextDocument_documentMargin_(self)
    end
    
    def document_margin=(margin : Float64) : Void
      Binding.bg_QTextDocument_setDocumentMargin_qreal(self, margin)
    end
    
    def adjust_size() : Void
      Binding.bg_QTextDocument_adjustSize_(self)
    end
    
    def size() : Binding::QSizeF*
      Binding.bg_QTextDocument_size_(self)
    end
    
    def block_count() : Int32
      Binding.bg_QTextDocument_blockCount_(self)
    end
    
    def line_count() : Int32
      Binding.bg_QTextDocument_lineCount_(self)
    end
    
    def character_count() : Int32
      Binding.bg_QTextDocument_characterCount_(self)
    end
    
    def default_style_sheet=(sheet : String) : Void
      Binding.bg_QTextDocument_setDefaultStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(sheet))
    end
    
    def default_style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextDocument_defaultStyleSheet_(self))
    end
    
    def undo(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_undo_QTextCursor_X(self, cursor)
    end
    
    def redo(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_redo_QTextCursor_X(self, cursor)
    end
    
    def clear_undo_redo_stacks(history_to_clear : TextDocument::Stacks = TextDocument::Stacks::UndoAndRedoStacks) : Void
      Binding.bg_QTextDocument_clearUndoRedoStacks_QTextDocument__Stacks(self, history_to_clear)
    end
    
    def maximum_block_count() : Int32
      Binding.bg_QTextDocument_maximumBlockCount_(self)
    end
    
    def maximum_block_count=(maximum : Int32) : Void
      Binding.bg_QTextDocument_setMaximumBlockCount_int(self, maximum)
    end
    
    def default_text_option() : TextOption
      TextOption.new(unwrap: Binding.bg_QTextDocument_defaultTextOption_(self))
    end
    
    def default_text_option=(option : TextOption) : Void
      Binding.bg_QTextDocument_setDefaultTextOption_const_QTextOption_R(self, option)
    end
    
    def base_url() : Url
      Url.new(unwrap: Binding.bg_QTextDocument_baseUrl_(self))
    end
    
    def base_url=(url : Url) : Void
      Binding.bg_QTextDocument_setBaseUrl_const_QUrl_R(self, url)
    end
    
    def default_cursor_move_style() : CursorMoveStyle
      Binding.bg_QTextDocument_defaultCursorMoveStyle_(self)
    end
    
    def default_cursor_move_style=(style : CursorMoveStyle) : Void
      Binding.bg_QTextDocument_setDefaultCursorMoveStyle_Qt__CursorMoveStyle(self, style)
    end
    
    def contents_change(from : Int32, chars_removed : Int32, chars_added : Int32) : Void
      Binding.bg_QTextDocument_contentsChange_int_int_int(self, from, chars_removed, chars_added)
    end
    
    def contents_changed() : Void
      Binding.bg_QTextDocument_contentsChanged_(self)
    end
    
    def undo_available(unnamed_arg_0 : Bool) : Void
      Binding.bg_QTextDocument_undoAvailable_bool(self, unnamed_arg_0)
    end
    
    def redo_available(unnamed_arg_0 : Bool) : Void
      Binding.bg_QTextDocument_redoAvailable_bool(self, unnamed_arg_0)
    end
    
    def undo_command_added() : Void
      Binding.bg_QTextDocument_undoCommandAdded_(self)
    end
    
    def modification_changed(m : Bool) : Void
      Binding.bg_QTextDocument_modificationChanged_bool(self, m)
    end
    
    def cursor_position_changed(cursor : TextCursor) : Void
      Binding.bg_QTextDocument_cursorPositionChanged_const_QTextCursor_R(self, cursor)
    end
    
    def block_count_changed(new_block_count : Int32) : Void
      Binding.bg_QTextDocument_blockCountChanged_int(self, new_block_count)
    end
    
    def base_url_changed(url : Url) : Void
      Binding.bg_QTextDocument_baseUrlChanged_const_QUrl_R(self, url)
    end
    
    def document_layout_changed() : Void
      Binding.bg_QTextDocument_documentLayoutChanged_(self)
    end
    
    def undo() : Void
      Binding.bg_QTextDocument_undo_(self)
    end
    
    def redo() : Void
      Binding.bg_QTextDocument_redo_(self)
    end
    
    def append_undo_item(unnamed_arg_0 : Binding::QAbstractUndoItem*) : Void
      Binding.bg_QTextDocument_appendUndoItem_QAbstractUndoItem_X(self, unnamed_arg_0)
    end
    
    def modified=(m : Bool = true) : Void
      Binding.bg_QTextDocument_setModified_bool(self, m)
    end
    
    protected def create_object(f : TextFormat) : Binding::QTextObject*
      Binding.bg_QTextDocument_createObject_const_QTextFormat_R(self, f)
    end
    
    protected def load_resource(type : Int32, name : Url) : Variant
      Qt::Variant.new(Binding.bg_QTextDocument_loadResource_int_const_QUrl_R(self, type, name))
    end
    
    protected def initialize(dd : Binding::QTextDocumentPrivate*, parent : Object)
      result = Binding.bg_QTextDocument__CONSTRUCT_QTextDocumentPrivate_R_QObject_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextDocument)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall clear create_object load_resource event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTextDocument.new(
      bg_QTextDocument_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextDocument_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextDocument_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QTextDocument_createObject_const_QTextFormat_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_object") %} Proc(Binding::QTextFormat*, Binding::QTextObject*).new{|f| self.create_object(TextFormat.new(unwrap: f)) } {% else %} nil {% end %}),
      bg_QTextDocument_loadResource_int_const_QUrl_R: BindgenHelper.wrap_proc({% if forwarded.includes?("load_resource") %} Proc(Int32, Binding::QUrl*, Binding::CrystalVariant).new{|type, name| (self.load_resource(type, Url.new(unwrap: name)).to_unsafe) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTextDocument_JUMPTABLE_BgJumptable_QTextDocument_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def doc_handle() : Binding::QTextDocumentPrivate*
      Binding.bg_QTextDocument_docHandle_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTextDocument_staticMetaObject_STATIC_GETTER_()
    end
    
    enum MetaInformation : UInt32
      DocumentTitle = 0
      DocumentUrl = 1
    end
    @[Flags]
    enum MarkdownFeatures : UInt32
      MarkdownNoHTML = 96
      MarkdownDialectCommonMark = 0
      MarkdownDialectGitHub = 3852
    end
    @[Flags]
    enum FindFlags : UInt32
      FindBackward = 1
      FindCaseSensitively = 2
      FindWholeWords = 4
    end
    enum Stacks : UInt32
      UndoStack = 1
      RedoStack = 2
      UndoAndRedoStacks = 3
    end
    def on_contents_change(&_proc_ : Proc(Int32, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_contentsChange_CrystalProc_void__int__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(arg0, arg1, arg2) end)))
    end
    
    def on_contents_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_contentsChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_undo_available(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_undoAvailable_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_redo_available(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_redoAvailable_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_undo_command_added(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_undoCommandAdded_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_modification_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_modificationChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_cursor_position_changed(&_proc_ : Proc(TextCursor, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_cursorPositionChanged_CrystalProc_void__const_QTextCursor_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QTextCursor*, Void).new do |arg0| _proc_.call(TextCursor.new(unwrap: arg0)) end)))
    end
    
    def on_block_count_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_blockCountChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_base_url_changed(&_proc_ : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_baseUrlChanged_CrystalProc_void__const_QUrl_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QUrl*, Void).new do |arg0| _proc_.call(Url.new(unwrap: arg0)) end)))
    end
    
    def on_document_layout_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextDocument_CONNECT_documentLayoutChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QTextDocument*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TextDocument)
      end
      def clear() : Void
        Binding.bg_QTextDocument_clear_SUPER_(@myself)
      end
      
      protected def create_object(f : TextFormat) : Binding::QTextObject*
        Binding.bg_QTextDocument_createObject_SUPER_const_QTextFormat_R(@myself, f)
      end
      
      protected def load_resource(type : Int32, name : Url) : Variant
        Qt::Variant.new(Binding.bg_QTextDocument_loadResource_SUPER_int_const_QUrl_R(@myself, type, name))
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Palette
    @unwrap : Binding::QPalette*
    
    def initialize()
      result = Binding.bg_QPalette__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(button : Color)
      result = Binding.bg_QPalette__CONSTRUCT_const_QColor_R(button)
    @unwrap = result
    end
    
    def initialize(button : GlobalColor)
      result = Binding.bg_QPalette__CONSTRUCT_Qt__GlobalColor(button)
    @unwrap = result
    end
    
    def initialize(button : Color, window : Color)
      result = Binding.bg_QPalette__CONSTRUCT_const_QColor_R_const_QColor_R(button, window)
    @unwrap = result
    end
    
    def initialize(window_text : Brush, button : Brush, light : Brush, dark : Brush, mid : Brush, text : Brush, bright_text : Brush, base : Brush, window : Brush)
      result = Binding.bg_QPalette__CONSTRUCT_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(window_text, button, light, dark, mid, text, bright_text, base, window)
    @unwrap = result
    end
    
    def initialize(window_text : Color, window : Color, light : Color, dark : Color, mid : Color, text : Color, base : Color)
      result = Binding.bg_QPalette__CONSTRUCT_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R_const_QColor_R(window_text, window, light, dark, mid, text, base)
    @unwrap = result
    end
    
    def swap(other : Palette) : Void
      Binding.bg_QPalette_swap_QPalette_R(self, other)
    end
    
    def current_color_group() : Palette::ColorGroup
      Binding.bg_QPalette_currentColorGroup_(self)
    end
    
    def current_color_group=(cg : Palette::ColorGroup) : Void
      Binding.bg_QPalette_setCurrentColorGroup_QPalette__ColorGroup(self, cg)
    end
    
    def color(cg : Palette::ColorGroup, cr : Palette::ColorRole) : Color
      Color.new(unwrap: Binding.bg_QPalette_color_QPalette__ColorGroup_QPalette__ColorRole(self, cg, cr))
    end
    
    def brush(cg : Palette::ColorGroup, cr : Palette::ColorRole) : Brush
      Brush.new(unwrap: Binding.bg_QPalette_brush_QPalette__ColorGroup_QPalette__ColorRole(self, cg, cr))
    end
    
    def set_color(cg : Palette::ColorGroup, cr : Palette::ColorRole, color : Color) : Void
      Binding.bg_QPalette_setColor_QPalette__ColorGroup_QPalette__ColorRole_const_QColor_R(self, cg, cr, color)
    end
    
    def set_color(cr : Palette::ColorRole, color : Color) : Void
      Binding.bg_QPalette_setColor_QPalette__ColorRole_const_QColor_R(self, cr, color)
    end
    
    def set_brush(cr : Palette::ColorRole, brush : Brush) : Void
      Binding.bg_QPalette_setBrush_QPalette__ColorRole_const_QBrush_R(self, cr, brush)
    end
    
    def is_brush_set(cg : Palette::ColorGroup, cr : Palette::ColorRole) : Bool
      Binding.bg_QPalette_isBrushSet_QPalette__ColorGroup_QPalette__ColorRole(self, cg, cr)
    end
    
    def set_brush(cg : Palette::ColorGroup, cr : Palette::ColorRole, brush : Brush) : Void
      Binding.bg_QPalette_setBrush_QPalette__ColorGroup_QPalette__ColorRole_const_QBrush_R(self, cg, cr, brush)
    end
    
    def set_color_group(cr : Palette::ColorGroup, window_text : Brush, button : Brush, light : Brush, dark : Brush, mid : Brush, text : Brush, bright_text : Brush, base : Brush, window : Brush) : Void
      Binding.bg_QPalette_setColorGroup_QPalette__ColorGroup_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R_const_QBrush_R(self, cr, window_text, button, light, dark, mid, text, bright_text, base, window)
    end
    
    def is_equal(cr1 : Palette::ColorGroup, cr2 : Palette::ColorGroup) : Bool
      Binding.bg_QPalette_isEqual_QPalette__ColorGroup_QPalette__ColorGroup(self, cr1, cr2)
    end
    
    def color(cr : Palette::ColorRole) : Color
      Color.new(unwrap: Binding.bg_QPalette_color_QPalette__ColorRole(self, cr))
    end
    
    def brush(cr : Palette::ColorRole) : Brush
      Brush.new(unwrap: Binding.bg_QPalette_brush_QPalette__ColorRole(self, cr))
    end
    
    def window_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_windowText_(self))
    end
    
    def button() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_button_(self))
    end
    
    def light() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_light_(self))
    end
    
    def dark() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_dark_(self))
    end
    
    def mid() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_mid_(self))
    end
    
    def text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_text_(self))
    end
    
    def base() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_base_(self))
    end
    
    def alternate_base() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_alternateBase_(self))
    end
    
    def tool_tip_base() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_toolTipBase_(self))
    end
    
    def tool_tip_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_toolTipText_(self))
    end
    
    def window() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_window_(self))
    end
    
    def midlight() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_midlight_(self))
    end
    
    def bright_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_brightText_(self))
    end
    
    def button_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_buttonText_(self))
    end
    
    def shadow() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_shadow_(self))
    end
    
    def highlight() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_highlight_(self))
    end
    
    def highlighted_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_highlightedText_(self))
    end
    
    def link() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_link_(self))
    end
    
    def link_visited() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_linkVisited_(self))
    end
    
    def placeholder_text() : Brush
      Brush.new(unwrap: Binding.bg_QPalette_placeholderText_(self))
    end
    
    def ==(p : Palette) : Bool
      Binding.bg_QPalette__OPERATOR_eq_const_QPalette_R(self, p)
    end
    
    def !=(p : Palette) : Bool
      Binding.bg_QPalette__OPERATOR_ne_const_QPalette_R(self, p)
    end
    
    def is_copy_of(p : Palette) : Bool
      Binding.bg_QPalette_isCopyOf_const_QPalette_R(self, p)
    end
    
    def cache_key() : Int64
      Binding.bg_QPalette_cacheKey_(self)
    end
    
    def resolve(unnamed_arg_0 : Palette) : Palette
      Palette.new(unwrap: Binding.bg_QPalette_resolve_const_QPalette_R(self, unnamed_arg_0))
    end
    
    def resolve() : UInt32
      Binding.bg_QPalette_resolve_(self)
    end
    
    def resolve(mask : UInt32) : Void
      Binding.bg_QPalette_resolve_uint(self, mask)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QPalette_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ColorGroup : UInt32
      Active = 0
      Disabled = 1
      Inactive = 2
      Ncolorgroups = 3
      Current = 4
      All = 5
      Normal = 0
    end
    enum ColorRole : UInt32
      WindowText = 0
      Button = 1
      Light = 2
      Midlight = 3
      Dark = 4
      Mid = 5
      Text = 6
      BrightText = 7
      ButtonText = 8
      Base = 9
      Window = 10
      Shadow = 11
      Highlight = 12
      HighlightedText = 13
      Link = 14
      LinkVisited = 15
      AlternateBase = 16
      NoRole = 17
      ToolTipBase = 18
      ToolTipText = 19
      PlaceholderText = 20
      Ncolorroles = 21
      Foreground = 0
      Background = 10
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QPalette*)
      result = unwrap
    @unwrap = result
    end
    
  end
  module QPalette
  end
  abstract class Surface
    @unwrap : Binding::QSurface*
    
    def surface_class() : Surface::SurfaceClass
      Binding.bg_QSurface_surfaceClass_(self)
    end
    
    abstract def format() : Binding::QSurfaceFormat*
    abstract def surface_handle() : Binding::QPlatformSurface*
    abstract def surface_type() : Surface::SurfaceType
    def supports_open_gl() : Bool
      Binding.bg_QSurface_supportsOpenGL_(self)
    end
    
    abstract def size() : Binding::QSize*
    protected def initialize(type : Surface::SurfaceClass)
      result = Binding.bg_QSurface__CONSTRUCT_QSurface__SurfaceClass(type)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Surface)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ format surface_handle surface_type size ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSurface.new(
      bg_QSurface_format_: BindgenHelper.wrap_proc({% if forwarded.includes?("format") %} Proc(Binding::QSurfaceFormat*).new{ self.format() } {% else %} nil {% end %}),
      bg_QSurface_surfaceHandle_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_handle") %} Proc(Binding::QPlatformSurface*).new{ self.surface_handle() } {% else %} nil {% end %}),
      bg_QSurface_surfaceType_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_type") %} Proc(Surface::SurfaceType).new{ self.surface_type().to_unsafe } {% else %} nil {% end %}),
      bg_QSurface_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Binding::QSize*).new{ self.size() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSurface_JUMPTABLE_BgJumptable_QSurface_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QSurface_staticMetaObject_STATIC_GETTER_()
    end
    
    enum SurfaceClass : UInt32
      Window = 0
      Offscreen = 1
    end
    enum SurfaceType : UInt32
      RasterSurface = 0
      OpenGLSurface = 1
      RasterGLSurface = 2
      OpenVGSurface = 3
      VulkanSurface = 4
      MetalSurface = 5
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QSurface*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Surface)
      end
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Icon
    @unwrap : Binding::QIcon*
    
    def initialize()
      result = Binding.bg_QIcon__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(pixmap : Pixmap)
      result = Binding.bg_QIcon__CONSTRUCT_const_QPixmap_R(pixmap)
    @unwrap = result
    end
    
    def initialize(file_name : String)
      result = Binding.bg_QIcon__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = result
    end
    
    def initialize(engine : Binding::QIconEngine*)
      result = Binding.bg_QIcon__CONSTRUCT_QIconEngine_X(engine)
    @unwrap = result
    end
    
    def swap(other : Icon) : Void
      Binding.bg_QIcon_swap_QIcon_R(self, other)
    end
    
    def pixmap(size : Binding::QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_const_QSize_R_QIcon__Mode_QIcon__State(self, size, mode, state))
    end
    
    def pixmap(w : Int32, h : Int32, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_int_int_QIcon__Mode_QIcon__State(self, w, h, mode, state))
    end
    
    def pixmap(extent : Int32, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_int_QIcon__Mode_QIcon__State(self, extent, mode, state))
    end
    
    def pixmap(window : Window, size : Binding::QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QIcon_pixmap_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(self, window, size, mode, state))
    end
    
    def actual_size(size : Binding::QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Binding::QSize*
      Binding.bg_QIcon_actualSize_const_QSize_R_QIcon__Mode_QIcon__State(self, size, mode, state)
    end
    
    def actual_size(window : Window, size : Binding::QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Binding::QSize*
      Binding.bg_QIcon_actualSize_QWindow_X_const_QSize_R_QIcon__Mode_QIcon__State(self, window, size, mode, state)
    end
    
    def name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIcon_name_(self))
    end
    
    def paint(painter : Painter, rect : Rect) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R(self, painter, rect)
    end
    
    def paint(painter : Painter, rect : Rect, alignment : Alignment) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment(self, painter, rect, alignment)
    end
    
    def paint(painter : Painter, rect : Rect, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode(self, painter, rect, alignment, mode)
    end
    
    def paint(painter : Painter, rect : Rect, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_paint_QPainter_X_const_QRect_R_Qt__Alignment_QIcon__Mode_QIcon__State(self, painter, rect, alignment, mode, state)
    end
    
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int(self, painter, x, y, w, h)
    end
    
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment(self, painter, x, y, w, h, alignment)
    end
    
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode(self, painter, x, y, w, h, alignment, mode)
    end
    
    def paint(painter : Painter, x : Int32, y : Int32, w : Int32, h : Int32, alignment : Alignment, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_paint_QPainter_X_int_int_int_int_Qt__Alignment_QIcon__Mode_QIcon__State(self, painter, x, y, w, h, alignment, mode, state)
    end
    
    def null?() : Bool
      Binding.bg_QIcon_isNull_(self)
    end
    
    def detached?() : Bool
      Binding.bg_QIcon_isDetached_(self)
    end
    
    def detach() : Void
      Binding.bg_QIcon_detach_(self)
    end
    
    def cache_key() : Int64
      Binding.bg_QIcon_cacheKey_(self)
    end
    
    def add_pixmap(pixmap : Pixmap, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_addPixmap_const_QPixmap_R_QIcon__Mode_QIcon__State(self, pixmap, mode, state)
    end
    
    def add_file(file_name : String) : Void
      Binding.bg_QIcon_addFile_const_QString_R(self, Qt::Converter::QString.wrap(file_name))
    end
    
    def add_file(file_name : String, size : Binding::QSize*) : Void
      Binding.bg_QIcon_addFile_const_QString_R_const_QSize_R(self, Qt::Converter::QString.wrap(file_name), size)
    end
    
    def add_file(file_name : String, size : Binding::QSize*, mode : Icon::Mode = Icon::Mode::Normal) : Void
      Binding.bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode(self, Qt::Converter::QString.wrap(file_name), size, mode)
    end
    
    def add_file(file_name : String, size : Binding::QSize*, mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Void
      Binding.bg_QIcon_addFile_const_QString_R_const_QSize_R_QIcon__Mode_QIcon__State(self, Qt::Converter::QString.wrap(file_name), size, mode, state)
    end
    
    def available_sizes(mode : Icon::Mode = Icon::Mode::Normal, state : Icon::State = Icon::State::Off) : Enumerable(Binding::QSize*)
      Container_QList_QSize_.new(unwrap: Binding.bg_QIcon_availableSizes_QIcon__Mode_QIcon__State(self, mode, state))
    end
    
    def is_mask=(is_mask : Bool) : Void
      Binding.bg_QIcon_setIsMask_bool(self, is_mask)
    end
    
    def mask?() : Bool
      Binding.bg_QIcon_isMask_(self)
    end
    
    def self.from_theme(name : String) : Icon
      Icon.new(unwrap: Binding.bg_QIcon_fromTheme_STATIC_const_QString_R(Qt::Converter::QString.wrap(name)))
    end
    
    def self.from_theme(name : String, fallback : Icon) : Icon
      Icon.new(unwrap: Binding.bg_QIcon_fromTheme_STATIC_const_QString_R_const_QIcon_R(Qt::Converter::QString.wrap(name), fallback))
    end
    
    def self.has_theme_icon(name : String) : Bool
      Binding.bg_QIcon_hasThemeIcon_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    
    def self.theme_search_paths() : Binding::QStringList*
      Binding.bg_QIcon_themeSearchPaths_STATIC_()
    end
    
    def self.theme_search_paths=(searchpath : Binding::QStringList*) : Void
      Binding.bg_QIcon_setThemeSearchPaths_STATIC_const_QStringList_R(searchpath)
    end
    
    def self.fallback_search_paths() : Binding::QStringList*
      Binding.bg_QIcon_fallbackSearchPaths_STATIC_()
    end
    
    def self.fallback_search_paths=(paths : Binding::QStringList*) : Void
      Binding.bg_QIcon_setFallbackSearchPaths_STATIC_const_QStringList_R(paths)
    end
    
    def self.theme_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIcon_themeName_STATIC_())
    end
    
    def self.theme_name=(path : String) : Void
      Binding.bg_QIcon_setThemeName_STATIC_const_QString_R(Qt::Converter::QString.wrap(path))
    end
    
    def self.fallback_theme_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QIcon_fallbackThemeName_STATIC_())
    end
    
    def self.fallback_theme_name=(name : String) : Void
      Binding.bg_QIcon_setFallbackThemeName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    
    enum Mode : UInt32
      Normal = 0
      Disabled = 1
      Active = 2
      Selected = 3
    end
    enum State : UInt32
      On = 0
      Off = 1
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QIcon*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Cursor
    @unwrap : Binding::QCursor*
    
    def initialize()
      result = Binding.bg_QCursor__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(shape : CursorShape)
      result = Binding.bg_QCursor__CONSTRUCT_Qt__CursorShape(shape)
    @unwrap = result
    end
    
    def initialize(bitmap : Bitmap, mask : Bitmap, hot_x : Int32 = -1, hot_y : Int32 = -1)
      result = Binding.bg_QCursor__CONSTRUCT_const_QBitmap_R_const_QBitmap_R_int_int(bitmap, mask, hot_x, hot_y)
    @unwrap = result
    end
    
    def initialize(pixmap : Pixmap, hot_x : Int32 = -1, hot_y : Int32 = -1)
      result = Binding.bg_QCursor__CONSTRUCT_const_QPixmap_R_int_int(pixmap, hot_x, hot_y)
    @unwrap = result
    end
    
    def swap(other : Cursor) : Void
      Binding.bg_QCursor_swap_QCursor_R(self, other)
    end
    
    def shape() : CursorShape
      Binding.bg_QCursor_shape_(self)
    end
    
    def shape=(new_shape : CursorShape) : Void
      Binding.bg_QCursor_setShape_Qt__CursorShape(self, new_shape)
    end
    
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QCursor_pixmap_(self))
    end
    
    def hot_spot() : Point
      Point.new(unwrap: Binding.bg_QCursor_hotSpot_(self))
    end
    
    def self.pos() : Point
      Point.new(unwrap: Binding.bg_QCursor_pos_STATIC_())
    end
    
    def self.pos(screen : Screen) : Point
      Point.new(unwrap: Binding.bg_QCursor_pos_STATIC_const_QScreen_X(screen))
    end
    
    def self.set_pos(x : Int32, y : Int32) : Void
      Binding.bg_QCursor_setPos_STATIC_int_int(x, y)
    end
    
    def self.set_pos(screen : Screen, x : Int32, y : Int32) : Void
      Binding.bg_QCursor_setPos_STATIC_QScreen_X_int_int(screen, x, y)
    end
    
    def self.pos=(p : Point) : Void
      Binding.bg_QCursor_setPos_STATIC_const_QPoint_R(p)
    end
    
    def self.set_pos(screen : Screen, p : Point) : Void
      Binding.bg_QCursor_setPos_STATIC_QScreen_X_const_QPoint_R(screen, p)
    end
    
    def ==(rhs : Cursor) : Bool
      Binding.bg_QCursor__OPERATOR_eq_const_QCursor_R(self, rhs)
    end
    
    def !=(rhs : Cursor) : Bool
      Binding.bg_QCursor__OPERATOR_ne_const_QCursor_R(self, rhs)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QCursor*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Window < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QWindow_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QWindow_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWindow_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWindow_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWindow_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(screen : Screen? = nil)
      result = Binding.bg_QWindow__CONSTRUCT_QScreen_X(screen)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Window)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall surface_type format size accessible_root focus_object expose_event resize_event move_event focus_in_event focus_out_event show_event hide_event event key_press_event key_release_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event touch_event tablet_event native_event event_filter timer_event child_event custom_event connect_notify disconnect_notify surface_handle ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWindow.new(
      bg_QWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWindow_surfaceType_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_type") %} Proc(Surface::SurfaceType).new{ self.surface_type().to_unsafe } {% else %} nil {% end %}),
      bg_QWindow_format_: BindgenHelper.wrap_proc({% if forwarded.includes?("format") %} Proc(Binding::QSurfaceFormat*).new{ self.format() } {% else %} nil {% end %}),
      bg_QWindow_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Binding::QSize*).new{ self.size() } {% else %} nil {% end %}),
      bg_QWindow_accessibleRoot_: BindgenHelper.wrap_proc({% if forwarded.includes?("accessible_root") %} Proc(Binding::QAccessibleInterface*).new{ self.accessible_root() } {% else %} nil {% end %}),
      bg_QWindow_focusObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_object") %} Proc(Binding::QObject*).new{ self.focus_object().to_unsafe } {% else %} nil {% end %}),
      bg_QWindow_exposeEvent_QExposeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("expose_event") %} Proc(Binding::QExposeEvent*, Void).new{|unnamed_arg_0| self.expose_event(ExposeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|unnamed_arg_0| self.move_event(MoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_release_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_touchEvent_QTouchEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("touch_event") %} Proc(Binding::QTouchEvent*, Void).new{|unnamed_arg_0| self.touch_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|unnamed_arg_0| self.tablet_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QSurface_surfaceHandle_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_handle") %} Proc(Binding::QPlatformSurface*).new{ self.surface_handle() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWindow_JUMPTABLE_BgJumptable_QWindow_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Window)
      result = Binding.bg_QWindow__CONSTRUCT_QWindow_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Window)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall surface_type format size accessible_root focus_object expose_event resize_event move_event focus_in_event focus_out_event show_event hide_event event key_press_event key_release_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event touch_event tablet_event native_event event_filter timer_event child_event custom_event connect_notify disconnect_notify surface_handle ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWindow.new(
      bg_QWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWindow_surfaceType_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_type") %} Proc(Surface::SurfaceType).new{ self.surface_type().to_unsafe } {% else %} nil {% end %}),
      bg_QWindow_format_: BindgenHelper.wrap_proc({% if forwarded.includes?("format") %} Proc(Binding::QSurfaceFormat*).new{ self.format() } {% else %} nil {% end %}),
      bg_QWindow_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Binding::QSize*).new{ self.size() } {% else %} nil {% end %}),
      bg_QWindow_accessibleRoot_: BindgenHelper.wrap_proc({% if forwarded.includes?("accessible_root") %} Proc(Binding::QAccessibleInterface*).new{ self.accessible_root() } {% else %} nil {% end %}),
      bg_QWindow_focusObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_object") %} Proc(Binding::QObject*).new{ self.focus_object().to_unsafe } {% else %} nil {% end %}),
      bg_QWindow_exposeEvent_QExposeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("expose_event") %} Proc(Binding::QExposeEvent*, Void).new{|unnamed_arg_0| self.expose_event(ExposeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|unnamed_arg_0| self.move_event(MoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_release_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_touchEvent_QTouchEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("touch_event") %} Proc(Binding::QTouchEvent*, Void).new{|unnamed_arg_0| self.touch_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|unnamed_arg_0| self.tablet_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QSurface_surfaceHandle_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_handle") %} Proc(Binding::QPlatformSurface*).new{ self.surface_handle() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWindow_JUMPTABLE_BgJumptable_QWindow_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def surface_type=(surface_type : Surface::SurfaceType) : Void
      Binding.bg_QWindow_setSurfaceType_QSurface__SurfaceType(self, surface_type)
    end
    
    def surface_type() : Surface::SurfaceType
      Binding.bg_QWindow_surfaceType_(self)
    end
    
    def visible?() : Bool
      Binding.bg_QWindow_isVisible_(self)
    end
    
    def visibility() : Window::Visibility
      Binding.bg_QWindow_visibility_(self)
    end
    
    def visibility=(v : Window::Visibility) : Void
      Binding.bg_QWindow_setVisibility_QWindow__Visibility(self, v)
    end
    
    def create() : Void
      Binding.bg_QWindow_create_(self)
    end
    
    def win_id() : UInt32
      Binding.bg_QWindow_winId_(self)
    end
    
    def parent(mode : Window::AncestorMode) : Window
      Window.new(unwrap: Binding.bg_QWindow_parent_QWindow__AncestorMode(self, mode))
    end
    
    def parent() : Window
      Window.new(unwrap: Binding.bg_QWindow_parent_(self))
    end
    
    def parent=(parent : Window) : Void
      Binding.bg_QWindow_setParent_QWindow_X(self, parent)
    end
    
    def top_level?() : Bool
      Binding.bg_QWindow_isTopLevel_(self)
    end
    
    def modal?() : Bool
      Binding.bg_QWindow_isModal_(self)
    end
    
    def modality() : WindowModality
      Binding.bg_QWindow_modality_(self)
    end
    
    def modality=(modality : WindowModality) : Void
      Binding.bg_QWindow_setModality_Qt__WindowModality(self, modality)
    end
    
    def format=(format : Binding::QSurfaceFormat*) : Void
      Binding.bg_QWindow_setFormat_const_QSurfaceFormat_R(self, format)
    end
    
    def format() : Binding::QSurfaceFormat*
      Binding.bg_QWindow_format_(self)
    end
    
    def requested_format() : Binding::QSurfaceFormat*
      Binding.bg_QWindow_requestedFormat_(self)
    end
    
    def flags=(flags : WindowFlags) : Void
      Binding.bg_QWindow_setFlags_Qt__WindowFlags(self, flags)
    end
    
    def flags() : WindowFlags
      Binding.bg_QWindow_flags_(self)
    end
    
    def set_flag(unnamed_arg_0 : WindowType, on : Bool = true) : Void
      Binding.bg_QWindow_setFlag_Qt__WindowType_bool(self, unnamed_arg_0, on)
    end
    
    def type() : WindowType
      Binding.bg_QWindow_type_(self)
    end
    
    def title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWindow_title_(self))
    end
    
    def opacity=(level : Float64) : Void
      Binding.bg_QWindow_setOpacity_qreal(self, level)
    end
    
    def opacity() : Float64
      Binding.bg_QWindow_opacity_(self)
    end
    
    def mask=(region : Binding::QRegion*) : Void
      Binding.bg_QWindow_setMask_const_QRegion_R(self, region)
    end
    
    def mask() : Binding::QRegion*
      Binding.bg_QWindow_mask_(self)
    end
    
    def active?() : Bool
      Binding.bg_QWindow_isActive_(self)
    end
    
    def report_content_orientation_change(orientation : ScreenOrientation) : Void
      Binding.bg_QWindow_reportContentOrientationChange_Qt__ScreenOrientation(self, orientation)
    end
    
    def content_orientation() : ScreenOrientation
      Binding.bg_QWindow_contentOrientation_(self)
    end
    
    def device_pixel_ratio() : Float64
      Binding.bg_QWindow_devicePixelRatio_(self)
    end
    
    def window_state() : WindowState
      Binding.bg_QWindow_windowState_(self)
    end
    
    def window_states() : WindowStates
      Binding.bg_QWindow_windowStates_(self)
    end
    
    def window_state=(state : WindowState) : Void
      Binding.bg_QWindow_setWindowState_Qt__WindowState(self, state)
    end
    
    def window_states=(states : WindowStates) : Void
      Binding.bg_QWindow_setWindowStates_Qt__WindowStates(self, states)
    end
    
    def transient_parent=(parent : Window) : Void
      Binding.bg_QWindow_setTransientParent_QWindow_X(self, parent)
    end
    
    def transient_parent() : Window
      Window.new(unwrap: Binding.bg_QWindow_transientParent_(self))
    end
    
    def is_ancestor_of(child : Window, mode : Window::AncestorMode = Window::AncestorMode::IncludeTransients) : Bool
      Binding.bg_QWindow_isAncestorOf_const_QWindow_X_QWindow__AncestorMode(self, child, mode)
    end
    
    def exposed?() : Bool
      Binding.bg_QWindow_isExposed_(self)
    end
    
    def minimum_width() : Int32
      Binding.bg_QWindow_minimumWidth_(self)
    end
    
    def minimum_height() : Int32
      Binding.bg_QWindow_minimumHeight_(self)
    end
    
    def maximum_width() : Int32
      Binding.bg_QWindow_maximumWidth_(self)
    end
    
    def maximum_height() : Int32
      Binding.bg_QWindow_maximumHeight_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QWindow_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QWindow_maximumSize_(self)
    end
    
    def base_size() : Binding::QSize*
      Binding.bg_QWindow_baseSize_(self)
    end
    
    def size_increment() : Binding::QSize*
      Binding.bg_QWindow_sizeIncrement_(self)
    end
    
    def minimum_size=(size : Binding::QSize*) : Void
      Binding.bg_QWindow_setMinimumSize_const_QSize_R(self, size)
    end
    
    def maximum_size=(size : Binding::QSize*) : Void
      Binding.bg_QWindow_setMaximumSize_const_QSize_R(self, size)
    end
    
    def base_size=(size : Binding::QSize*) : Void
      Binding.bg_QWindow_setBaseSize_const_QSize_R(self, size)
    end
    
    def size_increment=(size : Binding::QSize*) : Void
      Binding.bg_QWindow_setSizeIncrement_const_QSize_R(self, size)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWindow_geometry_(self))
    end
    
    def frame_margins() : Binding::QMargins*
      Binding.bg_QWindow_frameMargins_(self)
    end
    
    def frame_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWindow_frameGeometry_(self))
    end
    
    def frame_position() : Point
      Point.new(unwrap: Binding.bg_QWindow_framePosition_(self))
    end
    
    def frame_position=(point : Point) : Void
      Binding.bg_QWindow_setFramePosition_const_QPoint_R(self, point)
    end
    
    def width() : Int32
      Binding.bg_QWindow_width_(self)
    end
    
    def height() : Int32
      Binding.bg_QWindow_height_(self)
    end
    
    def x() : Int32
      Binding.bg_QWindow_x_(self)
    end
    
    def y() : Int32
      Binding.bg_QWindow_y_(self)
    end
    
    def size() : Binding::QSize*
      Binding.bg_QWindow_size_(self)
    end
    
    def position() : Point
      Point.new(unwrap: Binding.bg_QWindow_position_(self))
    end
    
    def position=(pt : Point) : Void
      Binding.bg_QWindow_setPosition_const_QPoint_R(self, pt)
    end
    
    def set_position(posx : Int32, posy : Int32) : Void
      Binding.bg_QWindow_setPosition_int_int(self, posx, posy)
    end
    
    def resize(new_size : Binding::QSize*) : Void
      Binding.bg_QWindow_resize_const_QSize_R(self, new_size)
    end
    
    def resize(w : Int32, h : Int32) : Void
      Binding.bg_QWindow_resize_int_int(self, w, h)
    end
    
    def file_path=(file_path : String) : Void
      Binding.bg_QWindow_setFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_path))
    end
    
    def file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWindow_filePath_(self))
    end
    
    def icon=(icon : Icon) : Void
      Binding.bg_QWindow_setIcon_const_QIcon_R(self, icon)
    end
    
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QWindow_icon_(self))
    end
    
    def destroy() : Void
      Binding.bg_QWindow_destroy_(self)
    end
    
    def handle() : Binding::QPlatformWindow*
      Binding.bg_QWindow_handle_(self)
    end
    
    def set_keyboard_grab_enabled(grab : Bool) : Bool
      Binding.bg_QWindow_setKeyboardGrabEnabled_bool(self, grab)
    end
    
    def set_mouse_grab_enabled(grab : Bool) : Bool
      Binding.bg_QWindow_setMouseGrabEnabled_bool(self, grab)
    end
    
    def screen() : Screen
      Screen.new(unwrap: Binding.bg_QWindow_screen_(self))
    end
    
    def screen=(screen : Screen) : Void
      Binding.bg_QWindow_setScreen_QScreen_X(self, screen)
    end
    
    def accessible_root() : Binding::QAccessibleInterface*
      Binding.bg_QWindow_accessibleRoot_(self)
    end
    
    def focus_object() : Object
      Object.new(unwrap: Binding.bg_QWindow_focusObject_(self))
    end
    
    def map_to_global(pos : Point) : Point
      Point.new(unwrap: Binding.bg_QWindow_mapToGlobal_const_QPoint_R(self, pos))
    end
    
    def map_from_global(pos : Point) : Point
      Point.new(unwrap: Binding.bg_QWindow_mapFromGlobal_const_QPoint_R(self, pos))
    end
    
    def cursor() : Cursor
      Cursor.new(unwrap: Binding.bg_QWindow_cursor_(self))
    end
    
    def cursor=(unnamed_arg_0 : Cursor) : Void
      Binding.bg_QWindow_setCursor_const_QCursor_R(self, unnamed_arg_0)
    end
    
    def unset_cursor() : Void
      Binding.bg_QWindow_unsetCursor_(self)
    end
    
    def self.from_win_id(id : UInt32) : Window
      Window.new(unwrap: Binding.bg_QWindow_fromWinId_STATIC_WId(id))
    end
    
    def request_activate() : Void
      Binding.bg_QWindow_requestActivate_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWindow_setVisible_bool(self, visible)
    end
    
    def show() : Void
      Binding.bg_QWindow_show_(self)
    end
    
    def hide() : Void
      Binding.bg_QWindow_hide_(self)
    end
    
    def show_minimized() : Void
      Binding.bg_QWindow_showMinimized_(self)
    end
    
    def show_maximized() : Void
      Binding.bg_QWindow_showMaximized_(self)
    end
    
    def show_full_screen() : Void
      Binding.bg_QWindow_showFullScreen_(self)
    end
    
    def show_normal() : Void
      Binding.bg_QWindow_showNormal_(self)
    end
    
    def close() : Bool
      Binding.bg_QWindow_close_(self)
    end
    
    def raise() : Void
      Binding.bg_QWindow_raise_(self)
    end
    
    def lower() : Void
      Binding.bg_QWindow_lower_(self)
    end
    
    def start_system_resize(edges : Edges) : Bool
      Binding.bg_QWindow_startSystemResize_Qt__Edges(self, edges)
    end
    
    def start_system_move() : Bool
      Binding.bg_QWindow_startSystemMove_(self)
    end
    
    def title=(unnamed_arg_0 : String) : Void
      Binding.bg_QWindow_setTitle_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def x=(arg : Int32) : Void
      Binding.bg_QWindow_setX_int(self, arg)
    end
    
    def y=(arg : Int32) : Void
      Binding.bg_QWindow_setY_int(self, arg)
    end
    
    def width=(arg : Int32) : Void
      Binding.bg_QWindow_setWidth_int(self, arg)
    end
    
    def height=(arg : Int32) : Void
      Binding.bg_QWindow_setHeight_int(self, arg)
    end
    
    def set_geometry(posx : Int32, posy : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWindow_setGeometry_int_int_int_int(self, posx, posy, w, h)
    end
    
    def geometry=(rect : Rect) : Void
      Binding.bg_QWindow_setGeometry_const_QRect_R(self, rect)
    end
    
    def minimum_width=(w : Int32) : Void
      Binding.bg_QWindow_setMinimumWidth_int(self, w)
    end
    
    def minimum_height=(h : Int32) : Void
      Binding.bg_QWindow_setMinimumHeight_int(self, h)
    end
    
    def maximum_width=(w : Int32) : Void
      Binding.bg_QWindow_setMaximumWidth_int(self, w)
    end
    
    def maximum_height=(h : Int32) : Void
      Binding.bg_QWindow_setMaximumHeight_int(self, h)
    end
    
    def alert(msec : Int32) : Void
      Binding.bg_QWindow_alert_int(self, msec)
    end
    
    def request_update() : Void
      Binding.bg_QWindow_requestUpdate_(self)
    end
    
    def screen_changed(screen : Screen) : Void
      Binding.bg_QWindow_screenChanged_QScreen_X(self, screen)
    end
    
    def modality_changed(modality : WindowModality) : Void
      Binding.bg_QWindow_modalityChanged_Qt__WindowModality(self, modality)
    end
    
    def window_state_changed(window_state : WindowState) : Void
      Binding.bg_QWindow_windowStateChanged_Qt__WindowState(self, window_state)
    end
    
    def window_title_changed(title : String) : Void
      Binding.bg_QWindow_windowTitleChanged_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    
    def x_changed(arg : Int32) : Void
      Binding.bg_QWindow_xChanged_int(self, arg)
    end
    
    def y_changed(arg : Int32) : Void
      Binding.bg_QWindow_yChanged_int(self, arg)
    end
    
    def width_changed(arg : Int32) : Void
      Binding.bg_QWindow_widthChanged_int(self, arg)
    end
    
    def height_changed(arg : Int32) : Void
      Binding.bg_QWindow_heightChanged_int(self, arg)
    end
    
    def minimum_width_changed(arg : Int32) : Void
      Binding.bg_QWindow_minimumWidthChanged_int(self, arg)
    end
    
    def minimum_height_changed(arg : Int32) : Void
      Binding.bg_QWindow_minimumHeightChanged_int(self, arg)
    end
    
    def maximum_width_changed(arg : Int32) : Void
      Binding.bg_QWindow_maximumWidthChanged_int(self, arg)
    end
    
    def maximum_height_changed(arg : Int32) : Void
      Binding.bg_QWindow_maximumHeightChanged_int(self, arg)
    end
    
    def visible_changed(arg : Bool) : Void
      Binding.bg_QWindow_visibleChanged_bool(self, arg)
    end
    
    def visibility_changed(visibility : Window::Visibility) : Void
      Binding.bg_QWindow_visibilityChanged_QWindow__Visibility(self, visibility)
    end
    
    def active_changed() : Void
      Binding.bg_QWindow_activeChanged_(self)
    end
    
    def content_orientation_changed(orientation : ScreenOrientation) : Void
      Binding.bg_QWindow_contentOrientationChanged_Qt__ScreenOrientation(self, orientation)
    end
    
    def focus_object_changed(object : Object) : Void
      Binding.bg_QWindow_focusObjectChanged_QObject_X(self, object)
    end
    
    def opacity_changed(opacity : Float64) : Void
      Binding.bg_QWindow_opacityChanged_qreal(self, opacity)
    end
    
    def transient_parent_changed(transient_parent : Window) : Void
      Binding.bg_QWindow_transientParentChanged_QWindow_X(self, transient_parent)
    end
    
    protected def expose_event(unnamed_arg_0 : ExposeEvent) : Void
      Binding.bg_QWindow_exposeEvent_QExposeEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QWindow_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def move_event(unnamed_arg_0 : MoveEvent) : Void
      Binding.bg_QWindow_moveEvent_QMoveEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QWindow_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QWindow_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QWindow_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QWindow_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QWindow_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QWindow_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_release_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QWindow_keyReleaseEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QWindow_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QWindow_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QWindow_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
      Binding.bg_QWindow_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    
    protected def touch_event(unnamed_arg_0 : Binding::QTouchEvent*) : Void
      Binding.bg_QWindow_touchEvent_QTouchEvent_X(self, unnamed_arg_0)
    end
    
    protected def tablet_event(unnamed_arg_0 : Binding::QTabletEvent*) : Void
      Binding.bg_QWindow_tabletEvent_QTabletEvent_X(self, unnamed_arg_0)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def initialize(dd : Binding::QWindowPrivate*, parent : Window)
      result = Binding.bg_QWindow__CONSTRUCT_QWindowPrivate_R_QWindow_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Window)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall surface_type format size accessible_root focus_object expose_event resize_event move_event focus_in_event focus_out_event show_event hide_event event key_press_event key_release_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event touch_event tablet_event native_event event_filter timer_event child_event custom_event connect_notify disconnect_notify surface_handle ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWindow.new(
      bg_QWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWindow_surfaceType_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_type") %} Proc(Surface::SurfaceType).new{ self.surface_type().to_unsafe } {% else %} nil {% end %}),
      bg_QWindow_format_: BindgenHelper.wrap_proc({% if forwarded.includes?("format") %} Proc(Binding::QSurfaceFormat*).new{ self.format() } {% else %} nil {% end %}),
      bg_QWindow_size_: BindgenHelper.wrap_proc({% if forwarded.includes?("size") %} Proc(Binding::QSize*).new{ self.size() } {% else %} nil {% end %}),
      bg_QWindow_accessibleRoot_: BindgenHelper.wrap_proc({% if forwarded.includes?("accessible_root") %} Proc(Binding::QAccessibleInterface*).new{ self.accessible_root() } {% else %} nil {% end %}),
      bg_QWindow_focusObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_object") %} Proc(Binding::QObject*).new{ self.focus_object().to_unsafe } {% else %} nil {% end %}),
      bg_QWindow_exposeEvent_QExposeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("expose_event") %} Proc(Binding::QExposeEvent*, Void).new{|unnamed_arg_0| self.expose_event(ExposeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|unnamed_arg_0| self.move_event(MoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_release_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWindow_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_touchEvent_QTouchEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("touch_event") %} Proc(Binding::QTouchEvent*, Void).new{|unnamed_arg_0| self.touch_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|unnamed_arg_0| self.tablet_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWindow_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QSurface_surfaceHandle_: BindgenHelper.wrap_proc({% if forwarded.includes?("surface_handle") %} Proc(Binding::QPlatformSurface*).new{ self.surface_handle() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWindow_JUMPTABLE_BgJumptable_QWindow_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def as_surface() : Surface
      SurfaceImpl.new(unwrap: Binding.bg_QWindow_AS_Surface_(self))
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def surface_handle() : Binding::QPlatformSurface*
      Binding.bg_QSurface_surfaceHandle_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QWindow_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Visibility : UInt32
      Hidden = 0
      AutomaticVisibility = 1
      Windowed = 2
      Minimized = 3
      Maximized = 4
      FullScreen = 5
    end
    enum AncestorMode : UInt32
      ExcludeTransients = 0
      IncludeTransients = 1
    end
    def on_screen_changed(&_proc_ : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_screenChanged_CrystalProc_void__QScreen_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QScreen*, Void).new do |arg0| _proc_.call(Screen.new(unwrap: arg0)) end)))
    end
    
    def on_modality_changed(&_proc_ : Proc(WindowModality, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_modalityChanged_CrystalProc_void__Qt__WindowModality_(self, BindgenHelper.wrap_proc(Proc(WindowModality, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_window_state_changed(&_proc_ : Proc(WindowState, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_windowStateChanged_CrystalProc_void__Qt__WindowState_(self, BindgenHelper.wrap_proc(Proc(WindowState, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_window_title_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_windowTitleChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_x_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_xChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_y_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_yChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_width_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_widthChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_height_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_heightChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_minimum_width_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_minimumWidthChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_minimum_height_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_minimumHeightChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_maximum_width_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_maximumWidthChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_maximum_height_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_maximumHeightChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_visible_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_visibleChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_visibility_changed(&_proc_ : Proc(Window::Visibility, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_visibilityChanged_CrystalProc_void__QWindow__Visibility_(self, BindgenHelper.wrap_proc(Proc(Window::Visibility, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_active_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_activeChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_content_orientation_changed(&_proc_ : Proc(ScreenOrientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_contentOrientationChanged_CrystalProc_void__Qt__ScreenOrientation_(self, BindgenHelper.wrap_proc(Proc(ScreenOrientation, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_focus_object_changed(&_proc_ : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_focusObjectChanged_CrystalProc_void__QObject_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QObject*, Void).new do |arg0| _proc_.call(Object.new(unwrap: arg0)) end)))
    end
    
    def on_opacity_changed(&_proc_ : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_opacityChanged_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(Proc(Float64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_transient_parent_changed(&_proc_ : Proc(Window, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWindow_CONNECT_transientParentChanged_CrystalProc_void__QWindow_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QWindow*, Void).new do |arg0| _proc_.call(Window.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QWindow*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Window)
      end
      def surface_type() : Surface::SurfaceType
        Binding.bg_QWindow_surfaceType_SUPER_(@myself)
      end
      
      def format() : Binding::QSurfaceFormat*
        Binding.bg_QWindow_format_SUPER_(@myself)
      end
      
      def size() : Binding::QSize*
        Binding.bg_QWindow_size_SUPER_(@myself)
      end
      
      def accessible_root() : Binding::QAccessibleInterface*
        Binding.bg_QWindow_accessibleRoot_SUPER_(@myself)
      end
      
      def focus_object() : Object
        Object.new(unwrap: Binding.bg_QWindow_focusObject_SUPER_(@myself))
      end
      
      protected def expose_event(unnamed_arg_0 : ExposeEvent) : Void
        Binding.bg_QWindow_exposeEvent_SUPER_QExposeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QWindow_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def move_event(unnamed_arg_0 : MoveEvent) : Void
        Binding.bg_QWindow_moveEvent_SUPER_QMoveEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QWindow_focusInEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QWindow_focusOutEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QWindow_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def hide_event(unnamed_arg_0 : HideEvent) : Void
        Binding.bg_QWindow_hideEvent_SUPER_QHideEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QWindow_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QWindow_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_release_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QWindow_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QWindow_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QWindow_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QWindow_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QWindow_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
        Binding.bg_QWindow_wheelEvent_SUPER_QWheelEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def touch_event(unnamed_arg_0 : Binding::QTouchEvent*) : Void
        Binding.bg_QWindow_touchEvent_SUPER_QTouchEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def tablet_event(unnamed_arg_0 : Binding::QTabletEvent*) : Void
        Binding.bg_QWindow_tabletEvent_SUPER_QTabletEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWindow_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Bitmap < Pixmap
    def initialize()
      result = Binding.bg_QBitmap__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Bitmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBitmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(unnamed_arg_0 : Pixmap)
      result = Binding.bg_QBitmap__CONSTRUCT_const_QPixmap_R(unnamed_arg_0)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Bitmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBitmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(w : Int32, h : Int32)
      result = Binding.bg_QBitmap__CONSTRUCT_int_int(w, h)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Bitmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBitmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(unnamed_arg_0 : Binding::QSize*)
      result = Binding.bg_QBitmap__CONSTRUCT_const_QSize_R(unnamed_arg_0)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Bitmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBitmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String)
      result = Binding.bg_QBitmap__CONSTRUCT_const_QString_R(Qt::Converter::QString.wrap(file_name))
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Bitmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBitmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(file_name : String, format : UInt8*)
      result = Binding.bg_QBitmap__CONSTRUCT_const_QString_R_const_char_X(Qt::Converter::QString.wrap(file_name), format)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Bitmap)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ dev_type paint_engine metric ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBitmap.new(
      bg_QPixmap_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QPixmap_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBitmap_JUMPTABLE_BgJumptable_QBitmap_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def swap(other : Bitmap) : Void
      Binding.bg_QBitmap_swap_QBitmap_R(self, other)
    end
    
    def clear() : Void
      Binding.bg_QBitmap_clear_(self)
    end
    
    def self.from_image(image : Image) : Bitmap
      Bitmap.new(unwrap: Binding.bg_QBitmap_fromImage_STATIC_const_QImage_R(image))
    end
    
    def self.from_image(image : Image, flags : ImageConversionFlags) : Bitmap
      Bitmap.new(unwrap: Binding.bg_QBitmap_fromImage_STATIC_const_QImage_R_Qt__ImageConversionFlags(image, flags))
    end
    
    def self.from_data(size : Binding::QSize*, bits : UInt8*, mono_format : Image::Format = Image::Format::MonoLSB) : Bitmap
      Bitmap.new(unwrap: Binding.bg_QBitmap_fromData_STATIC_const_QSize_R_const_uchar_X_QImage__Format(size, bits, mono_format))
    end
    
    def dev_type() : Int32
      Binding.bg_QPixmap_devType_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QPixmap_paintEngine_(self)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QPixmap_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    def initialize(unwrap : Binding::QBitmap*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Bitmap)
      end
      def dev_type() : Int32
        Binding.bg_QPixmap_devType_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QPixmap_paintEngine_SUPER_(@myself)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QPixmap_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class DesktopServices
    @unwrap : Binding::QDesktopServices*
    
    def self.open_url(url : Url) : Bool
      Binding.bg_QDesktopServices_openUrl_STATIC_const_QUrl_R(url)
    end
    
    def self.set_url_handler(scheme : String, receiver : Object, method : UInt8*) : Void
      Binding.bg_QDesktopServices_setUrlHandler_STATIC_const_QString_R_QObject_X_const_char_X(Qt::Converter::QString.wrap(scheme), receiver, method)
    end
    
    def self.unset_url_handler(scheme : String) : Void
      Binding.bg_QDesktopServices_unsetUrlHandler_STATIC_const_QString_R(Qt::Converter::QString.wrap(scheme))
    end
    
    def initialize()
      result = Binding.bg_QDesktopServices__CONSTRUCT_()
    @unwrap = result
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QDesktopServices*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Drag < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDrag_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDrag_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDrag_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDrag_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDrag_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(drag_source : Object)
      result = Binding.bg_QDrag__CONSTRUCT_QObject_X(drag_source)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Drag)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDrag.new(
      bg_QDrag_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDrag_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDrag_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDrag_JUMPTABLE_BgJumptable_QDrag_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def mime_data=(data : MimeData) : Void
      Binding.bg_QDrag_setMimeData_QMimeData_X(self, data)
    end
    
    def mime_data() : MimeData
      MimeData.new(unwrap: Binding.bg_QDrag_mimeData_(self))
    end
    
    def pixmap=(unnamed_arg_0 : Pixmap) : Void
      Binding.bg_QDrag_setPixmap_const_QPixmap_R(self, unnamed_arg_0)
    end
    
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QDrag_pixmap_(self))
    end
    
    def hot_spot=(hotspot : Point) : Void
      Binding.bg_QDrag_setHotSpot_const_QPoint_R(self, hotspot)
    end
    
    def hot_spot() : Point
      Point.new(unwrap: Binding.bg_QDrag_hotSpot_(self))
    end
    
    def source() : Object
      Object.new(unwrap: Binding.bg_QDrag_source_(self))
    end
    
    def target() : Object
      Object.new(unwrap: Binding.bg_QDrag_target_(self))
    end
    
    def exec() : DropAction
      Binding.bg_QDrag_exec_(self)
    end
    
    def exec(supported_actions : DropActions) : DropAction
      Binding.bg_QDrag_exec_Qt__DropActions(self, supported_actions)
    end
    
    def exec(supported_actions : DropActions, default_action : DropAction) : DropAction
      Binding.bg_QDrag_exec_Qt__DropActions_Qt__DropAction(self, supported_actions, default_action)
    end
    
    def set_drag_cursor(cursor : Pixmap, action : DropAction) : Void
      Binding.bg_QDrag_setDragCursor_const_QPixmap_R_Qt__DropAction(self, cursor, action)
    end
    
    def drag_cursor(action : DropAction) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QDrag_dragCursor_Qt__DropAction(self, action))
    end
    
    def supported_actions() : DropActions
      Binding.bg_QDrag_supportedActions_(self)
    end
    
    def default_action() : DropAction
      Binding.bg_QDrag_defaultAction_(self)
    end
    
    def self.cancel() : Void
      Binding.bg_QDrag_cancel_STATIC_()
    end
    
    def action_changed(action : DropAction) : Void
      Binding.bg_QDrag_actionChanged_Qt__DropAction(self, action)
    end
    
    def target_changed(new_target : Object) : Void
      Binding.bg_QDrag_targetChanged_QObject_X(self, new_target)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDrag_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_action_changed(&_proc_ : Proc(DropAction, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDrag_CONNECT_actionChanged_CrystalProc_void__Qt__DropAction_(self, BindgenHelper.wrap_proc(Proc(DropAction, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_target_changed(&_proc_ : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDrag_CONNECT_targetChanged_CrystalProc_void__QObject_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QObject*, Void).new do |arg0| _proc_.call(Object.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QDrag*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Drag)
      end
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class FontMetrics
    @unwrap : Binding::QFontMetrics*
    
    def initialize(unnamed_arg_0 : Font)
      result = Binding.bg_QFontMetrics__CONSTRUCT_const_QFont_R(unnamed_arg_0)
    @unwrap = result
    end
    
    def initialize(font : Font, pd : PaintDevice)
      result = Binding.bg_QFontMetrics__CONSTRUCT_const_QFont_R_QPaintDevice_X(font, pd)
    @unwrap = result
    end
    
    def swap(other : FontMetrics) : Void
      Binding.bg_QFontMetrics_swap_QFontMetrics_R(self, other)
    end
    
    def ascent() : Int32
      Binding.bg_QFontMetrics_ascent_(self)
    end
    
    def cap_height() : Int32
      Binding.bg_QFontMetrics_capHeight_(self)
    end
    
    def descent() : Int32
      Binding.bg_QFontMetrics_descent_(self)
    end
    
    def height() : Int32
      Binding.bg_QFontMetrics_height_(self)
    end
    
    def leading() : Int32
      Binding.bg_QFontMetrics_leading_(self)
    end
    
    def line_spacing() : Int32
      Binding.bg_QFontMetrics_lineSpacing_(self)
    end
    
    def min_left_bearing() : Int32
      Binding.bg_QFontMetrics_minLeftBearing_(self)
    end
    
    def min_right_bearing() : Int32
      Binding.bg_QFontMetrics_minRightBearing_(self)
    end
    
    def max_width() : Int32
      Binding.bg_QFontMetrics_maxWidth_(self)
    end
    
    def x_height() : Int32
      Binding.bg_QFontMetrics_xHeight_(self)
    end
    
    def average_char_width() : Int32
      Binding.bg_QFontMetrics_averageCharWidth_(self)
    end
    
    def in_font(unnamed_arg_0 : Char) : Bool
      Binding.bg_QFontMetrics_inFont_QChar(self, (unnamed_arg_0.ord))
    end
    
    def in_font_ucs4(ucs4 : UInt32) : Bool
      Binding.bg_QFontMetrics_inFontUcs4_uint(self, ucs4)
    end
    
    def left_bearing(unnamed_arg_0 : Char) : Int32
      Binding.bg_QFontMetrics_leftBearing_QChar(self, (unnamed_arg_0.ord))
    end
    
    def right_bearing(unnamed_arg_0 : Char) : Int32
      Binding.bg_QFontMetrics_rightBearing_QChar(self, (unnamed_arg_0.ord))
    end
    
    def horizontal_advance(unnamed_arg_0 : String, len : Int32 = -1) : Int32
      Binding.bg_QFontMetrics_horizontalAdvance_const_QString_R_int(self, Qt::Converter::QString.wrap(unnamed_arg_0), len)
    end
    
    def horizontal_advance(unnamed_arg_0 : Char) : Int32
      Binding.bg_QFontMetrics_horizontalAdvance_QChar(self, (unnamed_arg_0.ord))
    end
    
    def bounding_rect(unnamed_arg_0 : Char) : Rect
      Rect.new(unwrap: Binding.bg_QFontMetrics_boundingRect_QChar(self, (unnamed_arg_0.ord)))
    end
    
    def bounding_rect(text : String) : Rect
      Rect.new(unwrap: Binding.bg_QFontMetrics_boundingRect_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def bounding_rect(r : Rect, flags : Int32, text : String, tabstops : Int32 = 0, tabarray : Int32*? = nil) : Rect
      Rect.new(unwrap: Binding.bg_QFontMetrics_boundingRect_const_QRect_R_int_const_QString_R_int_int_X(self, r, flags, Qt::Converter::QString.wrap(text), tabstops, tabarray))
    end
    
    def bounding_rect(x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : String, tabstops : Int32 = 0, tabarray : Int32*? = nil) : Rect
      Rect.new(unwrap: Binding.bg_QFontMetrics_boundingRect_int_int_int_int_int_const_QString_R_int_int_X(self, x, y, w, h, flags, Qt::Converter::QString.wrap(text), tabstops, tabarray))
    end
    
    def size(flags : Int32, str : String, tabstops : Int32 = 0, tabarray : Int32*? = nil) : Binding::QSize*
      Binding.bg_QFontMetrics_size_int_const_QString_R_int_int_X(self, flags, Qt::Converter::QString.wrap(str), tabstops, tabarray)
    end
    
    def tight_bounding_rect(text : String) : Rect
      Rect.new(unwrap: Binding.bg_QFontMetrics_tightBoundingRect_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def elided_text(text : String, mode : TextElideMode, width : Int32, flags : Int32 = 0) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFontMetrics_elidedText_const_QString_R_Qt__TextElideMode_int_int(self, Qt::Converter::QString.wrap(text), mode, width, flags))
    end
    
    def underline_pos() : Int32
      Binding.bg_QFontMetrics_underlinePos_(self)
    end
    
    def overline_pos() : Int32
      Binding.bg_QFontMetrics_overlinePos_(self)
    end
    
    def strike_out_pos() : Int32
      Binding.bg_QFontMetrics_strikeOutPos_(self)
    end
    
    def line_width() : Int32
      Binding.bg_QFontMetrics_lineWidth_(self)
    end
    
    def font_dpi() : Float64
      Binding.bg_QFontMetrics_fontDpi_(self)
    end
    
    def ==(other : FontMetrics) : Bool
      Binding.bg_QFontMetrics__OPERATOR_eq_const_QFontMetrics_R(self, other)
    end
    
    def !=(other : FontMetrics) : Bool
      Binding.bg_QFontMetrics__OPERATOR_ne_const_QFontMetrics_R(self, other)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QFontMetrics*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class GuiApplication < CoreApplication
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGuiApplication_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGuiApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32 = 331520)
      result = Binding.bg_QGuiApplication__CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} Proc(Binding::QEvent*, Binding::QObject*, Binding::QPostEventList*, Bool).new{|unnamed_arg_0, receiver, unnamed_arg_2| self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGuiApplication_JUMPTABLE_BgJumptable_QGuiApplication_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.application_display_name=(name : String) : Void
      Binding.bg_QGuiApplication_setApplicationDisplayName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    
    def self.application_display_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_applicationDisplayName_STATIC_())
    end
    
    def self.desktop_file_name=(name : String) : Void
      Binding.bg_QGuiApplication_setDesktopFileName_STATIC_const_QString_R(Qt::Converter::QString.wrap(name))
    end
    
    def self.desktop_file_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_desktopFileName_STATIC_())
    end
    
    def self.all_windows() : Binding::QWindowList*
      Binding.bg_QGuiApplication_allWindows_STATIC_()
    end
    
    def self.top_level_windows() : Binding::QWindowList*
      Binding.bg_QGuiApplication_topLevelWindows_STATIC_()
    end
    
    def self.top_level_at(pos : Point) : Window
      Window.new(unwrap: Binding.bg_QGuiApplication_topLevelAt_STATIC_const_QPoint_R(pos))
    end
    
    def self.window_icon=(icon : Icon) : Void
      Binding.bg_QGuiApplication_setWindowIcon_STATIC_const_QIcon_R(icon)
    end
    
    def self.window_icon() : Icon
      Icon.new(unwrap: Binding.bg_QGuiApplication_windowIcon_STATIC_())
    end
    
    def self.platform_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_platformName_STATIC_())
    end
    
    def self.modal_window() : Window
      Window.new(unwrap: Binding.bg_QGuiApplication_modalWindow_STATIC_())
    end
    
    def self.focus_window() : Window
      Window.new(unwrap: Binding.bg_QGuiApplication_focusWindow_STATIC_())
    end
    
    def self.focus_object() : Object
      Object.new(unwrap: Binding.bg_QGuiApplication_focusObject_STATIC_())
    end
    
    def self.primary_screen() : Screen
      Screen.new(unwrap: Binding.bg_QGuiApplication_primaryScreen_STATIC_())
    end
    
    def self.screens() : Enumerable(Screen)
      Container_QList_QScreen_X_.new(unwrap: Binding.bg_QGuiApplication_screens_STATIC_())
    end
    
    def self.screen_at(point : Point) : Screen
      Screen.new(unwrap: Binding.bg_QGuiApplication_screenAt_STATIC_const_QPoint_R(point))
    end
    
    def device_pixel_ratio() : Float64
      Binding.bg_QGuiApplication_devicePixelRatio_(self)
    end
    
    def self.override_cursor() : Cursor
      Cursor.new(unwrap: Binding.bg_QGuiApplication_overrideCursor_STATIC_())
    end
    
    def self.override_cursor=(unnamed_arg_0 : Cursor) : Void
      Binding.bg_QGuiApplication_setOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0)
    end
    
    def self.change_override_cursor(unnamed_arg_0 : Cursor) : Void
      Binding.bg_QGuiApplication_changeOverrideCursor_STATIC_const_QCursor_R(unnamed_arg_0)
    end
    
    def self.restore_override_cursor() : Void
      Binding.bg_QGuiApplication_restoreOverrideCursor_STATIC_()
    end
    
    def self.font() : Font
      Font.new(unwrap: Binding.bg_QGuiApplication_font_STATIC_())
    end
    
    def self.font=(unnamed_arg_0 : Font) : Void
      Binding.bg_QGuiApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0)
    end
    
    def self.clipboard() : Binding::QClipboard*
      Binding.bg_QGuiApplication_clipboard_STATIC_()
    end
    
    def self.palette() : Palette
      Palette.new(unwrap: Binding.bg_QGuiApplication_palette_STATIC_())
    end
    
    def self.palette=(pal : Palette) : Void
      Binding.bg_QGuiApplication_setPalette_STATIC_const_QPalette_R(pal)
    end
    
    def self.keyboard_modifiers() : KeyboardModifiers
      Binding.bg_QGuiApplication_keyboardModifiers_STATIC_()
    end
    
    def self.query_keyboard_modifiers() : KeyboardModifiers
      Binding.bg_QGuiApplication_queryKeyboardModifiers_STATIC_()
    end
    
    def self.mouse_buttons() : MouseButtons
      Binding.bg_QGuiApplication_mouseButtons_STATIC_()
    end
    
    def self.layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QGuiApplication_setLayoutDirection_STATIC_Qt__LayoutDirection(direction)
    end
    
    def self.layout_direction() : LayoutDirection
      Binding.bg_QGuiApplication_layoutDirection_STATIC_()
    end
    
    def self.right_to_left?() : Bool
      Binding.bg_QGuiApplication_isRightToLeft_STATIC_()
    end
    
    def self.left_to_right?() : Bool
      Binding.bg_QGuiApplication_isLeftToRight_STATIC_()
    end
    
    def self.style_hints() : Binding::QStyleHints*
      Binding.bg_QGuiApplication_styleHints_STATIC_()
    end
    
    def self.desktop_settings_aware=(on : Bool) : Void
      Binding.bg_QGuiApplication_setDesktopSettingsAware_STATIC_bool(on)
    end
    
    def self.desktop_settings_aware() : Bool
      Binding.bg_QGuiApplication_desktopSettingsAware_STATIC_()
    end
    
    def self.input_method() : Binding::QInputMethod*
      Binding.bg_QGuiApplication_inputMethod_STATIC_()
    end
    
    def self.platform_native_interface() : Binding::QPlatformNativeInterface*
      Binding.bg_QGuiApplication_platformNativeInterface_STATIC_()
    end
    
    def self.quit_on_last_window_closed=(quit : Bool) : Void
      Binding.bg_QGuiApplication_setQuitOnLastWindowClosed_STATIC_bool(quit)
    end
    
    def self.quit_on_last_window_closed() : Bool
      Binding.bg_QGuiApplication_quitOnLastWindowClosed_STATIC_()
    end
    
    def self.application_state() : ApplicationState
      Binding.bg_QGuiApplication_applicationState_STATIC_()
    end
    
    def self.high_dpi_scale_factor_rounding_policy=(policy : HighDpiScaleFactorRoundingPolicy) : Void
      Binding.bg_QGuiApplication_setHighDpiScaleFactorRoundingPolicy_STATIC_Qt__HighDpiScaleFactorRoundingPolicy(policy)
    end
    
    def self.high_dpi_scale_factor_rounding_policy() : HighDpiScaleFactorRoundingPolicy
      Binding.bg_QGuiApplication_highDpiScaleFactorRoundingPolicy_STATIC_()
    end
    
    def self.exec() : Int32
      Binding.bg_QGuiApplication_exec_STATIC_()
    end
    
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QGuiApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def session_restored?() : Bool
      Binding.bg_QGuiApplication_isSessionRestored_(self)
    end
    
    def session_id() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_sessionId_(self))
    end
    
    def session_key() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGuiApplication_sessionKey_(self))
    end
    
    def saving_session?() : Bool
      Binding.bg_QGuiApplication_isSavingSession_(self)
    end
    
    def self.fallback_session_management_enabled?() : Bool
      Binding.bg_QGuiApplication_isFallbackSessionManagementEnabled_STATIC_()
    end
    
    def self.fallback_session_management_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QGuiApplication_setFallbackSessionManagementEnabled_STATIC_bool(unnamed_arg_0)
    end
    
    def self.sync() : Void
      Binding.bg_QGuiApplication_sync_STATIC_()
    end
    
    def font_database_changed() : Void
      Binding.bg_QGuiApplication_fontDatabaseChanged_(self)
    end
    
    def screen_added(screen : Screen) : Void
      Binding.bg_QGuiApplication_screenAdded_QScreen_X(self, screen)
    end
    
    def screen_removed(screen : Screen) : Void
      Binding.bg_QGuiApplication_screenRemoved_QScreen_X(self, screen)
    end
    
    def primary_screen_changed(screen : Screen) : Void
      Binding.bg_QGuiApplication_primaryScreenChanged_QScreen_X(self, screen)
    end
    
    def last_window_closed() : Void
      Binding.bg_QGuiApplication_lastWindowClosed_(self)
    end
    
    def focus_object_changed(focus_object : Object) : Void
      Binding.bg_QGuiApplication_focusObjectChanged_QObject_X(self, focus_object)
    end
    
    def focus_window_changed(focus_window : Window) : Void
      Binding.bg_QGuiApplication_focusWindowChanged_QWindow_X(self, focus_window)
    end
    
    def application_state_changed(state : ApplicationState) : Void
      Binding.bg_QGuiApplication_applicationStateChanged_Qt__ApplicationState(self, state)
    end
    
    def layout_direction_changed(direction : LayoutDirection) : Void
      Binding.bg_QGuiApplication_layoutDirectionChanged_Qt__LayoutDirection(self, direction)
    end
    
    def commit_data_request(session_manager : Binding::QSessionManager*) : Void
      Binding.bg_QGuiApplication_commitDataRequest_QSessionManager_R(self, session_manager)
    end
    
    def save_state_request(session_manager : Binding::QSessionManager*) : Void
      Binding.bg_QGuiApplication_saveStateRequest_QSessionManager_R(self, session_manager)
    end
    
    def palette_changed(pal : Palette) : Void
      Binding.bg_QGuiApplication_paletteChanged_const_QPalette_R(self, pal)
    end
    
    def application_display_name_changed() : Void
      Binding.bg_QGuiApplication_applicationDisplayNameChanged_(self)
    end
    
    def font_changed(font : Font) : Void
      Binding.bg_QGuiApplication_fontChanged_const_QFont_R(self, font)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QGuiApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : Binding::QPostEventList*) : Bool
      Binding.bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    
    protected def initialize(p : Binding::QGuiApplicationPrivate*)
      result = Binding.bg_QGuiApplication__CONSTRUCT_QGuiApplicationPrivate_R(p)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GuiApplication)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGuiApplication.new(
      bg_QGuiApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGuiApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGuiApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QGuiApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QGuiApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} Proc(Binding::QEvent*, Binding::QObject*, Binding::QPostEventList*, Bool).new{|unnamed_arg_0, receiver, unnamed_arg_2| self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGuiApplication_JUMPTABLE_BgJumptable_QGuiApplication_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGuiApplication_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_font_database_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_fontDatabaseChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_screen_added(&_proc_ : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_screenAdded_CrystalProc_void__QScreen_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QScreen*, Void).new do |arg0| _proc_.call(Screen.new(unwrap: arg0)) end)))
    end
    
    def on_screen_removed(&_proc_ : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_screenRemoved_CrystalProc_void__QScreen_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QScreen*, Void).new do |arg0| _proc_.call(Screen.new(unwrap: arg0)) end)))
    end
    
    def on_primary_screen_changed(&_proc_ : Proc(Screen, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_primaryScreenChanged_CrystalProc_void__QScreen_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QScreen*, Void).new do |arg0| _proc_.call(Screen.new(unwrap: arg0)) end)))
    end
    
    def on_last_window_closed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_lastWindowClosed_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_focus_object_changed(&_proc_ : Proc(Object, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_focusObjectChanged_CrystalProc_void__QObject_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QObject*, Void).new do |arg0| _proc_.call(Object.new(unwrap: arg0)) end)))
    end
    
    def on_focus_window_changed(&_proc_ : Proc(Window, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_focusWindowChanged_CrystalProc_void__QWindow_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QWindow*, Void).new do |arg0| _proc_.call(Window.new(unwrap: arg0)) end)))
    end
    
    def on_application_state_changed(&_proc_ : Proc(ApplicationState, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_applicationStateChanged_CrystalProc_void__Qt__ApplicationState_(self, BindgenHelper.wrap_proc(Proc(ApplicationState, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_layout_direction_changed(&_proc_ : Proc(LayoutDirection, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_layoutDirectionChanged_CrystalProc_void__Qt__LayoutDirection_(self, BindgenHelper.wrap_proc(Proc(LayoutDirection, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_commit_data_request(&_proc_ : Proc(Binding::QSessionManager, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_commitDataRequest_CrystalProc_void__QSessionManager_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSessionManager**, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_save_state_request(&_proc_ : Proc(Binding::QSessionManager, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_saveStateRequest_CrystalProc_void__QSessionManager_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSessionManager**, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_palette_changed(&_proc_ : Proc(Palette, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_paletteChanged_CrystalProc_void__const_QPalette_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QPalette*, Void).new do |arg0| _proc_.call(Palette.new(unwrap: arg0)) end)))
    end
    
    def on_application_display_name_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_applicationDisplayNameChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_font_changed(&_proc_ : Proc(Font, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGuiApplication_CONNECT_fontChanged_CrystalProc_void__const_QFont_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QFont*, Void).new do |arg0| _proc_.call(Font.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QGuiApplication*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GuiApplication)
      end
      def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QGuiApplication_notify_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QGuiApplication_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : Binding::QPostEventList*) : Bool
        Binding.bg_QGuiApplication_compressEvent_SUPER_QEvent_X_QObject_X_QPostEventList_X(@myself, unnamed_arg_0, receiver, unnamed_arg_2)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Painter
    @unwrap : Binding::QPainter*
    
    def initialize()
      result = Binding.bg_QPainter__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(unnamed_arg_0 : PaintDevice)
      result = Binding.bg_QPainter__CONSTRUCT_QPaintDevice_X(unnamed_arg_0)
    @unwrap = result
    end
    
    def device() : PaintDevice
      PaintDeviceImpl.new(unwrap: Binding.bg_QPainter_device_(self))
    end
    
    def begin(unnamed_arg_0 : PaintDevice) : Bool
      Binding.bg_QPainter_begin_QPaintDevice_X(self, unnamed_arg_0)
    end
    
    def end() : Bool
      Binding.bg_QPainter_end_(self)
    end
    
    def active?() : Bool
      Binding.bg_QPainter_isActive_(self)
    end
    
    def composition_mode=(mode : Painter::CompositionMode) : Void
      Binding.bg_QPainter_setCompositionMode_QPainter__CompositionMode(self, mode)
    end
    
    def composition_mode() : Painter::CompositionMode
      Binding.bg_QPainter_compositionMode_(self)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QPainter_font_(self))
    end
    
    def font=(f : Font) : Void
      Binding.bg_QPainter_setFont_const_QFont_R(self, f)
    end
    
    def font_metrics() : FontMetrics
      FontMetrics.new(unwrap: Binding.bg_QPainter_fontMetrics_(self))
    end
    
    def font_info() : Binding::QFontInfo*
      Binding.bg_QPainter_fontInfo_(self)
    end
    
    def pen=(color : Color) : Void
      Binding.bg_QPainter_setPen_const_QColor_R(self, color)
    end
    
    def pen=(pen : Binding::QPen*) : Void
      Binding.bg_QPainter_setPen_const_QPen_R(self, pen)
    end
    
    def pen=(style : PenStyle) : Void
      Binding.bg_QPainter_setPen_Qt__PenStyle(self, style)
    end
    
    def pen() : Binding::QPen*
      Binding.bg_QPainter_pen_(self)
    end
    
    def brush=(brush : Brush) : Void
      Binding.bg_QPainter_setBrush_const_QBrush_R(self, brush)
    end
    
    def brush=(style : BrushStyle) : Void
      Binding.bg_QPainter_setBrush_Qt__BrushStyle(self, style)
    end
    
    def brush() : Brush
      Brush.new(unwrap: Binding.bg_QPainter_brush_(self))
    end
    
    def background_mode=(mode : BgMode) : Void
      Binding.bg_QPainter_setBackgroundMode_Qt__BGMode(self, mode)
    end
    
    def background_mode() : BgMode
      Binding.bg_QPainter_backgroundMode_(self)
    end
    
    def brush_origin() : Point
      Point.new(unwrap: Binding.bg_QPainter_brushOrigin_(self))
    end
    
    def set_brush_origin(x : Int32, y : Int32) : Void
      Binding.bg_QPainter_setBrushOrigin_int_int(self, x, y)
    end
    
    def brush_origin=(unnamed_arg_0 : Point) : Void
      Binding.bg_QPainter_setBrushOrigin_const_QPoint_R(self, unnamed_arg_0)
    end
    
    def brush_origin=(unnamed_arg_0 : PointF) : Void
      Binding.bg_QPainter_setBrushOrigin_const_QPointF_R(self, unnamed_arg_0)
    end
    
    def background=(bg : Brush) : Void
      Binding.bg_QPainter_setBackground_const_QBrush_R(self, bg)
    end
    
    def background() : Brush
      Brush.new(unwrap: Binding.bg_QPainter_background_(self))
    end
    
    def opacity() : Float64
      Binding.bg_QPainter_opacity_(self)
    end
    
    def opacity=(opacity : Float64) : Void
      Binding.bg_QPainter_setOpacity_qreal(self, opacity)
    end
    
    def clip_region() : Binding::QRegion*
      Binding.bg_QPainter_clipRegion_(self)
    end
    
    def clip_path() : Binding::QPainterPath*
      Binding.bg_QPainter_clipPath_(self)
    end
    
    def set_clip_rect(unnamed_arg_0 : RectF, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRect_const_QRectF_R_Qt__ClipOperation(self, unnamed_arg_0, op)
    end
    
    def set_clip_rect(unnamed_arg_0 : Rect, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRect_const_QRect_R_Qt__ClipOperation(self, unnamed_arg_0, op)
    end
    
    def set_clip_rect(x : Int32, y : Int32, w : Int32, h : Int32, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRect_int_int_int_int_Qt__ClipOperation(self, x, y, w, h, op)
    end
    
    def set_clip_region(unnamed_arg_0 : Binding::QRegion*, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipRegion_const_QRegion_R_Qt__ClipOperation(self, unnamed_arg_0, op)
    end
    
    def set_clip_path(path : Binding::QPainterPath*, op : ClipOperation = ClipOperation::ReplaceClip) : Void
      Binding.bg_QPainter_setClipPath_const_QPainterPath_R_Qt__ClipOperation(self, path, op)
    end
    
    def clipping=(enable : Bool) : Void
      Binding.bg_QPainter_setClipping_bool(self, enable)
    end
    
    def has_clipping?() : Bool
      Binding.bg_QPainter_hasClipping_(self)
    end
    
    def clip_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QPainter_clipBoundingRect_(self))
    end
    
    def save() : Void
      Binding.bg_QPainter_save_(self)
    end
    
    def restore() : Void
      Binding.bg_QPainter_restore_(self)
    end
    
    def set_transform(transform : Binding::QTransform*, combine : Bool = false) : Void
      Binding.bg_QPainter_setTransform_const_QTransform_R_bool(self, transform, combine)
    end
    
    def transform() : Binding::QTransform*
      Binding.bg_QPainter_transform_(self)
    end
    
    def device_transform() : Binding::QTransform*
      Binding.bg_QPainter_deviceTransform_(self)
    end
    
    def reset_transform() : Void
      Binding.bg_QPainter_resetTransform_(self)
    end
    
    def set_world_transform(matrix : Binding::QTransform*, combine : Bool = false) : Void
      Binding.bg_QPainter_setWorldTransform_const_QTransform_R_bool(self, matrix, combine)
    end
    
    def world_transform() : Binding::QTransform*
      Binding.bg_QPainter_worldTransform_(self)
    end
    
    def combined_transform() : Binding::QTransform*
      Binding.bg_QPainter_combinedTransform_(self)
    end
    
    def world_matrix_enabled=(enabled : Bool) : Void
      Binding.bg_QPainter_setWorldMatrixEnabled_bool(self, enabled)
    end
    
    def world_matrix_enabled() : Bool
      Binding.bg_QPainter_worldMatrixEnabled_(self)
    end
    
    def scale(sx : Float64, sy : Float64) : Void
      Binding.bg_QPainter_scale_qreal_qreal(self, sx, sy)
    end
    
    def shear(sh : Float64, sv : Float64) : Void
      Binding.bg_QPainter_shear_qreal_qreal(self, sh, sv)
    end
    
    def rotate(a : Float64) : Void
      Binding.bg_QPainter_rotate_qreal(self, a)
    end
    
    def translate(offset : PointF) : Void
      Binding.bg_QPainter_translate_const_QPointF_R(self, offset)
    end
    
    def translate(offset : Point) : Void
      Binding.bg_QPainter_translate_const_QPoint_R(self, offset)
    end
    
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QPainter_translate_qreal_qreal(self, dx, dy)
    end
    
    def window() : Rect
      Rect.new(unwrap: Binding.bg_QPainter_window_(self))
    end
    
    def window=(window : Rect) : Void
      Binding.bg_QPainter_setWindow_const_QRect_R(self, window)
    end
    
    def set_window(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_setWindow_int_int_int_int(self, x, y, w, h)
    end
    
    def viewport() : Rect
      Rect.new(unwrap: Binding.bg_QPainter_viewport_(self))
    end
    
    def viewport=(viewport : Rect) : Void
      Binding.bg_QPainter_setViewport_const_QRect_R(self, viewport)
    end
    
    def set_viewport(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_setViewport_int_int_int_int(self, x, y, w, h)
    end
    
    def view_transform_enabled=(enable : Bool) : Void
      Binding.bg_QPainter_setViewTransformEnabled_bool(self, enable)
    end
    
    def view_transform_enabled() : Bool
      Binding.bg_QPainter_viewTransformEnabled_(self)
    end
    
    def stroke_path(path : Binding::QPainterPath*, pen : Binding::QPen*) : Void
      Binding.bg_QPainter_strokePath_const_QPainterPath_R_const_QPen_R(self, path, pen)
    end
    
    def fill_path(path : Binding::QPainterPath*, brush : Brush) : Void
      Binding.bg_QPainter_fillPath_const_QPainterPath_R_const_QBrush_R(self, path, brush)
    end
    
    def draw_path(path : Binding::QPainterPath*) : Void
      Binding.bg_QPainter_drawPath_const_QPainterPath_R(self, path)
    end
    
    def draw_point(pt : PointF) : Void
      Binding.bg_QPainter_drawPoint_const_QPointF_R(self, pt)
    end
    
    def draw_point(p : Point) : Void
      Binding.bg_QPainter_drawPoint_const_QPoint_R(self, p)
    end
    
    def draw_point(x : Int32, y : Int32) : Void
      Binding.bg_QPainter_drawPoint_int_int(self, x, y)
    end
    
    def draw_points(points : Binding::QPolygonF*) : Void
      Binding.bg_QPainter_drawPoints_const_QPolygonF_R(self, points)
    end
    
    def draw_points(points : Binding::QPolygon*) : Void
      Binding.bg_QPainter_drawPoints_const_QPolygon_R(self, points)
    end
    
    def draw_line(line : QLineF) : Void
      Binding.bg_QPainter_drawLine_const_QLineF_R(self, line)
    end
    
    def draw_line(line : QLine) : Void
      Binding.bg_QPainter_drawLine_const_QLine_R(self, line)
    end
    
    def draw_line(x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Void
      Binding.bg_QPainter_drawLine_int_int_int_int(self, x1, y1, x2, y2)
    end
    
    def draw_line(p1 : Point, p2 : Point) : Void
      Binding.bg_QPainter_drawLine_const_QPoint_R_const_QPoint_R(self, p1, p2)
    end
    
    def draw_line(p1 : PointF, p2 : PointF) : Void
      Binding.bg_QPainter_drawLine_const_QPointF_R_const_QPointF_R(self, p1, p2)
    end
    
    def draw_lines(lines : QLineF, line_count : Int32) : Void
      Binding.bg_QPainter_drawLines_const_QLineF_X_int(self, lines, line_count)
    end
    
    def draw_lines(lines : Enumerable(QLineF)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QLineF__R(self, BindgenHelper.wrap_container(Container_QVector_QLineF_, lines).to_unsafe)
    end
    
    def draw_lines(point_pairs : Enumerable(PointF)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QPointF__R(self, BindgenHelper.wrap_container(Container_QVector_QPointF_, point_pairs).to_unsafe)
    end
    
    def draw_lines(lines : QLine, line_count : Int32) : Void
      Binding.bg_QPainter_drawLines_const_QLine_X_int(self, lines, line_count)
    end
    
    def draw_lines(lines : Enumerable(QLine)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QLine__R(self, BindgenHelper.wrap_container(Container_QVector_QLine_, lines).to_unsafe)
    end
    
    def draw_lines(point_pairs : Enumerable(Point)) : Void
      Binding.bg_QPainter_drawLines_const_QVector_QPoint__R(self, BindgenHelper.wrap_container(Container_QVector_QPoint_, point_pairs).to_unsafe)
    end
    
    def draw_rect(rect : RectF) : Void
      Binding.bg_QPainter_drawRect_const_QRectF_R(self, rect)
    end
    
    def draw_rect(x1 : Int32, y1 : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_drawRect_int_int_int_int(self, x1, y1, w, h)
    end
    
    def draw_rect(rect : Rect) : Void
      Binding.bg_QPainter_drawRect_const_QRect_R(self, rect)
    end
    
    def draw_rects(rects : RectF, rect_count : Int32) : Void
      Binding.bg_QPainter_drawRects_const_QRectF_X_int(self, rects, rect_count)
    end
    
    def draw_rects(rectangles : Enumerable(RectF)) : Void
      Binding.bg_QPainter_drawRects_const_QVector_QRectF__R(self, BindgenHelper.wrap_container(Container_QVector_QRectF_, rectangles).to_unsafe)
    end
    
    def draw_rects(rects : Rect, rect_count : Int32) : Void
      Binding.bg_QPainter_drawRects_const_QRect_X_int(self, rects, rect_count)
    end
    
    def draw_rects(rectangles : Enumerable(Rect)) : Void
      Binding.bg_QPainter_drawRects_const_QVector_QRect__R(self, BindgenHelper.wrap_container(Container_QVector_QRect_, rectangles).to_unsafe)
    end
    
    def draw_ellipse(r : RectF) : Void
      Binding.bg_QPainter_drawEllipse_const_QRectF_R(self, r)
    end
    
    def draw_ellipse(r : Rect) : Void
      Binding.bg_QPainter_drawEllipse_const_QRect_R(self, r)
    end
    
    def draw_ellipse(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_drawEllipse_int_int_int_int(self, x, y, w, h)
    end
    
    def draw_ellipse(center : PointF, rx : Float64, ry : Float64) : Void
      Binding.bg_QPainter_drawEllipse_const_QPointF_R_qreal_qreal(self, center, rx, ry)
    end
    
    def draw_ellipse(center : Point, rx : Int32, ry : Int32) : Void
      Binding.bg_QPainter_drawEllipse_const_QPoint_R_int_int(self, center, rx, ry)
    end
    
    def draw_polyline(polyline : Binding::QPolygonF*) : Void
      Binding.bg_QPainter_drawPolyline_const_QPolygonF_R(self, polyline)
    end
    
    def draw_polyline(polygon : Binding::QPolygon*) : Void
      Binding.bg_QPainter_drawPolyline_const_QPolygon_R(self, polygon)
    end
    
    def draw_polygon(polygon : Binding::QPolygonF*, fill_rule : FillRule = FillRule::OddEvenFill) : Void
      Binding.bg_QPainter_drawPolygon_const_QPolygonF_R_Qt__FillRule(self, polygon, fill_rule)
    end
    
    def draw_polygon(polygon : Binding::QPolygon*, fill_rule : FillRule = FillRule::OddEvenFill) : Void
      Binding.bg_QPainter_drawPolygon_const_QPolygon_R_Qt__FillRule(self, polygon, fill_rule)
    end
    
    def draw_convex_polygon(polygon : Binding::QPolygonF*) : Void
      Binding.bg_QPainter_drawConvexPolygon_const_QPolygonF_R(self, polygon)
    end
    
    def draw_convex_polygon(polygon : Binding::QPolygon*) : Void
      Binding.bg_QPainter_drawConvexPolygon_const_QPolygon_R(self, polygon)
    end
    
    def draw_arc(rect : RectF, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawArc_const_QRectF_R_int_int(self, rect, a, alen)
    end
    
    def draw_arc(unnamed_arg_0 : Rect, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawArc_const_QRect_R_int_int(self, unnamed_arg_0, a, alen)
    end
    
    def draw_arc(x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawArc_int_int_int_int_int_int(self, x, y, w, h, a, alen)
    end
    
    def draw_pie(rect : RectF, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawPie_const_QRectF_R_int_int(self, rect, a, alen)
    end
    
    def draw_pie(x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawPie_int_int_int_int_int_int(self, x, y, w, h, a, alen)
    end
    
    def draw_pie(unnamed_arg_0 : Rect, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawPie_const_QRect_R_int_int(self, unnamed_arg_0, a, alen)
    end
    
    def draw_chord(rect : RectF, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawChord_const_QRectF_R_int_int(self, rect, a, alen)
    end
    
    def draw_chord(x : Int32, y : Int32, w : Int32, h : Int32, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawChord_int_int_int_int_int_int(self, x, y, w, h, a, alen)
    end
    
    def draw_chord(unnamed_arg_0 : Rect, a : Int32, alen : Int32) : Void
      Binding.bg_QPainter_drawChord_const_QRect_R_int_int(self, unnamed_arg_0, a, alen)
    end
    
    def draw_rounded_rect(rect : RectF, x_radius : Float64, y_radius : Float64, mode : SizeMode = SizeMode::AbsoluteSize) : Void
      Binding.bg_QPainter_drawRoundedRect_const_QRectF_R_qreal_qreal_Qt__SizeMode(self, rect, x_radius, y_radius, mode)
    end
    
    def draw_rounded_rect(x : Int32, y : Int32, w : Int32, h : Int32, x_radius : Float64, y_radius : Float64, mode : SizeMode = SizeMode::AbsoluteSize) : Void
      Binding.bg_QPainter_drawRoundedRect_int_int_int_int_qreal_qreal_Qt__SizeMode(self, x, y, w, h, x_radius, y_radius, mode)
    end
    
    def draw_rounded_rect(rect : Rect, x_radius : Float64, y_radius : Float64, mode : SizeMode = SizeMode::AbsoluteSize) : Void
      Binding.bg_QPainter_drawRoundedRect_const_QRect_R_qreal_qreal_Qt__SizeMode(self, rect, x_radius, y_radius, mode)
    end
    
    def draw_tiled_pixmap(rect : RectF, pm : Pixmap) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R(self, rect, pm)
    end
    
    def draw_tiled_pixmap(rect : RectF, pm : Pixmap, offset : PointF) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRectF_R_const_QPixmap_R_const_QPointF_R(self, rect, pm, offset)
    end
    
    def draw_tiled_pixmap(x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : Pixmap, sx : Int32 = 0, sy : Int32 = 0) : Void
      Binding.bg_QPainter_drawTiledPixmap_int_int_int_int_const_QPixmap_R_int_int(self, x, y, w, h, unnamed_arg_4, sx, sy)
    end
    
    def draw_tiled_pixmap(unnamed_arg_0 : Rect, unnamed_arg_1 : Pixmap) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def draw_tiled_pixmap(unnamed_arg_0 : Rect, unnamed_arg_1 : Pixmap, unnamed_arg_2 : Point) : Void
      Binding.bg_QPainter_drawTiledPixmap_const_QRect_R_const_QPixmap_R_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def draw_picture(p : PointF, picture : Binding::QPicture*) : Void
      Binding.bg_QPainter_drawPicture_const_QPointF_R_const_QPicture_R(self, p, picture)
    end
    
    def draw_picture(x : Int32, y : Int32, picture : Binding::QPicture*) : Void
      Binding.bg_QPainter_drawPicture_int_int_const_QPicture_R(self, x, y, picture)
    end
    
    def draw_picture(p : Point, picture : Binding::QPicture*) : Void
      Binding.bg_QPainter_drawPicture_const_QPoint_R_const_QPicture_R(self, p, picture)
    end
    
    def draw_pixmap(target_rect : RectF, pixmap : Pixmap, source_rect : RectF) : Void
      Binding.bg_QPainter_drawPixmap_const_QRectF_R_const_QPixmap_R_const_QRectF_R(self, target_rect, pixmap, source_rect)
    end
    
    def draw_pixmap(target_rect : Rect, pixmap : Pixmap, source_rect : Rect) : Void
      Binding.bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R_const_QRect_R(self, target_rect, pixmap, source_rect)
    end
    
    def draw_pixmap(x : Int32, y : Int32, w : Int32, h : Int32, pm : Pixmap, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
      Binding.bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R_int_int_int_int(self, x, y, w, h, pm, sx, sy, sw, sh)
    end
    
    def draw_pixmap(x : Int32, y : Int32, pm : Pixmap, sx : Int32, sy : Int32, sw : Int32, sh : Int32) : Void
      Binding.bg_QPainter_drawPixmap_int_int_const_QPixmap_R_int_int_int_int(self, x, y, pm, sx, sy, sw, sh)
    end
    
    def draw_pixmap(p : PointF, pm : Pixmap, sr : RectF) : Void
      Binding.bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R_const_QRectF_R(self, p, pm, sr)
    end
    
    def draw_pixmap(p : Point, pm : Pixmap, sr : Rect) : Void
      Binding.bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R_const_QRect_R(self, p, pm, sr)
    end
    
    def draw_pixmap(p : PointF, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_const_QPointF_R_const_QPixmap_R(self, p, pm)
    end
    
    def draw_pixmap(p : Point, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_const_QPoint_R_const_QPixmap_R(self, p, pm)
    end
    
    def draw_pixmap(x : Int32, y : Int32, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_int_int_const_QPixmap_R(self, x, y, pm)
    end
    
    def draw_pixmap(r : Rect, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_const_QRect_R_const_QPixmap_R(self, r, pm)
    end
    
    def draw_pixmap(x : Int32, y : Int32, w : Int32, h : Int32, pm : Pixmap) : Void
      Binding.bg_QPainter_drawPixmap_int_int_int_int_const_QPixmap_R(self, x, y, w, h, pm)
    end
    
    def draw_image(target_rect : RectF, image : Image, source_rect : RectF) : Void
      Binding.bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R(self, target_rect, image, source_rect)
    end
    
    def draw_image(target_rect : RectF, image : Image, source_rect : RectF, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QRectF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(self, target_rect, image, source_rect, flags)
    end
    
    def draw_image(target_rect : Rect, image : Image, source_rect : Rect) : Void
      Binding.bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R(self, target_rect, image, source_rect)
    end
    
    def draw_image(target_rect : Rect, image : Image, source_rect : Rect, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QRect_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(self, target_rect, image, source_rect, flags)
    end
    
    def draw_image(p : PointF, image : Image, sr : RectF) : Void
      Binding.bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R(self, p, image, sr)
    end
    
    def draw_image(p : PointF, image : Image, sr : RectF, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QPointF_R_const_QImage_R_const_QRectF_R_Qt__ImageConversionFlags(self, p, image, sr, flags)
    end
    
    def draw_image(p : Point, image : Image, sr : Rect) : Void
      Binding.bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R(self, p, image, sr)
    end
    
    def draw_image(p : Point, image : Image, sr : Rect, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_const_QPoint_R_const_QImage_R_const_QRect_R_Qt__ImageConversionFlags(self, p, image, sr, flags)
    end
    
    def draw_image(r : RectF, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QRectF_R_const_QImage_R(self, r, image)
    end
    
    def draw_image(r : Rect, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QRect_R_const_QImage_R(self, r, image)
    end
    
    def draw_image(p : PointF, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QPointF_R_const_QImage_R(self, p, image)
    end
    
    def draw_image(p : Point, image : Image) : Void
      Binding.bg_QPainter_drawImage_const_QPoint_R_const_QImage_R(self, p, image)
    end
    
    def draw_image(x : Int32, y : Int32, image : Image, sx : Int32 = 0, sy : Int32 = 0, sw : Int32 = -1, sh : Int32 = -1) : Void
      Binding.bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int(self, x, y, image, sx, sy, sw, sh)
    end
    
    def draw_image(x : Int32, y : Int32, image : Image, sx : Int32, sy : Int32, sw : Int32, sh : Int32, flags : ImageConversionFlags) : Void
      Binding.bg_QPainter_drawImage_int_int_const_QImage_R_int_int_int_int_Qt__ImageConversionFlags(self, x, y, image, sx, sy, sw, sh, flags)
    end
    
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QPainter_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    
    def layout_direction() : LayoutDirection
      Binding.bg_QPainter_layoutDirection_(self)
    end
    
    def draw_glyph_run(position : PointF, glyph_run : Binding::QGlyphRun*) : Void
      Binding.bg_QPainter_drawGlyphRun_const_QPointF_R_const_QGlyphRun_R(self, position, glyph_run)
    end
    
    def draw_static_text(top_left_position : PointF, static_text : Binding::QStaticText*) : Void
      Binding.bg_QPainter_drawStaticText_const_QPointF_R_const_QStaticText_R(self, top_left_position, static_text)
    end
    
    def draw_static_text(top_left_position : Point, static_text : Binding::QStaticText*) : Void
      Binding.bg_QPainter_drawStaticText_const_QPoint_R_const_QStaticText_R(self, top_left_position, static_text)
    end
    
    def draw_static_text(left : Int32, top : Int32, static_text : Binding::QStaticText*) : Void
      Binding.bg_QPainter_drawStaticText_int_int_const_QStaticText_R(self, left, top, static_text)
    end
    
    def draw_text(p : PointF, s : String) : Void
      Binding.bg_QPainter_drawText_const_QPointF_R_const_QString_R(self, p, Qt::Converter::QString.wrap(s))
    end
    
    def draw_text(p : Point, s : String) : Void
      Binding.bg_QPainter_drawText_const_QPoint_R_const_QString_R(self, p, Qt::Converter::QString.wrap(s))
    end
    
    def draw_text(x : Int32, y : Int32, s : String) : Void
      Binding.bg_QPainter_drawText_int_int_const_QString_R(self, x, y, Qt::Converter::QString.wrap(s))
    end
    
    def draw_text(p : PointF, str : String, tf : Int32, justification_padding : Int32) : Void
      Binding.bg_QPainter_drawText_const_QPointF_R_const_QString_R_int_int(self, p, Qt::Converter::QString.wrap(str), tf, justification_padding)
    end
    
    def draw_text(r : RectF, flags : Int32, text : String, br : RectF? = nil) : Void
      Binding.bg_QPainter_drawText_const_QRectF_R_int_const_QString_R_QRectF_X(self, r, flags, Qt::Converter::QString.wrap(text), br)
    end
    
    def draw_text(r : Rect, flags : Int32, text : String, br : Rect? = nil) : Void
      Binding.bg_QPainter_drawText_const_QRect_R_int_const_QString_R_QRect_X(self, r, flags, Qt::Converter::QString.wrap(text), br)
    end
    
    def draw_text(x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : String, br : Rect? = nil) : Void
      Binding.bg_QPainter_drawText_int_int_int_int_int_const_QString_R_QRect_X(self, x, y, w, h, flags, Qt::Converter::QString.wrap(text), br)
    end
    
    def draw_text(r : RectF, text : String) : Void
      Binding.bg_QPainter_drawText_const_QRectF_R_const_QString_R(self, r, Qt::Converter::QString.wrap(text))
    end
    
    def draw_text(r : RectF, text : String, o : TextOption) : Void
      Binding.bg_QPainter_drawText_const_QRectF_R_const_QString_R_const_QTextOption_R(self, r, Qt::Converter::QString.wrap(text), o)
    end
    
    def bounding_rect(rect : RectF, flags : Int32, text : String) : RectF
      RectF.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRectF_R_int_const_QString_R(self, rect, flags, Qt::Converter::QString.wrap(text)))
    end
    
    def bounding_rect(rect : Rect, flags : Int32, text : String) : Rect
      Rect.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRect_R_int_const_QString_R(self, rect, flags, Qt::Converter::QString.wrap(text)))
    end
    
    def bounding_rect(x : Int32, y : Int32, w : Int32, h : Int32, flags : Int32, text : String) : Rect
      Rect.new(unwrap: Binding.bg_QPainter_boundingRect_int_int_int_int_int_const_QString_R(self, x, y, w, h, flags, Qt::Converter::QString.wrap(text)))
    end
    
    def bounding_rect(rect : RectF, text : String) : RectF
      RectF.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRectF_R_const_QString_R(self, rect, Qt::Converter::QString.wrap(text)))
    end
    
    def bounding_rect(rect : RectF, text : String, o : TextOption) : RectF
      RectF.new(unwrap: Binding.bg_QPainter_boundingRect_const_QRectF_R_const_QString_R_const_QTextOption_R(self, rect, Qt::Converter::QString.wrap(text), o))
    end
    
    def draw_text_item(p : PointF, ti : Binding::QTextItem*) : Void
      Binding.bg_QPainter_drawTextItem_const_QPointF_R_const_QTextItem_R(self, p, ti)
    end
    
    def draw_text_item(x : Int32, y : Int32, ti : Binding::QTextItem*) : Void
      Binding.bg_QPainter_drawTextItem_int_int_const_QTextItem_R(self, x, y, ti)
    end
    
    def draw_text_item(p : Point, ti : Binding::QTextItem*) : Void
      Binding.bg_QPainter_drawTextItem_const_QPoint_R_const_QTextItem_R(self, p, ti)
    end
    
    def fill_rect(unnamed_arg_0 : RectF, unnamed_arg_1 : Brush) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_const_QBrush_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, unnamed_arg_4 : Brush) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_const_QBrush_R(self, x, y, w, h, unnamed_arg_4)
    end
    
    def fill_rect(unnamed_arg_0 : Rect, unnamed_arg_1 : Brush) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_const_QBrush_R(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def fill_rect(unnamed_arg_0 : RectF, color : Color) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_const_QColor_R(self, unnamed_arg_0, color)
    end
    
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, color : Color) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_const_QColor_R(self, x, y, w, h, color)
    end
    
    def fill_rect(unnamed_arg_0 : Rect, color : Color) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_const_QColor_R(self, unnamed_arg_0, color)
    end
    
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, c : GlobalColor) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_Qt__GlobalColor(self, x, y, w, h, c)
    end
    
    def fill_rect(r : Rect, c : GlobalColor) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_Qt__GlobalColor(self, r, c)
    end
    
    def fill_rect(r : RectF, c : GlobalColor) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_Qt__GlobalColor(self, r, c)
    end
    
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, style : BrushStyle) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_Qt__BrushStyle(self, x, y, w, h, style)
    end
    
    def fill_rect(r : Rect, style : BrushStyle) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_Qt__BrushStyle(self, r, style)
    end
    
    def fill_rect(r : RectF, style : BrushStyle) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_Qt__BrushStyle(self, r, style)
    end
    
    def fill_rect(x : Int32, y : Int32, w : Int32, h : Int32, preset : Gradient::Preset) : Void
      Binding.bg_QPainter_fillRect_int_int_int_int_QGradient__Preset(self, x, y, w, h, preset)
    end
    
    def fill_rect(r : Rect, preset : Gradient::Preset) : Void
      Binding.bg_QPainter_fillRect_const_QRect_R_QGradient__Preset(self, r, preset)
    end
    
    def fill_rect(r : RectF, preset : Gradient::Preset) : Void
      Binding.bg_QPainter_fillRect_const_QRectF_R_QGradient__Preset(self, r, preset)
    end
    
    def erase_rect(unnamed_arg_0 : RectF) : Void
      Binding.bg_QPainter_eraseRect_const_QRectF_R(self, unnamed_arg_0)
    end
    
    def erase_rect(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QPainter_eraseRect_int_int_int_int(self, x, y, w, h)
    end
    
    def erase_rect(unnamed_arg_0 : Rect) : Void
      Binding.bg_QPainter_eraseRect_const_QRect_R(self, unnamed_arg_0)
    end
    
    def set_render_hint(hint : Painter::RenderHint, on : Bool = true) : Void
      Binding.bg_QPainter_setRenderHint_QPainter__RenderHint_bool(self, hint, on)
    end
    
    def set_render_hints(hints : Painter::RenderHints, on : Bool = true) : Void
      Binding.bg_QPainter_setRenderHints_QPainter__RenderHints_bool(self, hints, on)
    end
    
    def render_hints() : Painter::RenderHints
      Binding.bg_QPainter_renderHints_(self)
    end
    
    def test_render_hint(hint : Painter::RenderHint) : Bool
      Binding.bg_QPainter_testRenderHint_QPainter__RenderHint(self, hint)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QPainter_paintEngine_(self)
    end
    
    def begin_native_painting() : Void
      Binding.bg_QPainter_beginNativePainting_(self)
    end
    
    def end_native_painting() : Void
      Binding.bg_QPainter_endNativePainting_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QPainter_staticMetaObject_STATIC_GETTER_()
    end
    
    enum RenderHint : UInt32
      Antialiasing = 1
      TextAntialiasing = 2
      SmoothPixmapTransform = 4
      HighQualityAntialiasing = 8
      NonCosmeticDefaultPen = 16
      Qt4CompatiblePainting = 32
      LosslessImageRendering = 64
    end
    @[Flags]
    enum RenderHints : UInt32
      Antialiasing = 1
      TextAntialiasing = 2
      SmoothPixmapTransform = 4
      HighQualityAntialiasing = 8
      NonCosmeticDefaultPen = 16
      Qt4CompatiblePainting = 32
      LosslessImageRendering = 64
    end
    enum PixmapFragmentHint : UInt32
      OpaqueHint = 1
    end
    @[Flags]
    enum PixmapFragmentHints : UInt32
      OpaqueHint = 1
    end
    enum CompositionMode : UInt32
      CompositionMode_SourceOver = 0
      CompositionMode_DestinationOver = 1
      CompositionMode_Clear = 2
      CompositionMode_Source = 3
      CompositionMode_Destination = 4
      CompositionMode_SourceIn = 5
      CompositionMode_DestinationIn = 6
      CompositionMode_SourceOut = 7
      CompositionMode_DestinationOut = 8
      CompositionMode_SourceAtop = 9
      CompositionMode_DestinationAtop = 10
      CompositionMode_Xor = 11
      CompositionMode_Plus = 12
      CompositionMode_Multiply = 13
      CompositionMode_Screen = 14
      CompositionMode_Overlay = 15
      CompositionMode_Darken = 16
      CompositionMode_Lighten = 17
      CompositionMode_ColorDodge = 18
      CompositionMode_ColorBurn = 19
      CompositionMode_HardLight = 20
      CompositionMode_SoftLight = 21
      CompositionMode_Difference = 22
      CompositionMode_Exclusion = 23
      RasterOp_SourceOrDestination = 24
      RasterOp_SourceAndDestination = 25
      RasterOp_SourceXorDestination = 26
      RasterOp_NotSourceAndNotDestination = 27
      RasterOp_NotSourceOrNotDestination = 28
      RasterOp_NotSourceXorDestination = 29
      RasterOp_NotSource = 30
      RasterOp_NotSourceAndDestination = 31
      RasterOp_SourceAndNotDestination = 32
      RasterOp_NotSourceOrDestination = 33
      RasterOp_SourceOrNotDestination = 34
      RasterOp_ClearDestination = 35
      RasterOp_SetDestination = 36
      RasterOp_NotDestination = 37
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QPainter*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Screen < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QScreen_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScreen_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QScreen_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def handle() : Binding::QPlatformScreen*
      Binding.bg_QScreen_handle_(self)
    end
    
    def name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_name_(self))
    end
    
    def manufacturer() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_manufacturer_(self))
    end
    
    def model() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_model_(self))
    end
    
    def serial_number() : String
      Qt::Converter::QString.unwrap(Binding.bg_QScreen_serialNumber_(self))
    end
    
    def depth() : Int32
      Binding.bg_QScreen_depth_(self)
    end
    
    def size() : Binding::QSize*
      Binding.bg_QScreen_size_(self)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_geometry_(self))
    end
    
    def physical_size() : Binding::QSizeF*
      Binding.bg_QScreen_physicalSize_(self)
    end
    
    def physical_dots_per_inch_x() : Float64
      Binding.bg_QScreen_physicalDotsPerInchX_(self)
    end
    
    def physical_dots_per_inch_y() : Float64
      Binding.bg_QScreen_physicalDotsPerInchY_(self)
    end
    
    def physical_dots_per_inch() : Float64
      Binding.bg_QScreen_physicalDotsPerInch_(self)
    end
    
    def logical_dots_per_inch_x() : Float64
      Binding.bg_QScreen_logicalDotsPerInchX_(self)
    end
    
    def logical_dots_per_inch_y() : Float64
      Binding.bg_QScreen_logicalDotsPerInchY_(self)
    end
    
    def logical_dots_per_inch() : Float64
      Binding.bg_QScreen_logicalDotsPerInch_(self)
    end
    
    def device_pixel_ratio() : Float64
      Binding.bg_QScreen_devicePixelRatio_(self)
    end
    
    def available_size() : Binding::QSize*
      Binding.bg_QScreen_availableSize_(self)
    end
    
    def available_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_availableGeometry_(self))
    end
    
    def virtual_siblings() : Enumerable(Screen)
      Container_QList_QScreen_X_.new(unwrap: Binding.bg_QScreen_virtualSiblings_(self))
    end
    
    def virtual_sibling_at(point : Point) : Screen
      Screen.new(unwrap: Binding.bg_QScreen_virtualSiblingAt_QPoint(self, point))
    end
    
    def virtual_size() : Binding::QSize*
      Binding.bg_QScreen_virtualSize_(self)
    end
    
    def virtual_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_virtualGeometry_(self))
    end
    
    def available_virtual_size() : Binding::QSize*
      Binding.bg_QScreen_availableVirtualSize_(self)
    end
    
    def available_virtual_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QScreen_availableVirtualGeometry_(self))
    end
    
    def primary_orientation() : ScreenOrientation
      Binding.bg_QScreen_primaryOrientation_(self)
    end
    
    def orientation() : ScreenOrientation
      Binding.bg_QScreen_orientation_(self)
    end
    
    def native_orientation() : ScreenOrientation
      Binding.bg_QScreen_nativeOrientation_(self)
    end
    
    def orientation_update_mask() : ScreenOrientations
      Binding.bg_QScreen_orientationUpdateMask_(self)
    end
    
    def orientation_update_mask=(mask : ScreenOrientations) : Void
      Binding.bg_QScreen_setOrientationUpdateMask_Qt__ScreenOrientations(self, mask)
    end
    
    def angle_between(a : ScreenOrientation, b : ScreenOrientation) : Int32
      Binding.bg_QScreen_angleBetween_Qt__ScreenOrientation_Qt__ScreenOrientation(self, a, b)
    end
    
    def transform_between(a : ScreenOrientation, b : ScreenOrientation, target : Rect) : Binding::QTransform*
      Binding.bg_QScreen_transformBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(self, a, b, target)
    end
    
    def map_between(a : ScreenOrientation, b : ScreenOrientation, rect : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QScreen_mapBetween_Qt__ScreenOrientation_Qt__ScreenOrientation_const_QRect_R(self, a, b, rect))
    end
    
    def is_portrait(orientation : ScreenOrientation) : Bool
      Binding.bg_QScreen_isPortrait_Qt__ScreenOrientation(self, orientation)
    end
    
    def is_landscape(orientation : ScreenOrientation) : Bool
      Binding.bg_QScreen_isLandscape_Qt__ScreenOrientation(self, orientation)
    end
    
    def grab_window(window : UInt32, x : Int32 = 0, y : Int32 = 0, w : Int32 = -1, h : Int32 = -1) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QScreen_grabWindow_WId_int_int_int_int(self, window, x, y, w, h))
    end
    
    def refresh_rate() : Float64
      Binding.bg_QScreen_refreshRate_(self)
    end
    
    def geometry_changed(geometry : Rect) : Void
      Binding.bg_QScreen_geometryChanged_const_QRect_R(self, geometry)
    end
    
    def available_geometry_changed(geometry : Rect) : Void
      Binding.bg_QScreen_availableGeometryChanged_const_QRect_R(self, geometry)
    end
    
    def physical_size_changed(size : Binding::QSizeF*) : Void
      Binding.bg_QScreen_physicalSizeChanged_const_QSizeF_R(self, size)
    end
    
    def physical_dots_per_inch_changed(dpi : Float64) : Void
      Binding.bg_QScreen_physicalDotsPerInchChanged_qreal(self, dpi)
    end
    
    def logical_dots_per_inch_changed(dpi : Float64) : Void
      Binding.bg_QScreen_logicalDotsPerInchChanged_qreal(self, dpi)
    end
    
    def virtual_geometry_changed(rect : Rect) : Void
      Binding.bg_QScreen_virtualGeometryChanged_const_QRect_R(self, rect)
    end
    
    def primary_orientation_changed(orientation : ScreenOrientation) : Void
      Binding.bg_QScreen_primaryOrientationChanged_Qt__ScreenOrientation(self, orientation)
    end
    
    def orientation_changed(orientation : ScreenOrientation) : Void
      Binding.bg_QScreen_orientationChanged_Qt__ScreenOrientation(self, orientation)
    end
    
    def refresh_rate_changed(refresh_rate : Float64) : Void
      Binding.bg_QScreen_refreshRateChanged_qreal(self, refresh_rate)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QScreen_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_geometry_changed(&_proc_ : Proc(Rect, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_geometryChanged_CrystalProc_void__const_QRect_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QRect*, Void).new do |arg0| _proc_.call(Rect.new(unwrap: arg0)) end)))
    end
    
    def on_available_geometry_changed(&_proc_ : Proc(Rect, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_availableGeometryChanged_CrystalProc_void__const_QRect_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QRect*, Void).new do |arg0| _proc_.call(Rect.new(unwrap: arg0)) end)))
    end
    
    def on_physical_size_changed(&_proc_ : Proc(Binding::QSizeF, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_physicalSizeChanged_CrystalProc_void__const_QSizeF_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSizeF*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_physical_dots_per_inch_changed(&_proc_ : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_physicalDotsPerInchChanged_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(Proc(Float64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_logical_dots_per_inch_changed(&_proc_ : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_logicalDotsPerInchChanged_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(Proc(Float64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_virtual_geometry_changed(&_proc_ : Proc(Rect, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_virtualGeometryChanged_CrystalProc_void__const_QRect_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QRect*, Void).new do |arg0| _proc_.call(Rect.new(unwrap: arg0)) end)))
    end
    
    def on_primary_orientation_changed(&_proc_ : Proc(ScreenOrientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_primaryOrientationChanged_CrystalProc_void__Qt__ScreenOrientation_(self, BindgenHelper.wrap_proc(Proc(ScreenOrientation, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_orientation_changed(&_proc_ : Proc(ScreenOrientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_orientationChanged_CrystalProc_void__Qt__ScreenOrientation_(self, BindgenHelper.wrap_proc(Proc(ScreenOrientation, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_refresh_rate_changed(&_proc_ : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QScreen_CONNECT_refreshRateChanged_CrystalProc_void__qreal_(self, BindgenHelper.wrap_proc(Proc(Float64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QScreen*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Screen)
      end
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class SizePolicy
    @unwrap : Binding::QSizePolicy*
    
    def initialize()
      result = Binding.bg_QSizePolicy__CONSTRUCT_()
    @unwrap = result
    end
    
    def initialize(horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy, type : SizePolicy::ControlType = SizePolicy::ControlType::DefaultType)
      result = Binding.bg_QSizePolicy__CONSTRUCT_QSizePolicy__Policy_QSizePolicy__Policy_QSizePolicy__ControlType(horizontal, vertical, type)
    @unwrap = result
    end
    
    def horizontal_policy() : SizePolicy::Policy
      Binding.bg_QSizePolicy_horizontalPolicy_(self)
    end
    
    def vertical_policy() : SizePolicy::Policy
      Binding.bg_QSizePolicy_verticalPolicy_(self)
    end
    
    def control_type() : SizePolicy::ControlType
      Binding.bg_QSizePolicy_controlType_(self)
    end
    
    def horizontal_policy=(d : SizePolicy::Policy) : Void
      Binding.bg_QSizePolicy_setHorizontalPolicy_QSizePolicy__Policy(self, d)
    end
    
    def vertical_policy=(d : SizePolicy::Policy) : Void
      Binding.bg_QSizePolicy_setVerticalPolicy_QSizePolicy__Policy(self, d)
    end
    
    def control_type=(type : SizePolicy::ControlType) : Void
      Binding.bg_QSizePolicy_setControlType_QSizePolicy__ControlType(self, type)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QSizePolicy_expandingDirections_(self)
    end
    
    def height_for_width=(b : Bool) : Void
      Binding.bg_QSizePolicy_setHeightForWidth_bool(self, b)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QSizePolicy_hasHeightForWidth_(self)
    end
    
    def width_for_height=(b : Bool) : Void
      Binding.bg_QSizePolicy_setWidthForHeight_bool(self, b)
    end
    
    def has_width_for_height?() : Bool
      Binding.bg_QSizePolicy_hasWidthForHeight_(self)
    end
    
    def ==(s : SizePolicy) : Bool
      Binding.bg_QSizePolicy__OPERATOR_eq_const_QSizePolicy_R(self, s)
    end
    
    def !=(s : SizePolicy) : Bool
      Binding.bg_QSizePolicy__OPERATOR_ne_const_QSizePolicy_R(self, s)
    end
    
    def horizontal_stretch() : Int32
      Binding.bg_QSizePolicy_horizontalStretch_(self)
    end
    
    def vertical_stretch() : Int32
      Binding.bg_QSizePolicy_verticalStretch_(self)
    end
    
    def horizontal_stretch=(stretch_factor : Int32) : Void
      Binding.bg_QSizePolicy_setHorizontalStretch_int(self, stretch_factor)
    end
    
    def vertical_stretch=(stretch_factor : Int32) : Void
      Binding.bg_QSizePolicy_setVerticalStretch_int(self, stretch_factor)
    end
    
    def retain_size_when_hidden() : Bool
      Binding.bg_QSizePolicy_retainSizeWhenHidden_(self)
    end
    
    def retain_size_when_hidden=(retain_size : Bool) : Void
      Binding.bg_QSizePolicy_setRetainSizeWhenHidden_bool(self, retain_size)
    end
    
    def transpose() : Void
      Binding.bg_QSizePolicy_transpose_(self)
    end
    
    def transposed() : SizePolicy
      SizePolicy.new(unwrap: Binding.bg_QSizePolicy_transposed_(self))
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QSizePolicy_staticMetaObject_STATIC_GETTER_()
    end
    
    enum PolicyFlag : UInt32
      GrowFlag = 1
      ExpandFlag = 2
      ShrinkFlag = 4
      IgnoreFlag = 8
    end
    enum Policy : UInt32
      Fixed = 0
      Minimum = 1
      Maximum = 4
      Preferred = 5
      MinimumExpanding = 3
      Expanding = 7
      Ignored = 13
    end
    enum ControlType : UInt32
      DefaultType = 1
      ButtonBox = 2
      CheckBox = 4
      ComboBox = 8
      Frame = 16
      GroupBox = 32
      Label = 64
      Line = 128
      LineEdit = 256
      PushButton = 512
      RadioButton = 1024
      Slider = 2048
      SpinBox = 4096
      TabWidget = 8192
      ToolButton = 16384
    end
    @[Flags]
    enum ControlTypes : UInt32
      DefaultType = 1
      ButtonBox = 2
      CheckBox = 4
      ComboBox = 8
      Frame = 16
      GroupBox = 32
      Label = 64
      Line = 128
      LineEdit = 256
      PushButton = 512
      RadioButton = 1024
      Slider = 2048
      SpinBox = 4096
      TabWidget = 8192
      ToolButton = 16384
    end
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QSizePolicy*)
      result = unwrap
    @unwrap = result
    end
    
  end
  module QSizePolicy
  end
  class Widget < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QWidget_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QWidget__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWidget_JUMPTABLE_BgJumptable_QWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, f : WindowFlags)
      result = Binding.bg_QWidget__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWidget_JUMPTABLE_BgJumptable_QWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def win_id() : UInt32
      Binding.bg_QWidget_winId_(self)
    end
    
    def create_win_id() : Void
      Binding.bg_QWidget_createWinId_(self)
    end
    
    def internal_win_id() : UInt32
      Binding.bg_QWidget_internalWinId_(self)
    end
    
    def effective_win_id() : UInt32
      Binding.bg_QWidget_effectiveWinId_(self)
    end
    
    def style() : Binding::QStyle*
      Binding.bg_QWidget_style_(self)
    end
    
    def style=(unnamed_arg_0 : Binding::QStyle*) : Void
      Binding.bg_QWidget_setStyle_QStyle_X(self, unnamed_arg_0)
    end
    
    def top_level?() : Bool
      Binding.bg_QWidget_isTopLevel_(self)
    end
    
    def window?() : Bool
      Binding.bg_QWidget_isWindow_(self)
    end
    
    def modal?() : Bool
      Binding.bg_QWidget_isModal_(self)
    end
    
    def window_modality() : WindowModality
      Binding.bg_QWidget_windowModality_(self)
    end
    
    def window_modality=(window_modality : WindowModality) : Void
      Binding.bg_QWidget_setWindowModality_Qt__WindowModality(self, window_modality)
    end
    
    def enabled?() : Bool
      Binding.bg_QWidget_isEnabled_(self)
    end
    
    def is_enabled_to(unnamed_arg_0 : Widget) : Bool
      Binding.bg_QWidget_isEnabledTo_const_QWidget_X(self, unnamed_arg_0)
    end
    
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setEnabled_bool(self, unnamed_arg_0)
    end
    
    def disabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setDisabled_bool(self, unnamed_arg_0)
    end
    
    def window_modified=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QWidget_setWindowModified_bool(self, unnamed_arg_0)
    end
    
    def frame_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_frameGeometry_(self))
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_geometry_(self))
    end
    
    def normal_geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_normalGeometry_(self))
    end
    
    def x() : Int32
      Binding.bg_QWidget_x_(self)
    end
    
    def y() : Int32
      Binding.bg_QWidget_y_(self)
    end
    
    def pos() : Point
      Point.new(unwrap: Binding.bg_QWidget_pos_(self))
    end
    
    def frame_size() : Binding::QSize*
      Binding.bg_QWidget_frameSize_(self)
    end
    
    def size() : Binding::QSize*
      Binding.bg_QWidget_size_(self)
    end
    
    def width() : Int32
      Binding.bg_QWidget_width_(self)
    end
    
    def height() : Int32
      Binding.bg_QWidget_height_(self)
    end
    
    def rect() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_rect_(self))
    end
    
    def children_rect() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_childrenRect_(self))
    end
    
    def children_region() : Binding::QRegion*
      Binding.bg_QWidget_childrenRegion_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QWidget_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QWidget_maximumSize_(self)
    end
    
    def minimum_width() : Int32
      Binding.bg_QWidget_minimumWidth_(self)
    end
    
    def minimum_height() : Int32
      Binding.bg_QWidget_minimumHeight_(self)
    end
    
    def maximum_width() : Int32
      Binding.bg_QWidget_maximumWidth_(self)
    end
    
    def maximum_height() : Int32
      Binding.bg_QWidget_maximumHeight_(self)
    end
    
    def minimum_size=(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QWidget_setMinimumSize_const_QSize_R(self, unnamed_arg_0)
    end
    
    def set_minimum_size(minw : Int32, minh : Int32) : Void
      Binding.bg_QWidget_setMinimumSize_int_int(self, minw, minh)
    end
    
    def maximum_size=(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QWidget_setMaximumSize_const_QSize_R(self, unnamed_arg_0)
    end
    
    def set_maximum_size(maxw : Int32, maxh : Int32) : Void
      Binding.bg_QWidget_setMaximumSize_int_int(self, maxw, maxh)
    end
    
    def minimum_width=(minw : Int32) : Void
      Binding.bg_QWidget_setMinimumWidth_int(self, minw)
    end
    
    def minimum_height=(minh : Int32) : Void
      Binding.bg_QWidget_setMinimumHeight_int(self, minh)
    end
    
    def maximum_width=(maxw : Int32) : Void
      Binding.bg_QWidget_setMaximumWidth_int(self, maxw)
    end
    
    def maximum_height=(maxh : Int32) : Void
      Binding.bg_QWidget_setMaximumHeight_int(self, maxh)
    end
    
    def size_increment() : Binding::QSize*
      Binding.bg_QWidget_sizeIncrement_(self)
    end
    
    def size_increment=(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QWidget_setSizeIncrement_const_QSize_R(self, unnamed_arg_0)
    end
    
    def set_size_increment(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setSizeIncrement_int_int(self, w, h)
    end
    
    def base_size() : Binding::QSize*
      Binding.bg_QWidget_baseSize_(self)
    end
    
    def base_size=(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QWidget_setBaseSize_const_QSize_R(self, unnamed_arg_0)
    end
    
    def set_base_size(basew : Int32, baseh : Int32) : Void
      Binding.bg_QWidget_setBaseSize_int_int(self, basew, baseh)
    end
    
    def fixed_size=(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QWidget_setFixedSize_const_QSize_R(self, unnamed_arg_0)
    end
    
    def set_fixed_size(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setFixedSize_int_int(self, w, h)
    end
    
    def fixed_width=(w : Int32) : Void
      Binding.bg_QWidget_setFixedWidth_int(self, w)
    end
    
    def fixed_height=(h : Int32) : Void
      Binding.bg_QWidget_setFixedHeight_int(self, h)
    end
    
    def map_to_global(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapToGlobal_const_QPoint_R(self, unnamed_arg_0))
    end
    
    def map_from_global(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapFromGlobal_const_QPoint_R(self, unnamed_arg_0))
    end
    
    def map_to_parent(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapToParent_const_QPoint_R(self, unnamed_arg_0))
    end
    
    def map_from_parent(unnamed_arg_0 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapFromParent_const_QPoint_R(self, unnamed_arg_0))
    end
    
    def map_to(unnamed_arg_0 : Widget, unnamed_arg_1 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapTo_const_QWidget_X_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1))
    end
    
    def map_from(unnamed_arg_0 : Widget, unnamed_arg_1 : Point) : Point
      Point.new(unwrap: Binding.bg_QWidget_mapFrom_const_QWidget_X_const_QPoint_R(self, unnamed_arg_0, unnamed_arg_1))
    end
    
    def window() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_window_(self))
    end
    
    def native_parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_nativeParentWidget_(self))
    end
    
    def top_level_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_topLevelWidget_(self))
    end
    
    def palette() : Palette
      Palette.new(unwrap: Binding.bg_QWidget_palette_(self))
    end
    
    def palette=(unnamed_arg_0 : Palette) : Void
      Binding.bg_QWidget_setPalette_const_QPalette_R(self, unnamed_arg_0)
    end
    
    def background_role=(unnamed_arg_0 : Palette::ColorRole) : Void
      Binding.bg_QWidget_setBackgroundRole_QPalette__ColorRole(self, unnamed_arg_0)
    end
    
    def background_role() : Palette::ColorRole
      Binding.bg_QWidget_backgroundRole_(self)
    end
    
    def foreground_role=(unnamed_arg_0 : Palette::ColorRole) : Void
      Binding.bg_QWidget_setForegroundRole_QPalette__ColorRole(self, unnamed_arg_0)
    end
    
    def foreground_role() : Palette::ColorRole
      Binding.bg_QWidget_foregroundRole_(self)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QWidget_font_(self))
    end
    
    def font=(unnamed_arg_0 : Font) : Void
      Binding.bg_QWidget_setFont_const_QFont_R(self, unnamed_arg_0)
    end
    
    def font_metrics() : FontMetrics
      FontMetrics.new(unwrap: Binding.bg_QWidget_fontMetrics_(self))
    end
    
    def font_info() : Binding::QFontInfo*
      Binding.bg_QWidget_fontInfo_(self)
    end
    
    def cursor() : Cursor
      Cursor.new(unwrap: Binding.bg_QWidget_cursor_(self))
    end
    
    def cursor=(unnamed_arg_0 : Cursor) : Void
      Binding.bg_QWidget_setCursor_const_QCursor_R(self, unnamed_arg_0)
    end
    
    def unset_cursor() : Void
      Binding.bg_QWidget_unsetCursor_(self)
    end
    
    def mouse_tracking=(enable : Bool) : Void
      Binding.bg_QWidget_setMouseTracking_bool(self, enable)
    end
    
    def has_mouse_tracking?() : Bool
      Binding.bg_QWidget_hasMouseTracking_(self)
    end
    
    def under_mouse() : Bool
      Binding.bg_QWidget_underMouse_(self)
    end
    
    def tablet_tracking=(enable : Bool) : Void
      Binding.bg_QWidget_setTabletTracking_bool(self, enable)
    end
    
    def has_tablet_tracking?() : Bool
      Binding.bg_QWidget_hasTabletTracking_(self)
    end
    
    def mask=(unnamed_arg_0 : Bitmap) : Void
      Binding.bg_QWidget_setMask_const_QBitmap_R(self, unnamed_arg_0)
    end
    
    def mask=(unnamed_arg_0 : Binding::QRegion*) : Void
      Binding.bg_QWidget_setMask_const_QRegion_R(self, unnamed_arg_0)
    end
    
    def mask() : Binding::QRegion*
      Binding.bg_QWidget_mask_(self)
    end
    
    def clear_mask() : Void
      Binding.bg_QWidget_clearMask_(self)
    end
    
    def render(target : PaintDevice) : Void
      Binding.bg_QWidget_render_QPaintDevice_X(self, target)
    end
    
    def render(target : PaintDevice, target_offset : Point) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R(self, target, target_offset)
    end
    
    def render(target : PaintDevice, target_offset : Point, source_region : Binding::QRegion*) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R(self, target, target_offset, source_region)
    end
    
    def render(target : PaintDevice, target_offset : Point, source_region : Binding::QRegion*, render_flags : Widget::RenderFlags) : Void
      Binding.bg_QWidget_render_QPaintDevice_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(self, target, target_offset, source_region, render_flags)
    end
    
    def render(painter : Painter) : Void
      Binding.bg_QWidget_render_QPainter_X(self, painter)
    end
    
    def render(painter : Painter, target_offset : Point) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R(self, painter, target_offset)
    end
    
    def render(painter : Painter, target_offset : Point, source_region : Binding::QRegion*) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R(self, painter, target_offset, source_region)
    end
    
    def render(painter : Painter, target_offset : Point, source_region : Binding::QRegion*, render_flags : Widget::RenderFlags) : Void
      Binding.bg_QWidget_render_QPainter_X_const_QPoint_R_const_QRegion_R_QWidget__RenderFlags(self, painter, target_offset, source_region, render_flags)
    end
    
    def grab() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QWidget_grab_(self))
    end
    
    def grab(rectangle : Rect) : Pixmap
      Pixmap.new(unwrap: Binding.bg_QWidget_grab_const_QRect_R(self, rectangle))
    end
    
    def graphics_effect() : Binding::QGraphicsEffect*
      Binding.bg_QWidget_graphicsEffect_(self)
    end
    
    def graphics_effect=(effect : Binding::QGraphicsEffect*) : Void
      Binding.bg_QWidget_setGraphicsEffect_QGraphicsEffect_X(self, effect)
    end
    
    def grab_gesture(type : GestureType) : Void
      Binding.bg_QWidget_grabGesture_Qt__GestureType(self, type)
    end
    
    def grab_gesture(type : GestureType, flags : GestureFlags) : Void
      Binding.bg_QWidget_grabGesture_Qt__GestureType_Qt__GestureFlags(self, type, flags)
    end
    
    def ungrab_gesture(type : GestureType) : Void
      Binding.bg_QWidget_ungrabGesture_Qt__GestureType(self, type)
    end
    
    def window_title=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowTitle_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def style_sheet=(style_sheet : String) : Void
      Binding.bg_QWidget_setStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(style_sheet))
    end
    
    def style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_styleSheet_(self))
    end
    
    def window_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowTitle_(self))
    end
    
    def window_icon=(icon : Icon) : Void
      Binding.bg_QWidget_setWindowIcon_const_QIcon_R(self, icon)
    end
    
    def window_icon() : Icon
      Icon.new(unwrap: Binding.bg_QWidget_windowIcon_(self))
    end
    
    def window_icon_text=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowIconText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def window_icon_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowIconText_(self))
    end
    
    def window_role=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWindowRole_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def window_role() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowRole_(self))
    end
    
    def window_file_path=(file_path : String) : Void
      Binding.bg_QWidget_setWindowFilePath_const_QString_R(self, Qt::Converter::QString.wrap(file_path))
    end
    
    def window_file_path() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_windowFilePath_(self))
    end
    
    def window_opacity=(level : Float64) : Void
      Binding.bg_QWidget_setWindowOpacity_qreal(self, level)
    end
    
    def window_opacity() : Float64
      Binding.bg_QWidget_windowOpacity_(self)
    end
    
    def window_modified?() : Bool
      Binding.bg_QWidget_isWindowModified_(self)
    end
    
    def tool_tip=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_toolTip_(self))
    end
    
    def tool_tip_duration=(msec : Int32) : Void
      Binding.bg_QWidget_setToolTipDuration_int(self, msec)
    end
    
    def tool_tip_duration() : Int32
      Binding.bg_QWidget_toolTipDuration_(self)
    end
    
    def status_tip=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_statusTip_(self))
    end
    
    def whats_this=(unnamed_arg_0 : String) : Void
      Binding.bg_QWidget_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_whatsThis_(self))
    end
    
    def accessible_name() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_accessibleName_(self))
    end
    
    def accessible_name=(name : String) : Void
      Binding.bg_QWidget_setAccessibleName_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    
    def accessible_description() : String
      Qt::Converter::QString.unwrap(Binding.bg_QWidget_accessibleDescription_(self))
    end
    
    def accessible_description=(description : String) : Void
      Binding.bg_QWidget_setAccessibleDescription_const_QString_R(self, Qt::Converter::QString.wrap(description))
    end
    
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QWidget_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    
    def layout_direction() : LayoutDirection
      Binding.bg_QWidget_layoutDirection_(self)
    end
    
    def unset_layout_direction() : Void
      Binding.bg_QWidget_unsetLayoutDirection_(self)
    end
    
    def locale=(locale : Binding::QLocale*) : Void
      Binding.bg_QWidget_setLocale_const_QLocale_R(self, locale)
    end
    
    def locale() : Binding::QLocale*
      Binding.bg_QWidget_locale_(self)
    end
    
    def unset_locale() : Void
      Binding.bg_QWidget_unsetLocale_(self)
    end
    
    def right_to_left?() : Bool
      Binding.bg_QWidget_isRightToLeft_(self)
    end
    
    def left_to_right?() : Bool
      Binding.bg_QWidget_isLeftToRight_(self)
    end
    
    def set_focus() : Void
      Binding.bg_QWidget_setFocus_(self)
    end
    
    def active_window?() : Bool
      Binding.bg_QWidget_isActiveWindow_(self)
    end
    
    def activate_window() : Void
      Binding.bg_QWidget_activateWindow_(self)
    end
    
    def clear_focus() : Void
      Binding.bg_QWidget_clearFocus_(self)
    end
    
    def focus=(reason : FocusReason) : Void
      Binding.bg_QWidget_setFocus_Qt__FocusReason(self, reason)
    end
    
    def focus_policy() : FocusPolicy
      Binding.bg_QWidget_focusPolicy_(self)
    end
    
    def focus_policy=(policy : FocusPolicy) : Void
      Binding.bg_QWidget_setFocusPolicy_Qt__FocusPolicy(self, policy)
    end
    
    def has_focus?() : Bool
      Binding.bg_QWidget_hasFocus_(self)
    end
    
    def self.set_tab_order(unnamed_arg_0 : Widget, unnamed_arg_1 : Widget) : Void
      Binding.bg_QWidget_setTabOrder_STATIC_QWidget_X_QWidget_X(unnamed_arg_0, unnamed_arg_1)
    end
    
    def focus_proxy=(unnamed_arg_0 : Widget) : Void
      Binding.bg_QWidget_setFocusProxy_QWidget_X(self, unnamed_arg_0)
    end
    
    def focus_proxy() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_focusProxy_(self))
    end
    
    def context_menu_policy() : ContextMenuPolicy
      Binding.bg_QWidget_contextMenuPolicy_(self)
    end
    
    def context_menu_policy=(policy : ContextMenuPolicy) : Void
      Binding.bg_QWidget_setContextMenuPolicy_Qt__ContextMenuPolicy(self, policy)
    end
    
    def grab_mouse() : Void
      Binding.bg_QWidget_grabMouse_(self)
    end
    
    def grab_mouse(unnamed_arg_0 : Cursor) : Void
      Binding.bg_QWidget_grabMouse_const_QCursor_R(self, unnamed_arg_0)
    end
    
    def release_mouse() : Void
      Binding.bg_QWidget_releaseMouse_(self)
    end
    
    def grab_keyboard() : Void
      Binding.bg_QWidget_grabKeyboard_(self)
    end
    
    def release_keyboard() : Void
      Binding.bg_QWidget_releaseKeyboard_(self)
    end
    
    def grab_shortcut(key : KeySequence, context : ShortcutContext = ShortcutContext::WindowShortcut) : Int32
      Binding.bg_QWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(self, key, context)
    end
    
    def release_shortcut(id : Int32) : Void
      Binding.bg_QWidget_releaseShortcut_int(self, id)
    end
    
    def set_shortcut_enabled(id : Int32, enable : Bool = true) : Void
      Binding.bg_QWidget_setShortcutEnabled_int_bool(self, id, enable)
    end
    
    def set_shortcut_auto_repeat(id : Int32, enable : Bool = true) : Void
      Binding.bg_QWidget_setShortcutAutoRepeat_int_bool(self, id, enable)
    end
    
    def self.mouse_grabber() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_mouseGrabber_STATIC_())
    end
    
    def self.keyboard_grabber() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_keyboardGrabber_STATIC_())
    end
    
    def updates_enabled() : Bool
      Binding.bg_QWidget_updatesEnabled_(self)
    end
    
    def updates_enabled=(enable : Bool) : Void
      Binding.bg_QWidget_setUpdatesEnabled_bool(self, enable)
    end
    
    def graphics_proxy_widget() : Binding::QGraphicsProxyWidget*
      Binding.bg_QWidget_graphicsProxyWidget_(self)
    end
    
    def update() : Void
      Binding.bg_QWidget_update_(self)
    end
    
    def repaint() : Void
      Binding.bg_QWidget_repaint_(self)
    end
    
    def update(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_update_int_int_int_int(self, x, y, w, h)
    end
    
    def update(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidget_update_const_QRect_R(self, unnamed_arg_0)
    end
    
    def update(unnamed_arg_0 : Binding::QRegion*) : Void
      Binding.bg_QWidget_update_const_QRegion_R(self, unnamed_arg_0)
    end
    
    def repaint(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_repaint_int_int_int_int(self, x, y, w, h)
    end
    
    def repaint(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidget_repaint_const_QRect_R(self, unnamed_arg_0)
    end
    
    def repaint(unnamed_arg_0 : Binding::QRegion*) : Void
      Binding.bg_QWidget_repaint_const_QRegion_R(self, unnamed_arg_0)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def hidden=(hidden : Bool) : Void
      Binding.bg_QWidget_setHidden_bool(self, hidden)
    end
    
    def show() : Void
      Binding.bg_QWidget_show_(self)
    end
    
    def hide() : Void
      Binding.bg_QWidget_hide_(self)
    end
    
    def show_minimized() : Void
      Binding.bg_QWidget_showMinimized_(self)
    end
    
    def show_maximized() : Void
      Binding.bg_QWidget_showMaximized_(self)
    end
    
    def show_full_screen() : Void
      Binding.bg_QWidget_showFullScreen_(self)
    end
    
    def show_normal() : Void
      Binding.bg_QWidget_showNormal_(self)
    end
    
    def close() : Bool
      Binding.bg_QWidget_close_(self)
    end
    
    def raise() : Void
      Binding.bg_QWidget_raise_(self)
    end
    
    def lower() : Void
      Binding.bg_QWidget_lower_(self)
    end
    
    def stack_under(unnamed_arg_0 : Widget) : Void
      Binding.bg_QWidget_stackUnder_QWidget_X(self, unnamed_arg_0)
    end
    
    def move(x : Int32, y : Int32) : Void
      Binding.bg_QWidget_move_int_int(self, x, y)
    end
    
    def move(unnamed_arg_0 : Point) : Void
      Binding.bg_QWidget_move_const_QPoint_R(self, unnamed_arg_0)
    end
    
    def resize(w : Int32, h : Int32) : Void
      Binding.bg_QWidget_resize_int_int(self, w, h)
    end
    
    def resize(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QWidget_resize_const_QSize_R(self, unnamed_arg_0)
    end
    
    def set_geometry(x : Int32, y : Int32, w : Int32, h : Int32) : Void
      Binding.bg_QWidget_setGeometry_int_int_int_int(self, x, y, w, h)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidget_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def save_geometry() : Binding::QByteArray*
      Binding.bg_QWidget_saveGeometry_(self)
    end
    
    def restore_geometry(geometry : Binding::QByteArray*) : Bool
      Binding.bg_QWidget_restoreGeometry_const_QByteArray_R(self, geometry)
    end
    
    def adjust_size() : Void
      Binding.bg_QWidget_adjustSize_(self)
    end
    
    def visible?() : Bool
      Binding.bg_QWidget_isVisible_(self)
    end
    
    def is_visible_to(unnamed_arg_0 : Widget) : Bool
      Binding.bg_QWidget_isVisibleTo_const_QWidget_X(self, unnamed_arg_0)
    end
    
    def hidden?() : Bool
      Binding.bg_QWidget_isHidden_(self)
    end
    
    def minimized?() : Bool
      Binding.bg_QWidget_isMinimized_(self)
    end
    
    def maximized?() : Bool
      Binding.bg_QWidget_isMaximized_(self)
    end
    
    def full_screen?() : Bool
      Binding.bg_QWidget_isFullScreen_(self)
    end
    
    def window_state() : WindowStates
      Binding.bg_QWidget_windowState_(self)
    end
    
    def window_state=(state : WindowStates) : Void
      Binding.bg_QWidget_setWindowState_Qt__WindowStates(self, state)
    end
    
    def override_window_state(state : WindowStates) : Void
      Binding.bg_QWidget_overrideWindowState_Qt__WindowStates(self, state)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def size_policy() : SizePolicy
      SizePolicy.new(unwrap: Binding.bg_QWidget_sizePolicy_(self))
    end
    
    def size_policy=(unnamed_arg_0 : SizePolicy) : Void
      Binding.bg_QWidget_setSizePolicy_QSizePolicy(self, unnamed_arg_0)
    end
    
    def set_size_policy(horizontal : SizePolicy::Policy, vertical : SizePolicy::Policy) : Void
      Binding.bg_QWidget_setSizePolicy_QSizePolicy__Policy_QSizePolicy__Policy(self, horizontal, vertical)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def visible_region() : Binding::QRegion*
      Binding.bg_QWidget_visibleRegion_(self)
    end
    
    def set_contents_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QWidget_setContentsMargins_int_int_int_int(self, left, top, right, bottom)
    end
    
    def contents_margins=(margins : Binding::QMargins*) : Void
      Binding.bg_QWidget_setContentsMargins_const_QMargins_R(self, margins)
    end
    
    def contents_margins() : Binding::QMargins*
      Binding.bg_QWidget_contentsMargins_(self)
    end
    
    def contents_rect() : Rect
      Rect.new(unwrap: Binding.bg_QWidget_contentsRect_(self))
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QWidget_layout_(self))
    end
    
    def layout=(unnamed_arg_0 : Layout) : Void
      Binding.bg_QWidget_setLayout_QLayout_X(self, unnamed_arg_0)
    end
    
    def update_geometry() : Void
      Binding.bg_QWidget_updateGeometry_(self)
    end
    
    def parent=(parent : Widget) : Void
      Binding.bg_QWidget_setParent_QWidget_X(self, parent)
    end
    
    def set_parent(parent : Widget, f : WindowFlags) : Void
      Binding.bg_QWidget_setParent_QWidget_X_Qt__WindowFlags(self, parent, f)
    end
    
    def scroll(dx : Int32, dy : Int32) : Void
      Binding.bg_QWidget_scroll_int_int(self, dx, dy)
    end
    
    def scroll(dx : Int32, dy : Int32, unnamed_arg_2 : Rect) : Void
      Binding.bg_QWidget_scroll_int_int_const_QRect_R(self, dx, dy, unnamed_arg_2)
    end
    
    def focus_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_focusWidget_(self))
    end
    
    def next_in_focus_chain() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_nextInFocusChain_(self))
    end
    
    def previous_in_focus_chain() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_previousInFocusChain_(self))
    end
    
    def accept_drops() : Bool
      Binding.bg_QWidget_acceptDrops_(self)
    end
    
    def accept_drops=(on : Bool) : Void
      Binding.bg_QWidget_setAcceptDrops_bool(self, on)
    end
    
    def add_action(action : Action) : Void
      Binding.bg_QWidget_addAction_QAction_X(self, action)
    end
    
    def add_actions(actions : Enumerable(Action)) : Void
      Binding.bg_QWidget_addActions_QList_QAction_X_(self, BindgenHelper.wrap_container(Container_QList_QAction_X_, actions).to_unsafe)
    end
    
    def insert_actions(before : Action, actions : Enumerable(Action)) : Void
      Binding.bg_QWidget_insertActions_QAction_X_QList_QAction_X_(self, before, BindgenHelper.wrap_container(Container_QList_QAction_X_, actions).to_unsafe)
    end
    
    def insert_action(before : Action, action : Action) : Void
      Binding.bg_QWidget_insertAction_QAction_X_QAction_X(self, before, action)
    end
    
    def remove_action(action : Action) : Void
      Binding.bg_QWidget_removeAction_QAction_X(self, action)
    end
    
    def actions() : Enumerable(Action)
      Container_QList_QAction_X_.new(unwrap: Binding.bg_QWidget_actions_(self))
    end
    
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidget_parentWidget_(self))
    end
    
    def window_flags=(type : WindowFlags) : Void
      Binding.bg_QWidget_setWindowFlags_Qt__WindowFlags(self, type)
    end
    
    def window_flags() : WindowFlags
      Binding.bg_QWidget_windowFlags_(self)
    end
    
    def set_window_flag(unnamed_arg_0 : WindowType, on : Bool = true) : Void
      Binding.bg_QWidget_setWindowFlag_Qt__WindowType_bool(self, unnamed_arg_0, on)
    end
    
    def override_window_flags(type : WindowFlags) : Void
      Binding.bg_QWidget_overrideWindowFlags_Qt__WindowFlags(self, type)
    end
    
    def window_type() : WindowType
      Binding.bg_QWidget_windowType_(self)
    end
    
    def self.find(unnamed_arg_0 : UInt32) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_find_STATIC_WId(unnamed_arg_0))
    end
    
    def child_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_childAt_int_int(self, x, y))
    end
    
    def child_at(p : Point) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_childAt_const_QPoint_R(self, p))
    end
    
    def set_attribute(unnamed_arg_0 : WidgetAttribute, on : Bool = true) : Void
      Binding.bg_QWidget_setAttribute_Qt__WidgetAttribute_bool(self, unnamed_arg_0, on)
    end
    
    def test_attribute(unnamed_arg_0 : WidgetAttribute) : Bool
      Binding.bg_QWidget_testAttribute_Qt__WidgetAttribute(self, unnamed_arg_0)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    def ensure_polished() : Void
      Binding.bg_QWidget_ensurePolished_(self)
    end
    
    def is_ancestor_of(child : Widget) : Bool
      Binding.bg_QWidget_isAncestorOf_const_QWidget_X(self, child)
    end
    
    def auto_fill_background() : Bool
      Binding.bg_QWidget_autoFillBackground_(self)
    end
    
    def auto_fill_background=(enabled : Bool) : Void
      Binding.bg_QWidget_setAutoFillBackground_bool(self, enabled)
    end
    
    def backing_store() : Binding::QBackingStore*
      Binding.bg_QWidget_backingStore_(self)
    end
    
    def window_handle() : Window
      Window.new(unwrap: Binding.bg_QWidget_windowHandle_(self))
    end
    
    def screen() : Screen
      Screen.new(unwrap: Binding.bg_QWidget_screen_(self))
    end
    
    def self.create_window_container(window : Window, parent : Widget? = nil) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X(window, parent))
    end
    
    def self.create_window_container(window : Window, parent : Widget?, flags : WindowFlags) : Widget
      Widget.new(unwrap: Binding.bg_QWidget_createWindowContainer_STATIC_QWindow_X_QWidget_X_Qt__WindowFlags(window, parent, flags))
    end
    
    def window_title_changed(title : String) : Void
      Binding.bg_QWidget_windowTitleChanged_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    
    def window_icon_changed(icon : Icon) : Void
      Binding.bg_QWidget_windowIconChanged_const_QIcon_R(self, icon)
    end
    
    def window_icon_text_changed(icon_text : String) : Void
      Binding.bg_QWidget_windowIconTextChanged_const_QString_R(self, Qt::Converter::QString.wrap(icon_text))
    end
    
    def custom_context_menu_requested(pos : Point) : Void
      Binding.bg_QWidget_customContextMenuRequested_const_QPoint_R(self, pos)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QWidget_event_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def input_method_hints() : InputMethodHints
      Binding.bg_QWidget_inputMethodHints_(self)
    end
    
    def input_method_hints=(hints : InputMethodHints) : Void
      Binding.bg_QWidget_setInputMethodHints_Qt__InputMethodHints(self, hints)
    end
    
    protected def update_micro_focus() : Void
      Binding.bg_QWidget_updateMicroFocus_(self)
    end
    
    protected def create(unnamed_arg_0 : UInt32 = 0u32, initialize_window : Bool = true, destroy_old_window : Bool = true) : Void
      Binding.bg_QWidget_create_WId_bool_bool(self, unnamed_arg_0, initialize_window, destroy_old_window)
    end
    
    protected def destroy(destroy_window : Bool = true, destroy_sub_windows : Bool = true) : Void
      Binding.bg_QWidget_destroy_bool_bool(self, destroy_window, destroy_sub_windows)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    protected def focus_next_child() : Bool
      Binding.bg_QWidget_focusNextChild_(self)
    end
    
    protected def focus_previous_child() : Bool
      Binding.bg_QWidget_focusPreviousChild_(self)
    end
    
    protected def initialize(d : Binding::QWidgetPrivate*, parent : Widget, f : WindowFlags)
      result = Binding.bg_QWidget__CONSTRUCT_QWidgetPrivate_R_QWidget_X_Qt__WindowFlags(d, parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Widget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWidget.new(
      bg_QWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWidget_JUMPTABLE_BgJumptable_QWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def as_paint_device() : PaintDevice
      PaintDeviceImpl.new(unwrap: Binding.bg_QWidget_AS_PaintDevice_(self))
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QWidget_staticMetaObject_STATIC_GETTER_()
    end
    
    @[Flags]
    enum RenderFlags : UInt32
      DrawWindowBackground = 1
      DrawChildren = 2
      IgnoreMask = 4
    end
    def on_window_title_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_CONNECT_windowTitleChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_window_icon_changed(&_proc_ : Proc(Icon, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_CONNECT_windowIconChanged_CrystalProc_void__const_QIcon_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QIcon*, Void).new do |arg0| _proc_.call(Icon.new(unwrap: arg0)) end)))
    end
    
    def on_window_icon_text_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_CONNECT_windowIconTextChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_custom_context_menu_requested(&_proc_ : Proc(Point, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QWidget_CONNECT_customContextMenuRequested_CrystalProc_void__const_QPoint_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QPoint, Void).new do |arg0| _proc_.call(Point.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QWidget*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Widget)
      end
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QWidget_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QWidget_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class AbstractButton < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractButton_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QAbstractButton__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractButton_JUMPTABLE_BgJumptable_QAbstractButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def text=(text : String) : Void
      Binding.bg_QAbstractButton_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractButton_text_(self))
    end
    
    def icon=(icon : Icon) : Void
      Binding.bg_QAbstractButton_setIcon_const_QIcon_R(self, icon)
    end
    
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QAbstractButton_icon_(self))
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QAbstractButton_iconSize_(self)
    end
    
    def shortcut=(key : KeySequence) : Void
      Binding.bg_QAbstractButton_setShortcut_const_QKeySequence_R(self, key)
    end
    
    def shortcut() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QAbstractButton_shortcut_(self))
    end
    
    def checkable=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setCheckable_bool(self, unnamed_arg_0)
    end
    
    def checkable?() : Bool
      Binding.bg_QAbstractButton_isCheckable_(self)
    end
    
    def checked?() : Bool
      Binding.bg_QAbstractButton_isChecked_(self)
    end
    
    def down=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setDown_bool(self, unnamed_arg_0)
    end
    
    def down?() : Bool
      Binding.bg_QAbstractButton_isDown_(self)
    end
    
    def auto_repeat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setAutoRepeat_bool(self, unnamed_arg_0)
    end
    
    def auto_repeat() : Bool
      Binding.bg_QAbstractButton_autoRepeat_(self)
    end
    
    def auto_repeat_delay=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractButton_setAutoRepeatDelay_int(self, unnamed_arg_0)
    end
    
    def auto_repeat_delay() : Int32
      Binding.bg_QAbstractButton_autoRepeatDelay_(self)
    end
    
    def auto_repeat_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractButton_setAutoRepeatInterval_int(self, unnamed_arg_0)
    end
    
    def auto_repeat_interval() : Int32
      Binding.bg_QAbstractButton_autoRepeatInterval_(self)
    end
    
    def auto_exclusive=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setAutoExclusive_bool(self, unnamed_arg_0)
    end
    
    def auto_exclusive() : Bool
      Binding.bg_QAbstractButton_autoExclusive_(self)
    end
    
    def group() : ButtonGroup
      ButtonGroup.new(unwrap: Binding.bg_QAbstractButton_group_(self))
    end
    
    def icon_size=(size : Binding::QSize*) : Void
      Binding.bg_QAbstractButton_setIconSize_const_QSize_R(self, size)
    end
    
    def animate_click(msec : Int32 = 100) : Void
      Binding.bg_QAbstractButton_animateClick_int(self, msec)
    end
    
    def click() : Void
      Binding.bg_QAbstractButton_click_(self)
    end
    
    def toggle() : Void
      Binding.bg_QAbstractButton_toggle_(self)
    end
    
    def checked=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractButton_setChecked_bool(self, unnamed_arg_0)
    end
    
    def pressed() : Void
      Binding.bg_QAbstractButton_pressed_(self)
    end
    
    def released() : Void
      Binding.bg_QAbstractButton_released_(self)
    end
    
    def clicked(checked : Bool = false) : Void
      Binding.bg_QAbstractButton_clicked_bool(self, checked)
    end
    
    def toggled(checked : Bool) : Void
      Binding.bg_QAbstractButton_toggled_bool(self, checked)
    end
    
    protected abstract def paint_event(e : PaintEvent) : Void
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QAbstractButton_hitButton_const_QPoint_R(self, pos)
    end
    
    protected def check_state_set() : Void
      Binding.bg_QAbstractButton_checkStateSet_(self)
    end
    
    protected def next_check_state() : Void
      Binding.bg_QAbstractButton_nextCheckState_(self)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QAbstractButton_event_QEvent_X(self, e)
    end
    
    protected def key_press_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(self, e)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_move_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusInEvent_QFocusEvent_X(self, e)
    end
    
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractButton_changeEvent_QEvent_X(self, e)
    end
    
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QAbstractButton_timerEvent_QTimerEvent_X(self, e)
    end
    
    protected def initialize(dd : Binding::QAbstractButtonPrivate*, parent : Widget? = nil)
      result = Binding.bg_QAbstractButton__CONSTRUCT_QAbstractButtonPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall paint_event hit_button check_state_set next_check_state event key_press_event key_release_event mouse_press_event mouse_release_event mouse_move_event focus_in_event focus_out_event change_event timer_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractButton.new(
      bg_QAbstractButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractButton_JUMPTABLE_BgJumptable_QAbstractButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractButton_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_pressed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_pressed_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_released(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_released_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_clicked(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_clicked_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_toggled(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_toggled_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractButton*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractButton)
      end
      protected def hit_button(pos : Point) : Bool
        Binding.bg_QAbstractButton_hitButton_SUPER_const_QPoint_R(@myself, pos)
      end
      
      protected def check_state_set() : Void
        Binding.bg_QAbstractButton_checkStateSet_SUPER_(@myself)
      end
      
      protected def next_check_state() : Void
        Binding.bg_QAbstractButton_nextCheckState_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QAbstractButton_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def key_press_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_release_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_move_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def focus_in_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def focus_out_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractButton_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def timer_event(e : TimerEvent) : Void
        Binding.bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(@myself, e)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class AbstractSpinBox < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractSpinBox_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractSpinBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QAbstractSpinBox__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event input_method_query step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event enter_event leave_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractSpinBox.new(
      bg_QAbstractSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractSpinBox_JUMPTABLE_BgJumptable_QAbstractSpinBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def button_symbols() : AbstractSpinBox::ButtonSymbols
      Binding.bg_QAbstractSpinBox_buttonSymbols_(self)
    end
    
    def button_symbols=(bs : AbstractSpinBox::ButtonSymbols) : Void
      Binding.bg_QAbstractSpinBox_setButtonSymbols_QAbstractSpinBox__ButtonSymbols(self, bs)
    end
    
    def correction_mode=(cm : AbstractSpinBox::CorrectionMode) : Void
      Binding.bg_QAbstractSpinBox_setCorrectionMode_QAbstractSpinBox__CorrectionMode(self, cm)
    end
    
    def correction_mode() : AbstractSpinBox::CorrectionMode
      Binding.bg_QAbstractSpinBox_correctionMode_(self)
    end
    
    def has_acceptable_input?() : Bool
      Binding.bg_QAbstractSpinBox_hasAcceptableInput_(self)
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_text_(self))
    end
    
    def special_value_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSpinBox_specialValueText_(self))
    end
    
    def special_value_text=(txt : String) : Void
      Binding.bg_QAbstractSpinBox_setSpecialValueText_const_QString_R(self, Qt::Converter::QString.wrap(txt))
    end
    
    def wrapping() : Bool
      Binding.bg_QAbstractSpinBox_wrapping_(self)
    end
    
    def wrapping=(w : Bool) : Void
      Binding.bg_QAbstractSpinBox_setWrapping_bool(self, w)
    end
    
    def read_only=(r : Bool) : Void
      Binding.bg_QAbstractSpinBox_setReadOnly_bool(self, r)
    end
    
    def read_only?() : Bool
      Binding.bg_QAbstractSpinBox_isReadOnly_(self)
    end
    
    def keyboard_tracking=(kt : Bool) : Void
      Binding.bg_QAbstractSpinBox_setKeyboardTracking_bool(self, kt)
    end
    
    def keyboard_tracking() : Bool
      Binding.bg_QAbstractSpinBox_keyboardTracking_(self)
    end
    
    def alignment=(flag : Alignment) : Void
      Binding.bg_QAbstractSpinBox_setAlignment_Qt__Alignment(self, flag)
    end
    
    def alignment() : Alignment
      Binding.bg_QAbstractSpinBox_alignment_(self)
    end
    
    def frame=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSpinBox_setFrame_bool(self, unnamed_arg_0)
    end
    
    def has_frame?() : Bool
      Binding.bg_QAbstractSpinBox_hasFrame_(self)
    end
    
    def accelerated=(on : Bool) : Void
      Binding.bg_QAbstractSpinBox_setAccelerated_bool(self, on)
    end
    
    def accelerated?() : Bool
      Binding.bg_QAbstractSpinBox_isAccelerated_(self)
    end
    
    def group_separator_shown=(shown : Bool) : Void
      Binding.bg_QAbstractSpinBox_setGroupSeparatorShown_bool(self, shown)
    end
    
    def group_separator_shown?() : Bool
      Binding.bg_QAbstractSpinBox_isGroupSeparatorShown_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_minimumSizeHint_(self)
    end
    
    def interpret_text() : Void
      Binding.bg_QAbstractSpinBox_interpretText_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QAbstractSpinBox_event_QEvent_X(self, event)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def step_by(steps : Int32) : Void
      Binding.bg_QAbstractSpinBox_stepBy_int(self, steps)
    end
    
    def step_up() : Void
      Binding.bg_QAbstractSpinBox_stepUp_(self)
    end
    
    def step_down() : Void
      Binding.bg_QAbstractSpinBox_stepDown_(self)
    end
    
    def select_all() : Void
      Binding.bg_QAbstractSpinBox_selectAll_(self)
    end
    
    def clear() : Void
      Binding.bg_QAbstractSpinBox_clear_(self)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QAbstractSpinBox_changeEvent_QEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QAbstractSpinBox_showEvent_QShowEvent_X(self, event)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionSpinBox*) : Void
      Binding.bg_QAbstractSpinBox_initStyleOption_QStyleOptionSpinBox_X(self, option)
    end
    
    protected def line_edit() : LineEdit
      LineEdit.new(unwrap: Binding.bg_QAbstractSpinBox_lineEdit_(self))
    end
    
    protected def line_edit=(edit : LineEdit) : Void
      Binding.bg_QAbstractSpinBox_setLineEdit_QLineEdit_X(self, edit)
    end
    
    protected def step_enabled() : AbstractSpinBox::StepEnabled
      Binding.bg_QAbstractSpinBox_stepEnabled_(self)
    end
    
    def editing_finished() : Void
      Binding.bg_QAbstractSpinBox_editingFinished_(self)
    end
    
    protected def initialize(dd : Binding::QAbstractSpinBoxPrivate*, parent : Widget? = nil)
      result = Binding.bg_QAbstractSpinBox__CONSTRUCT_QAbstractSpinBoxPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event input_method_query step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event enter_event leave_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractSpinBox.new(
      bg_QAbstractSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractSpinBox_JUMPTABLE_BgJumptable_QAbstractSpinBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractSpinBox_staticMetaObject_STATIC_GETTER_()
    end
    
    enum StepEnabledFlag : UInt32
      StepNone = 0
      StepUpEnabled = 1
      StepDownEnabled = 2
    end
    @[Flags]
    enum StepEnabled : UInt32
      StepNone = 0
      StepUpEnabled = 1
      StepDownEnabled = 2
    end
    enum ButtonSymbols : UInt32
      UpDownArrows = 0
      PlusMinus = 1
      NoButtons = 2
    end
    enum CorrectionMode : UInt32
      CorrectToPreviousValue = 0
      CorrectToNearestValue = 1
    end
    enum StepType : UInt32
      DefaultStepType = 0
      AdaptiveDecimalStepType = 1
    end
    def on_editing_finished(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSpinBox_CONNECT_editingFinished_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QAbstractSpinBox*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractSpinBox)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_minimumSizeHint_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QAbstractSpinBox_event_SUPER_QEvent_X(@myself, event)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      def step_by(steps : Int32) : Void
        Binding.bg_QAbstractSpinBox_stepBy_SUPER_int(@myself, steps)
      end
      
      def clear() : Void
        Binding.bg_QAbstractSpinBox_clear_SUPER_(@myself)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractSpinBox_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QAbstractSpinBox_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def step_enabled() : AbstractSpinBox::StepEnabled
        Binding.bg_QAbstractSpinBox_stepEnabled_SUPER_(@myself)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class AbstractSlider < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractSlider_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractSlider_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSlider_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractSlider_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QAbstractSlider__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSlider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event slider_change key_press_event timer_event wheel_event change_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractSlider.new(
      bg_QAbstractSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractSlider_JUMPTABLE_BgJumptable_QAbstractSlider_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def orientation() : Orientation
      Binding.bg_QAbstractSlider_orientation_(self)
    end
    
    def minimum=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setMinimum_int(self, unnamed_arg_0)
    end
    
    def minimum() : Int32
      Binding.bg_QAbstractSlider_minimum_(self)
    end
    
    def maximum=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setMaximum_int(self, unnamed_arg_0)
    end
    
    def maximum() : Int32
      Binding.bg_QAbstractSlider_maximum_(self)
    end
    
    def single_step=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setSingleStep_int(self, unnamed_arg_0)
    end
    
    def single_step() : Int32
      Binding.bg_QAbstractSlider_singleStep_(self)
    end
    
    def page_step=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setPageStep_int(self, unnamed_arg_0)
    end
    
    def page_step() : Int32
      Binding.bg_QAbstractSlider_pageStep_(self)
    end
    
    def tracking=(enable : Bool) : Void
      Binding.bg_QAbstractSlider_setTracking_bool(self, enable)
    end
    
    def has_tracking?() : Bool
      Binding.bg_QAbstractSlider_hasTracking_(self)
    end
    
    def slider_down=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSlider_setSliderDown_bool(self, unnamed_arg_0)
    end
    
    def slider_down?() : Bool
      Binding.bg_QAbstractSlider_isSliderDown_(self)
    end
    
    def slider_position=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setSliderPosition_int(self, unnamed_arg_0)
    end
    
    def slider_position() : Int32
      Binding.bg_QAbstractSlider_sliderPosition_(self)
    end
    
    def inverted_appearance=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSlider_setInvertedAppearance_bool(self, unnamed_arg_0)
    end
    
    def inverted_appearance() : Bool
      Binding.bg_QAbstractSlider_invertedAppearance_(self)
    end
    
    def inverted_controls=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAbstractSlider_setInvertedControls_bool(self, unnamed_arg_0)
    end
    
    def inverted_controls() : Bool
      Binding.bg_QAbstractSlider_invertedControls_(self)
    end
    
    def value() : Int32
      Binding.bg_QAbstractSlider_value_(self)
    end
    
    def trigger_action(action : AbstractSlider::SliderAction) : Void
      Binding.bg_QAbstractSlider_triggerAction_QAbstractSlider__SliderAction(self, action)
    end
    
    def value=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QAbstractSlider_setValue_int(self, unnamed_arg_0)
    end
    
    def orientation=(unnamed_arg_0 : Orientation) : Void
      Binding.bg_QAbstractSlider_setOrientation_Qt__Orientation(self, unnamed_arg_0)
    end
    
    def set_range(min : Int32, max : Int32) : Void
      Binding.bg_QAbstractSlider_setRange_int_int(self, min, max)
    end
    
    def value_changed(value : Int32) : Void
      Binding.bg_QAbstractSlider_valueChanged_int(self, value)
    end
    
    def slider_pressed() : Void
      Binding.bg_QAbstractSlider_sliderPressed_(self)
    end
    
    def slider_moved(position : Int32) : Void
      Binding.bg_QAbstractSlider_sliderMoved_int(self, position)
    end
    
    def slider_released() : Void
      Binding.bg_QAbstractSlider_sliderReleased_(self)
    end
    
    def range_changed(min : Int32, max : Int32) : Void
      Binding.bg_QAbstractSlider_rangeChanged_int_int(self, min, max)
    end
    
    def action_triggered(action : Int32) : Void
      Binding.bg_QAbstractSlider_actionTriggered_int(self, action)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QAbstractSlider_event_QEvent_X(self, e)
    end
    
    protected def set_repeat_action(action : AbstractSlider::SliderAction, threshold_time : Int32 = 500, repeat_time : Int32 = 50) : Void
      Binding.bg_QAbstractSlider_setRepeatAction_QAbstractSlider__SliderAction_int_int(self, action, threshold_time, repeat_time)
    end
    
    protected def repeat_action() : AbstractSlider::SliderAction
      Binding.bg_QAbstractSlider_repeatAction_(self)
    end
    
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    
    protected def key_press_event(ev : KeyEvent) : Void
      Binding.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(self, ev)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QAbstractSlider_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(e : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractSlider_changeEvent_QEvent_X(self, e)
    end
    
    protected def initialize(dd : Binding::QAbstractSliderPrivate*, parent : Widget? = nil)
      result = Binding.bg_QAbstractSlider__CONSTRUCT_QAbstractSliderPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractSlider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event slider_change key_press_event timer_event wheel_event change_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractSlider.new(
      bg_QAbstractSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractSlider_JUMPTABLE_BgJumptable_QAbstractSlider_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractSlider_staticMetaObject_STATIC_GETTER_()
    end
    
    enum SliderAction : UInt32
      SliderNoAction = 0
      SliderSingleStepAdd = 1
      SliderSingleStepSub = 2
      SliderPageStepAdd = 3
      SliderPageStepSub = 4
      SliderToMinimum = 5
      SliderToMaximum = 6
      SliderMove = 7
    end
    enum SliderChange : UInt32
      SliderRangeChange = 0
      SliderOrientationChange = 1
      SliderStepsChange = 2
      SliderValueChange = 3
    end
    def on_value_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_CONNECT_valueChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_slider_pressed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_CONNECT_sliderPressed_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_slider_moved(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_CONNECT_sliderMoved_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_slider_released(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_CONNECT_sliderReleased_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_range_changed(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_CONNECT_rangeChanged_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_action_triggered(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractSlider_CONNECT_actionTriggered_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractSlider*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractSlider)
      end
      protected def event(e : Event) : Bool
        Binding.bg_QAbstractSlider_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def slider_change(change : AbstractSlider::SliderChange) : Void
        Binding.bg_QAbstractSlider_sliderChange_SUPER_QAbstractSlider__SliderChange(@myself, change)
      end
      
      protected def key_press_event(ev : KeyEvent) : Void
        Binding.bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(@myself, ev)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(e : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractSlider_wheelEvent_SUPER_QWheelEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QWidget_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Slider < AbstractSlider
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QSlider_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSlider_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSlider_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSlider_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSlider_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QSlider__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Slider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event mouse_press_event mouse_release_event mouse_move_event slider_change key_press_event timer_event wheel_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSlider.new(
      bg_QSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSlider_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QSlider_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QSlider_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|ev| self.paint_event(PaintEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSlider_JUMPTABLE_BgJumptable_QSlider_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(orientation : Orientation, parent : Widget? = nil)
      result = Binding.bg_QSlider__CONSTRUCT_Qt__Orientation_QWidget_X(orientation, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Slider)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event mouse_press_event mouse_release_event mouse_move_event slider_change key_press_event timer_event wheel_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSlider.new(
      bg_QSlider_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QSlider_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSlider_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSlider_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QSlider_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QSlider_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QSlider_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|ev| self.paint_event(PaintEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QSlider_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSlider_JUMPTABLE_BgJumptable_QSlider_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QSlider_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QSlider_minimumSizeHint_(self)
    end
    
    def tick_position=(position : Slider::TickPosition) : Void
      Binding.bg_QSlider_setTickPosition_QSlider__TickPosition(self, position)
    end
    
    def tick_position() : Slider::TickPosition
      Binding.bg_QSlider_tickPosition_(self)
    end
    
    def tick_interval=(ti : Int32) : Void
      Binding.bg_QSlider_setTickInterval_int(self, ti)
    end
    
    def tick_interval() : Int32
      Binding.bg_QSlider_tickInterval_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QSlider_event_QEvent_X(self, event)
    end
    
    protected def paint_event(ev : PaintEvent) : Void
      Binding.bg_QSlider_paintEvent_QPaintEvent_X(self, ev)
    end
    
    protected def mouse_press_event(ev : MouseEvent) : Void
      Binding.bg_QSlider_mousePressEvent_QMouseEvent_X(self, ev)
    end
    
    protected def mouse_release_event(ev : MouseEvent) : Void
      Binding.bg_QSlider_mouseReleaseEvent_QMouseEvent_X(self, ev)
    end
    
    protected def mouse_move_event(ev : MouseEvent) : Void
      Binding.bg_QSlider_mouseMoveEvent_QMouseEvent_X(self, ev)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionSlider*) : Void
      Binding.bg_QSlider_initStyleOption_QStyleOptionSlider_X(self, option)
    end
    
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QAbstractSlider_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    
    protected def key_press_event(ev : KeyEvent) : Void
      Binding.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(self, ev)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QAbstractSlider_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(e : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractSlider_changeEvent_QEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QSlider_staticMetaObject_STATIC_GETTER_()
    end
    
    enum TickPosition : UInt32
      NoTicks = 0
      TicksAbove = 1
      TicksLeft = 1
      TicksBelow = 2
      TicksRight = 2
      TicksBothSides = 3
    end
    def initialize(unwrap : Binding::QSlider*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Slider)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QSlider_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QSlider_minimumSizeHint_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QSlider_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(ev : PaintEvent) : Void
        Binding.bg_QSlider_paintEvent_SUPER_QPaintEvent_X(@myself, ev)
      end
      
      protected def mouse_press_event(ev : MouseEvent) : Void
        Binding.bg_QSlider_mousePressEvent_SUPER_QMouseEvent_X(@myself, ev)
      end
      
      protected def mouse_release_event(ev : MouseEvent) : Void
        Binding.bg_QSlider_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, ev)
      end
      
      protected def mouse_move_event(ev : MouseEvent) : Void
        Binding.bg_QSlider_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, ev)
      end
      
      protected def slider_change(change : AbstractSlider::SliderChange) : Void
        Binding.bg_QAbstractSlider_sliderChange_SUPER_QAbstractSlider__SliderChange(@myself, change)
      end
      
      protected def key_press_event(ev : KeyEvent) : Void
        Binding.bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(@myself, ev)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(e : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractSlider_wheelEvent_SUPER_QWheelEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class TabBar < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTabBar_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTabBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QTabBar__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TabBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint tab_size_hint minimum_tab_size_hint tab_inserted tab_removed tab_layout_change event resize_event show_event hide_event paint_event mouse_press_event mouse_move_event mouse_release_event wheel_event key_press_event change_event timer_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTabBar.new(
      bg_QTabBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTabBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTabBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QTabBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QTabBar_tabSizeHint_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_size_hint") %} Proc(Int32, Binding::QSize*).new{|index| self.tab_size_hint(index) } {% else %} nil {% end %}),
      bg_QTabBar_minimumTabSizeHint_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_tab_size_hint") %} Proc(Int32, Binding::QSize*).new{|index| self.minimum_tab_size_hint(index) } {% else %} nil {% end %}),
      bg_QTabBar_tabInserted_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_inserted") %} Proc(Int32, Void).new{|index| self.tab_inserted(index) } {% else %} nil {% end %}),
      bg_QTabBar_tabRemoved_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_removed") %} Proc(Int32, Void).new{|index| self.tab_removed(index) } {% else %} nil {% end %}),
      bg_QTabBar_tabLayoutChange_: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_layout_change") %} Proc(Void).new{ self.tab_layout_change() } {% else %} nil {% end %}),
      bg_QTabBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QTabBar_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabBar_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTabBar_JUMPTABLE_BgJumptable_QTabBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def shape() : TabBar::Shape
      Binding.bg_QTabBar_shape_(self)
    end
    
    def shape=(shape : TabBar::Shape) : Void
      Binding.bg_QTabBar_setShape_QTabBar__Shape(self, shape)
    end
    
    def add_tab(text : String) : Int32
      Binding.bg_QTabBar_addTab_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def add_tab(icon : Icon, text : String) : Int32
      Binding.bg_QTabBar_addTab_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text))
    end
    
    def insert_tab(index : Int32, text : String) : Int32
      Binding.bg_QTabBar_insertTab_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def insert_tab(index : Int32, icon : Icon, text : String) : Int32
      Binding.bg_QTabBar_insertTab_int_const_QIcon_R_const_QString_R(self, index, icon, Qt::Converter::QString.wrap(text))
    end
    
    def remove_tab(index : Int32) : Void
      Binding.bg_QTabBar_removeTab_int(self, index)
    end
    
    def move_tab(from : Int32, to : Int32) : Void
      Binding.bg_QTabBar_moveTab_int_int(self, from, to)
    end
    
    def is_tab_enabled(index : Int32) : Bool
      Binding.bg_QTabBar_isTabEnabled_int(self, index)
    end
    
    def set_tab_enabled(index : Int32, enabled : Bool) : Void
      Binding.bg_QTabBar_setTabEnabled_int_bool(self, index, enabled)
    end
    
    def is_tab_visible(index : Int32) : Bool
      Binding.bg_QTabBar_isTabVisible_int(self, index)
    end
    
    def set_tab_visible(index : Int32, visible : Bool) : Void
      Binding.bg_QTabBar_setTabVisible_int_bool(self, index, visible)
    end
    
    def tab_text(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tabText_int(self, index))
    end
    
    def set_tab_text(index : Int32, text : String) : Void
      Binding.bg_QTabBar_setTabText_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def tab_text_color(index : Int32) : Color
      Color.new(unwrap: Binding.bg_QTabBar_tabTextColor_int(self, index))
    end
    
    def set_tab_text_color(index : Int32, color : Color) : Void
      Binding.bg_QTabBar_setTabTextColor_int_const_QColor_R(self, index, color)
    end
    
    def tab_icon(index : Int32) : Icon
      Icon.new(unwrap: Binding.bg_QTabBar_tabIcon_int(self, index))
    end
    
    def set_tab_icon(index : Int32, icon : Icon) : Void
      Binding.bg_QTabBar_setTabIcon_int_const_QIcon_R(self, index, icon)
    end
    
    def elide_mode() : TextElideMode
      Binding.bg_QTabBar_elideMode_(self)
    end
    
    def elide_mode=(mode : TextElideMode) : Void
      Binding.bg_QTabBar_setElideMode_Qt__TextElideMode(self, mode)
    end
    
    def set_tab_tool_tip(index : Int32, tip : String) : Void
      Binding.bg_QTabBar_setTabToolTip_int_const_QString_R(self, index, Qt::Converter::QString.wrap(tip))
    end
    
    def tab_tool_tip(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tabToolTip_int(self, index))
    end
    
    def set_tab_whats_this(index : Int32, text : String) : Void
      Binding.bg_QTabBar_setTabWhatsThis_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def tab_whats_this(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_tabWhatsThis_int(self, index))
    end
    
    def set_tab_data(index : Int32, data : Variant) : Void
      Binding.bg_QTabBar_setTabData_int_const_QVariant_R(self, index, (data.to_unsafe))
    end
    
    def tab_data(index : Int32) : Variant
      Qt::Variant.new(Binding.bg_QTabBar_tabData_int(self, index))
    end
    
    def tab_rect(index : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QTabBar_tabRect_int(self, index))
    end
    
    def tab_at(pos : Point) : Int32
      Binding.bg_QTabBar_tabAt_const_QPoint_R(self, pos)
    end
    
    def current_index() : Int32
      Binding.bg_QTabBar_currentIndex_(self)
    end
    
    def count() : Int32
      Binding.bg_QTabBar_count_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QTabBar_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QTabBar_minimumSizeHint_(self)
    end
    
    def draw_base=(draw_the_base : Bool) : Void
      Binding.bg_QTabBar_setDrawBase_bool(self, draw_the_base)
    end
    
    def draw_base() : Bool
      Binding.bg_QTabBar_drawBase_(self)
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QTabBar_iconSize_(self)
    end
    
    def icon_size=(size : Binding::QSize*) : Void
      Binding.bg_QTabBar_setIconSize_const_QSize_R(self, size)
    end
    
    def uses_scroll_buttons() : Bool
      Binding.bg_QTabBar_usesScrollButtons_(self)
    end
    
    def uses_scroll_buttons=(use_buttons : Bool) : Void
      Binding.bg_QTabBar_setUsesScrollButtons_bool(self, use_buttons)
    end
    
    def tabs_closable() : Bool
      Binding.bg_QTabBar_tabsClosable_(self)
    end
    
    def tabs_closable=(closable : Bool) : Void
      Binding.bg_QTabBar_setTabsClosable_bool(self, closable)
    end
    
    def set_tab_button(index : Int32, position : TabBar::ButtonPosition, widget : Widget) : Void
      Binding.bg_QTabBar_setTabButton_int_QTabBar__ButtonPosition_QWidget_X(self, index, position, widget)
    end
    
    def tab_button(index : Int32, position : TabBar::ButtonPosition) : Widget
      Widget.new(unwrap: Binding.bg_QTabBar_tabButton_int_QTabBar__ButtonPosition(self, index, position))
    end
    
    def selection_behavior_on_remove() : TabBar::SelectionBehavior
      Binding.bg_QTabBar_selectionBehaviorOnRemove_(self)
    end
    
    def selection_behavior_on_remove=(behavior : TabBar::SelectionBehavior) : Void
      Binding.bg_QTabBar_setSelectionBehaviorOnRemove_QTabBar__SelectionBehavior(self, behavior)
    end
    
    def expanding() : Bool
      Binding.bg_QTabBar_expanding_(self)
    end
    
    def expanding=(enabled : Bool) : Void
      Binding.bg_QTabBar_setExpanding_bool(self, enabled)
    end
    
    def movable?() : Bool
      Binding.bg_QTabBar_isMovable_(self)
    end
    
    def movable=(movable : Bool) : Void
      Binding.bg_QTabBar_setMovable_bool(self, movable)
    end
    
    def document_mode() : Bool
      Binding.bg_QTabBar_documentMode_(self)
    end
    
    def document_mode=(set : Bool) : Void
      Binding.bg_QTabBar_setDocumentMode_bool(self, set)
    end
    
    def auto_hide() : Bool
      Binding.bg_QTabBar_autoHide_(self)
    end
    
    def auto_hide=(hide : Bool) : Void
      Binding.bg_QTabBar_setAutoHide_bool(self, hide)
    end
    
    def change_current_on_drag() : Bool
      Binding.bg_QTabBar_changeCurrentOnDrag_(self)
    end
    
    def change_current_on_drag=(change : Bool) : Void
      Binding.bg_QTabBar_setChangeCurrentOnDrag_bool(self, change)
    end
    
    def accessible_tab_name(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabBar_accessibleTabName_int(self, index))
    end
    
    def set_accessible_tab_name(index : Int32, name : String) : Void
      Binding.bg_QTabBar_setAccessibleTabName_int_const_QString_R(self, index, Qt::Converter::QString.wrap(name))
    end
    
    def current_index=(index : Int32) : Void
      Binding.bg_QTabBar_setCurrentIndex_int(self, index)
    end
    
    def current_changed(index : Int32) : Void
      Binding.bg_QTabBar_currentChanged_int(self, index)
    end
    
    def tab_close_requested(index : Int32) : Void
      Binding.bg_QTabBar_tabCloseRequested_int(self, index)
    end
    
    def tab_moved(from : Int32, to : Int32) : Void
      Binding.bg_QTabBar_tabMoved_int_int(self, from, to)
    end
    
    def tab_bar_clicked(index : Int32) : Void
      Binding.bg_QTabBar_tabBarClicked_int(self, index)
    end
    
    def tab_bar_double_clicked(index : Int32) : Void
      Binding.bg_QTabBar_tabBarDoubleClicked_int(self, index)
    end
    
    protected def tab_size_hint(index : Int32) : Binding::QSize*
      Binding.bg_QTabBar_tabSizeHint_int(self, index)
    end
    
    protected def minimum_tab_size_hint(index : Int32) : Binding::QSize*
      Binding.bg_QTabBar_minimumTabSizeHint_int(self, index)
    end
    
    protected def tab_inserted(index : Int32) : Void
      Binding.bg_QTabBar_tabInserted_int(self, index)
    end
    
    protected def tab_removed(index : Int32) : Void
      Binding.bg_QTabBar_tabRemoved_int(self, index)
    end
    
    protected def tab_layout_change() : Void
      Binding.bg_QTabBar_tabLayoutChange_(self)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QTabBar_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QTabBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QTabBar_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QTabBar_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QTabBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QTabBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QTabBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QTabBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QTabBar_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QTabBar_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QTabBar_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QTabBar_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionTab*, tab_index : Int32) : Void
      Binding.bg_QTabBar_initStyleOption_QStyleOptionTab_X_int(self, option, tab_index)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTabBar_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Shape : UInt32
      RoundedNorth = 0
      RoundedSouth = 1
      RoundedWest = 2
      RoundedEast = 3
      TriangularNorth = 4
      TriangularSouth = 5
      TriangularWest = 6
      TriangularEast = 7
    end
    enum ButtonPosition : UInt32
      LeftSide = 0
      RightSide = 1
    end
    enum SelectionBehavior : UInt32
      SelectLeftTab = 0
      SelectRightTab = 1
      SelectPreviousTab = 2
    end
    def on_current_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_CONNECT_currentChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tab_close_requested(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_CONNECT_tabCloseRequested_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tab_moved(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_CONNECT_tabMoved_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_tab_bar_clicked(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_CONNECT_tabBarClicked_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tab_bar_double_clicked(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabBar_CONNECT_tabBarDoubleClicked_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QTabBar*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TabBar)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QTabBar_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QTabBar_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def tab_size_hint(index : Int32) : Binding::QSize*
        Binding.bg_QTabBar_tabSizeHint_SUPER_int(@myself, index)
      end
      
      protected def minimum_tab_size_hint(index : Int32) : Binding::QSize*
        Binding.bg_QTabBar_minimumTabSizeHint_SUPER_int(@myself, index)
      end
      
      protected def tab_inserted(index : Int32) : Void
        Binding.bg_QTabBar_tabInserted_SUPER_int(@myself, index)
      end
      
      protected def tab_removed(index : Int32) : Void
        Binding.bg_QTabBar_tabRemoved_SUPER_int(@myself, index)
      end
      
      protected def tab_layout_change() : Void
        Binding.bg_QTabBar_tabLayoutChange_SUPER_(@myself)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QTabBar_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QTabBar_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QTabBar_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def hide_event(unnamed_arg_0 : HideEvent) : Void
        Binding.bg_QTabBar_hideEvent_SUPER_QHideEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QTabBar_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QTabBar_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QTabBar_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QTabBar_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QTabBar_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QTabBar_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QTabBar_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QTabBar_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class TabWidget < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTabWidget_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTabWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QTabWidget__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TabWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width has_height_for_width? tab_inserted tab_removed show_event resize_event key_press_event paint_event change_event event dev_type visible= paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTabWidget.new(
      bg_QTabWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTabWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTabWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTabWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QTabWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|width| self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QTabWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QTabWidget_tabInserted_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_inserted") %} Proc(Int32, Void).new{|index| self.tab_inserted(index) } {% else %} nil {% end %}),
      bg_QTabWidget_tabRemoved_int: BindgenHelper.wrap_proc({% if forwarded.includes?("tab_removed") %} Proc(Int32, Void).new{|index| self.tab_removed(index) } {% else %} nil {% end %}),
      bg_QTabWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTabWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTabWidget_JUMPTABLE_BgJumptable_QTabWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_tab(widget : Widget, unnamed_arg_1 : String) : Int32
      Binding.bg_QTabWidget_addTab_QWidget_X_const_QString_R(self, widget, Qt::Converter::QString.wrap(unnamed_arg_1))
    end
    
    def add_tab(widget : Widget, icon : Icon, label : String) : Int32
      Binding.bg_QTabWidget_addTab_QWidget_X_const_QIcon_R_const_QString_R(self, widget, icon, Qt::Converter::QString.wrap(label))
    end
    
    def insert_tab(index : Int32, widget : Widget, unnamed_arg_2 : String) : Int32
      Binding.bg_QTabWidget_insertTab_int_QWidget_X_const_QString_R(self, index, widget, Qt::Converter::QString.wrap(unnamed_arg_2))
    end
    
    def insert_tab(index : Int32, widget : Widget, icon : Icon, label : String) : Int32
      Binding.bg_QTabWidget_insertTab_int_QWidget_X_const_QIcon_R_const_QString_R(self, index, widget, icon, Qt::Converter::QString.wrap(label))
    end
    
    def remove_tab(index : Int32) : Void
      Binding.bg_QTabWidget_removeTab_int(self, index)
    end
    
    def is_tab_enabled(index : Int32) : Bool
      Binding.bg_QTabWidget_isTabEnabled_int(self, index)
    end
    
    def set_tab_enabled(index : Int32, enabled : Bool) : Void
      Binding.bg_QTabWidget_setTabEnabled_int_bool(self, index, enabled)
    end
    
    def is_tab_visible(index : Int32) : Bool
      Binding.bg_QTabWidget_isTabVisible_int(self, index)
    end
    
    def set_tab_visible(index : Int32, visible : Bool) : Void
      Binding.bg_QTabWidget_setTabVisible_int_bool(self, index, visible)
    end
    
    def tab_text(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabText_int(self, index))
    end
    
    def set_tab_text(index : Int32, text : String) : Void
      Binding.bg_QTabWidget_setTabText_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def tab_icon(index : Int32) : Icon
      Icon.new(unwrap: Binding.bg_QTabWidget_tabIcon_int(self, index))
    end
    
    def set_tab_icon(index : Int32, icon : Icon) : Void
      Binding.bg_QTabWidget_setTabIcon_int_const_QIcon_R(self, index, icon)
    end
    
    def set_tab_tool_tip(index : Int32, tip : String) : Void
      Binding.bg_QTabWidget_setTabToolTip_int_const_QString_R(self, index, Qt::Converter::QString.wrap(tip))
    end
    
    def tab_tool_tip(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabToolTip_int(self, index))
    end
    
    def set_tab_whats_this(index : Int32, text : String) : Void
      Binding.bg_QTabWidget_setTabWhatsThis_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def tab_whats_this(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTabWidget_tabWhatsThis_int(self, index))
    end
    
    def current_index() : Int32
      Binding.bg_QTabWidget_currentIndex_(self)
    end
    
    def current_widget() : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_currentWidget_(self))
    end
    
    def widget(index : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_widget_int(self, index))
    end
    
    def index_of(widget : Widget) : Int32
      Binding.bg_QTabWidget_indexOf_QWidget_X(self, widget)
    end
    
    def count() : Int32
      Binding.bg_QTabWidget_count_(self)
    end
    
    def tab_position() : TabWidget::TabPosition
      Binding.bg_QTabWidget_tabPosition_(self)
    end
    
    def tab_position=(position : TabWidget::TabPosition) : Void
      Binding.bg_QTabWidget_setTabPosition_QTabWidget__TabPosition(self, position)
    end
    
    def tabs_closable() : Bool
      Binding.bg_QTabWidget_tabsClosable_(self)
    end
    
    def tabs_closable=(closeable : Bool) : Void
      Binding.bg_QTabWidget_setTabsClosable_bool(self, closeable)
    end
    
    def movable?() : Bool
      Binding.bg_QTabWidget_isMovable_(self)
    end
    
    def movable=(movable : Bool) : Void
      Binding.bg_QTabWidget_setMovable_bool(self, movable)
    end
    
    def tab_shape() : TabWidget::TabShape
      Binding.bg_QTabWidget_tabShape_(self)
    end
    
    def tab_shape=(s : TabWidget::TabShape) : Void
      Binding.bg_QTabWidget_setTabShape_QTabWidget__TabShape(self, s)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QTabWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QTabWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(width : Int32) : Int32
      Binding.bg_QTabWidget_heightForWidth_int(self, width)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QTabWidget_hasHeightForWidth_(self)
    end
    
    def set_corner_widget(w : Widget, corner : Corner = Corner::TopRightCorner) : Void
      Binding.bg_QTabWidget_setCornerWidget_QWidget_X_Qt__Corner(self, w, corner)
    end
    
    def corner_widget(corner : Corner = Corner::TopRightCorner) : Widget
      Widget.new(unwrap: Binding.bg_QTabWidget_cornerWidget_Qt__Corner(self, corner))
    end
    
    def elide_mode() : TextElideMode
      Binding.bg_QTabWidget_elideMode_(self)
    end
    
    def elide_mode=(mode : TextElideMode) : Void
      Binding.bg_QTabWidget_setElideMode_Qt__TextElideMode(self, mode)
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QTabWidget_iconSize_(self)
    end
    
    def icon_size=(size : Binding::QSize*) : Void
      Binding.bg_QTabWidget_setIconSize_const_QSize_R(self, size)
    end
    
    def uses_scroll_buttons() : Bool
      Binding.bg_QTabWidget_usesScrollButtons_(self)
    end
    
    def uses_scroll_buttons=(use_buttons : Bool) : Void
      Binding.bg_QTabWidget_setUsesScrollButtons_bool(self, use_buttons)
    end
    
    def document_mode() : Bool
      Binding.bg_QTabWidget_documentMode_(self)
    end
    
    def document_mode=(set : Bool) : Void
      Binding.bg_QTabWidget_setDocumentMode_bool(self, set)
    end
    
    def tab_bar_auto_hide() : Bool
      Binding.bg_QTabWidget_tabBarAutoHide_(self)
    end
    
    def tab_bar_auto_hide=(enabled : Bool) : Void
      Binding.bg_QTabWidget_setTabBarAutoHide_bool(self, enabled)
    end
    
    def clear() : Void
      Binding.bg_QTabWidget_clear_(self)
    end
    
    def tab_bar() : TabBar
      TabBar.new(unwrap: Binding.bg_QTabWidget_tabBar_(self))
    end
    
    def current_index=(index : Int32) : Void
      Binding.bg_QTabWidget_setCurrentIndex_int(self, index)
    end
    
    def current_widget=(widget : Widget) : Void
      Binding.bg_QTabWidget_setCurrentWidget_QWidget_X(self, widget)
    end
    
    def current_changed(index : Int32) : Void
      Binding.bg_QTabWidget_currentChanged_int(self, index)
    end
    
    def tab_close_requested(index : Int32) : Void
      Binding.bg_QTabWidget_tabCloseRequested_int(self, index)
    end
    
    def tab_bar_clicked(index : Int32) : Void
      Binding.bg_QTabWidget_tabBarClicked_int(self, index)
    end
    
    def tab_bar_double_clicked(index : Int32) : Void
      Binding.bg_QTabWidget_tabBarDoubleClicked_int(self, index)
    end
    
    protected def tab_inserted(index : Int32) : Void
      Binding.bg_QTabWidget_tabInserted_int(self, index)
    end
    
    protected def tab_removed(index : Int32) : Void
      Binding.bg_QTabWidget_tabRemoved_int(self, index)
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QTabWidget_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QTabWidget_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QTabWidget_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QTabWidget_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def tab_bar=(unnamed_arg_0 : TabBar) : Void
      Binding.bg_QTabWidget_setTabBar_QTabBar_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QTabWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QTabWidget_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionTabWidgetFrame*) : Void
      Binding.bg_QTabWidget_initStyleOption_QStyleOptionTabWidgetFrame_X(self, option)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTabWidget_staticMetaObject_STATIC_GETTER_()
    end
    
    enum TabPosition : UInt32
      North = 0
      South = 1
      West = 2
      East = 3
    end
    enum TabShape : UInt32
      Rounded = 0
      Triangular = 1
    end
    def on_current_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_CONNECT_currentChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tab_close_requested(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_CONNECT_tabCloseRequested_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tab_bar_clicked(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_CONNECT_tabBarClicked_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tab_bar_double_clicked(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTabWidget_CONNECT_tabBarDoubleClicked_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QTabWidget*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TabWidget)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QTabWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QTabWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(width : Int32) : Int32
        Binding.bg_QTabWidget_heightForWidth_SUPER_int(@myself, width)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QTabWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      protected def tab_inserted(index : Int32) : Void
        Binding.bg_QTabWidget_tabInserted_SUPER_int(@myself, index)
      end
      
      protected def tab_removed(index : Int32) : Void
        Binding.bg_QTabWidget_tabRemoved_SUPER_int(@myself, index)
      end
      
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QTabWidget_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QTabWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QTabWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QTabWidget_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QTabWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QTabWidget_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Frame < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QFrame_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFrame_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFrame_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QFrame__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFrame_JUMPTABLE_BgJumptable_QFrame_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, f : WindowFlags)
      result = Binding.bg_QFrame__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFrame_JUMPTABLE_BgJumptable_QFrame_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def frame_style() : Int32
      Binding.bg_QFrame_frameStyle_(self)
    end
    
    def frame_style=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setFrameStyle_int(self, unnamed_arg_0)
    end
    
    def frame_width() : Int32
      Binding.bg_QFrame_frameWidth_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QFrame_sizeHint_(self)
    end
    
    def frame_shape() : Frame::Shape
      Binding.bg_QFrame_frameShape_(self)
    end
    
    def frame_shape=(unnamed_arg_0 : Frame::Shape) : Void
      Binding.bg_QFrame_setFrameShape_QFrame__Shape(self, unnamed_arg_0)
    end
    
    def frame_shadow() : Frame::Shadow
      Binding.bg_QFrame_frameShadow_(self)
    end
    
    def frame_shadow=(unnamed_arg_0 : Frame::Shadow) : Void
      Binding.bg_QFrame_setFrameShadow_QFrame__Shadow(self, unnamed_arg_0)
    end
    
    def line_width() : Int32
      Binding.bg_QFrame_lineWidth_(self)
    end
    
    def line_width=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setLineWidth_int(self, unnamed_arg_0)
    end
    
    def mid_line_width() : Int32
      Binding.bg_QFrame_midLineWidth_(self)
    end
    
    def mid_line_width=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFrame_setMidLineWidth_int(self, unnamed_arg_0)
    end
    
    def frame_rect() : Rect
      Rect.new(unwrap: Binding.bg_QFrame_frameRect_(self))
    end
    
    def frame_rect=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QFrame_setFrameRect_const_QRect_R(self, unnamed_arg_0)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QFrame_event_QEvent_X(self, e)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QFrame_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QFrame_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def draw_frame(unnamed_arg_0 : Painter) : Void
      Binding.bg_QFrame_drawFrame_QPainter_X(self, unnamed_arg_0)
    end
    
    protected def initialize(dd : Binding::QFramePrivate*, parent : Widget? = nil)
      result = Binding.bg_QFrame__CONSTRUCT_QFramePrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFrame_JUMPTABLE_BgJumptable_QFrame_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def initialize(dd : Binding::QFramePrivate*, parent : Widget?, f : WindowFlags)
      result = Binding.bg_QFrame__CONSTRUCT_QFramePrivate_R_QWidget_X_Qt__WindowFlags(dd, parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Frame)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFrame.new(
      bg_QFrame_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFrame_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFrame_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFrame_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QFrame_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QFrame_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFrame_JUMPTABLE_BgJumptable_QFrame_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def init_style_option(option : Binding::QStyleOptionFrame*) : Void
      Binding.bg_QFrame_initStyleOption_QStyleOptionFrame_X(self, option)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QFrame_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Shape : UInt32
      NoFrame = 0
      Box = 1
      Panel = 2
      WinPanel = 3
      Hline = 4
      Vline = 5
      StyledPanel = 6
    end
    enum Shadow : UInt32
      Plain = 16
      Raised = 32
      Sunken = 48
    end
    def initialize(unwrap : Binding::QFrame*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Frame)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QFrame_sizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QFrame_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QFrame_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QFrame_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class StyleOptionGraphicsItem
    @unwrap : Binding::QStyleOptionGraphicsItem*
    
    def initialize()
      result = Binding.bg_QStyleOptionGraphicsItem__CONSTRUCT_()
    @unwrap = result
    end
    
    def self.level_of_detail_from_transform(world_transform : Binding::QTransform*) : Float64
      Binding.bg_QStyleOptionGraphicsItem_levelOfDetailFromTransform_STATIC_const_QTransform_R(world_transform)
    end
    
    protected def initialize(version : Int32)
      result = Binding.bg_QStyleOptionGraphicsItem__CONSTRUCT_int(version)
    @unwrap = result
    end
    
    def exposed_rect() : RectF
      RectF.new(unwrap: Binding.bg_QStyleOptionGraphicsItem_exposedRect_GETTER_(self))
    end
    
    def exposed_rect=(exposed_rect : RectF) : Void
      Binding.bg_QStyleOptionGraphicsItem_exposedRect_SETTER_QRectF(self, exposed_rect)
    end
    
    def matrix() : Binding::QMatrix*
      Binding.bg_QStyleOptionGraphicsItem_matrix_GETTER_(self)
    end
    
    def matrix=(matrix : Binding::QMatrix*) : Void
      Binding.bg_QStyleOptionGraphicsItem_matrix_SETTER_QMatrix(self, matrix)
    end
    
    def level_of_detail() : Float64
      Binding.bg_QStyleOptionGraphicsItem_levelOfDetail_GETTER_(self)
    end
    
    def level_of_detail=(level_of_detail : Float64) : Void
      Binding.bg_QStyleOptionGraphicsItem_levelOfDetail_SETTER_qreal(self, level_of_detail)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QStyleOptionGraphicsItem*)
      result = unwrap
    @unwrap = result
    end
    
  end
  abstract class AbstractItemDelegate < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractItemDelegate_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractItemDelegate_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemDelegate_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemDelegate_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemDelegate_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QAbstractItemDelegate__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractItemDelegate)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall paint size_hint create_editor destroy_editor set_editor_data set_model_data update_editor_geometry editor_event help_event painting_roles event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractItemDelegate.new(
      bg_QAbstractItemDelegate_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Void).new{|painter, option, index| self.paint(Painter.new(unwrap: painter), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Binding::QSize*).new{|option, index| self.size_hint(option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_editor") %} Proc(Binding::QWidget*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Binding::QWidget*).new{|parent, option, index| self.create_editor(Widget.new(unwrap: parent), option, ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("destroy_editor") %} Proc(Binding::QWidget*, Binding::QModelIndex*, Void).new{|editor, index| self.destroy_editor(Widget.new(unwrap: editor), ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_editor_data") %} Proc(Binding::QWidget*, Binding::QModelIndex*, Void).new{|editor, index| self.set_editor_data(Widget.new(unwrap: editor), ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_model_data") %} Proc(Binding::QWidget*, Binding::QAbstractItemModel*, Binding::QModelIndex*, Void).new{|editor, model, index| self.set_model_data(Widget.new(unwrap: editor), AbstractItemModelImpl.new(unwrap: model), ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_geometry") %} Proc(Binding::QWidget*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Void).new{|editor, option, index| self.update_editor_geometry(Widget.new(unwrap: editor), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("editor_event") %} Proc(Binding::QEvent*, Binding::QAbstractItemModel*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Bool).new{|event, model, option, index| self.editor_event(Event.new(unwrap: event), AbstractItemModelImpl.new(unwrap: model), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} Proc(Binding::QHelpEvent*, Binding::QAbstractItemView*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Bool).new{|event, view, option, index| self.help_event(HelpEvent.new(unwrap: event), AbstractItemViewImpl.new(unwrap: view), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_paintingRoles_: BindgenHelper.wrap_proc({% if forwarded.includes?("painting_roles") %} Proc(Binding::ContainerQVectorInt*).new{ BindgenHelper.wrap_container(Container_QVector_int_, self.painting_roles()).to_unsafe } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractItemDelegate_JUMPTABLE_BgJumptable_QAbstractItemDelegate_R(result, pointerof(jump_table))
    {% end %}
    end
    
    abstract def paint(painter : Painter, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
    abstract def size_hint(option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Binding::QSize*
    def create_editor(parent : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Widget
      Widget.new(unwrap: Binding.bg_QAbstractItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, parent, option, index))
    end
    
    def destroy_editor(editor : Widget, index : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R(self, editor, index)
    end
    
    def set_editor_data(editor : Widget, index : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R(self, editor, index)
    end
    
    def set_model_data(editor : Widget, model : AbstractItemModel, index : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(self, editor, model, index)
    end
    
    def update_editor_geometry(editor : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, editor, option, index)
    end
    
    def editor_event(event : Event, model : AbstractItemModel, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
      Binding.bg_QAbstractItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, event, model, option, index)
    end
    
    def help_event(event : HelpEvent, view : AbstractItemView, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
      Binding.bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, event, view, option, index)
    end
    
    def painting_roles() : Enumerable(Int32)
      Container_QVector_int_.new(unwrap: Binding.bg_QAbstractItemDelegate_paintingRoles_(self))
    end
    
    def commit_data(editor : Widget) : Void
      Binding.bg_QAbstractItemDelegate_commitData_QWidget_X(self, editor)
    end
    
    def close_editor(editor : Widget, hint : AbstractItemDelegate::EndEditHint = AbstractItemDelegate::EndEditHint::NoHint) : Void
      Binding.bg_QAbstractItemDelegate_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint(self, editor, hint)
    end
    
    def size_hint_changed(unnamed_arg_0 : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_sizeHintChanged_const_QModelIndex_R(self, unnamed_arg_0)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractItemDelegate_staticMetaObject_STATIC_GETTER_()
    end
    
    enum EndEditHint : UInt32
      NoHint = 0
      EditNextItem = 1
      EditPreviousItem = 2
      SubmitModelCache = 3
      RevertModelCache = 4
    end
    enum SelectionMode : UInt32
      NoSelection = 0
      SingleSelection = 1
      MultiSelection = 2
      ExtendedSelection = 3
      ContiguousSelection = 4
    end
    enum SelectionBehavior : UInt32
      SelectItems = 0
      SelectRows = 1
      SelectColumns = 2
    end
    enum ScrollHint : UInt32
      EnsureVisible = 0
      PositionAtTop = 1
      PositionAtBottom = 2
      PositionAtCenter = 3
    end
    enum EditTrigger : UInt32
      NoEditTriggers = 0
      CurrentChanged = 1
      DoubleClicked = 2
      SelectedClicked = 4
      EditKeyPressed = 8
      AnyKeyPressed = 16
      AllEditTriggers = 31
    end
    @[Flags]
    enum EditTriggers : UInt32
      NoEditTriggers = 0
      CurrentChanged = 1
      DoubleClicked = 2
      SelectedClicked = 4
      EditKeyPressed = 8
      AnyKeyPressed = 16
      AllEditTriggers = 31
    end
    enum ScrollMode : UInt32
      ScrollPerItem = 0
      ScrollPerPixel = 1
    end
    enum DragDropMode : UInt32
      NoDragDrop = 0
      DragOnly = 1
      DropOnly = 2
      DragDrop = 3
      InternalMove = 4
    end
    enum CursorAction : UInt32
      MoveUp = 0
      MoveDown = 1
      MoveLeft = 2
      MoveRight = 3
      MoveHome = 4
      MoveEnd = 5
      MovePageUp = 6
      MovePageDown = 7
      MoveNext = 8
      MovePrevious = 9
    end
    enum State : UInt32
      NoState = 0
      DraggingState = 1
      DragSelectingState = 2
      EditingState = 3
      ExpandingState = 4
      CollapsingState = 5
      AnimatingState = 6
    end
    enum DropIndicatorPosition : UInt32
      OnItem = 0
      AboveItem = 1
      BelowItem = 2
      OnViewport = 3
    end
    def on_commit_data(&_proc_ : Proc(Widget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemDelegate_CONNECT_commitData_CrystalProc_void__QWidget_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QWidget*, Void).new do |arg0| _proc_.call(Widget.new(unwrap: arg0)) end)))
    end
    
    def on_close_editor(&_proc_ : Proc(Widget, AbstractItemDelegate::EndEditHint, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemDelegate_CONNECT_closeEditor_CrystalProc_void__QWidget_X__QAbstractItemDelegate__EndEditHint_(self, BindgenHelper.wrap_proc(Proc(Binding::QWidget*, AbstractItemDelegate::EndEditHint, Void).new do |arg0, arg1| _proc_.call(Widget.new(unwrap: arg0), arg1) end)))
    end
    
    def on_size_hint_changed(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemDelegate_CONNECT_sizeHintChanged_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractItemDelegate*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractItemDelegate)
      end
      def create_editor(parent : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Widget
        Widget.new(unwrap: Binding.bg_QAbstractItemDelegate_createEditor_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, parent, option, index))
      end
      
      def destroy_editor(editor : Widget, index : ModelIndex) : Void
        Binding.bg_QAbstractItemDelegate_destroyEditor_SUPER_QWidget_X_const_QModelIndex_R(@myself, editor, index)
      end
      
      def set_editor_data(editor : Widget, index : ModelIndex) : Void
        Binding.bg_QAbstractItemDelegate_setEditorData_SUPER_QWidget_X_const_QModelIndex_R(@myself, editor, index)
      end
      
      def set_model_data(editor : Widget, model : AbstractItemModel, index : ModelIndex) : Void
        Binding.bg_QAbstractItemDelegate_setModelData_SUPER_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(@myself, editor, model, index)
      end
      
      def update_editor_geometry(editor : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
        Binding.bg_QAbstractItemDelegate_updateEditorGeometry_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, editor, option, index)
      end
      
      def editor_event(event : Event, model : AbstractItemModel, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
        Binding.bg_QAbstractItemDelegate_editorEvent_SUPER_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, event, model, option, index)
      end
      
      def help_event(event : HelpEvent, view : AbstractItemView, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
        Binding.bg_QAbstractItemDelegate_helpEvent_SUPER_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, event, view, option, index)
      end
      
      def painting_roles() : Enumerable(Int32)
        Container_QVector_int_.new(unwrap: Binding.bg_QAbstractItemDelegate_paintingRoles_SUPER_(@myself))
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class AbstractScrollArea < Frame
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractScrollArea_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractScrollArea_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractScrollArea_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QAbstractScrollArea__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|unnamed_arg_0| self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|unnamed_arg_0| self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|unnamed_arg_0| self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|unnamed_arg_0| self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractScrollArea_JUMPTABLE_BgJumptable_QAbstractScrollArea_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def vertical_scroll_bar_policy() : ScrollBarPolicy
      Binding.bg_QAbstractScrollArea_verticalScrollBarPolicy_(self)
    end
    
    def vertical_scroll_bar_policy=(unnamed_arg_0 : ScrollBarPolicy) : Void
      Binding.bg_QAbstractScrollArea_setVerticalScrollBarPolicy_Qt__ScrollBarPolicy(self, unnamed_arg_0)
    end
    
    def vertical_scroll_bar() : ScrollBar
      ScrollBar.new(unwrap: Binding.bg_QAbstractScrollArea_verticalScrollBar_(self))
    end
    
    def vertical_scroll_bar=(scrollbar : ScrollBar) : Void
      Binding.bg_QAbstractScrollArea_setVerticalScrollBar_QScrollBar_X(self, scrollbar)
    end
    
    def horizontal_scroll_bar_policy() : ScrollBarPolicy
      Binding.bg_QAbstractScrollArea_horizontalScrollBarPolicy_(self)
    end
    
    def horizontal_scroll_bar_policy=(unnamed_arg_0 : ScrollBarPolicy) : Void
      Binding.bg_QAbstractScrollArea_setHorizontalScrollBarPolicy_Qt__ScrollBarPolicy(self, unnamed_arg_0)
    end
    
    def horizontal_scroll_bar() : ScrollBar
      ScrollBar.new(unwrap: Binding.bg_QAbstractScrollArea_horizontalScrollBar_(self))
    end
    
    def horizontal_scroll_bar=(scrollbar : ScrollBar) : Void
      Binding.bg_QAbstractScrollArea_setHorizontalScrollBar_QScrollBar_X(self, scrollbar)
    end
    
    def corner_widget() : Widget
      Widget.new(unwrap: Binding.bg_QAbstractScrollArea_cornerWidget_(self))
    end
    
    def corner_widget=(widget : Widget) : Void
      Binding.bg_QAbstractScrollArea_setCornerWidget_QWidget_X(self, widget)
    end
    
    def add_scroll_bar_widget(widget : Widget, alignment : Alignment) : Void
      Binding.bg_QAbstractScrollArea_addScrollBarWidget_QWidget_X_Qt__Alignment(self, widget, alignment)
    end
    
    def scroll_bar_widgets(alignment : Alignment) : Binding::QWidgetList*
      Binding.bg_QAbstractScrollArea_scrollBarWidgets_Qt__Alignment(self, alignment)
    end
    
    def viewport() : Widget
      Widget.new(unwrap: Binding.bg_QAbstractScrollArea_viewport_(self))
    end
    
    def viewport=(widget : Widget) : Void
      Binding.bg_QAbstractScrollArea_setViewport_QWidget_X(self, widget)
    end
    
    def maximum_viewport_size() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_maximumViewportSize_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_sizeHint_(self)
    end
    
    def setup_viewport(viewport : Widget) : Void
      Binding.bg_QAbstractScrollArea_setupViewport_QWidget_X(self, viewport)
    end
    
    def size_adjust_policy() : AbstractScrollArea::SizeAdjustPolicy
      Binding.bg_QAbstractScrollArea_sizeAdjustPolicy_(self)
    end
    
    def size_adjust_policy=(policy : AbstractScrollArea::SizeAdjustPolicy) : Void
      Binding.bg_QAbstractScrollArea_setSizeAdjustPolicy_QAbstractScrollArea__SizeAdjustPolicy(self, policy)
    end
    
    protected def initialize(dd : Binding::QAbstractScrollAreaPrivate*, parent : Widget? = nil)
      result = Binding.bg_QAbstractScrollArea__CONSTRUCT_QAbstractScrollAreaPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint size_hint setup_viewport event_filter event viewport_event resize_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event scroll_contents_by viewport_size_hint change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractScrollArea.new(
      bg_QAbstractScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|unnamed_arg_0| self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|unnamed_arg_0| self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|unnamed_arg_0| self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|unnamed_arg_0| self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractScrollArea_JUMPTABLE_BgJumptable_QAbstractScrollArea_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def set_viewport_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QAbstractScrollArea_setViewportMargins_int_int_int_int(self, left, top, right, bottom)
    end
    
    protected def viewport_margins=(margins : Binding::QMargins*) : Void
      Binding.bg_QAbstractScrollArea_setViewportMargins_const_QMargins_R(self, margins)
    end
    
    protected def viewport_margins() : Binding::QMargins*
      Binding.bg_QAbstractScrollArea_viewportMargins_(self)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAbstractScrollArea_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def viewport_event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAbstractScrollArea_viewportEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QAbstractScrollArea_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
      Binding.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_move_event(unnamed_arg_0 : DragMoveEvent) : Void
      Binding.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_leave_event(unnamed_arg_0 : DragLeaveEvent) : Void
      Binding.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(self, unnamed_arg_0)
    end
    
    protected def drop_event(unnamed_arg_0 : DropEvent) : Void
      Binding.bg_QAbstractScrollArea_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QAbstractScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_viewportSizeHint_(self)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QFrame_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractScrollArea_staticMetaObject_STATIC_GETTER_()
    end
    
    enum SizeAdjustPolicy : UInt32
      AdjustIgnored = 0
      AdjustToContentsOnFirstShow = 1
      AdjustToContents = 2
    end
    def initialize(unwrap : Binding::QAbstractScrollArea*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractScrollArea)
      end
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_minimumSizeHint_SUPER_(@myself)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_sizeHint_SUPER_(@myself)
      end
      
      def setup_viewport(viewport : Widget) : Void
        Binding.bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(@myself, viewport)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QAbstractScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QAbstractScrollArea_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def viewport_event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QAbstractScrollArea_viewportEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QAbstractScrollArea_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QAbstractScrollArea_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractScrollArea_wheelEvent_SUPER_QWheelEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractScrollArea_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
        Binding.bg_QAbstractScrollArea_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_move_event(unnamed_arg_0 : DragMoveEvent) : Void
        Binding.bg_QAbstractScrollArea_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_leave_event(unnamed_arg_0 : DragLeaveEvent) : Void
        Binding.bg_QAbstractScrollArea_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drop_event(unnamed_arg_0 : DropEvent) : Void
        Binding.bg_QAbstractScrollArea_dropEvent_SUPER_QDropEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QAbstractScrollArea_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QAbstractScrollArea_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_viewportSizeHint_SUPER_(@myself)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QFrame_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class AbstractItemView < AbstractScrollArea
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractItemView_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAbstractItemView_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAbstractItemView_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemView_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemView_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAbstractItemView_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QAbstractItemView__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractItemView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall model= selection_model= keyboard_search visual_rect scroll_to index_at size_hint_for_row size_hint_for_column input_method_query reset root_index= do_items_layout select_all data_changed data_changed rows_inserted rows_about_to_be_removed selection_changed current_changed update_editor_data update_editor_geometries update_geometries vertical_scrollbar_action horizontal_scrollbar_action vertical_scrollbar_value_changed horizontal_scrollbar_value_changed close_editor commit_data editor_destroyed move_cursor horizontal_offset vertical_offset is_index_hidden set_selection visual_region_for_selection selected_indexes edit selection_command start_drag view_options focus_next_prev_child event viewport_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event key_press_event resize_event timer_event input_method_event event_filter viewport_size_hint minimum_size_hint size_hint setup_viewport paint_event wheel_event context_menu_event scroll_contents_by ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractItemView.new(
      bg_QAbstractItemView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractItemView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractItemView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractItemView_setModel_QAbstractItemModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("model=") %} Proc(Binding::QAbstractItemModel*, Void).new{|model| self.model=(AbstractItemModelImpl.new(unwrap: model)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_setSelectionModel_QItemSelectionModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_model=") %} Proc(Binding::QItemSelectionModel*, Void).new{|selection_model| self.selection_model=(selection_model) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyboardSearch_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("keyboard_search") %} Proc(Binding::CrystalString, Void).new{|search| self.keyboard_search(Qt::Converter::QString.unwrap(search)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_visualRect_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_rect") %} Proc(Binding::QModelIndex*, Binding::QRect*).new{|index| self.visual_rect(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_to") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::ScrollHint, Void).new{|index, hint| self.scroll_to(ModelIndex.new(unwrap: index), hint) } {% else %} nil {% end %}),
      bg_QAbstractItemView_indexAt_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index_at") %} Proc(Binding::QPoint, Binding::QModelIndex*).new{|point| self.index_at(Point.new(unwrap: point)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_sizeHintForRow_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_row") %} Proc(Int32, Int32).new{|row| self.size_hint_for_row(row) } {% else %} nil {% end %}),
      bg_QAbstractItemView_sizeHintForColumn_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_column") %} Proc(Int32, Int32).new{|column| self.size_hint_for_column(column) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemView_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Void).new{ self.reset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_setRootIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("root_index=") %} Proc(Binding::QModelIndex*, Void).new{|index| self.root_index=(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_doItemsLayout_: BindgenHelper.wrap_proc({% if forwarded.includes?("do_items_layout") %} Proc(Void).new{ self.do_items_layout() } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectAll_: BindgenHelper.wrap_proc({% if forwarded.includes?("select_all") %} Proc(Void).new{ self.select_all() } {% else %} nil {% end %}),
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("data_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|top_left, bottom_right| self.data_changed(ModelIndex.new(unwrap: top_left), ModelIndex.new(unwrap: bottom_right)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R: BindgenHelper.wrap_proc({% if forwarded.includes?("data_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Binding::ContainerQVectorInt*, Void).new{|top_left, bottom_right, roles| self.data_changed(ModelIndex.new(unwrap: top_left), ModelIndex.new(unwrap: bottom_right), Container_QVector_int_.new(unwrap: roles)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_inserted") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_inserted(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_about_to_be_removed") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_about_to_be_removed(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_changed") %} Proc(Binding::QItemSelection*, Binding::QItemSelection*, Void).new{|selected, deselected| self.selection_changed(selected, deselected) } {% else %} nil {% end %}),
      bg_QAbstractItemView_currentChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("current_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|current, previous| self.current_changed(ModelIndex.new(unwrap: current), ModelIndex.new(unwrap: previous)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorData_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_data") %} Proc(Void).new{ self.update_editor_data() } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_geometries") %} Proc(Void).new{ self.update_editor_geometries() } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometries") %} Proc(Void).new{ self.update_geometries() } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_action") %} Proc(Int32, Void).new{|action| self.vertical_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_action") %} Proc(Int32, Void).new{|action| self.horizontal_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.vertical_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.horizontal_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint: BindgenHelper.wrap_proc({% if forwarded.includes?("close_editor") %} Proc(Binding::QWidget*, AbstractItemDelegate::EndEditHint, Void).new{|editor, hint| self.close_editor(Widget.new(unwrap: editor), hint) } {% else %} nil {% end %}),
      bg_QAbstractItemView_commitData_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("commit_data") %} Proc(Binding::QWidget*, Void).new{|editor| self.commit_data(Widget.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_editorDestroyed_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("editor_destroyed") %} Proc(Binding::QObject*, Void).new{|editor| self.editor_destroyed(Object.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers: BindgenHelper.wrap_proc({% if forwarded.includes?("move_cursor") %} Proc(AbstractItemDelegate::CursorAction, KeyboardModifiers, Binding::QModelIndex*).new{|cursor_action, modifiers| self.move_cursor(cursor_action, modifiers).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_offset") %} Proc(Int32).new{ self.horizontal_offset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_offset") %} Proc(Int32).new{ self.vertical_offset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_isIndexHidden_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("is_index_hidden") %} Proc(Binding::QModelIndex*, Bool).new{|index| self.is_index_hidden(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("set_selection") %} Proc(Binding::QRect*, ItemSelectionModel::SelectionFlags, Void).new{|rect, command| self.set_selection(Rect.new(unwrap: rect), command) } {% else %} nil {% end %}),
      bg_QAbstractItemView_visualRegionForSelection_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_region_for_selection") %} Proc(Binding::QItemSelection*, Binding::QRegion*).new{|selection| self.visual_region_for_selection(selection) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectedIndexes_: BindgenHelper.wrap_proc({% if forwarded.includes?("selected_indexes") %} Proc(Binding::QModelIndexList*).new{ self.selected_indexes() } {% else %} nil {% end %}),
      bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("edit") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::EditTrigger, Binding::QEvent*, Bool).new{|index, trigger, event| self.edit(ModelIndex.new(unwrap: index), trigger, Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_command") %} Proc(Binding::QModelIndex*, Binding::QEvent*, ItemSelectionModel::SelectionFlags).new{|index, event| self.selection_command(ModelIndex.new(unwrap: index), event.try {|ptr| Event.new(unwrap: ptr) unless ptr.null?}).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_startDrag_Qt__DropActions: BindgenHelper.wrap_proc({% if forwarded.includes?("start_drag") %} Proc(DropActions, Void).new{|supported_actions| self.start_drag(supported_actions) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewOptions_: BindgenHelper.wrap_proc({% if forwarded.includes?("view_options") %} Proc(Binding::QStyleOptionViewItem*).new{ self.view_options() } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|object, event| self.event_filter(Object.new(unwrap: object), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractItemView_JUMPTABLE_BgJumptable_QAbstractItemView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def model=(model : AbstractItemModel) : Void
      Binding.bg_QAbstractItemView_setModel_QAbstractItemModel_X(self, model)
    end
    
    def model() : AbstractItemModel
      AbstractItemModelImpl.new(unwrap: Binding.bg_QAbstractItemView_model_(self))
    end
    
    def selection_model=(selection_model : Binding::QItemSelectionModel*) : Void
      Binding.bg_QAbstractItemView_setSelectionModel_QItemSelectionModel_X(self, selection_model)
    end
    
    def selection_model() : Binding::QItemSelectionModel*
      Binding.bg_QAbstractItemView_selectionModel_(self)
    end
    
    def item_delegate=(delegate : AbstractItemDelegate) : Void
      Binding.bg_QAbstractItemView_setItemDelegate_QAbstractItemDelegate_X(self, delegate)
    end
    
    def item_delegate() : AbstractItemDelegate
      AbstractItemDelegateImpl.new(unwrap: Binding.bg_QAbstractItemView_itemDelegate_(self))
    end
    
    def selection_mode=(mode : AbstractItemDelegate::SelectionMode) : Void
      Binding.bg_QAbstractItemView_setSelectionMode_QAbstractItemView__SelectionMode(self, mode)
    end
    
    def selection_mode() : AbstractItemDelegate::SelectionMode
      Binding.bg_QAbstractItemView_selectionMode_(self)
    end
    
    def selection_behavior=(behavior : AbstractItemDelegate::SelectionBehavior) : Void
      Binding.bg_QAbstractItemView_setSelectionBehavior_QAbstractItemView__SelectionBehavior(self, behavior)
    end
    
    def selection_behavior() : AbstractItemDelegate::SelectionBehavior
      Binding.bg_QAbstractItemView_selectionBehavior_(self)
    end
    
    def current_index() : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemView_currentIndex_(self))
    end
    
    def root_index() : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemView_rootIndex_(self))
    end
    
    def edit_triggers=(triggers : AbstractItemDelegate::EditTriggers) : Void
      Binding.bg_QAbstractItemView_setEditTriggers_QAbstractItemView__EditTriggers(self, triggers)
    end
    
    def edit_triggers() : AbstractItemDelegate::EditTriggers
      Binding.bg_QAbstractItemView_editTriggers_(self)
    end
    
    def vertical_scroll_mode=(mode : AbstractItemDelegate::ScrollMode) : Void
      Binding.bg_QAbstractItemView_setVerticalScrollMode_QAbstractItemView__ScrollMode(self, mode)
    end
    
    def vertical_scroll_mode() : AbstractItemDelegate::ScrollMode
      Binding.bg_QAbstractItemView_verticalScrollMode_(self)
    end
    
    def reset_vertical_scroll_mode() : Void
      Binding.bg_QAbstractItemView_resetVerticalScrollMode_(self)
    end
    
    def horizontal_scroll_mode=(mode : AbstractItemDelegate::ScrollMode) : Void
      Binding.bg_QAbstractItemView_setHorizontalScrollMode_QAbstractItemView__ScrollMode(self, mode)
    end
    
    def horizontal_scroll_mode() : AbstractItemDelegate::ScrollMode
      Binding.bg_QAbstractItemView_horizontalScrollMode_(self)
    end
    
    def reset_horizontal_scroll_mode() : Void
      Binding.bg_QAbstractItemView_resetHorizontalScrollMode_(self)
    end
    
    def auto_scroll=(enable : Bool) : Void
      Binding.bg_QAbstractItemView_setAutoScroll_bool(self, enable)
    end
    
    def has_auto_scroll?() : Bool
      Binding.bg_QAbstractItemView_hasAutoScroll_(self)
    end
    
    def auto_scroll_margin=(margin : Int32) : Void
      Binding.bg_QAbstractItemView_setAutoScrollMargin_int(self, margin)
    end
    
    def auto_scroll_margin() : Int32
      Binding.bg_QAbstractItemView_autoScrollMargin_(self)
    end
    
    def tab_key_navigation=(enable : Bool) : Void
      Binding.bg_QAbstractItemView_setTabKeyNavigation_bool(self, enable)
    end
    
    def tab_key_navigation() : Bool
      Binding.bg_QAbstractItemView_tabKeyNavigation_(self)
    end
    
    def drop_indicator_shown=(enable : Bool) : Void
      Binding.bg_QAbstractItemView_setDropIndicatorShown_bool(self, enable)
    end
    
    def show_drop_indicator() : Bool
      Binding.bg_QAbstractItemView_showDropIndicator_(self)
    end
    
    def drag_enabled=(enable : Bool) : Void
      Binding.bg_QAbstractItemView_setDragEnabled_bool(self, enable)
    end
    
    def drag_enabled() : Bool
      Binding.bg_QAbstractItemView_dragEnabled_(self)
    end
    
    def drag_drop_overwrite_mode=(overwrite : Bool) : Void
      Binding.bg_QAbstractItemView_setDragDropOverwriteMode_bool(self, overwrite)
    end
    
    def drag_drop_overwrite_mode() : Bool
      Binding.bg_QAbstractItemView_dragDropOverwriteMode_(self)
    end
    
    def drag_drop_mode=(behavior : AbstractItemDelegate::DragDropMode) : Void
      Binding.bg_QAbstractItemView_setDragDropMode_QAbstractItemView__DragDropMode(self, behavior)
    end
    
    def drag_drop_mode() : AbstractItemDelegate::DragDropMode
      Binding.bg_QAbstractItemView_dragDropMode_(self)
    end
    
    def default_drop_action=(drop_action : DropAction) : Void
      Binding.bg_QAbstractItemView_setDefaultDropAction_Qt__DropAction(self, drop_action)
    end
    
    def default_drop_action() : DropAction
      Binding.bg_QAbstractItemView_defaultDropAction_(self)
    end
    
    def alternating_row_colors=(enable : Bool) : Void
      Binding.bg_QAbstractItemView_setAlternatingRowColors_bool(self, enable)
    end
    
    def alternating_row_colors() : Bool
      Binding.bg_QAbstractItemView_alternatingRowColors_(self)
    end
    
    def icon_size=(size : Binding::QSize*) : Void
      Binding.bg_QAbstractItemView_setIconSize_const_QSize_R(self, size)
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QAbstractItemView_iconSize_(self)
    end
    
    def text_elide_mode=(mode : TextElideMode) : Void
      Binding.bg_QAbstractItemView_setTextElideMode_Qt__TextElideMode(self, mode)
    end
    
    def text_elide_mode() : TextElideMode
      Binding.bg_QAbstractItemView_textElideMode_(self)
    end
    
    def keyboard_search(search : String) : Void
      Binding.bg_QAbstractItemView_keyboardSearch_const_QString_R(self, Qt::Converter::QString.wrap(search))
    end
    
    abstract def visual_rect(index : ModelIndex) : Rect
    abstract def scroll_to(index : ModelIndex, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
    abstract def index_at(point : Point) : ModelIndex
    def size_hint_for_index(index : ModelIndex) : Binding::QSize*
      Binding.bg_QAbstractItemView_sizeHintForIndex_const_QModelIndex_R(self, index)
    end
    
    def size_hint_for_row(row : Int32) : Int32
      Binding.bg_QAbstractItemView_sizeHintForRow_int(self, row)
    end
    
    def size_hint_for_column(column : Int32) : Int32
      Binding.bg_QAbstractItemView_sizeHintForColumn_int(self, column)
    end
    
    def open_persistent_editor(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_openPersistentEditor_const_QModelIndex_R(self, index)
    end
    
    def close_persistent_editor(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_closePersistentEditor_const_QModelIndex_R(self, index)
    end
    
    def is_persistent_editor_open(index : ModelIndex) : Bool
      Binding.bg_QAbstractItemView_isPersistentEditorOpen_const_QModelIndex_R(self, index)
    end
    
    def set_index_widget(index : ModelIndex, widget : Widget) : Void
      Binding.bg_QAbstractItemView_setIndexWidget_const_QModelIndex_R_QWidget_X(self, index, widget)
    end
    
    def index_widget(index : ModelIndex) : Widget
      Widget.new(unwrap: Binding.bg_QAbstractItemView_indexWidget_const_QModelIndex_R(self, index))
    end
    
    def set_item_delegate_for_row(row : Int32, delegate : AbstractItemDelegate) : Void
      Binding.bg_QAbstractItemView_setItemDelegateForRow_int_QAbstractItemDelegate_X(self, row, delegate)
    end
    
    def item_delegate_for_row(row : Int32) : AbstractItemDelegate
      AbstractItemDelegateImpl.new(unwrap: Binding.bg_QAbstractItemView_itemDelegateForRow_int(self, row))
    end
    
    def set_item_delegate_for_column(column : Int32, delegate : AbstractItemDelegate) : Void
      Binding.bg_QAbstractItemView_setItemDelegateForColumn_int_QAbstractItemDelegate_X(self, column, delegate)
    end
    
    def item_delegate_for_column(column : Int32) : AbstractItemDelegate
      AbstractItemDelegateImpl.new(unwrap: Binding.bg_QAbstractItemView_itemDelegateForColumn_int(self, column))
    end
    
    def item_delegate(index : ModelIndex) : AbstractItemDelegate
      AbstractItemDelegateImpl.new(unwrap: Binding.bg_QAbstractItemView_itemDelegate_const_QModelIndex_R(self, index))
    end
    
    def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    def reset() : Void
      Binding.bg_QAbstractItemView_reset_(self)
    end
    
    def root_index=(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_setRootIndex_const_QModelIndex_R(self, index)
    end
    
    def do_items_layout() : Void
      Binding.bg_QAbstractItemView_doItemsLayout_(self)
    end
    
    def select_all() : Void
      Binding.bg_QAbstractItemView_selectAll_(self)
    end
    
    def edit(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_edit_const_QModelIndex_R(self, index)
    end
    
    def clear_selection() : Void
      Binding.bg_QAbstractItemView_clearSelection_(self)
    end
    
    def current_index=(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_setCurrentIndex_const_QModelIndex_R(self, index)
    end
    
    def scroll_to_top() : Void
      Binding.bg_QAbstractItemView_scrollToTop_(self)
    end
    
    def scroll_to_bottom() : Void
      Binding.bg_QAbstractItemView_scrollToBottom_(self)
    end
    
    def update(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_update_const_QModelIndex_R(self, index)
    end
    
    protected def data_changed(top_left : ModelIndex, bottom_right : ModelIndex) : Void
      Binding.bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R(self, top_left, bottom_right)
    end
    
    protected def data_changed(top_left : ModelIndex, bottom_right : ModelIndex, roles : Enumerable(Int32)) : Void
      Binding.bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(self, top_left, bottom_right, BindgenHelper.wrap_container(Container_QVector_int_, roles).to_unsafe)
    end
    
    protected def rows_inserted(parent : ModelIndex, start : Int32, end_ : Int32) : Void
      Binding.bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int(self, parent, start, end_)
    end
    
    protected def rows_about_to_be_removed(parent : ModelIndex, start : Int32, end_ : Int32) : Void
      Binding.bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int(self, parent, start, end_)
    end
    
    protected def selection_changed(selected : Binding::QItemSelection*, deselected : Binding::QItemSelection*) : Void
      Binding.bg_QAbstractItemView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R(self, selected, deselected)
    end
    
    protected def current_changed(current : ModelIndex, previous : ModelIndex) : Void
      Binding.bg_QAbstractItemView_currentChanged_const_QModelIndex_R_const_QModelIndex_R(self, current, previous)
    end
    
    protected def update_editor_data() : Void
      Binding.bg_QAbstractItemView_updateEditorData_(self)
    end
    
    protected def update_editor_geometries() : Void
      Binding.bg_QAbstractItemView_updateEditorGeometries_(self)
    end
    
    protected def update_geometries() : Void
      Binding.bg_QAbstractItemView_updateGeometries_(self)
    end
    
    protected def vertical_scrollbar_action(action : Int32) : Void
      Binding.bg_QAbstractItemView_verticalScrollbarAction_int(self, action)
    end
    
    protected def horizontal_scrollbar_action(action : Int32) : Void
      Binding.bg_QAbstractItemView_horizontalScrollbarAction_int(self, action)
    end
    
    protected def vertical_scrollbar_value_changed(value : Int32) : Void
      Binding.bg_QAbstractItemView_verticalScrollbarValueChanged_int(self, value)
    end
    
    protected def horizontal_scrollbar_value_changed(value : Int32) : Void
      Binding.bg_QAbstractItemView_horizontalScrollbarValueChanged_int(self, value)
    end
    
    protected def close_editor(editor : Widget, hint : AbstractItemDelegate::EndEditHint) : Void
      Binding.bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint(self, editor, hint)
    end
    
    protected def commit_data(editor : Widget) : Void
      Binding.bg_QAbstractItemView_commitData_QWidget_X(self, editor)
    end
    
    protected def editor_destroyed(editor : Object) : Void
      Binding.bg_QAbstractItemView_editorDestroyed_QObject_X(self, editor)
    end
    
    def pressed(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_pressed_const_QModelIndex_R(self, index)
    end
    
    def clicked(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_clicked_const_QModelIndex_R(self, index)
    end
    
    def double_clicked(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_doubleClicked_const_QModelIndex_R(self, index)
    end
    
    def activated(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_activated_const_QModelIndex_R(self, index)
    end
    
    def entered(index : ModelIndex) : Void
      Binding.bg_QAbstractItemView_entered_const_QModelIndex_R(self, index)
    end
    
    def viewport_entered() : Void
      Binding.bg_QAbstractItemView_viewportEntered_(self)
    end
    
    def icon_size_changed(size : Binding::QSize*) : Void
      Binding.bg_QAbstractItemView_iconSizeChanged_const_QSize_R(self, size)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QAbstractItemViewPrivate*, parent : Widget? = nil)
      result = Binding.bg_QAbstractItemView__CONSTRUCT_QAbstractItemViewPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractItemView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall model= selection_model= keyboard_search visual_rect scroll_to index_at size_hint_for_row size_hint_for_column input_method_query reset root_index= do_items_layout select_all data_changed data_changed rows_inserted rows_about_to_be_removed selection_changed current_changed update_editor_data update_editor_geometries update_geometries vertical_scrollbar_action horizontal_scrollbar_action vertical_scrollbar_value_changed horizontal_scrollbar_value_changed close_editor commit_data editor_destroyed move_cursor horizontal_offset vertical_offset is_index_hidden set_selection visual_region_for_selection selected_indexes edit selection_command start_drag view_options focus_next_prev_child event viewport_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event key_press_event resize_event timer_event input_method_event event_filter viewport_size_hint minimum_size_hint size_hint setup_viewport paint_event wheel_event context_menu_event scroll_contents_by ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractItemView.new(
      bg_QAbstractItemView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAbstractItemView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractItemView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAbstractItemView_setModel_QAbstractItemModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("model=") %} Proc(Binding::QAbstractItemModel*, Void).new{|model| self.model=(AbstractItemModelImpl.new(unwrap: model)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_setSelectionModel_QItemSelectionModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_model=") %} Proc(Binding::QItemSelectionModel*, Void).new{|selection_model| self.selection_model=(selection_model) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyboardSearch_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("keyboard_search") %} Proc(Binding::CrystalString, Void).new{|search| self.keyboard_search(Qt::Converter::QString.unwrap(search)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_visualRect_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_rect") %} Proc(Binding::QModelIndex*, Binding::QRect*).new{|index| self.visual_rect(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_to") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::ScrollHint, Void).new{|index, hint| self.scroll_to(ModelIndex.new(unwrap: index), hint) } {% else %} nil {% end %}),
      bg_QAbstractItemView_indexAt_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index_at") %} Proc(Binding::QPoint, Binding::QModelIndex*).new{|point| self.index_at(Point.new(unwrap: point)).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_sizeHintForRow_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_row") %} Proc(Int32, Int32).new{|row| self.size_hint_for_row(row) } {% else %} nil {% end %}),
      bg_QAbstractItemView_sizeHintForColumn_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_column") %} Proc(Int32, Int32).new{|column| self.size_hint_for_column(column) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemView_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Void).new{ self.reset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_setRootIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("root_index=") %} Proc(Binding::QModelIndex*, Void).new{|index| self.root_index=(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_doItemsLayout_: BindgenHelper.wrap_proc({% if forwarded.includes?("do_items_layout") %} Proc(Void).new{ self.do_items_layout() } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectAll_: BindgenHelper.wrap_proc({% if forwarded.includes?("select_all") %} Proc(Void).new{ self.select_all() } {% else %} nil {% end %}),
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("data_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|top_left, bottom_right| self.data_changed(ModelIndex.new(unwrap: top_left), ModelIndex.new(unwrap: bottom_right)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R: BindgenHelper.wrap_proc({% if forwarded.includes?("data_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Binding::ContainerQVectorInt*, Void).new{|top_left, bottom_right, roles| self.data_changed(ModelIndex.new(unwrap: top_left), ModelIndex.new(unwrap: bottom_right), Container_QVector_int_.new(unwrap: roles)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_inserted") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_inserted(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_about_to_be_removed") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_about_to_be_removed(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_changed") %} Proc(Binding::QItemSelection*, Binding::QItemSelection*, Void).new{|selected, deselected| self.selection_changed(selected, deselected) } {% else %} nil {% end %}),
      bg_QAbstractItemView_currentChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("current_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|current, previous| self.current_changed(ModelIndex.new(unwrap: current), ModelIndex.new(unwrap: previous)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorData_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_data") %} Proc(Void).new{ self.update_editor_data() } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_geometries") %} Proc(Void).new{ self.update_editor_geometries() } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometries") %} Proc(Void).new{ self.update_geometries() } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_action") %} Proc(Int32, Void).new{|action| self.vertical_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_action") %} Proc(Int32, Void).new{|action| self.horizontal_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.vertical_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.horizontal_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint: BindgenHelper.wrap_proc({% if forwarded.includes?("close_editor") %} Proc(Binding::QWidget*, AbstractItemDelegate::EndEditHint, Void).new{|editor, hint| self.close_editor(Widget.new(unwrap: editor), hint) } {% else %} nil {% end %}),
      bg_QAbstractItemView_commitData_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("commit_data") %} Proc(Binding::QWidget*, Void).new{|editor| self.commit_data(Widget.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_editorDestroyed_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("editor_destroyed") %} Proc(Binding::QObject*, Void).new{|editor| self.editor_destroyed(Object.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers: BindgenHelper.wrap_proc({% if forwarded.includes?("move_cursor") %} Proc(AbstractItemDelegate::CursorAction, KeyboardModifiers, Binding::QModelIndex*).new{|cursor_action, modifiers| self.move_cursor(cursor_action, modifiers).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_offset") %} Proc(Int32).new{ self.horizontal_offset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_offset") %} Proc(Int32).new{ self.vertical_offset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_isIndexHidden_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("is_index_hidden") %} Proc(Binding::QModelIndex*, Bool).new{|index| self.is_index_hidden(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("set_selection") %} Proc(Binding::QRect*, ItemSelectionModel::SelectionFlags, Void).new{|rect, command| self.set_selection(Rect.new(unwrap: rect), command) } {% else %} nil {% end %}),
      bg_QAbstractItemView_visualRegionForSelection_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_region_for_selection") %} Proc(Binding::QItemSelection*, Binding::QRegion*).new{|selection| self.visual_region_for_selection(selection) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectedIndexes_: BindgenHelper.wrap_proc({% if forwarded.includes?("selected_indexes") %} Proc(Binding::QModelIndexList*).new{ self.selected_indexes() } {% else %} nil {% end %}),
      bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("edit") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::EditTrigger, Binding::QEvent*, Bool).new{|index, trigger, event| self.edit(ModelIndex.new(unwrap: index), trigger, Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_command") %} Proc(Binding::QModelIndex*, Binding::QEvent*, ItemSelectionModel::SelectionFlags).new{|index, event| self.selection_command(ModelIndex.new(unwrap: index), event.try {|ptr| Event.new(unwrap: ptr) unless ptr.null?}).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_startDrag_Qt__DropActions: BindgenHelper.wrap_proc({% if forwarded.includes?("start_drag") %} Proc(DropActions, Void).new{|supported_actions| self.start_drag(supported_actions) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewOptions_: BindgenHelper.wrap_proc({% if forwarded.includes?("view_options") %} Proc(Binding::QStyleOptionViewItem*).new{ self.view_options() } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|object, event| self.event_filter(Object.new(unwrap: object), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractItemView_JUMPTABLE_BgJumptable_QAbstractItemView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected abstract def move_cursor(cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : ModelIndex
    protected abstract def horizontal_offset() : Int32
    protected abstract def vertical_offset() : Int32
    protected abstract def is_index_hidden(index : ModelIndex) : Bool
    protected abstract def set_selection(rect : Rect, command : ItemSelectionModel::SelectionFlags) : Void
    protected abstract def visual_region_for_selection(selection : Binding::QItemSelection*) : Binding::QRegion*
    protected def selected_indexes() : Binding::QModelIndexList*
      Binding.bg_QAbstractItemView_selectedIndexes_(self)
    end
    
    protected def edit(index : ModelIndex, trigger : AbstractItemDelegate::EditTrigger, event : Event) : Bool
      Binding.bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(self, index, trigger, event)
    end
    
    protected def selection_command(index : ModelIndex, event : Event? = nil) : ItemSelectionModel::SelectionFlags
      Binding.bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X(self, index, event)
    end
    
    protected def start_drag(supported_actions : DropActions) : Void
      Binding.bg_QAbstractItemView_startDrag_Qt__DropActions(self, supported_actions)
    end
    
    protected def view_options() : Binding::QStyleOptionViewItem*
      Binding.bg_QAbstractItemView_viewOptions_(self)
    end
    
    protected def state() : AbstractItemDelegate::State
      Binding.bg_QAbstractItemView_state_(self)
    end
    
    protected def state=(state : AbstractItemDelegate::State) : Void
      Binding.bg_QAbstractItemView_setState_QAbstractItemView__State(self, state)
    end
    
    protected def schedule_delayed_items_layout() : Void
      Binding.bg_QAbstractItemView_scheduleDelayedItemsLayout_(self)
    end
    
    protected def execute_delayed_items_layout() : Void
      Binding.bg_QAbstractItemView_executeDelayedItemsLayout_(self)
    end
    
    protected def dirty_region=(region : Binding::QRegion*) : Void
      Binding.bg_QAbstractItemView_setDirtyRegion_const_QRegion_R(self, region)
    end
    
    protected def scroll_dirty_region(dx : Int32, dy : Int32) : Void
      Binding.bg_QAbstractItemView_scrollDirtyRegion_int_int(self, dx, dy)
    end
    
    protected def dirty_region_offset() : Point
      Point.new(unwrap: Binding.bg_QAbstractItemView_dirtyRegionOffset_(self))
    end
    
    protected def start_auto_scroll() : Void
      Binding.bg_QAbstractItemView_startAutoScroll_(self)
    end
    
    protected def stop_auto_scroll() : Void
      Binding.bg_QAbstractItemView_stopAutoScroll_(self)
    end
    
    protected def do_auto_scroll() : Void
      Binding.bg_QAbstractItemView_doAutoScroll_(self)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QAbstractItemView_focusNextPrevChild_bool(self, next_)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QAbstractItemView_event_QEvent_X(self, event)
    end
    
    protected def viewport_event(event : Event) : Bool
      Binding.bg_QAbstractItemView_viewportEvent_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QAbstractItemView_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QAbstractItemView_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractItemView_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QAbstractItemView_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractItemView_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QAbstractItemView_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def event_filter(object : Object, event : Event) : Bool
      Binding.bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X(self, object, event)
    end
    
    protected def drop_indicator_position() : AbstractItemDelegate::DropIndicatorPosition
      Binding.bg_QAbstractItemView_dropIndicatorPosition_(self)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QAbstractItemView_viewportSizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_sizeHint_(self)
    end
    
    def setup_viewport(viewport : Widget) : Void
      Binding.bg_QAbstractScrollArea_setupViewport_QWidget_X(self, viewport)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QAbstractScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAbstractItemView_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_pressed(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_pressed_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_clicked(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_clicked_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_double_clicked(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_doubleClicked_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_activated(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_activated_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_entered(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_entered_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_viewport_entered(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_viewportEntered_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_icon_size_changed(&_proc_ : Proc(Binding::QSize, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSize*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractItemView*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractItemView)
      end
      def model=(model : AbstractItemModel) : Void
        Binding.bg_QAbstractItemView_setModel_SUPER_QAbstractItemModel_X(@myself, model)
      end
      
      def selection_model=(selection_model : Binding::QItemSelectionModel*) : Void
        Binding.bg_QAbstractItemView_setSelectionModel_SUPER_QItemSelectionModel_X(@myself, selection_model)
      end
      
      def keyboard_search(search : String) : Void
        Binding.bg_QAbstractItemView_keyboardSearch_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(search))
      end
      
      def size_hint_for_row(row : Int32) : Int32
        Binding.bg_QAbstractItemView_sizeHintForRow_SUPER_int(@myself, row)
      end
      
      def size_hint_for_column(column : Int32) : Int32
        Binding.bg_QAbstractItemView_sizeHintForColumn_SUPER_int(@myself, column)
      end
      
      def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QAbstractItemView_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      def reset() : Void
        Binding.bg_QAbstractItemView_reset_SUPER_(@myself)
      end
      
      def root_index=(index : ModelIndex) : Void
        Binding.bg_QAbstractItemView_setRootIndex_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      def do_items_layout() : Void
        Binding.bg_QAbstractItemView_doItemsLayout_SUPER_(@myself)
      end
      
      def select_all() : Void
        Binding.bg_QAbstractItemView_selectAll_SUPER_(@myself)
      end
      
      protected def data_changed(top_left : ModelIndex, bottom_right : ModelIndex, roles : Enumerable(Int32)) : Void
        Binding.bg_QAbstractItemView_dataChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(@myself, top_left, bottom_right, BindgenHelper.wrap_container(Container_QVector_int_, roles).to_unsafe)
      end
      
      protected def rows_inserted(parent : ModelIndex, start : Int32, end_ : Int32) : Void
        Binding.bg_QAbstractItemView_rowsInserted_SUPER_const_QModelIndex_R_int_int(@myself, parent, start, end_)
      end
      
      protected def rows_about_to_be_removed(parent : ModelIndex, start : Int32, end_ : Int32) : Void
        Binding.bg_QAbstractItemView_rowsAboutToBeRemoved_SUPER_const_QModelIndex_R_int_int(@myself, parent, start, end_)
      end
      
      protected def selection_changed(selected : Binding::QItemSelection*, deselected : Binding::QItemSelection*) : Void
        Binding.bg_QAbstractItemView_selectionChanged_SUPER_const_QItemSelection_R_const_QItemSelection_R(@myself, selected, deselected)
      end
      
      protected def current_changed(current : ModelIndex, previous : ModelIndex) : Void
        Binding.bg_QAbstractItemView_currentChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R(@myself, current, previous)
      end
      
      protected def update_editor_data() : Void
        Binding.bg_QAbstractItemView_updateEditorData_SUPER_(@myself)
      end
      
      protected def update_editor_geometries() : Void
        Binding.bg_QAbstractItemView_updateEditorGeometries_SUPER_(@myself)
      end
      
      protected def update_geometries() : Void
        Binding.bg_QAbstractItemView_updateGeometries_SUPER_(@myself)
      end
      
      protected def vertical_scrollbar_action(action : Int32) : Void
        Binding.bg_QAbstractItemView_verticalScrollbarAction_SUPER_int(@myself, action)
      end
      
      protected def horizontal_scrollbar_action(action : Int32) : Void
        Binding.bg_QAbstractItemView_horizontalScrollbarAction_SUPER_int(@myself, action)
      end
      
      protected def vertical_scrollbar_value_changed(value : Int32) : Void
        Binding.bg_QAbstractItemView_verticalScrollbarValueChanged_SUPER_int(@myself, value)
      end
      
      protected def horizontal_scrollbar_value_changed(value : Int32) : Void
        Binding.bg_QAbstractItemView_horizontalScrollbarValueChanged_SUPER_int(@myself, value)
      end
      
      protected def close_editor(editor : Widget, hint : AbstractItemDelegate::EndEditHint) : Void
        Binding.bg_QAbstractItemView_closeEditor_SUPER_QWidget_X_QAbstractItemDelegate__EndEditHint(@myself, editor, hint)
      end
      
      protected def commit_data(editor : Widget) : Void
        Binding.bg_QAbstractItemView_commitData_SUPER_QWidget_X(@myself, editor)
      end
      
      protected def editor_destroyed(editor : Object) : Void
        Binding.bg_QAbstractItemView_editorDestroyed_SUPER_QObject_X(@myself, editor)
      end
      
      protected def selected_indexes() : Binding::QModelIndexList*
        Binding.bg_QAbstractItemView_selectedIndexes_SUPER_(@myself)
      end
      
      protected def edit(index : ModelIndex, trigger : AbstractItemDelegate::EditTrigger, event : Event) : Bool
        Binding.bg_QAbstractItemView_edit_SUPER_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(@myself, index, trigger, event)
      end
      
      protected def selection_command(index : ModelIndex, event : Event? = nil) : ItemSelectionModel::SelectionFlags
        Binding.bg_QAbstractItemView_selectionCommand_SUPER_const_QModelIndex_R_const_QEvent_X(@myself, index, event)
      end
      
      protected def start_drag(supported_actions : DropActions) : Void
        Binding.bg_QAbstractItemView_startDrag_SUPER_Qt__DropActions(@myself, supported_actions)
      end
      
      protected def view_options() : Binding::QStyleOptionViewItem*
        Binding.bg_QAbstractItemView_viewOptions_SUPER_(@myself)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QAbstractItemView_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QAbstractItemView_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def viewport_event(event : Event) : Bool
        Binding.bg_QAbstractItemView_viewportEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QAbstractItemView_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QAbstractItemView_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QAbstractItemView_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QAbstractItemView_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QAbstractItemView_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QAbstractItemView_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QAbstractItemView_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QAbstractItemView_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QAbstractItemView_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QAbstractItemView_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def event_filter(object : Object, event : Event) : Bool
        Binding.bg_QAbstractItemView_eventFilter_SUPER_QObject_X_QEvent_X(@myself, object, event)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QAbstractItemView_viewportSizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_minimumSizeHint_SUPER_(@myself)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_sizeHint_SUPER_(@myself)
      end
      
      def setup_viewport(viewport : Widget) : Void
        Binding.bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(@myself, viewport)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QAbstractScrollArea_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractScrollArea_wheelEvent_SUPER_QWheelEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractScrollArea_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QAbstractScrollArea_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Action < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QAction_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QAction_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QAction__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAction_JUMPTABLE_BgJumptable_QAction_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Object? = nil)
      result = Binding.bg_QAction__CONSTRUCT_const_QString_R_QObject_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAction_JUMPTABLE_BgJumptable_QAction_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(icon : Icon, text : String, parent : Object? = nil)
      result = Binding.bg_QAction__CONSTRUCT_const_QIcon_R_const_QString_R_QObject_X(icon, Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAction_JUMPTABLE_BgJumptable_QAction_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def action_group=(group : Binding::QActionGroup*) : Void
      Binding.bg_QAction_setActionGroup_QActionGroup_X(self, group)
    end
    
    def action_group() : Binding::QActionGroup*
      Binding.bg_QAction_actionGroup_(self)
    end
    
    def icon=(icon : Icon) : Void
      Binding.bg_QAction_setIcon_const_QIcon_R(self, icon)
    end
    
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QAction_icon_(self))
    end
    
    def text=(text : String) : Void
      Binding.bg_QAction_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_text_(self))
    end
    
    def icon_text=(text : String) : Void
      Binding.bg_QAction_setIconText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def icon_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_iconText_(self))
    end
    
    def tool_tip=(tip : String) : Void
      Binding.bg_QAction_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_toolTip_(self))
    end
    
    def status_tip=(status_tip : String) : Void
      Binding.bg_QAction_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(status_tip))
    end
    
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_statusTip_(self))
    end
    
    def whats_this=(what : String) : Void
      Binding.bg_QAction_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(what))
    end
    
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QAction_whatsThis_(self))
    end
    
    def priority=(priority : Action::Priority) : Void
      Binding.bg_QAction_setPriority_QAction__Priority(self, priority)
    end
    
    def priority() : Action::Priority
      Binding.bg_QAction_priority_(self)
    end
    
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QAction_menu_(self))
    end
    
    def menu=(menu : Menu) : Void
      Binding.bg_QAction_setMenu_QMenu_X(self, menu)
    end
    
    def separator=(b : Bool) : Void
      Binding.bg_QAction_setSeparator_bool(self, b)
    end
    
    def separator?() : Bool
      Binding.bg_QAction_isSeparator_(self)
    end
    
    def shortcut=(shortcut : KeySequence) : Void
      Binding.bg_QAction_setShortcut_const_QKeySequence_R(self, shortcut)
    end
    
    def shortcut() : KeySequence
      KeySequence.new(unwrap: Binding.bg_QAction_shortcut_(self))
    end
    
    def shortcuts=(shortcuts : Enumerable(KeySequence)) : Void
      Binding.bg_QAction_setShortcuts_const_QList_QKeySequence__R(self, BindgenHelper.wrap_container(Container_QList_QKeySequence_, shortcuts).to_unsafe)
    end
    
    def shortcuts=(unnamed_arg_0 : KeySequence::StandardKey) : Void
      Binding.bg_QAction_setShortcuts_QKeySequence__StandardKey(self, unnamed_arg_0)
    end
    
    def shortcuts() : Enumerable(KeySequence)
      Container_QList_QKeySequence_.new(unwrap: Binding.bg_QAction_shortcuts_(self))
    end
    
    def shortcut_context=(context : ShortcutContext) : Void
      Binding.bg_QAction_setShortcutContext_Qt__ShortcutContext(self, context)
    end
    
    def shortcut_context() : ShortcutContext
      Binding.bg_QAction_shortcutContext_(self)
    end
    
    def auto_repeat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setAutoRepeat_bool(self, unnamed_arg_0)
    end
    
    def auto_repeat() : Bool
      Binding.bg_QAction_autoRepeat_(self)
    end
    
    def font=(font : Font) : Void
      Binding.bg_QAction_setFont_const_QFont_R(self, font)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QAction_font_(self))
    end
    
    def checkable=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setCheckable_bool(self, unnamed_arg_0)
    end
    
    def checkable?() : Bool
      Binding.bg_QAction_isCheckable_(self)
    end
    
    def data() : Variant
      Qt::Variant.new(Binding.bg_QAction_data_(self))
    end
    
    def data=(var : Variant) : Void
      Binding.bg_QAction_setData_const_QVariant_R(self, (var.to_unsafe))
    end
    
    def checked?() : Bool
      Binding.bg_QAction_isChecked_(self)
    end
    
    def enabled?() : Bool
      Binding.bg_QAction_isEnabled_(self)
    end
    
    def visible?() : Bool
      Binding.bg_QAction_isVisible_(self)
    end
    
    def activate(event : Action::Event) : Void
      Binding.bg_QAction_activate_QAction__ActionEvent(self, event)
    end
    
    def show_status_text(widget : Widget? = nil) : Bool
      Binding.bg_QAction_showStatusText_QWidget_X(self, widget)
    end
    
    def menu_role=(menu_role : Action::MenuRole) : Void
      Binding.bg_QAction_setMenuRole_QAction__MenuRole(self, menu_role)
    end
    
    def menu_role() : Action::MenuRole
      Binding.bg_QAction_menuRole_(self)
    end
    
    def icon_visible_in_menu=(visible : Bool) : Void
      Binding.bg_QAction_setIconVisibleInMenu_bool(self, visible)
    end
    
    def icon_visible_in_menu?() : Bool
      Binding.bg_QAction_isIconVisibleInMenu_(self)
    end
    
    def shortcut_visible_in_context_menu=(show : Bool) : Void
      Binding.bg_QAction_setShortcutVisibleInContextMenu_bool(self, show)
    end
    
    def shortcut_visible_in_context_menu?() : Bool
      Binding.bg_QAction_isShortcutVisibleInContextMenu_(self)
    end
    
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QAction_parentWidget_(self))
    end
    
    def associated_widgets() : Enumerable(Widget)
      Container_QList_QWidget_X_.new(unwrap: Binding.bg_QAction_associatedWidgets_(self))
    end
    
    def associated_graphics_widgets() : Enumerable(GraphicsWidget)
      Container_QList_QGraphicsWidget_X_.new(unwrap: Binding.bg_QAction_associatedGraphicsWidgets_(self))
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAction_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def initialize(dd : Binding::QActionPrivate*, parent : Object)
      result = Binding.bg_QAction__CONSTRUCT_QActionPrivate_R_QObject_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Action)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAction.new(
      bg_QAction_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QAction_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAction_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QAction_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAction_JUMPTABLE_BgJumptable_QAction_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def trigger() : Void
      Binding.bg_QAction_trigger_(self)
    end
    
    def hover() : Void
      Binding.bg_QAction_hover_(self)
    end
    
    def checked=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setChecked_bool(self, unnamed_arg_0)
    end
    
    def toggle() : Void
      Binding.bg_QAction_toggle_(self)
    end
    
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setEnabled_bool(self, unnamed_arg_0)
    end
    
    def disabled=(b : Bool) : Void
      Binding.bg_QAction_setDisabled_bool(self, b)
    end
    
    def visible=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_setVisible_bool(self, unnamed_arg_0)
    end
    
    def changed() : Void
      Binding.bg_QAction_changed_(self)
    end
    
    def triggered(checked : Bool = false) : Void
      Binding.bg_QAction_triggered_bool(self, checked)
    end
    
    def hovered() : Void
      Binding.bg_QAction_hovered_(self)
    end
    
    def toggled(unnamed_arg_0 : Bool) : Void
      Binding.bg_QAction_toggled_bool(self, unnamed_arg_0)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QAction_staticMetaObject_STATIC_GETTER_()
    end
    
    enum MenuRole : UInt32
      NoRole = 0
      TextHeuristicRole = 1
      ApplicationSpecificRole = 2
      AboutQtRole = 3
      AboutRole = 4
      PreferencesRole = 5
      QuitRole = 6
    end
    enum Priority : UInt32
      LowPriority = 0
      NormalPriority = 128
      HighPriority = 256
    end
    enum Event : UInt32
      Trigger = 0
      Hover = 1
    end
    def on_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_CONNECT_changed_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_triggered(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_CONNECT_triggered_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_hovered(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_CONNECT_hovered_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_toggled(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAction_CONNECT_toggled_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QAction*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Action)
      end
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QAction_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Application < GuiApplication
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QApplication_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QApplication_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(argc : Int32*, argv : UInt8**, unnamed_arg_2 : Int32 = 331520)
      result = Binding.bg_QApplication__CONSTRUCT_int_R_char_XX_int(argc, argv, unnamed_arg_2)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Application)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall notify event compress_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QApplication.new(
      bg_QApplication_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QApplication_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QApplication_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QApplication_notify_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("notify") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.notify(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QApplication_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X: BindgenHelper.wrap_proc({% if forwarded.includes?("compress_event") %} Proc(Binding::QEvent*, Binding::QObject*, Binding::QPostEventList*, Bool).new{|unnamed_arg_0, receiver, unnamed_arg_2| self.compress_event(Event.new(unwrap: unnamed_arg_0), Object.new(unwrap: receiver), unnamed_arg_2) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QApplication_JUMPTABLE_BgJumptable_QApplication_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.style() : Binding::QStyle*
      Binding.bg_QApplication_style_STATIC_()
    end
    
    def self.style=(unnamed_arg_0 : Binding::QStyle*) : Void
      Binding.bg_QApplication_setStyle_STATIC_QStyle_X(unnamed_arg_0)
    end
    
    def self.set_style(unnamed_arg_0 : String) : Binding::QStyle*
      Binding.bg_QApplication_setStyle_STATIC_const_QString_R(Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def self.palette(unnamed_arg_0 : Widget) : Palette
      Palette.new(unwrap: Binding.bg_QApplication_palette_STATIC_const_QWidget_X(unnamed_arg_0))
    end
    
    def self.palette(class_name : UInt8*) : Palette
      Palette.new(unwrap: Binding.bg_QApplication_palette_STATIC_const_char_X(class_name))
    end
    
    def self.palette=(unnamed_arg_0 : Palette) : Void
      Binding.bg_QApplication_setPalette_STATIC_const_QPalette_R(unnamed_arg_0)
    end
    
    def self.set_palette(unnamed_arg_0 : Palette, class_name : UInt8*) : Void
      Binding.bg_QApplication_setPalette_STATIC_const_QPalette_R_const_char_X(unnamed_arg_0, class_name)
    end
    
    def self.font() : Font
      Font.new(unwrap: Binding.bg_QApplication_font_STATIC_())
    end
    
    def self.font(unnamed_arg_0 : Widget) : Font
      Font.new(unwrap: Binding.bg_QApplication_font_STATIC_const_QWidget_X(unnamed_arg_0))
    end
    
    def self.font(class_name : UInt8*) : Font
      Font.new(unwrap: Binding.bg_QApplication_font_STATIC_const_char_X(class_name))
    end
    
    def self.font=(unnamed_arg_0 : Font) : Void
      Binding.bg_QApplication_setFont_STATIC_const_QFont_R(unnamed_arg_0)
    end
    
    def self.set_font(unnamed_arg_0 : Font, class_name : UInt8*) : Void
      Binding.bg_QApplication_setFont_STATIC_const_QFont_R_const_char_X(unnamed_arg_0, class_name)
    end
    
    def self.font_metrics() : FontMetrics
      FontMetrics.new(unwrap: Binding.bg_QApplication_fontMetrics_STATIC_())
    end
    
    def self.window_icon=(icon : Icon) : Void
      Binding.bg_QApplication_setWindowIcon_STATIC_const_QIcon_R(icon)
    end
    
    def self.window_icon() : Icon
      Icon.new(unwrap: Binding.bg_QApplication_windowIcon_STATIC_())
    end
    
    def self.all_widgets() : Binding::QWidgetList*
      Binding.bg_QApplication_allWidgets_STATIC_()
    end
    
    def self.top_level_widgets() : Binding::QWidgetList*
      Binding.bg_QApplication_topLevelWidgets_STATIC_()
    end
    
    def self.desktop() : DesktopWidget
      DesktopWidget.new(unwrap: Binding.bg_QApplication_desktop_STATIC_())
    end
    
    def self.active_popup_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activePopupWidget_STATIC_())
    end
    
    def self.active_modal_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activeModalWidget_STATIC_())
    end
    
    def self.focus_widget() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_focusWidget_STATIC_())
    end
    
    def self.active_window() : Widget
      Widget.new(unwrap: Binding.bg_QApplication_activeWindow_STATIC_())
    end
    
    def self.active_window=(act : Widget) : Void
      Binding.bg_QApplication_setActiveWindow_STATIC_QWidget_X(act)
    end
    
    def self.widget_at(p : Point) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_widgetAt_STATIC_const_QPoint_R(p))
    end
    
    def self.widget_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_widgetAt_STATIC_int_int(x, y))
    end
    
    def self.top_level_at(p : Point) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_topLevelAt_STATIC_const_QPoint_R(p))
    end
    
    def self.top_level_at(x : Int32, y : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QApplication_topLevelAt_STATIC_int_int(x, y))
    end
    
    def self.beep() : Void
      Binding.bg_QApplication_beep_STATIC_()
    end
    
    def self.alert(widget : Widget, duration : Int32 = 0) : Void
      Binding.bg_QApplication_alert_STATIC_QWidget_X_int(widget, duration)
    end
    
    def self.cursor_flash_time=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setCursorFlashTime_STATIC_int(unnamed_arg_0)
    end
    
    def self.cursor_flash_time() : Int32
      Binding.bg_QApplication_cursorFlashTime_STATIC_()
    end
    
    def self.double_click_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setDoubleClickInterval_STATIC_int(unnamed_arg_0)
    end
    
    def self.double_click_interval() : Int32
      Binding.bg_QApplication_doubleClickInterval_STATIC_()
    end
    
    def self.keyboard_input_interval=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setKeyboardInputInterval_STATIC_int(unnamed_arg_0)
    end
    
    def self.keyboard_input_interval() : Int32
      Binding.bg_QApplication_keyboardInputInterval_STATIC_()
    end
    
    def self.wheel_scroll_lines=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QApplication_setWheelScrollLines_STATIC_int(unnamed_arg_0)
    end
    
    def self.wheel_scroll_lines() : Int32
      Binding.bg_QApplication_wheelScrollLines_STATIC_()
    end
    
    def self.global_strut=(unnamed_arg_0 : Binding::QSize*) : Void
      Binding.bg_QApplication_setGlobalStrut_STATIC_const_QSize_R(unnamed_arg_0)
    end
    
    def self.global_strut() : Binding::QSize*
      Binding.bg_QApplication_globalStrut_STATIC_()
    end
    
    def self.start_drag_time=(ms : Int32) : Void
      Binding.bg_QApplication_setStartDragTime_STATIC_int(ms)
    end
    
    def self.start_drag_time() : Int32
      Binding.bg_QApplication_startDragTime_STATIC_()
    end
    
    def self.start_drag_distance=(l : Int32) : Void
      Binding.bg_QApplication_setStartDragDistance_STATIC_int(l)
    end
    
    def self.start_drag_distance() : Int32
      Binding.bg_QApplication_startDragDistance_STATIC_()
    end
    
    def self.is_effect_enabled(unnamed_arg_0 : UIEffect) : Bool
      Binding.bg_QApplication_isEffectEnabled_STATIC_Qt__UIEffect(unnamed_arg_0)
    end
    
    def self.set_effect_enabled(unnamed_arg_0 : UIEffect, enable : Bool = true) : Void
      Binding.bg_QApplication_setEffectEnabled_STATIC_Qt__UIEffect_bool(unnamed_arg_0, enable)
    end
    
    def self.exec() : Int32
      Binding.bg_QApplication_exec_STATIC_()
    end
    
    def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QApplication_notify_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def focus_changed(old : Widget, now : Widget) : Void
      Binding.bg_QApplication_focusChanged_QWidget_X_QWidget_X(self, old, now)
    end
    
    def style_sheet() : String
      Qt::Converter::QString.unwrap(Binding.bg_QApplication_styleSheet_(self))
    end
    
    def style_sheet=(sheet : String) : Void
      Binding.bg_QApplication_setStyleSheet_const_QString_R(self, Qt::Converter::QString.wrap(sheet))
    end
    
    def auto_sip_enabled=(enabled : Bool) : Void
      Binding.bg_QApplication_setAutoSipEnabled_const_bool(self, enabled)
    end
    
    def auto_sip_enabled() : Bool
      Binding.bg_QApplication_autoSipEnabled_(self)
    end
    
    def self.close_all_windows() : Void
      Binding.bg_QApplication_closeAllWindows_STATIC_()
    end
    
    def self.about_qt() : Void
      Binding.bg_QApplication_aboutQt_STATIC_()
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QApplication_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : Binding::QPostEventList*) : Bool
      Binding.bg_QApplication_compressEvent_QEvent_X_QObject_X_QPostEventList_X(self, unnamed_arg_0, receiver, unnamed_arg_2)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QApplication_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_focus_changed(&_proc_ : Proc(Widget, Widget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QApplication_CONNECT_focusChanged_CrystalProc_void__QWidget_X__QWidget_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QWidget*, Binding::QWidget*, Void).new do |arg0, arg1| _proc_.call(Widget.new(unwrap: arg0), Widget.new(unwrap: arg1)) end)))
    end
    
    def initialize(unwrap : Binding::QApplication*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Application)
      end
      def notify(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QApplication_notify_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QApplication_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def compress_event(unnamed_arg_0 : Event, receiver : Object, unnamed_arg_2 : Binding::QPostEventList*) : Bool
        Binding.bg_QApplication_compressEvent_SUPER_QEvent_X_QObject_X_QPostEventList_X(@myself, unnamed_arg_0, receiver, unnamed_arg_2)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class LayoutItem
    @unwrap : Binding::QLayoutItem*
    
    def initialize()
      result = Binding.bg_QLayoutItem__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LayoutItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions geometry= geometry empty? has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout spacer_item control_types ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLayoutItem.new(
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayoutItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLayoutItem_JUMPTABLE_BgJumptable_QLayoutItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(alignment : Alignment)
      result = Binding.bg_QLayoutItem__CONSTRUCT_Qt__Alignment(alignment)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LayoutItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions geometry= geometry empty? has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout spacer_item control_types ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLayoutItem.new(
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayoutItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayoutItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLayoutItem_JUMPTABLE_BgJumptable_QLayoutItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    abstract def size_hint() : Binding::QSize*
    abstract def minimum_size() : Binding::QSize*
    abstract def maximum_size() : Binding::QSize*
    abstract def expanding_directions() : Orientations
    abstract def geometry=(unnamed_arg_0 : Rect) : Void
    abstract def geometry() : Rect
    abstract def empty?() : Bool
    def has_height_for_width?() : Bool
      Binding.bg_QLayoutItem_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def invalidate() : Void
      Binding.bg_QLayoutItem_invalidate_(self)
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayoutItem_widget_(self))
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayoutItem_layout_(self))
    end
    
    def spacer_item() : SpacerItem
      SpacerItem.new(unwrap: Binding.bg_QLayoutItem_spacerItem_(self))
    end
    
    def alignment() : Alignment
      Binding.bg_QLayoutItem_alignment_(self)
    end
    
    def alignment=(a : Alignment) : Void
      Binding.bg_QLayoutItem_setAlignment_Qt__Alignment(self, a)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayoutItem_controlTypes_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QLayoutItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : LayoutItem)
      end
      def has_height_for_width?() : Bool
        Binding.bg_QLayoutItem_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def invalidate() : Void
        Binding.bg_QLayoutItem_invalidate_SUPER_(@myself)
      end
      
      def widget() : Widget
        Widget.new(unwrap: Binding.bg_QLayoutItem_widget_SUPER_(@myself))
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayoutItem_layout_SUPER_(@myself))
      end
      
      def spacer_item() : SpacerItem
        SpacerItem.new(unwrap: Binding.bg_QLayoutItem_spacerItem_SUPER_(@myself))
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayoutItem_controlTypes_SUPER_(@myself)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class SpacerItem < LayoutItem
    def initialize(w : Int32, h : Int32, h_data : SizePolicy::Policy = SizePolicy::Policy::Minimum, v_data : SizePolicy::Policy = SizePolicy::Policy::Minimum)
      result = Binding.bg_QSpacerItem__CONSTRUCT_int_int_QSizePolicy__Policy_QSizePolicy__Policy(w, h, h_data, v_data)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SpacerItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions empty? geometry= geometry spacer_item has_height_for_width? height_for_width minimum_height_for_width invalidate widget layout control_types ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSpacerItem.new(
      bg_QSpacerItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QSpacerItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QSpacerItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QSpacerItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QSpacerItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QSpacerItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QSpacerItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QSpacerItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSpacerItem_JUMPTABLE_BgJumptable_QSpacerItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def change_size(w : Int32, h : Int32, h_data : SizePolicy::Policy = SizePolicy::Policy::Minimum, v_data : SizePolicy::Policy = SizePolicy::Policy::Minimum) : Void
      Binding.bg_QSpacerItem_changeSize_int_int_QSizePolicy__Policy_QSizePolicy__Policy(self, w, h, h_data, v_data)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QSpacerItem_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QSpacerItem_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QSpacerItem_maximumSize_(self)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QSpacerItem_expandingDirections_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QSpacerItem_isEmpty_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QSpacerItem_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QSpacerItem_geometry_(self))
    end
    
    def spacer_item() : SpacerItem
      SpacerItem.new(unwrap: Binding.bg_QSpacerItem_spacerItem_(self))
    end
    
    def size_policy() : SizePolicy
      SizePolicy.new(unwrap: Binding.bg_QSpacerItem_sizePolicy_(self))
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QLayoutItem_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def invalidate() : Void
      Binding.bg_QLayoutItem_invalidate_(self)
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayoutItem_widget_(self))
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayoutItem_layout_(self))
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayoutItem_controlTypes_(self)
    end
    
    def initialize(unwrap : Binding::QSpacerItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : SpacerItem)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QSpacerItem_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QSpacerItem_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QSpacerItem_maximumSize_SUPER_(@myself)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QSpacerItem_expandingDirections_SUPER_(@myself)
      end
      
      def empty?() : Bool
        Binding.bg_QSpacerItem_isEmpty_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QSpacerItem_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QSpacerItem_geometry_SUPER_(@myself))
      end
      
      def spacer_item() : SpacerItem
        SpacerItem.new(unwrap: Binding.bg_QSpacerItem_spacerItem_SUPER_(@myself))
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QLayoutItem_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def invalidate() : Void
        Binding.bg_QLayoutItem_invalidate_SUPER_(@myself)
      end
      
      def widget() : Widget
        Widget.new(unwrap: Binding.bg_QLayoutItem_widget_SUPER_(@myself))
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayoutItem_layout_SUPER_(@myself))
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayoutItem_controlTypes_SUPER_(@myself)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class WidgetItem < LayoutItem
    def initialize(w : Widget)
      result = Binding.bg_QWidgetItem__CONSTRUCT_QWidget_X(w)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(WidgetItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ size_hint minimum_size maximum_size expanding_directions empty? geometry= geometry widget has_height_for_width? height_for_width control_types minimum_height_for_width invalidate layout spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QWidgetItem.new(
      bg_QWidgetItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidgetItem_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QWidgetItem_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QWidgetItem_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QWidgetItem_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QWidgetItem_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidgetItem_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QWidgetItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QWidgetItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidgetItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidgetItem_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayoutItem_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QWidgetItem_JUMPTABLE_BgJumptable_QWidgetItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidgetItem_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QWidgetItem_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QWidgetItem_maximumSize_(self)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QWidgetItem_expandingDirections_(self)
    end
    
    def empty?() : Bool
      Binding.bg_QWidgetItem_isEmpty_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QWidgetItem_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QWidgetItem_geometry_(self))
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QWidgetItem_widget_(self))
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidgetItem_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidgetItem_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QWidgetItem_controlTypes_(self)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def invalidate() : Void
      Binding.bg_QLayoutItem_invalidate_(self)
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayoutItem_layout_(self))
    end
    
    def spacer_item() : SpacerItem
      SpacerItem.new(unwrap: Binding.bg_QLayoutItem_spacerItem_(self))
    end
    
    def initialize(unwrap : Binding::QWidgetItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : WidgetItem)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QWidgetItem_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QWidgetItem_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QWidgetItem_maximumSize_SUPER_(@myself)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QWidgetItem_expandingDirections_SUPER_(@myself)
      end
      
      def empty?() : Bool
        Binding.bg_QWidgetItem_isEmpty_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QWidgetItem_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QWidgetItem_geometry_SUPER_(@myself))
      end
      
      def widget() : Widget
        Widget.new(unwrap: Binding.bg_QWidgetItem_widget_SUPER_(@myself))
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidgetItem_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidgetItem_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QWidgetItem_controlTypes_SUPER_(@myself)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def invalidate() : Void
        Binding.bg_QLayoutItem_invalidate_SUPER_(@myself)
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayoutItem_layout_SUPER_(@myself))
      end
      
      def spacer_item() : SpacerItem
        SpacerItem.new(unwrap: Binding.bg_QLayoutItem_spacerItem_SUPER_(@myself))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class Layout < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget)
      result = Binding.bg_QLayout__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.item_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.take_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLayout_JUMPTABLE_BgJumptable_QLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize()
      result = Binding.bg_QLayout__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.item_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.take_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLayout_JUMPTABLE_BgJumptable_QLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def margin() : Int32
      Binding.bg_QLayout_margin_(self)
    end
    
    def margin=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLayout_setMargin_int(self, unnamed_arg_0)
    end
    
    def spacing() : Int32
      Binding.bg_QLayout_spacing_(self)
    end
    
    def spacing=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLayout_setSpacing_int(self, unnamed_arg_0)
    end
    
    def set_contents_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QLayout_setContentsMargins_int_int_int_int(self, left, top, right, bottom)
    end
    
    def contents_margins=(margins : Binding::QMargins*) : Void
      Binding.bg_QLayout_setContentsMargins_const_QMargins_R(self, margins)
    end
    
    def get_contents_margins(left : Int32*, top : Int32*, right : Int32*, bottom : Int32*) : Void
      Binding.bg_QLayout_getContentsMargins_int_X_int_X_int_X_int_X(self, left, top, right, bottom)
    end
    
    def contents_margins() : Binding::QMargins*
      Binding.bg_QLayout_contentsMargins_(self)
    end
    
    def contents_rect() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_contentsRect_(self))
    end
    
    def set_alignment(w : Widget, alignment : Alignment) : Bool
      Binding.bg_QLayout_setAlignment_QWidget_X_Qt__Alignment(self, w, alignment)
    end
    
    def set_alignment(l : Layout, alignment : Alignment) : Bool
      Binding.bg_QLayout_setAlignment_QLayout_X_Qt__Alignment(self, l, alignment)
    end
    
    def size_constraint=(unnamed_arg_0 : Layout::SizeConstraint) : Void
      Binding.bg_QLayout_setSizeConstraint_QLayout__SizeConstraint(self, unnamed_arg_0)
    end
    
    def size_constraint() : Layout::SizeConstraint
      Binding.bg_QLayout_sizeConstraint_(self)
    end
    
    def menu_bar=(w : Widget) : Void
      Binding.bg_QLayout_setMenuBar_QWidget_X(self, w)
    end
    
    def menu_bar() : Widget
      Widget.new(unwrap: Binding.bg_QLayout_menuBar_(self))
    end
    
    def parent_widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayout_parentWidget_(self))
    end
    
    def invalidate() : Void
      Binding.bg_QLayout_invalidate_(self)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_geometry_(self))
    end
    
    def activate() : Bool
      Binding.bg_QLayout_activate_(self)
    end
    
    def update() : Void
      Binding.bg_QLayout_update_(self)
    end
    
    def add_widget(w : Widget) : Void
      Binding.bg_QLayout_addWidget_QWidget_X(self, w)
    end
    
    abstract def add_item(unnamed_arg_0 : LayoutItem) : Void
    def remove_widget(w : Widget) : Void
      Binding.bg_QLayout_removeWidget_QWidget_X(self, w)
    end
    
    def remove_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QLayout_removeItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QLayout_expandingDirections_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QLayout_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QLayout_maximumSize_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    abstract def item_at(index : Int32) : LayoutItem
    abstract def take_at(index : Int32) : LayoutItem
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    
    def index_of(unnamed_arg_0 : LayoutItem) : Int32
      Binding.bg_QLayout_indexOf_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    abstract def count() : Int32
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayout_controlTypes_(self)
    end
    
    def replace_widget(from : Widget, to : Widget) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QLayout_replaceWidget_QWidget_X_QWidget_X(self, from, to))
    end
    
    def replace_widget(from : Widget, to : Widget, options : FindChildOptions) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QLayout_replaceWidget_QWidget_X_QWidget_X_Qt__FindChildOptions(self, from, to, options))
    end
    
    def total_height_for_width(w : Int32) : Int32
      Binding.bg_QLayout_totalHeightForWidth_int(self, w)
    end
    
    def total_minimum_size() : Binding::QSize*
      Binding.bg_QLayout_totalMinimumSize_(self)
    end
    
    def total_maximum_size() : Binding::QSize*
      Binding.bg_QLayout_totalMaximumSize_(self)
    end
    
    def total_size_hint() : Binding::QSize*
      Binding.bg_QLayout_totalSizeHint_(self)
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    
    def enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLayout_setEnabled_bool(self, unnamed_arg_0)
    end
    
    def enabled?() : Bool
      Binding.bg_QLayout_isEnabled_(self)
    end
    
    def self.closest_acceptable_size(w : Widget, s : Binding::QSize*) : Binding::QSize*
      Binding.bg_QLayout_closestAcceptableSize_STATIC_const_QWidget_X_const_QSize_R(w, s)
    end
    
    protected def widget_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QLayout_widgetEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def child_event(e : Binding::QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    
    protected def add_child_layout(l : Layout) : Void
      Binding.bg_QLayout_addChildLayout_QLayout_X(self, l)
    end
    
    protected def add_child_widget(w : Widget) : Void
      Binding.bg_QLayout_addChildWidget_QWidget_X(self, w)
    end
    
    protected def adopt_layout(layout : Layout) : Bool
      Binding.bg_QLayout_adoptLayout_QLayout_X(self, layout)
    end
    
    protected def alignment_rect(unnamed_arg_0 : Rect) : Rect
      Rect.new(unwrap: Binding.bg_QLayout_alignmentRect_const_QRect_R(self, unnamed_arg_0))
    end
    
    protected def initialize(d : Binding::QLayoutPrivate*, unnamed_arg_1 : Layout, unnamed_arg_2 : Widget)
      result = Binding.bg_QLayout__CONSTRUCT_QLayoutPrivate_R_QLayout_X_QWidget_X(d, unnamed_arg_1, unnamed_arg_2)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Layout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall invalidate geometry add_item expanding_directions minimum_size maximum_size geometry= item_at take_at index_of count empty? control_types layout child_event event event_filter timer_event custom_event connect_notify disconnect_notify size_hint has_height_for_width? height_for_width minimum_height_for_width widget spacer_item ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLayout.new(
      bg_QLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.item_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.take_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QLayoutItem_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLayoutItem_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QLayoutItem_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLayoutItem_widget_: BindgenHelper.wrap_proc({% if forwarded.includes?("widget") %} Proc(Binding::QWidget*).new{ self.widget().to_unsafe } {% else %} nil {% end %}),
      bg_QLayoutItem_spacerItem_: BindgenHelper.wrap_proc({% if forwarded.includes?("spacer_item") %} Proc(Binding::QSpacerItem*).new{ self.spacer_item().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLayout_JUMPTABLE_BgJumptable_QLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def as_layout_item() : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QLayout_AS_LayoutItem_(self))
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    abstract def size_hint() : Binding::QSize*
    def has_height_for_width?() : Bool
      Binding.bg_QLayoutItem_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLayoutItem_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QLayoutItem_widget_(self))
    end
    
    def spacer_item() : SpacerItem
      SpacerItem.new(unwrap: Binding.bg_QLayoutItem_spacerItem_(self))
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    enum SizeConstraint : UInt32
      SetDefaultConstraint = 0
      SetNoConstraint = 1
      SetMinimumSize = 2
      SetFixedSize = 3
      SetMaximumSize = 4
      SetMinAndMaxSize = 5
    end
    def initialize(unwrap : Binding::QLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Layout)
      end
      def invalidate() : Void
        Binding.bg_QLayout_invalidate_SUPER_(@myself)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QLayout_geometry_SUPER_(@myself))
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QLayout_expandingDirections_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QLayout_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QLayout_maximumSize_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QLayout_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
      def index_of(unnamed_arg_0 : Widget) : Int32
        Binding.bg_QLayout_indexOf_SUPER_QWidget_X(@myself, unnamed_arg_0)
      end
      
      def empty?() : Bool
        Binding.bg_QLayout_isEmpty_SUPER_(@myself)
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayout_controlTypes_SUPER_(@myself)
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_SUPER_(@myself))
      end
      
      protected def child_event(e : Binding::QChildEvent*) : Void
        Binding.bg_QLayout_childEvent_SUPER_QChildEvent_X(@myself, e)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QLayoutItem_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLayoutItem_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def widget() : Widget
        Widget.new(unwrap: Binding.bg_QLayoutItem_widget_SUPER_(@myself))
      end
      
      def spacer_item() : SpacerItem
        SpacerItem.new(unwrap: Binding.bg_QLayoutItem_spacerItem_SUPER_(@myself))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GridLayout < Layout
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGridLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGridLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGridLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGridLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGridLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget)
      result = Binding.bg_QGridLayout__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GridLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= add_item geometry index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGridLayout.new(
      bg_QGridLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGridLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGridLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QGridLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QGridLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QGridLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QGridLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGridLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGridLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QGridLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QGridLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.item_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QGridLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.take_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QGridLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QGridLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QGridLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGridLayout_JUMPTABLE_BgJumptable_QGridLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize()
      result = Binding.bg_QGridLayout__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GridLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= add_item geometry index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGridLayout.new(
      bg_QGridLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGridLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGridLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGridLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QGridLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QGridLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QGridLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QGridLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGridLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGridLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QGridLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QGridLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.item_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QGridLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.take_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QGridLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QGridLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QGridLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGridLayout_JUMPTABLE_BgJumptable_QGridLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QGridLayout_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QGridLayout_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QGridLayout_maximumSize_(self)
    end
    
    def horizontal_spacing=(spacing : Int32) : Void
      Binding.bg_QGridLayout_setHorizontalSpacing_int(self, spacing)
    end
    
    def horizontal_spacing() : Int32
      Binding.bg_QGridLayout_horizontalSpacing_(self)
    end
    
    def vertical_spacing=(spacing : Int32) : Void
      Binding.bg_QGridLayout_setVerticalSpacing_int(self, spacing)
    end
    
    def vertical_spacing() : Int32
      Binding.bg_QGridLayout_verticalSpacing_(self)
    end
    
    def spacing=(spacing : Int32) : Void
      Binding.bg_QGridLayout_setSpacing_int(self, spacing)
    end
    
    def spacing() : Int32
      Binding.bg_QGridLayout_spacing_(self)
    end
    
    def set_row_stretch(row : Int32, stretch : Int32) : Void
      Binding.bg_QGridLayout_setRowStretch_int_int(self, row, stretch)
    end
    
    def set_column_stretch(column : Int32, stretch : Int32) : Void
      Binding.bg_QGridLayout_setColumnStretch_int_int(self, column, stretch)
    end
    
    def row_stretch(row : Int32) : Int32
      Binding.bg_QGridLayout_rowStretch_int(self, row)
    end
    
    def column_stretch(column : Int32) : Int32
      Binding.bg_QGridLayout_columnStretch_int(self, column)
    end
    
    def set_row_minimum_height(row : Int32, min_size : Int32) : Void
      Binding.bg_QGridLayout_setRowMinimumHeight_int_int(self, row, min_size)
    end
    
    def set_column_minimum_width(column : Int32, min_size : Int32) : Void
      Binding.bg_QGridLayout_setColumnMinimumWidth_int_int(self, column, min_size)
    end
    
    def row_minimum_height(row : Int32) : Int32
      Binding.bg_QGridLayout_rowMinimumHeight_int(self, row)
    end
    
    def column_minimum_width(column : Int32) : Int32
      Binding.bg_QGridLayout_columnMinimumWidth_int(self, column)
    end
    
    def column_count() : Int32
      Binding.bg_QGridLayout_columnCount_(self)
    end
    
    def row_count() : Int32
      Binding.bg_QGridLayout_rowCount_(self)
    end
    
    def cell_rect(row : Int32, column : Int32) : Rect
      Rect.new(unwrap: Binding.bg_QGridLayout_cellRect_int_int(self, row, column))
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QGridLayout_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QGridLayout_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QGridLayout_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QGridLayout_expandingDirections_(self)
    end
    
    def invalidate() : Void
      Binding.bg_QGridLayout_invalidate_(self)
    end
    
    def add_widget(w : Widget) : Void
      Binding.bg_QGridLayout_addWidget_QWidget_X(self, w)
    end
    
    def add_widget(unnamed_arg_0 : Widget, row : Int32, column : Int32) : Void
      Binding.bg_QGridLayout_addWidget_QWidget_X_int_int(self, unnamed_arg_0, row, column)
    end
    
    def add_widget(unnamed_arg_0 : Widget, row : Int32, column : Int32, unnamed_arg_3 : Alignment) : Void
      Binding.bg_QGridLayout_addWidget_QWidget_X_int_int_Qt__Alignment(self, unnamed_arg_0, row, column, unnamed_arg_3)
    end
    
    def add_widget(unnamed_arg_0 : Widget, row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
      Binding.bg_QGridLayout_addWidget_QWidget_X_int_int_int_int(self, unnamed_arg_0, row, column, row_span, column_span)
    end
    
    def add_widget(unnamed_arg_0 : Widget, row : Int32, column : Int32, row_span : Int32, column_span : Int32, unnamed_arg_5 : Alignment) : Void
      Binding.bg_QGridLayout_addWidget_QWidget_X_int_int_int_int_Qt__Alignment(self, unnamed_arg_0, row, column, row_span, column_span, unnamed_arg_5)
    end
    
    def add_layout(unnamed_arg_0 : Layout, row : Int32, column : Int32) : Void
      Binding.bg_QGridLayout_addLayout_QLayout_X_int_int(self, unnamed_arg_0, row, column)
    end
    
    def add_layout(unnamed_arg_0 : Layout, row : Int32, column : Int32, unnamed_arg_3 : Alignment) : Void
      Binding.bg_QGridLayout_addLayout_QLayout_X_int_int_Qt__Alignment(self, unnamed_arg_0, row, column, unnamed_arg_3)
    end
    
    def add_layout(unnamed_arg_0 : Layout, row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
      Binding.bg_QGridLayout_addLayout_QLayout_X_int_int_int_int(self, unnamed_arg_0, row, column, row_span, column_span)
    end
    
    def add_layout(unnamed_arg_0 : Layout, row : Int32, column : Int32, row_span : Int32, column_span : Int32, unnamed_arg_5 : Alignment) : Void
      Binding.bg_QGridLayout_addLayout_QLayout_X_int_int_int_int_Qt__Alignment(self, unnamed_arg_0, row, column, row_span, column_span, unnamed_arg_5)
    end
    
    def origin_corner=(unnamed_arg_0 : Corner) : Void
      Binding.bg_QGridLayout_setOriginCorner_Qt__Corner(self, unnamed_arg_0)
    end
    
    def origin_corner() : Corner
      Binding.bg_QGridLayout_originCorner_(self)
    end
    
    def item_at(index : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QGridLayout_itemAt_int(self, index))
    end
    
    def item_at_position(row : Int32, column : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QGridLayout_itemAtPosition_int_int(self, row, column))
    end
    
    def take_at(index : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QGridLayout_takeAt_int(self, index))
    end
    
    def count() : Int32
      Binding.bg_QGridLayout_count_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QGridLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def add_item(item : LayoutItem, row : Int32, column : Int32, row_span : Int32 = 1, column_span : Int32 = 1) : Void
      Binding.bg_QGridLayout_addItem_QLayoutItem_X_int_int_int_int(self, item, row, column, row_span, column_span)
    end
    
    def add_item(item : LayoutItem, row : Int32, column : Int32, row_span : Int32, column_span : Int32, unnamed_arg_5 : Alignment) : Void
      Binding.bg_QGridLayout_addItem_QLayoutItem_X_int_int_int_int_Qt__Alignment(self, item, row, column, row_span, column_span, unnamed_arg_5)
    end
    
    def set_default_positioning(n : Int32, orient : Orientation) : Void
      Binding.bg_QGridLayout_setDefaultPositioning_int_Qt__Orientation(self, n, orient)
    end
    
    def get_item_position(idx : Int32, row : Int32*, column : Int32*, row_span : Int32*, column_span : Int32*) : Void
      Binding.bg_QGridLayout_getItemPosition_int_int_X_int_X_int_X_int_X(self, idx, row, column, row_span, column_span)
    end
    
    protected def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QGridLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_geometry_(self))
    end
    
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayout_controlTypes_(self)
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    
    protected def child_event(e : Binding::QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGridLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QGridLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GridLayout)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QGridLayout_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QGridLayout_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QGridLayout_maximumSize_SUPER_(@myself)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QGridLayout_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QGridLayout_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QGridLayout_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QGridLayout_expandingDirections_SUPER_(@myself)
      end
      
      def invalidate() : Void
        Binding.bg_QGridLayout_invalidate_SUPER_(@myself)
      end
      
      def item_at(index : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QGridLayout_itemAt_SUPER_int(@myself, index))
      end
      
      def take_at(index : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QGridLayout_takeAt_SUPER_int(@myself, index))
      end
      
      def count() : Int32
        Binding.bg_QGridLayout_count_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QGridLayout_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
      protected def add_item(unnamed_arg_0 : LayoutItem) : Void
        Binding.bg_QGridLayout_addItem_SUPER_QLayoutItem_X(@myself, unnamed_arg_0)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QLayout_geometry_SUPER_(@myself))
      end
      
      def index_of(unnamed_arg_0 : Widget) : Int32
        Binding.bg_QLayout_indexOf_SUPER_QWidget_X(@myself, unnamed_arg_0)
      end
      
      def empty?() : Bool
        Binding.bg_QLayout_isEmpty_SUPER_(@myself)
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayout_controlTypes_SUPER_(@myself)
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_SUPER_(@myself))
      end
      
      protected def child_event(e : Binding::QChildEvent*) : Void
        Binding.bg_QLayout_childEvent_SUPER_QChildEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class BoxLayout < Layout
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QBoxLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(unnamed_arg_0 : BoxLayout::Direction, parent : Widget? = nil)
      result = Binding.bg_QBoxLayout__CONSTRUCT_QBoxLayout__Direction_QWidget_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(BoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= geometry index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QBoxLayout.new(
      bg_QBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QBoxLayout_JUMPTABLE_BgJumptable_QBoxLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def direction() : BoxLayout::Direction
      Binding.bg_QBoxLayout_direction_(self)
    end
    
    def direction=(unnamed_arg_0 : BoxLayout::Direction) : Void
      Binding.bg_QBoxLayout_setDirection_QBoxLayout__Direction(self, unnamed_arg_0)
    end
    
    def add_spacing(size : Int32) : Void
      Binding.bg_QBoxLayout_addSpacing_int(self, size)
    end
    
    def add_stretch(stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_addStretch_int(self, stretch)
    end
    
    def add_spacer_item(spacer_item : SpacerItem) : Void
      Binding.bg_QBoxLayout_addSpacerItem_QSpacerItem_X(self, spacer_item)
    end
    
    def add_widget(unnamed_arg_0 : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X_int(self, unnamed_arg_0, stretch)
    end
    
    def add_widget(unnamed_arg_0 : Widget, stretch : Int32, alignment : Alignment) : Void
      Binding.bg_QBoxLayout_addWidget_QWidget_X_int_Qt__Alignment(self, unnamed_arg_0, stretch, alignment)
    end
    
    def add_layout(layout : Layout, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_addLayout_QLayout_X_int(self, layout, stretch)
    end
    
    def add_strut(unnamed_arg_0 : Int32) : Void
      Binding.bg_QBoxLayout_addStrut_int(self, unnamed_arg_0)
    end
    
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QBoxLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    def insert_spacing(index : Int32, size : Int32) : Void
      Binding.bg_QBoxLayout_insertSpacing_int_int(self, index, size)
    end
    
    def insert_stretch(index : Int32, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_insertStretch_int_int(self, index, stretch)
    end
    
    def insert_spacer_item(index : Int32, spacer_item : SpacerItem) : Void
      Binding.bg_QBoxLayout_insertSpacerItem_int_QSpacerItem_X(self, index, spacer_item)
    end
    
    def insert_widget(index : Int32, widget : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    
    def insert_widget(index : Int32, widget : Widget, stretch : Int32, alignment : Alignment) : Void
      Binding.bg_QBoxLayout_insertWidget_int_QWidget_X_int_Qt__Alignment(self, index, widget, stretch, alignment)
    end
    
    def insert_layout(index : Int32, layout : Layout, stretch : Int32 = 0) : Void
      Binding.bg_QBoxLayout_insertLayout_int_QLayout_X_int(self, index, layout, stretch)
    end
    
    def insert_item(index : Int32, unnamed_arg_1 : LayoutItem) : Void
      Binding.bg_QBoxLayout_insertItem_int_QLayoutItem_X(self, index, unnamed_arg_1)
    end
    
    def spacing() : Int32
      Binding.bg_QBoxLayout_spacing_(self)
    end
    
    def spacing=(spacing : Int32) : Void
      Binding.bg_QBoxLayout_setSpacing_int(self, spacing)
    end
    
    def set_stretch_factor(w : Widget, stretch : Int32) : Bool
      Binding.bg_QBoxLayout_setStretchFactor_QWidget_X_int(self, w, stretch)
    end
    
    def set_stretch_factor(l : Layout, stretch : Int32) : Bool
      Binding.bg_QBoxLayout_setStretchFactor_QLayout_X_int(self, l, stretch)
    end
    
    def set_stretch(index : Int32, stretch : Int32) : Void
      Binding.bg_QBoxLayout_setStretch_int_int(self, index, stretch)
    end
    
    def stretch(index : Int32) : Int32
      Binding.bg_QBoxLayout_stretch_int(self, index)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QBoxLayout_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QBoxLayout_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QBoxLayout_maximumSize_(self)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QBoxLayout_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QBoxLayout_expandingDirections_(self)
    end
    
    def invalidate() : Void
      Binding.bg_QBoxLayout_invalidate_(self)
    end
    
    def item_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_itemAt_int(self, unnamed_arg_0))
    end
    
    def take_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_takeAt_int(self, unnamed_arg_0))
    end
    
    def count() : Int32
      Binding.bg_QBoxLayout_count_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QBoxLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_geometry_(self))
    end
    
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayout_controlTypes_(self)
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    
    protected def child_event(e : Binding::QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QBoxLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Direction : UInt32
      LeftToRight = 0
      RightToLeft = 1
      TopToBottom = 2
      BottomToTop = 3
      Down = 2
      Up = 3
    end
    def initialize(unwrap : Binding::QBoxLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : BoxLayout)
      end
      def add_item(unnamed_arg_0 : LayoutItem) : Void
        Binding.bg_QBoxLayout_addItem_SUPER_QLayoutItem_X(@myself, unnamed_arg_0)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QBoxLayout_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QBoxLayout_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QBoxLayout_maximumSize_SUPER_(@myself)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QBoxLayout_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QBoxLayout_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QBoxLayout_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QBoxLayout_expandingDirections_SUPER_(@myself)
      end
      
      def invalidate() : Void
        Binding.bg_QBoxLayout_invalidate_SUPER_(@myself)
      end
      
      def item_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_itemAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def take_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_takeAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def count() : Int32
        Binding.bg_QBoxLayout_count_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QBoxLayout_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QLayout_geometry_SUPER_(@myself))
      end
      
      def index_of(unnamed_arg_0 : Widget) : Int32
        Binding.bg_QLayout_indexOf_SUPER_QWidget_X(@myself, unnamed_arg_0)
      end
      
      def empty?() : Bool
        Binding.bg_QLayout_isEmpty_SUPER_(@myself)
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayout_controlTypes_SUPER_(@myself)
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_SUPER_(@myself))
      end
      
      protected def child_event(e : Binding::QChildEvent*) : Void
        Binding.bg_QLayout_childEvent_SUPER_QChildEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class HBoxLayout < BoxLayout
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QHBoxLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QHBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QHBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize()
      result = Binding.bg_QHBoxLayout__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(HBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QHBoxLayout.new(
      bg_QHBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QHBoxLayout_JUMPTABLE_BgJumptable_QHBoxLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget)
      result = Binding.bg_QHBoxLayout__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(HBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QHBoxLayout.new(
      bg_QHBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QHBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QHBoxLayout_JUMPTABLE_BgJumptable_QHBoxLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QBoxLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QBoxLayout_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QBoxLayout_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QBoxLayout_maximumSize_(self)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QBoxLayout_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QBoxLayout_expandingDirections_(self)
    end
    
    def invalidate() : Void
      Binding.bg_QBoxLayout_invalidate_(self)
    end
    
    def item_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_itemAt_int(self, unnamed_arg_0))
    end
    
    def take_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_takeAt_int(self, unnamed_arg_0))
    end
    
    def count() : Int32
      Binding.bg_QBoxLayout_count_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QBoxLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QHBoxLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QHBoxLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : HBoxLayout)
      end
      def add_item(unnamed_arg_0 : LayoutItem) : Void
        Binding.bg_QBoxLayout_addItem_SUPER_QLayoutItem_X(@myself, unnamed_arg_0)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QBoxLayout_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QBoxLayout_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QBoxLayout_maximumSize_SUPER_(@myself)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QBoxLayout_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QBoxLayout_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QBoxLayout_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QBoxLayout_expandingDirections_SUPER_(@myself)
      end
      
      def invalidate() : Void
        Binding.bg_QBoxLayout_invalidate_SUPER_(@myself)
      end
      
      def item_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_itemAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def take_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_takeAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def count() : Int32
        Binding.bg_QBoxLayout_count_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QBoxLayout_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class VBoxLayout < BoxLayout
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QVBoxLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QVBoxLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QVBoxLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize()
      result = Binding.bg_QVBoxLayout__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(VBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QVBoxLayout.new(
      bg_QVBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QVBoxLayout_JUMPTABLE_BgJumptable_QVBoxLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget)
      result = Binding.bg_QVBoxLayout__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(VBoxLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item size_hint minimum_size maximum_size has_height_for_width? height_for_width minimum_height_for_width expanding_directions invalidate item_at take_at count geometry= ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QVBoxLayout.new(
      bg_QVBoxLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QVBoxLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QBoxLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|unnamed_arg_0| self.add_item(LayoutItemImpl.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QBoxLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QBoxLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QBoxLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_minimumHeightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.minimum_height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QBoxLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QBoxLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QBoxLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QBoxLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|unnamed_arg_0| self.geometry=(Rect.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QVBoxLayout_JUMPTABLE_BgJumptable_QVBoxLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QBoxLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QBoxLayout_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QBoxLayout_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QBoxLayout_maximumSize_(self)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QBoxLayout_hasHeightForWidth_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QBoxLayout_minimumHeightForWidth_int(self, unnamed_arg_0)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QBoxLayout_expandingDirections_(self)
    end
    
    def invalidate() : Void
      Binding.bg_QBoxLayout_invalidate_(self)
    end
    
    def item_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_itemAt_int(self, unnamed_arg_0))
    end
    
    def take_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_takeAt_int(self, unnamed_arg_0))
    end
    
    def count() : Int32
      Binding.bg_QBoxLayout_count_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QBoxLayout_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QVBoxLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QVBoxLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : VBoxLayout)
      end
      def add_item(unnamed_arg_0 : LayoutItem) : Void
        Binding.bg_QBoxLayout_addItem_SUPER_QLayoutItem_X(@myself, unnamed_arg_0)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QBoxLayout_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QBoxLayout_minimumSize_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QBoxLayout_maximumSize_SUPER_(@myself)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QBoxLayout_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QBoxLayout_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def minimum_height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QBoxLayout_minimumHeightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QBoxLayout_expandingDirections_SUPER_(@myself)
      end
      
      def invalidate() : Void
        Binding.bg_QBoxLayout_invalidate_SUPER_(@myself)
      end
      
      def item_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_itemAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def take_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QBoxLayout_takeAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def count() : Int32
        Binding.bg_QBoxLayout_count_SUPER_(@myself)
      end
      
      def geometry=(unnamed_arg_0 : Rect) : Void
        Binding.bg_QBoxLayout_setGeometry_SUPER_const_QRect_R(@myself, unnamed_arg_0)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ButtonGroup < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QButtonGroup_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QButtonGroup_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QButtonGroup_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QButtonGroup_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QButtonGroup__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ButtonGroup)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QButtonGroup.new(
      bg_QButtonGroup_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QButtonGroup_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QButtonGroup_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QButtonGroup_JUMPTABLE_BgJumptable_QButtonGroup_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def exclusive=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QButtonGroup_setExclusive_bool(self, unnamed_arg_0)
    end
    
    def exclusive() : Bool
      Binding.bg_QButtonGroup_exclusive_(self)
    end
    
    def add_button(unnamed_arg_0 : AbstractButton, id : Int32 = -1) : Void
      Binding.bg_QButtonGroup_addButton_QAbstractButton_X_int(self, unnamed_arg_0, id)
    end
    
    def remove_button(unnamed_arg_0 : AbstractButton) : Void
      Binding.bg_QButtonGroup_removeButton_QAbstractButton_X(self, unnamed_arg_0)
    end
    
    def buttons() : Enumerable(AbstractButton)
      Container_QList_QAbstractButton_X_.new(unwrap: Binding.bg_QButtonGroup_buttons_(self))
    end
    
    def checked_button() : AbstractButton
      AbstractButtonImpl.new(unwrap: Binding.bg_QButtonGroup_checkedButton_(self))
    end
    
    def button(id : Int32) : AbstractButton
      AbstractButtonImpl.new(unwrap: Binding.bg_QButtonGroup_button_int(self, id))
    end
    
    def set_id(button : AbstractButton, id : Int32) : Void
      Binding.bg_QButtonGroup_setId_QAbstractButton_X_int(self, button, id)
    end
    
    def id(button : AbstractButton) : Int32
      Binding.bg_QButtonGroup_id_QAbstractButton_X(self, button)
    end
    
    def checked_id() : Int32
      Binding.bg_QButtonGroup_checkedId_(self)
    end
    
    def id_clicked(unnamed_arg_0 : Int32) : Void
      Binding.bg_QButtonGroup_idClicked_int(self, unnamed_arg_0)
    end
    
    def id_pressed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QButtonGroup_idPressed_int(self, unnamed_arg_0)
    end
    
    def id_released(unnamed_arg_0 : Int32) : Void
      Binding.bg_QButtonGroup_idReleased_int(self, unnamed_arg_0)
    end
    
    def id_toggled(unnamed_arg_0 : Int32, unnamed_arg_1 : Bool) : Void
      Binding.bg_QButtonGroup_idToggled_int_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QButtonGroup_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_button_clicked(_type1_ : AbstractButton.class, &_proc_ : Proc(AbstractButton, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonClicked_CrystalProc_void__QAbstractButton_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAbstractButton*, Void).new do |arg0| _proc_.call(AbstractButtonImpl.new(unwrap: arg0)) end)))
    end
    
    def on_button_pressed(_type1_ : AbstractButton.class, &_proc_ : Proc(AbstractButton, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonPressed_CrystalProc_void__QAbstractButton_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAbstractButton*, Void).new do |arg0| _proc_.call(AbstractButtonImpl.new(unwrap: arg0)) end)))
    end
    
    def on_button_released(_type1_ : AbstractButton.class, &_proc_ : Proc(AbstractButton, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonReleased_CrystalProc_void__QAbstractButton_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAbstractButton*, Void).new do |arg0| _proc_.call(AbstractButtonImpl.new(unwrap: arg0)) end)))
    end
    
    def on_button_toggled(_type1_ : AbstractButton.class, _type2_ : Bool.class, &_proc_ : Proc(AbstractButton, Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonToggled_CrystalProc_void__QAbstractButton_X__bool_(self, BindgenHelper.wrap_proc(Proc(Binding::QAbstractButton*, Bool, Void).new do |arg0, arg1| _proc_.call(AbstractButtonImpl.new(unwrap: arg0), arg1) end)))
    end
    
    def on_id_clicked(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_idClicked_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_id_pressed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_idPressed_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_id_released(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_idReleased_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_id_toggled(&_proc_ : Proc(Int32, Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_idToggled_CrystalProc_void__int__bool_(self, BindgenHelper.wrap_proc(Proc(Int32, Bool, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_button_clicked(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonClicked_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_button_pressed(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonPressed_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_button_released(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonReleased_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_button_toggled(_type1_ : Int32.class, _type2_ : Bool.class, &_proc_ : Proc(Int32, Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QButtonGroup_CONNECT_buttonToggled_CrystalProc_void__int__bool_(self, BindgenHelper.wrap_proc(Proc(Int32, Bool, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def initialize(unwrap : Binding::QButtonGroup*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ButtonGroup)
      end
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class CheckBox < AbstractButton
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QCheckBox_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCheckBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCheckBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QCheckBox__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCheckBox_JUMPTABLE_BgJumptable_QCheckBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Widget? = nil)
      result = Binding.bg_QCheckBox__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(CheckBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button check_state_set next_check_state paint_event mouse_move_event key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCheckBox.new(
      bg_QCheckBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCheckBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCheckBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QCheckBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCheckBox_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QCheckBox_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QCheckBox_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QCheckBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QCheckBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCheckBox_JUMPTABLE_BgJumptable_QCheckBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QCheckBox_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QCheckBox_minimumSizeHint_(self)
    end
    
    def tristate=(y : Bool = true) : Void
      Binding.bg_QCheckBox_setTristate_bool(self, y)
    end
    
    def tristate?() : Bool
      Binding.bg_QCheckBox_isTristate_(self)
    end
    
    def check_state() : CheckState
      Binding.bg_QCheckBox_checkState_(self)
    end
    
    def check_state=(state : CheckState) : Void
      Binding.bg_QCheckBox_setCheckState_Qt__CheckState(self, state)
    end
    
    def state_changed(unnamed_arg_0 : Int32) : Void
      Binding.bg_QCheckBox_stateChanged_int(self, unnamed_arg_0)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QCheckBox_event_QEvent_X(self, e)
    end
    
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QCheckBox_hitButton_const_QPoint_R(self, pos)
    end
    
    protected def check_state_set() : Void
      Binding.bg_QCheckBox_checkStateSet_(self)
    end
    
    protected def next_check_state() : Void
      Binding.bg_QCheckBox_nextCheckState_(self)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QCheckBox_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QCheckBox_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionButton*) : Void
      Binding.bg_QCheckBox_initStyleOption_QStyleOptionButton_X(self, option)
    end
    
    protected def key_press_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(self, e)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusInEvent_QFocusEvent_X(self, e)
    end
    
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractButton_changeEvent_QEvent_X(self, e)
    end
    
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QAbstractButton_timerEvent_QTimerEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QCheckBox_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_state_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCheckBox_CONNECT_stateChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QCheckBox*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : CheckBox)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QCheckBox_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QCheckBox_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QCheckBox_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def hit_button(pos : Point) : Bool
        Binding.bg_QCheckBox_hitButton_SUPER_const_QPoint_R(@myself, pos)
      end
      
      protected def check_state_set() : Void
        Binding.bg_QCheckBox_checkStateSet_SUPER_(@myself)
      end
      
      protected def next_check_state() : Void
        Binding.bg_QCheckBox_nextCheckState_SUPER_(@myself)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QCheckBox_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QCheckBox_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_release_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def focus_in_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def focus_out_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractButton_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def timer_event(e : TimerEvent) : Void
        Binding.bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Dialog < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDialog_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDialog_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDialog_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QDialog__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|unnamed_arg_0| self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDialog_JUMPTABLE_BgJumptable_QDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, f : WindowFlags)
      result = Binding.bg_QDialog__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|unnamed_arg_0| self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDialog_JUMPTABLE_BgJumptable_QDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def result() : Int32
      Binding.bg_QDialog_result_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QDialog_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QDialog_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QDialog_minimumSizeHint_(self)
    end
    
    def size_grip_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QDialog_setSizeGripEnabled_bool(self, unnamed_arg_0)
    end
    
    def size_grip_enabled?() : Bool
      Binding.bg_QDialog_isSizeGripEnabled_(self)
    end
    
    def modal=(modal : Bool) : Void
      Binding.bg_QDialog_setModal_bool(self, modal)
    end
    
    def result=(r : Int32) : Void
      Binding.bg_QDialog_setResult_int(self, r)
    end
    
    def finished(result : Int32) : Void
      Binding.bg_QDialog_finished_int(self, result)
    end
    
    def accepted() : Void
      Binding.bg_QDialog_accepted_(self)
    end
    
    def rejected() : Void
      Binding.bg_QDialog_rejected_(self)
    end
    
    def open() : Void
      Binding.bg_QDialog_open_(self)
    end
    
    def exec() : Int32
      Binding.bg_QDialog_exec_(self)
    end
    
    def done(unnamed_arg_0 : Int32) : Void
      Binding.bg_QDialog_done_int(self, unnamed_arg_0)
    end
    
    def accept() : Void
      Binding.bg_QDialog_accept_(self)
    end
    
    def reject() : Void
      Binding.bg_QDialog_reject_(self)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QDialogPrivate*, parent : Widget)
      result = Binding.bg_QDialog__CONSTRUCT_QDialogPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|unnamed_arg_0| self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDialog_JUMPTABLE_BgJumptable_QDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QDialogPrivate*, parent : Widget, f : WindowFlags)
      result = Binding.bg_QDialog__CONSTRUCT_QDialogPrivate_R_QWidget_X_Qt__WindowFlags(unnamed_arg_0, parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= size_hint minimum_size_hint open exec done accept reject key_press_event close_event show_event resize_event context_menu_event event_filter dev_type height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDialog.new(
      bg_QDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|unnamed_arg_0| self.done(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDialog_JUMPTABLE_BgJumptable_QDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QDialog_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def close_event(unnamed_arg_0 : CloseEvent) : Void
      Binding.bg_QDialog_closeEvent_QCloseEvent_X(self, unnamed_arg_0)
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QDialog_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QDialog_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QDialog_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QDialog_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    protected def adjust_position(unnamed_arg_0 : Widget) : Void
      Binding.bg_QDialog_adjustPosition_QWidget_X(self, unnamed_arg_0)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QWidget_event_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDialog_staticMetaObject_STATIC_GETTER_()
    end
    
    enum DialogCode : UInt32
      Rejected = 0
      Accepted = 1
    end
    def on_finished(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_CONNECT_finished_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_accepted(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_CONNECT_accepted_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_rejected(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDialog_CONNECT_rejected_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QDialog*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Dialog)
      end
      def visible=(visible : Bool) : Void
        Binding.bg_QDialog_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QDialog_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QDialog_minimumSizeHint_SUPER_(@myself)
      end
      
      def open() : Void
        Binding.bg_QDialog_open_SUPER_(@myself)
      end
      
      def exec() : Int32
        Binding.bg_QDialog_exec_SUPER_(@myself)
      end
      
      def done(unnamed_arg_0 : Int32) : Void
        Binding.bg_QDialog_done_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def accept() : Void
        Binding.bg_QDialog_accept_SUPER_(@myself)
      end
      
      def reject() : Void
        Binding.bg_QDialog_reject_SUPER_(@myself)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QDialog_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def close_event(unnamed_arg_0 : CloseEvent) : Void
        Binding.bg_QDialog_closeEvent_SUPER_QCloseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QDialog_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QDialog_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QDialog_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QDialog_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QWidget_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QWidget_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ComboBox < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QComboBox_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QComboBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QComboBox_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QComboBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QComboBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QComboBox__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ComboBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint show_popup hide_popup event input_method_query focus_in_event focus_out_event change_event resize_event paint_event show_event hide_event mouse_press_event mouse_release_event key_press_event key_release_event wheel_event context_menu_event input_method_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event mouse_move_event enter_event leave_event move_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QComboBox.new(
      bg_QComboBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QComboBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QComboBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QComboBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QComboBox_showPopup_: BindgenHelper.wrap_proc({% if forwarded.includes?("show_popup") %} Proc(Void).new{ self.show_popup() } {% else %} nil {% end %}),
      bg_QComboBox_hidePopup_: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_popup") %} Proc(Void).new{ self.hide_popup() } {% else %} nil {% end %}),
      bg_QComboBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QComboBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|e| self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|e| self.show_event(ShowEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|e| self.hide_event(HideEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QComboBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|e| self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QComboBox_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QComboBox_JUMPTABLE_BgJumptable_QComboBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def max_visible_items() : Int32
      Binding.bg_QComboBox_maxVisibleItems_(self)
    end
    
    def max_visible_items=(max_items : Int32) : Void
      Binding.bg_QComboBox_setMaxVisibleItems_int(self, max_items)
    end
    
    def count() : Int32
      Binding.bg_QComboBox_count_(self)
    end
    
    def max_count=(max : Int32) : Void
      Binding.bg_QComboBox_setMaxCount_int(self, max)
    end
    
    def max_count() : Int32
      Binding.bg_QComboBox_maxCount_(self)
    end
    
    def duplicates_enabled() : Bool
      Binding.bg_QComboBox_duplicatesEnabled_(self)
    end
    
    def duplicates_enabled=(enable : Bool) : Void
      Binding.bg_QComboBox_setDuplicatesEnabled_bool(self, enable)
    end
    
    def frame=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QComboBox_setFrame_bool(self, unnamed_arg_0)
    end
    
    def has_frame?() : Bool
      Binding.bg_QComboBox_hasFrame_(self)
    end
    
    def find_text(text : String) : Int32
      Binding.bg_QComboBox_findText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def find_text(text : String, flags : MatchFlags) : Int32
      Binding.bg_QComboBox_findText_const_QString_R_Qt__MatchFlags(self, Qt::Converter::QString.wrap(text), flags)
    end
    
    def find_data(data : Variant, role : Int32 = 256) : Int32
      Binding.bg_QComboBox_findData_const_QVariant_R_int(self, (data.to_unsafe), role)
    end
    
    def find_data(data : Variant, role : Int32, flags : MatchFlags) : Int32
      Binding.bg_QComboBox_findData_const_QVariant_R_int_Qt__MatchFlags(self, (data.to_unsafe), role, flags)
    end
    
    def insert_policy() : ComboBox::InsertPolicy
      Binding.bg_QComboBox_insertPolicy_(self)
    end
    
    def insert_policy=(policy : ComboBox::InsertPolicy) : Void
      Binding.bg_QComboBox_setInsertPolicy_QComboBox__InsertPolicy(self, policy)
    end
    
    def size_adjust_policy() : ComboBox::SizeAdjustPolicy
      Binding.bg_QComboBox_sizeAdjustPolicy_(self)
    end
    
    def size_adjust_policy=(policy : ComboBox::SizeAdjustPolicy) : Void
      Binding.bg_QComboBox_setSizeAdjustPolicy_QComboBox__SizeAdjustPolicy(self, policy)
    end
    
    def minimum_contents_length() : Int32
      Binding.bg_QComboBox_minimumContentsLength_(self)
    end
    
    def minimum_contents_length=(characters : Int32) : Void
      Binding.bg_QComboBox_setMinimumContentsLength_int(self, characters)
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QComboBox_iconSize_(self)
    end
    
    def icon_size=(size : Binding::QSize*) : Void
      Binding.bg_QComboBox_setIconSize_const_QSize_R(self, size)
    end
    
    def placeholder_text=(placeholder_text : String) : Void
      Binding.bg_QComboBox_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(placeholder_text))
    end
    
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QComboBox_placeholderText_(self))
    end
    
    def editable?() : Bool
      Binding.bg_QComboBox_isEditable_(self)
    end
    
    def editable=(editable : Bool) : Void
      Binding.bg_QComboBox_setEditable_bool(self, editable)
    end
    
    def line_edit=(edit : LineEdit) : Void
      Binding.bg_QComboBox_setLineEdit_QLineEdit_X(self, edit)
    end
    
    def line_edit() : LineEdit
      LineEdit.new(unwrap: Binding.bg_QComboBox_lineEdit_(self))
    end
    
    def validator=(v : Binding::QValidator*) : Void
      Binding.bg_QComboBox_setValidator_const_QValidator_X(self, v)
    end
    
    def validator() : Binding::QValidator*
      Binding.bg_QComboBox_validator_(self)
    end
    
    def completer=(c : Completer) : Void
      Binding.bg_QComboBox_setCompleter_QCompleter_X(self, c)
    end
    
    def completer() : Completer
      Completer.new(unwrap: Binding.bg_QComboBox_completer_(self))
    end
    
    def item_delegate() : AbstractItemDelegate
      AbstractItemDelegateImpl.new(unwrap: Binding.bg_QComboBox_itemDelegate_(self))
    end
    
    def item_delegate=(delegate : AbstractItemDelegate) : Void
      Binding.bg_QComboBox_setItemDelegate_QAbstractItemDelegate_X(self, delegate)
    end
    
    def model() : AbstractItemModel
      AbstractItemModelImpl.new(unwrap: Binding.bg_QComboBox_model_(self))
    end
    
    def model=(model : AbstractItemModel) : Void
      Binding.bg_QComboBox_setModel_QAbstractItemModel_X(self, model)
    end
    
    def root_model_index() : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QComboBox_rootModelIndex_(self))
    end
    
    def root_model_index=(index : ModelIndex) : Void
      Binding.bg_QComboBox_setRootModelIndex_const_QModelIndex_R(self, index)
    end
    
    def model_column() : Int32
      Binding.bg_QComboBox_modelColumn_(self)
    end
    
    def model_column=(visible_column : Int32) : Void
      Binding.bg_QComboBox_setModelColumn_int(self, visible_column)
    end
    
    def current_index() : Int32
      Binding.bg_QComboBox_currentIndex_(self)
    end
    
    def current_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QComboBox_currentText_(self))
    end
    
    def current_data(role : Int32 = 256) : Variant
      Qt::Variant.new(Binding.bg_QComboBox_currentData_int(self, role))
    end
    
    def item_text(index : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QComboBox_itemText_int(self, index))
    end
    
    def item_icon(index : Int32) : Icon
      Icon.new(unwrap: Binding.bg_QComboBox_itemIcon_int(self, index))
    end
    
    def item_data(index : Int32, role : Int32 = 256) : Variant
      Qt::Variant.new(Binding.bg_QComboBox_itemData_int_int(self, index, role))
    end
    
    def add_item(text : String) : Void
      Binding.bg_QComboBox_addItem_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def add_item(text : String, user_data : Variant) : Void
      Binding.bg_QComboBox_addItem_const_QString_R_const_QVariant_R(self, Qt::Converter::QString.wrap(text), (user_data.to_unsafe))
    end
    
    def add_item(icon : Icon, text : String) : Void
      Binding.bg_QComboBox_addItem_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text))
    end
    
    def add_item(icon : Icon, text : String, user_data : Variant) : Void
      Binding.bg_QComboBox_addItem_const_QIcon_R_const_QString_R_const_QVariant_R(self, icon, Qt::Converter::QString.wrap(text), (user_data.to_unsafe))
    end
    
    def add_items(texts : Binding::QStringList*) : Void
      Binding.bg_QComboBox_addItems_const_QStringList_R(self, texts)
    end
    
    def insert_item(index : Int32, text : String) : Void
      Binding.bg_QComboBox_insertItem_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def insert_item(index : Int32, text : String, user_data : Variant) : Void
      Binding.bg_QComboBox_insertItem_int_const_QString_R_const_QVariant_R(self, index, Qt::Converter::QString.wrap(text), (user_data.to_unsafe))
    end
    
    def insert_item(index : Int32, icon : Icon, text : String) : Void
      Binding.bg_QComboBox_insertItem_int_const_QIcon_R_const_QString_R(self, index, icon, Qt::Converter::QString.wrap(text))
    end
    
    def insert_item(index : Int32, icon : Icon, text : String, user_data : Variant) : Void
      Binding.bg_QComboBox_insertItem_int_const_QIcon_R_const_QString_R_const_QVariant_R(self, index, icon, Qt::Converter::QString.wrap(text), (user_data.to_unsafe))
    end
    
    def insert_items(index : Int32, texts : Binding::QStringList*) : Void
      Binding.bg_QComboBox_insertItems_int_const_QStringList_R(self, index, texts)
    end
    
    def insert_separator(index : Int32) : Void
      Binding.bg_QComboBox_insertSeparator_int(self, index)
    end
    
    def remove_item(index : Int32) : Void
      Binding.bg_QComboBox_removeItem_int(self, index)
    end
    
    def set_item_text(index : Int32, text : String) : Void
      Binding.bg_QComboBox_setItemText_int_const_QString_R(self, index, Qt::Converter::QString.wrap(text))
    end
    
    def set_item_icon(index : Int32, icon : Icon) : Void
      Binding.bg_QComboBox_setItemIcon_int_const_QIcon_R(self, index, icon)
    end
    
    def set_item_data(index : Int32, value : Variant, role : Int32 = 256) : Void
      Binding.bg_QComboBox_setItemData_int_const_QVariant_R_int(self, index, (value.to_unsafe), role)
    end
    
    def view() : AbstractItemView
      AbstractItemViewImpl.new(unwrap: Binding.bg_QComboBox_view_(self))
    end
    
    def view=(item_view : AbstractItemView) : Void
      Binding.bg_QComboBox_setView_QAbstractItemView_X(self, item_view)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QComboBox_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QComboBox_minimumSizeHint_(self)
    end
    
    def show_popup() : Void
      Binding.bg_QComboBox_showPopup_(self)
    end
    
    def hide_popup() : Void
      Binding.bg_QComboBox_hidePopup_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QComboBox_event_QEvent_X(self, event)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def input_method_query(query : InputMethodQuery, argument : Variant) : Variant
      Qt::Variant.new(Binding.bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery_const_QVariant_R(self, query, (argument.to_unsafe)))
    end
    
    def clear() : Void
      Binding.bg_QComboBox_clear_(self)
    end
    
    def clear_edit_text() : Void
      Binding.bg_QComboBox_clearEditText_(self)
    end
    
    def edit_text=(text : String) : Void
      Binding.bg_QComboBox_setEditText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def current_index=(index : Int32) : Void
      Binding.bg_QComboBox_setCurrentIndex_int(self, index)
    end
    
    def current_text=(text : String) : Void
      Binding.bg_QComboBox_setCurrentText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def edit_text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QComboBox_editTextChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def text_activated(unnamed_arg_0 : String) : Void
      Binding.bg_QComboBox_textActivated_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def text_highlighted(unnamed_arg_0 : String) : Void
      Binding.bg_QComboBox_textHighlighted_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def current_text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QComboBox_currentTextChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QComboBox_focusInEvent_QFocusEvent_X(self, e)
    end
    
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QComboBox_focusOutEvent_QFocusEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QComboBox_changeEvent_QEvent_X(self, e)
    end
    
    protected def resize_event(e : ResizeEvent) : Void
      Binding.bg_QComboBox_resizeEvent_QResizeEvent_X(self, e)
    end
    
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QComboBox_paintEvent_QPaintEvent_X(self, e)
    end
    
    protected def show_event(e : ShowEvent) : Void
      Binding.bg_QComboBox_showEvent_QShowEvent_X(self, e)
    end
    
    protected def hide_event(e : HideEvent) : Void
      Binding.bg_QComboBox_hideEvent_QHideEvent_X(self, e)
    end
    
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QComboBox_mousePressEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QComboBox_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    
    protected def key_press_event(e : KeyEvent) : Void
      Binding.bg_QComboBox_keyPressEvent_QKeyEvent_X(self, e)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QComboBox_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def wheel_event(e : Binding::QWheelEvent*) : Void
      Binding.bg_QComboBox_wheelEvent_QWheelEvent_X(self, e)
    end
    
    protected def context_menu_event(e : Binding::QContextMenuEvent*) : Void
      Binding.bg_QComboBox_contextMenuEvent_QContextMenuEvent_X(self, e)
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QComboBox_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionComboBox*) : Void
      Binding.bg_QComboBox_initStyleOption_QStyleOptionComboBox_X(self, option)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QComboBoxPrivate*, unnamed_arg_1 : Widget)
      result = Binding.bg_QComboBox__CONSTRUCT_QComboBoxPrivate_R_QWidget_X(unnamed_arg_0, unnamed_arg_1)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ComboBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint show_popup hide_popup event input_method_query focus_in_event focus_out_event change_event resize_event paint_event show_event hide_event mouse_press_event mouse_release_event key_press_event key_release_event wheel_event context_menu_event input_method_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_double_click_event mouse_move_event enter_event leave_event move_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event native_event metric init_painter shared_painter focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QComboBox.new(
      bg_QComboBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QComboBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QComboBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QComboBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QComboBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QComboBox_showPopup_: BindgenHelper.wrap_proc({% if forwarded.includes?("show_popup") %} Proc(Void).new{ self.show_popup() } {% else %} nil {% end %}),
      bg_QComboBox_hidePopup_: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_popup") %} Proc(Void).new{ self.hide_popup() } {% else %} nil {% end %}),
      bg_QComboBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QComboBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QComboBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|e| self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|e| self.show_event(ShowEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|e| self.hide_event(HideEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QComboBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QComboBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|e| self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QComboBox_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QComboBox_JUMPTABLE_BgJumptable_QComboBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QComboBox_staticMetaObject_STATIC_GETTER_()
    end
    
    enum InsertPolicy : UInt32
      NoInsert = 0
      InsertAtTop = 1
      InsertAtCurrent = 2
      InsertAtBottom = 3
      InsertAfterCurrent = 4
      InsertBeforeCurrent = 5
      InsertAlphabetically = 6
    end
    enum SizeAdjustPolicy : UInt32
      AdjustToContents = 0
      AdjustToContentsOnFirstShow = 1
      AdjustToMinimumContentsLength = 2
      AdjustToMinimumContentsLengthWithIcon = 3
    end
    def on_edit_text_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_editTextChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_activated(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_activated_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_text_activated(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_textActivated_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_highlighted(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_highlighted_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_text_highlighted(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_textHighlighted_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_current_index_changed(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_currentIndexChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_current_index_changed(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_currentIndexChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_current_text_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_currentTextChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_activated(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_activated_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_highlighted(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QComboBox_CONNECT_highlighted_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QComboBox*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ComboBox)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QComboBox_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QComboBox_minimumSizeHint_SUPER_(@myself)
      end
      
      def show_popup() : Void
        Binding.bg_QComboBox_showPopup_SUPER_(@myself)
      end
      
      def hide_popup() : Void
        Binding.bg_QComboBox_hidePopup_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QComboBox_event_SUPER_QEvent_X(@myself, event)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QComboBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_in_event(e : FocusEvent) : Void
        Binding.bg_QComboBox_focusInEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def focus_out_event(e : FocusEvent) : Void
        Binding.bg_QComboBox_focusOutEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QComboBox_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def resize_event(e : ResizeEvent) : Void
        Binding.bg_QComboBox_resizeEvent_SUPER_QResizeEvent_X(@myself, e)
      end
      
      protected def paint_event(e : PaintEvent) : Void
        Binding.bg_QComboBox_paintEvent_SUPER_QPaintEvent_X(@myself, e)
      end
      
      protected def show_event(e : ShowEvent) : Void
        Binding.bg_QComboBox_showEvent_SUPER_QShowEvent_X(@myself, e)
      end
      
      protected def hide_event(e : HideEvent) : Void
        Binding.bg_QComboBox_hideEvent_SUPER_QHideEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(e : MouseEvent) : Void
        Binding.bg_QComboBox_mousePressEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_release_event(e : MouseEvent) : Void
        Binding.bg_QComboBox_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def key_press_event(e : KeyEvent) : Void
        Binding.bg_QComboBox_keyPressEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QComboBox_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def wheel_event(e : Binding::QWheelEvent*) : Void
        Binding.bg_QComboBox_wheelEvent_SUPER_QWheelEvent_X(@myself, e)
      end
      
      protected def context_menu_event(e : Binding::QContextMenuEvent*) : Void
        Binding.bg_QComboBox_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, e)
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QComboBox_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class PushButton < AbstractButton
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QPushButton_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QPushButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QPushButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QPushButton__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPushButton_JUMPTABLE_BgJumptable_QPushButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Widget? = nil)
      result = Binding.bg_QPushButton__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPushButton_JUMPTABLE_BgJumptable_QPushButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(icon : Icon, text : String, parent : Widget? = nil)
      result = Binding.bg_QPushButton__CONSTRUCT_const_QIcon_R_const_QString_R_QWidget_X(icon, Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPushButton_JUMPTABLE_BgJumptable_QPushButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QPushButton_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QPushButton_minimumSizeHint_(self)
    end
    
    def auto_default() : Bool
      Binding.bg_QPushButton_autoDefault_(self)
    end
    
    def auto_default=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setAutoDefault_bool(self, unnamed_arg_0)
    end
    
    def default?() : Bool
      Binding.bg_QPushButton_isDefault_(self)
    end
    
    def default=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setDefault_bool(self, unnamed_arg_0)
    end
    
    def menu=(menu : Menu) : Void
      Binding.bg_QPushButton_setMenu_QMenu_X(self, menu)
    end
    
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QPushButton_menu_(self))
    end
    
    def flat=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QPushButton_setFlat_bool(self, unnamed_arg_0)
    end
    
    def flat?() : Bool
      Binding.bg_QPushButton_isFlat_(self)
    end
    
    def show_menu() : Void
      Binding.bg_QPushButton_showMenu_(self)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QPushButton_event_QEvent_X(self, e)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QPushButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QPushButton_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QPushButton_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QPushButton_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionButton*) : Void
      Binding.bg_QPushButton_initStyleOption_QStyleOptionButton_X(self, option)
    end
    
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QPushButton_hitButton_const_QPoint_R(self, pos)
    end
    
    protected def initialize(dd : Binding::QPushButtonPrivate*, parent : Widget? = nil)
      result = Binding.bg_QPushButton__CONSTRUCT_QPushButtonPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(PushButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event paint_event key_press_event focus_in_event focus_out_event hit_button check_state_set next_check_state key_release_event mouse_press_event mouse_release_event mouse_move_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QPushButton.new(
      bg_QPushButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QPushButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QPushButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QPushButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QPushButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QPushButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QPushButton_JUMPTABLE_BgJumptable_QPushButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def check_state_set() : Void
      Binding.bg_QAbstractButton_checkStateSet_(self)
    end
    
    protected def next_check_state() : Void
      Binding.bg_QAbstractButton_nextCheckState_(self)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_move_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractButton_changeEvent_QEvent_X(self, e)
    end
    
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QAbstractButton_timerEvent_QTimerEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QPushButton_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QPushButton*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : PushButton)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QPushButton_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QPushButton_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QPushButton_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QPushButton_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QPushButton_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QPushButton_focusInEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QPushButton_focusOutEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def hit_button(pos : Point) : Bool
        Binding.bg_QPushButton_hitButton_SUPER_const_QPoint_R(@myself, pos)
      end
      
      protected def check_state_set() : Void
        Binding.bg_QAbstractButton_checkStateSet_SUPER_(@myself)
      end
      
      protected def next_check_state() : Void
        Binding.bg_QAbstractButton_nextCheckState_SUPER_(@myself)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_release_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_move_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractButton_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def timer_event(e : TimerEvent) : Void
        Binding.bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Completer < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QCompleter_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QCompleter_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QCompleter_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCompleter_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCompleter_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCompleter_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QCompleter__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Completer)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall path_from_index split_path event_filter event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCompleter.new(
      bg_QCompleter_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCompleter_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCompleter_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCompleter_pathFromIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("path_from_index") %} Proc(Binding::QModelIndex*, Binding::CrystalString).new{|index| Qt::Converter::QString.wrap(self.path_from_index(ModelIndex.new(unwrap: index))) } {% else %} nil {% end %}),
      bg_QCompleter_splitPath_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("split_path") %} Proc(Binding::CrystalString, Binding::QStringList*).new{|path| self.split_path(Qt::Converter::QString.unwrap(path)) } {% else %} nil {% end %}),
      bg_QCompleter_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|o, e| self.event_filter(Object.new(unwrap: o), Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCompleter_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCompleter_JUMPTABLE_BgJumptable_QCompleter_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(model : AbstractItemModel, parent : Object? = nil)
      result = Binding.bg_QCompleter__CONSTRUCT_QAbstractItemModel_X_QObject_X(model, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Completer)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall path_from_index split_path event_filter event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCompleter.new(
      bg_QCompleter_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCompleter_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCompleter_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCompleter_pathFromIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("path_from_index") %} Proc(Binding::QModelIndex*, Binding::CrystalString).new{|index| Qt::Converter::QString.wrap(self.path_from_index(ModelIndex.new(unwrap: index))) } {% else %} nil {% end %}),
      bg_QCompleter_splitPath_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("split_path") %} Proc(Binding::CrystalString, Binding::QStringList*).new{|path| self.split_path(Qt::Converter::QString.unwrap(path)) } {% else %} nil {% end %}),
      bg_QCompleter_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|o, e| self.event_filter(Object.new(unwrap: o), Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCompleter_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCompleter_JUMPTABLE_BgJumptable_QCompleter_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(completions : Binding::QStringList*, parent : Object? = nil)
      result = Binding.bg_QCompleter__CONSTRUCT_const_QStringList_R_QObject_X(completions, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Completer)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall path_from_index split_path event_filter event timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QCompleter.new(
      bg_QCompleter_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QCompleter_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QCompleter_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QCompleter_pathFromIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("path_from_index") %} Proc(Binding::QModelIndex*, Binding::CrystalString).new{|index| Qt::Converter::QString.wrap(self.path_from_index(ModelIndex.new(unwrap: index))) } {% else %} nil {% end %}),
      bg_QCompleter_splitPath_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("split_path") %} Proc(Binding::CrystalString, Binding::QStringList*).new{|path| self.split_path(Qt::Converter::QString.unwrap(path)) } {% else %} nil {% end %}),
      bg_QCompleter_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|o, e| self.event_filter(Object.new(unwrap: o), Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QCompleter_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QCompleter_JUMPTABLE_BgJumptable_QCompleter_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def widget=(widget : Widget) : Void
      Binding.bg_QCompleter_setWidget_QWidget_X(self, widget)
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QCompleter_widget_(self))
    end
    
    def model=(c : AbstractItemModel) : Void
      Binding.bg_QCompleter_setModel_QAbstractItemModel_X(self, c)
    end
    
    def model() : AbstractItemModel
      AbstractItemModelImpl.new(unwrap: Binding.bg_QCompleter_model_(self))
    end
    
    def completion_mode=(mode : Completer::CompletionMode) : Void
      Binding.bg_QCompleter_setCompletionMode_QCompleter__CompletionMode(self, mode)
    end
    
    def completion_mode() : Completer::CompletionMode
      Binding.bg_QCompleter_completionMode_(self)
    end
    
    def filter_mode=(filter_mode : MatchFlags) : Void
      Binding.bg_QCompleter_setFilterMode_Qt__MatchFlags(self, filter_mode)
    end
    
    def filter_mode() : MatchFlags
      Binding.bg_QCompleter_filterMode_(self)
    end
    
    def popup() : AbstractItemView
      AbstractItemViewImpl.new(unwrap: Binding.bg_QCompleter_popup_(self))
    end
    
    def popup=(popup : AbstractItemView) : Void
      Binding.bg_QCompleter_setPopup_QAbstractItemView_X(self, popup)
    end
    
    def case_sensitivity=(case_sensitivity : CaseSensitivity) : Void
      Binding.bg_QCompleter_setCaseSensitivity_Qt__CaseSensitivity(self, case_sensitivity)
    end
    
    def case_sensitivity() : CaseSensitivity
      Binding.bg_QCompleter_caseSensitivity_(self)
    end
    
    def model_sorting=(sorting : Completer::ModelSorting) : Void
      Binding.bg_QCompleter_setModelSorting_QCompleter__ModelSorting(self, sorting)
    end
    
    def model_sorting() : Completer::ModelSorting
      Binding.bg_QCompleter_modelSorting_(self)
    end
    
    def completion_column=(column : Int32) : Void
      Binding.bg_QCompleter_setCompletionColumn_int(self, column)
    end
    
    def completion_column() : Int32
      Binding.bg_QCompleter_completionColumn_(self)
    end
    
    def completion_role=(role : Int32) : Void
      Binding.bg_QCompleter_setCompletionRole_int(self, role)
    end
    
    def completion_role() : Int32
      Binding.bg_QCompleter_completionRole_(self)
    end
    
    def wrap_around() : Bool
      Binding.bg_QCompleter_wrapAround_(self)
    end
    
    def max_visible_items() : Int32
      Binding.bg_QCompleter_maxVisibleItems_(self)
    end
    
    def max_visible_items=(max_items : Int32) : Void
      Binding.bg_QCompleter_setMaxVisibleItems_int(self, max_items)
    end
    
    def completion_count() : Int32
      Binding.bg_QCompleter_completionCount_(self)
    end
    
    def set_current_row(row : Int32) : Bool
      Binding.bg_QCompleter_setCurrentRow_int(self, row)
    end
    
    def current_row() : Int32
      Binding.bg_QCompleter_currentRow_(self)
    end
    
    def current_index() : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QCompleter_currentIndex_(self))
    end
    
    def current_completion() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCompleter_currentCompletion_(self))
    end
    
    def completion_model() : AbstractItemModel
      AbstractItemModelImpl.new(unwrap: Binding.bg_QCompleter_completionModel_(self))
    end
    
    def completion_prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QCompleter_completionPrefix_(self))
    end
    
    def completion_prefix=(prefix : String) : Void
      Binding.bg_QCompleter_setCompletionPrefix_const_QString_R(self, Qt::Converter::QString.wrap(prefix))
    end
    
    def complete() : Void
      Binding.bg_QCompleter_complete_(self)
    end
    
    def complete(rect : Rect) : Void
      Binding.bg_QCompleter_complete_const_QRect_R(self, rect)
    end
    
    def wrap_around=(wrap : Bool) : Void
      Binding.bg_QCompleter_setWrapAround_bool(self, wrap)
    end
    
    def path_from_index(index : ModelIndex) : String
      Qt::Converter::QString.unwrap(Binding.bg_QCompleter_pathFromIndex_const_QModelIndex_R(self, index))
    end
    
    def split_path(path : String) : Binding::QStringList*
      Binding.bg_QCompleter_splitPath_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    
    protected def event_filter(o : Object, e : Event) : Bool
      Binding.bg_QCompleter_eventFilter_QObject_X_QEvent_X(self, o, e)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QCompleter_event_QEvent_X(self, unnamed_arg_0)
    end
    
    def activated(text : String) : Void
      Binding.bg_QCompleter_activated_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def activated(index : ModelIndex) : Void
      Binding.bg_QCompleter_activated_const_QModelIndex_R(self, index)
    end
    
    def highlighted(text : String) : Void
      Binding.bg_QCompleter_highlighted_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def highlighted(index : ModelIndex) : Void
      Binding.bg_QCompleter_highlighted_const_QModelIndex_R(self, index)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QCompleter_staticMetaObject_STATIC_GETTER_()
    end
    
    enum CompletionMode : UInt32
      PopupCompletion = 0
      UnfilteredPopupCompletion = 1
      InlineCompletion = 2
    end
    enum ModelSorting : UInt32
      UnsortedModel = 0
      CaseSensitivelySortedModel = 1
      CaseInsensitivelySortedModel = 2
    end
    def on_activated(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCompleter_CONNECT_activated_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_activated(_type1_ : ModelIndex.class, &_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCompleter_CONNECT_activated_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_highlighted(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCompleter_CONNECT_highlighted_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_highlighted(_type1_ : ModelIndex.class, &_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QCompleter_CONNECT_highlighted_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QCompleter*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Completer)
      end
      def path_from_index(index : ModelIndex) : String
        Qt::Converter::QString.unwrap(Binding.bg_QCompleter_pathFromIndex_SUPER_const_QModelIndex_R(@myself, index))
      end
      
      def split_path(path : String) : Binding::QStringList*
        Binding.bg_QCompleter_splitPath_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(path))
      end
      
      protected def event_filter(o : Object, e : Event) : Bool
        Binding.bg_QCompleter_eventFilter_SUPER_QObject_X_QEvent_X(@myself, o, e)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QCompleter_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class DateTimeEdit < AbstractSpinBox
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDateTimeEdit_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDateTimeEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QDateTimeEdit__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DateTimeEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint clear step_by event key_press_event wheel_event focus_in_event focus_next_prev_child date_time_from_text text_from_date_time step_enabled mouse_press_event paint_event minimum_size_hint input_method_query resize_event key_release_event focus_out_event context_menu_event change_event close_event hide_event mouse_release_event mouse_move_event timer_event show_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDateTimeEdit.new(
      bg_QDateTimeEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("date_time_from_text") %} Proc(Binding::CrystalString, Binding::QDateTime*).new{|text| self.date_time_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_date_time") %} Proc(Binding::QDateTime*, Binding::CrystalString).new{|dt| Qt::Converter::QString.wrap(self.text_from_date_time(dt)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(dt : Binding::QDateTime*, parent : Widget? = nil)
      result = Binding.bg_QDateTimeEdit__CONSTRUCT_const_QDateTime_R_QWidget_X(dt, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DateTimeEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint clear step_by event key_press_event wheel_event focus_in_event focus_next_prev_child date_time_from_text text_from_date_time step_enabled mouse_press_event paint_event minimum_size_hint input_method_query resize_event key_release_event focus_out_event context_menu_event change_event close_event hide_event mouse_release_event mouse_move_event timer_event show_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDateTimeEdit.new(
      bg_QDateTimeEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("date_time_from_text") %} Proc(Binding::CrystalString, Binding::QDateTime*).new{|text| self.date_time_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_date_time") %} Proc(Binding::QDateTime*, Binding::CrystalString).new{|dt| Qt::Converter::QString.wrap(self.text_from_date_time(dt)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(d : Binding::QDate*, parent : Widget? = nil)
      result = Binding.bg_QDateTimeEdit__CONSTRUCT_const_QDate_R_QWidget_X(d, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DateTimeEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint clear step_by event key_press_event wheel_event focus_in_event focus_next_prev_child date_time_from_text text_from_date_time step_enabled mouse_press_event paint_event minimum_size_hint input_method_query resize_event key_release_event focus_out_event context_menu_event change_event close_event hide_event mouse_release_event mouse_move_event timer_event show_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDateTimeEdit.new(
      bg_QDateTimeEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("date_time_from_text") %} Proc(Binding::CrystalString, Binding::QDateTime*).new{|text| self.date_time_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_date_time") %} Proc(Binding::QDateTime*, Binding::CrystalString).new{|dt| Qt::Converter::QString.wrap(self.text_from_date_time(dt)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(t : Binding::QTime*, parent : Widget? = nil)
      result = Binding.bg_QDateTimeEdit__CONSTRUCT_const_QTime_R_QWidget_X(t, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DateTimeEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint clear step_by event key_press_event wheel_event focus_in_event focus_next_prev_child date_time_from_text text_from_date_time step_enabled mouse_press_event paint_event minimum_size_hint input_method_query resize_event key_release_event focus_out_event context_menu_event change_event close_event hide_event mouse_release_event mouse_move_event timer_event show_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDateTimeEdit.new(
      bg_QDateTimeEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("date_time_from_text") %} Proc(Binding::CrystalString, Binding::QDateTime*).new{|text| self.date_time_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_date_time") %} Proc(Binding::QDateTime*, Binding::CrystalString).new{|dt| Qt::Converter::QString.wrap(self.text_from_date_time(dt)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def date_time() : Binding::QDateTime*
      Binding.bg_QDateTimeEdit_dateTime_(self)
    end
    
    def date() : Binding::QDate*
      Binding.bg_QDateTimeEdit_date_(self)
    end
    
    def time() : Binding::QTime*
      Binding.bg_QDateTimeEdit_time_(self)
    end
    
    def calendar() : Binding::QCalendar*
      Binding.bg_QDateTimeEdit_calendar_(self)
    end
    
    def calendar=(calendar : Binding::QCalendar*) : Void
      Binding.bg_QDateTimeEdit_setCalendar_QCalendar(self, calendar)
    end
    
    def minimum_date_time() : Binding::QDateTime*
      Binding.bg_QDateTimeEdit_minimumDateTime_(self)
    end
    
    def clear_minimum_date_time() : Void
      Binding.bg_QDateTimeEdit_clearMinimumDateTime_(self)
    end
    
    def minimum_date_time=(dt : Binding::QDateTime*) : Void
      Binding.bg_QDateTimeEdit_setMinimumDateTime_const_QDateTime_R(self, dt)
    end
    
    def maximum_date_time() : Binding::QDateTime*
      Binding.bg_QDateTimeEdit_maximumDateTime_(self)
    end
    
    def clear_maximum_date_time() : Void
      Binding.bg_QDateTimeEdit_clearMaximumDateTime_(self)
    end
    
    def maximum_date_time=(dt : Binding::QDateTime*) : Void
      Binding.bg_QDateTimeEdit_setMaximumDateTime_const_QDateTime_R(self, dt)
    end
    
    def set_date_time_range(min : Binding::QDateTime*, max : Binding::QDateTime*) : Void
      Binding.bg_QDateTimeEdit_setDateTimeRange_const_QDateTime_R_const_QDateTime_R(self, min, max)
    end
    
    def minimum_date() : Binding::QDate*
      Binding.bg_QDateTimeEdit_minimumDate_(self)
    end
    
    def minimum_date=(min : Binding::QDate*) : Void
      Binding.bg_QDateTimeEdit_setMinimumDate_const_QDate_R(self, min)
    end
    
    def clear_minimum_date() : Void
      Binding.bg_QDateTimeEdit_clearMinimumDate_(self)
    end
    
    def maximum_date() : Binding::QDate*
      Binding.bg_QDateTimeEdit_maximumDate_(self)
    end
    
    def maximum_date=(max : Binding::QDate*) : Void
      Binding.bg_QDateTimeEdit_setMaximumDate_const_QDate_R(self, max)
    end
    
    def clear_maximum_date() : Void
      Binding.bg_QDateTimeEdit_clearMaximumDate_(self)
    end
    
    def set_date_range(min : Binding::QDate*, max : Binding::QDate*) : Void
      Binding.bg_QDateTimeEdit_setDateRange_const_QDate_R_const_QDate_R(self, min, max)
    end
    
    def minimum_time() : Binding::QTime*
      Binding.bg_QDateTimeEdit_minimumTime_(self)
    end
    
    def minimum_time=(min : Binding::QTime*) : Void
      Binding.bg_QDateTimeEdit_setMinimumTime_const_QTime_R(self, min)
    end
    
    def clear_minimum_time() : Void
      Binding.bg_QDateTimeEdit_clearMinimumTime_(self)
    end
    
    def maximum_time() : Binding::QTime*
      Binding.bg_QDateTimeEdit_maximumTime_(self)
    end
    
    def maximum_time=(max : Binding::QTime*) : Void
      Binding.bg_QDateTimeEdit_setMaximumTime_const_QTime_R(self, max)
    end
    
    def clear_maximum_time() : Void
      Binding.bg_QDateTimeEdit_clearMaximumTime_(self)
    end
    
    def set_time_range(min : Binding::QTime*, max : Binding::QTime*) : Void
      Binding.bg_QDateTimeEdit_setTimeRange_const_QTime_R_const_QTime_R(self, min, max)
    end
    
    def displayed_sections() : DateTimeEdit::Sections
      Binding.bg_QDateTimeEdit_displayedSections_(self)
    end
    
    def current_section() : DateTimeEdit::Section
      Binding.bg_QDateTimeEdit_currentSection_(self)
    end
    
    def section_at(index : Int32) : DateTimeEdit::Section
      Binding.bg_QDateTimeEdit_sectionAt_int(self, index)
    end
    
    def current_section=(section : DateTimeEdit::Section) : Void
      Binding.bg_QDateTimeEdit_setCurrentSection_QDateTimeEdit__Section(self, section)
    end
    
    def current_section_index() : Int32
      Binding.bg_QDateTimeEdit_currentSectionIndex_(self)
    end
    
    def current_section_index=(index : Int32) : Void
      Binding.bg_QDateTimeEdit_setCurrentSectionIndex_int(self, index)
    end
    
    def calendar_widget() : Binding::QCalendarWidget*
      Binding.bg_QDateTimeEdit_calendarWidget_(self)
    end
    
    def calendar_widget=(calendar_widget : Binding::QCalendarWidget*) : Void
      Binding.bg_QDateTimeEdit_setCalendarWidget_QCalendarWidget_X(self, calendar_widget)
    end
    
    def section_count() : Int32
      Binding.bg_QDateTimeEdit_sectionCount_(self)
    end
    
    def selected_section=(section : DateTimeEdit::Section) : Void
      Binding.bg_QDateTimeEdit_setSelectedSection_QDateTimeEdit__Section(self, section)
    end
    
    def section_text(section : DateTimeEdit::Section) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_sectionText_QDateTimeEdit__Section(self, section))
    end
    
    def display_format() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_displayFormat_(self))
    end
    
    def display_format=(format : String) : Void
      Binding.bg_QDateTimeEdit_setDisplayFormat_const_QString_R(self, Qt::Converter::QString.wrap(format))
    end
    
    def calendar_popup() : Bool
      Binding.bg_QDateTimeEdit_calendarPopup_(self)
    end
    
    def calendar_popup=(enable : Bool) : Void
      Binding.bg_QDateTimeEdit_setCalendarPopup_bool(self, enable)
    end
    
    def time_spec() : TimeSpec
      Binding.bg_QDateTimeEdit_timeSpec_(self)
    end
    
    def time_spec=(spec : TimeSpec) : Void
      Binding.bg_QDateTimeEdit_setTimeSpec_Qt__TimeSpec(self, spec)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QDateTimeEdit_sizeHint_(self)
    end
    
    def clear() : Void
      Binding.bg_QDateTimeEdit_clear_(self)
    end
    
    def step_by(steps : Int32) : Void
      Binding.bg_QDateTimeEdit_stepBy_int(self, steps)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QDateTimeEdit_event_QEvent_X(self, event)
    end
    
    def date_time_changed(date_time : Binding::QDateTime*) : Void
      Binding.bg_QDateTimeEdit_dateTimeChanged_const_QDateTime_R(self, date_time)
    end
    
    def time_changed(time : Binding::QTime*) : Void
      Binding.bg_QDateTimeEdit_timeChanged_const_QTime_R(self, time)
    end
    
    def date_changed(date : Binding::QDate*) : Void
      Binding.bg_QDateTimeEdit_dateChanged_const_QDate_R(self, date)
    end
    
    def date_time=(date_time : Binding::QDateTime*) : Void
      Binding.bg_QDateTimeEdit_setDateTime_const_QDateTime_R(self, date_time)
    end
    
    def date=(date : Binding::QDate*) : Void
      Binding.bg_QDateTimeEdit_setDate_const_QDate_R(self, date)
    end
    
    def time=(time : Binding::QTime*) : Void
      Binding.bg_QDateTimeEdit_setTime_const_QTime_R(self, time)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QDateTimeEdit_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QDateTimeEdit_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QDateTimeEdit_focusNextPrevChild_bool(self, next_)
    end
    
    protected def date_time_from_text(text : String) : Binding::QDateTime*
      Binding.bg_QDateTimeEdit_dateTimeFromText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    protected def text_from_date_time(dt : Binding::QDateTime*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R(self, dt))
    end
    
    protected def step_enabled() : AbstractSpinBox::StepEnabled
      Binding.bg_QDateTimeEdit_stepEnabled_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QDateTimeEdit_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionSpinBox*) : Void
      Binding.bg_QDateTimeEdit_initStyleOption_QStyleOptionSpinBox_X(self, option)
    end
    
    protected def initialize(val : Variant, parser_type : VariantType, parent : Widget? = nil)
      result = Binding.bg_QDateTimeEdit__CONSTRUCT_const_QVariant_R_QVariant__Type_QWidget_X((val.to_unsafe), parser_type, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DateTimeEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint clear step_by event key_press_event wheel_event focus_in_event focus_next_prev_child date_time_from_text text_from_date_time step_enabled mouse_press_event paint_event minimum_size_hint input_method_query resize_event key_release_event focus_out_event context_menu_event change_event close_event hide_event mouse_release_event mouse_move_event timer_event show_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDateTimeEdit.new(
      bg_QDateTimeEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("date_time_from_text") %} Proc(Binding::CrystalString, Binding::QDateTime*).new{|text| self.date_time_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_date_time") %} Proc(Binding::QDateTime*, Binding::CrystalString).new{|dt| Qt::Converter::QString.wrap(self.text_from_date_time(dt)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def initialize(val : Variant, parser_type : MetaType::Type, parent : Widget? = nil)
      result = Binding.bg_QDateTimeEdit__CONSTRUCT_const_QVariant_R_QMetaType__Type_QWidget_X((val.to_unsafe), parser_type, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DateTimeEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint clear step_by event key_press_event wheel_event focus_in_event focus_next_prev_child date_time_from_text text_from_date_time step_enabled mouse_press_event paint_event minimum_size_hint input_method_query resize_event key_release_event focus_out_event context_menu_event change_event close_event hide_event mouse_release_event mouse_move_event timer_event show_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDateTimeEdit.new(
      bg_QDateTimeEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_dateTimeFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("date_time_from_text") %} Proc(Binding::CrystalString, Binding::QDateTime*).new{|text| self.date_time_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_textFromDateTime_const_QDateTime_R: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_date_time") %} Proc(Binding::QDateTime*, Binding::CrystalString).new{|dt| Qt::Converter::QString.wrap(self.text_from_date_time(dt)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
      bg_QDateTimeEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDateTimeEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDateTimeEdit_JUMPTABLE_BgJumptable_QDateTimeEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_minimumSizeHint_(self)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QAbstractSpinBox_changeEvent_QEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QAbstractSpinBox_showEvent_QShowEvent_X(self, event)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDateTimeEdit_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Section : UInt32
      NoSection = 0
      AmPmSection = 1
      Msecsection = 2
      SecondSection = 4
      MinuteSection = 8
      HourSection = 16
      DaySection = 256
      MonthSection = 512
      YearSection = 1024
      TimeSections_Mask = 31
      DateSections_Mask = 1792
    end
    @[Flags]
    enum Sections : UInt32
      NoSection = 0
      AmPmSection = 1
      Msecsection = 2
      SecondSection = 4
      MinuteSection = 8
      HourSection = 16
      DaySection = 256
      MonthSection = 512
      YearSection = 1024
      TimeSections_Mask = 31
      DateSections_Mask = 1792
    end
    def on_date_time_changed(&_proc_ : Proc(Binding::QDateTime, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDateTimeEdit_CONNECT_dateTimeChanged_CrystalProc_void__const_QDateTime_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QDateTime*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_time_changed(&_proc_ : Proc(Binding::QTime, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDateTimeEdit_CONNECT_timeChanged_CrystalProc_void__const_QTime_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QTime*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_date_changed(&_proc_ : Proc(Binding::QDate, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDateTimeEdit_CONNECT_dateChanged_CrystalProc_void__const_QDate_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QDate*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QDateTimeEdit*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : DateTimeEdit)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QDateTimeEdit_sizeHint_SUPER_(@myself)
      end
      
      def clear() : Void
        Binding.bg_QDateTimeEdit_clear_SUPER_(@myself)
      end
      
      def step_by(steps : Int32) : Void
        Binding.bg_QDateTimeEdit_stepBy_SUPER_int(@myself, steps)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QDateTimeEdit_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QDateTimeEdit_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QDateTimeEdit_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QDateTimeEdit_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QDateTimeEdit_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def date_time_from_text(text : String) : Binding::QDateTime*
        Binding.bg_QDateTimeEdit_dateTimeFromText_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(text))
      end
      
      protected def text_from_date_time(dt : Binding::QDateTime*) : String
        Qt::Converter::QString.unwrap(Binding.bg_QDateTimeEdit_textFromDateTime_SUPER_const_QDateTime_R(@myself, dt))
      end
      
      protected def step_enabled() : AbstractSpinBox::StepEnabled
        Binding.bg_QDateTimeEdit_stepEnabled_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QDateTimeEdit_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QDateTimeEdit_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_minimumSizeHint_SUPER_(@myself)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class DesktopWidget < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDesktopWidget_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDesktopWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDesktopWidget_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDesktopWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize()
      result = Binding.bg_QDesktopWidget__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DesktopWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall resize_event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDesktopWidget.new(
      bg_QDesktopWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDesktopWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDesktopWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDesktopWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|e| self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDesktopWidget_JUMPTABLE_BgJumptable_QDesktopWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def resize_event(e : ResizeEvent) : Void
      Binding.bg_QDesktopWidget_resizeEvent_QResizeEvent_X(self, e)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QWidget_event_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDesktopWidget_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_resized(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_CONNECT_resized_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_work_area_resized(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_CONNECT_workAreaResized_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_screen_count_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_CONNECT_screenCountChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_primary_screen_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDesktopWidget_CONNECT_primaryScreenChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QDesktopWidget*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : DesktopWidget)
      end
      protected def resize_event(e : ResizeEvent) : Void
        Binding.bg_QDesktopWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, e)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QWidget_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QWidget_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Dial < AbstractSlider
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDial_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDial_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDial_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDial_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDial_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QDial__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Dial)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event resize_event paint_event mouse_press_event mouse_release_event mouse_move_event slider_change key_press_event timer_event wheel_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDial.new(
      bg_QDial_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDial_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDial_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDial_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDial_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDial_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDial_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|re| self.resize_event(ResizeEvent.new(unwrap: re)) } {% else %} nil {% end %}),
      bg_QDial_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|pe| self.paint_event(PaintEvent.new(unwrap: pe)) } {% else %} nil {% end %}),
      bg_QDial_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|me| self.mouse_press_event(MouseEvent.new(unwrap: me)) } {% else %} nil {% end %}),
      bg_QDial_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|me| self.mouse_release_event(MouseEvent.new(unwrap: me)) } {% else %} nil {% end %}),
      bg_QDial_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|me| self.mouse_move_event(MouseEvent.new(unwrap: me)) } {% else %} nil {% end %}),
      bg_QDial_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDial_JUMPTABLE_BgJumptable_QDial_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def wrapping() : Bool
      Binding.bg_QDial_wrapping_(self)
    end
    
    def notch_size() : Int32
      Binding.bg_QDial_notchSize_(self)
    end
    
    def notch_target=(target : Float64) : Void
      Binding.bg_QDial_setNotchTarget_double(self, target)
    end
    
    def notch_target() : Float64
      Binding.bg_QDial_notchTarget_(self)
    end
    
    def notches_visible() : Bool
      Binding.bg_QDial_notchesVisible_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QDial_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QDial_minimumSizeHint_(self)
    end
    
    def notches_visible=(visible : Bool) : Void
      Binding.bg_QDial_setNotchesVisible_bool(self, visible)
    end
    
    def wrapping=(on : Bool) : Void
      Binding.bg_QDial_setWrapping_bool(self, on)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QDial_event_QEvent_X(self, e)
    end
    
    protected def resize_event(re : ResizeEvent) : Void
      Binding.bg_QDial_resizeEvent_QResizeEvent_X(self, re)
    end
    
    protected def paint_event(pe : PaintEvent) : Void
      Binding.bg_QDial_paintEvent_QPaintEvent_X(self, pe)
    end
    
    protected def mouse_press_event(me : MouseEvent) : Void
      Binding.bg_QDial_mousePressEvent_QMouseEvent_X(self, me)
    end
    
    protected def mouse_release_event(me : MouseEvent) : Void
      Binding.bg_QDial_mouseReleaseEvent_QMouseEvent_X(self, me)
    end
    
    protected def mouse_move_event(me : MouseEvent) : Void
      Binding.bg_QDial_mouseMoveEvent_QMouseEvent_X(self, me)
    end
    
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QDial_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionSlider*) : Void
      Binding.bg_QDial_initStyleOption_QStyleOptionSlider_X(self, option)
    end
    
    protected def key_press_event(ev : KeyEvent) : Void
      Binding.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(self, ev)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QAbstractSlider_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(e : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractSlider_wheelEvent_QWheelEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractSlider_changeEvent_QEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDial_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QDial*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Dial)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QDial_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QDial_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QDial_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def resize_event(re : ResizeEvent) : Void
        Binding.bg_QDial_resizeEvent_SUPER_QResizeEvent_X(@myself, re)
      end
      
      protected def paint_event(pe : PaintEvent) : Void
        Binding.bg_QDial_paintEvent_SUPER_QPaintEvent_X(@myself, pe)
      end
      
      protected def mouse_press_event(me : MouseEvent) : Void
        Binding.bg_QDial_mousePressEvent_SUPER_QMouseEvent_X(@myself, me)
      end
      
      protected def mouse_release_event(me : MouseEvent) : Void
        Binding.bg_QDial_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, me)
      end
      
      protected def mouse_move_event(me : MouseEvent) : Void
        Binding.bg_QDial_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, me)
      end
      
      protected def slider_change(change : AbstractSlider::SliderChange) : Void
        Binding.bg_QDial_sliderChange_SUPER_QAbstractSlider__SliderChange(@myself, change)
      end
      
      protected def key_press_event(ev : KeyEvent) : Void
        Binding.bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(@myself, ev)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(e : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractSlider_wheelEvent_SUPER_QWheelEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class DockWidget < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDockWidget_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDockWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDockWidget_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDockWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDockWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(title : String, parent : Widget? = nil)
      result = Binding.bg_QDockWidget__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDockWidget_JUMPTABLE_BgJumptable_QDockWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(title : String, parent : Widget?, flags : WindowFlags)
      result = Binding.bg_QDockWidget__CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(Qt::Converter::QString.wrap(title), parent, flags)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDockWidget_JUMPTABLE_BgJumptable_QDockWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QDockWidget__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDockWidget_JUMPTABLE_BgJumptable_QDockWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, flags : WindowFlags)
      result = Binding.bg_QDockWidget__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, flags)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DockWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall change_event close_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDockWidget.new(
      bg_QDockWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDockWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDockWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QDockWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDockWidget_JUMPTABLE_BgJumptable_QDockWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QDockWidget_widget_(self))
    end
    
    def widget=(widget : Widget) : Void
      Binding.bg_QDockWidget_setWidget_QWidget_X(self, widget)
    end
    
    def features=(features : DockWidget::Features) : Void
      Binding.bg_QDockWidget_setFeatures_QDockWidget__DockWidgetFeatures(self, features)
    end
    
    def features() : DockWidget::Features
      Binding.bg_QDockWidget_features_(self)
    end
    
    def floating=(floating : Bool) : Void
      Binding.bg_QDockWidget_setFloating_bool(self, floating)
    end
    
    def floating?() : Bool
      Binding.bg_QDockWidget_isFloating_(self)
    end
    
    def allowed_areas=(areas : DockWidgetAreas) : Void
      Binding.bg_QDockWidget_setAllowedAreas_Qt__DockWidgetAreas(self, areas)
    end
    
    def allowed_areas() : DockWidgetAreas
      Binding.bg_QDockWidget_allowedAreas_(self)
    end
    
    def title_bar_widget=(widget : Widget) : Void
      Binding.bg_QDockWidget_setTitleBarWidget_QWidget_X(self, widget)
    end
    
    def title_bar_widget() : Widget
      Widget.new(unwrap: Binding.bg_QDockWidget_titleBarWidget_(self))
    end
    
    def is_area_allowed(area : DockWidgetArea) : Bool
      Binding.bg_QDockWidget_isAreaAllowed_Qt__DockWidgetArea(self, area)
    end
    
    def toggle_view_action() : Action
      Action.new(unwrap: Binding.bg_QDockWidget_toggleViewAction_(self))
    end
    
    def features_changed(features : DockWidget::Features) : Void
      Binding.bg_QDockWidget_featuresChanged_QDockWidget__DockWidgetFeatures(self, features)
    end
    
    def top_level_changed(top_level : Bool) : Void
      Binding.bg_QDockWidget_topLevelChanged_bool(self, top_level)
    end
    
    def allowed_areas_changed(allowed_areas : DockWidgetAreas) : Void
      Binding.bg_QDockWidget_allowedAreasChanged_Qt__DockWidgetAreas(self, allowed_areas)
    end
    
    def visibility_changed(visible : Bool) : Void
      Binding.bg_QDockWidget_visibilityChanged_bool(self, visible)
    end
    
    def dock_location_changed(area : DockWidgetArea) : Void
      Binding.bg_QDockWidget_dockLocationChanged_Qt__DockWidgetArea(self, area)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QDockWidget_changeEvent_QEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QDockWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QDockWidget_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QDockWidget_event_QEvent_X(self, event)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionDockWidget*) : Void
      Binding.bg_QDockWidget_initStyleOption_QStyleOptionDockWidget_X(self, option)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDockWidget_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Feature : UInt32
      DockWidgetClosable = 1
      DockWidgetMovable = 2
      DockWidgetFloatable = 4
      DockWidgetVerticalTitleBar = 8
      DockWidgetFeatureMask = 15
      AllDockWidgetFeatures = 7
      NoDockWidgetFeatures = 0
      Reserved = 255
    end
    @[Flags]
    enum Features : UInt32
      DockWidgetClosable = 1
      DockWidgetMovable = 2
      DockWidgetFloatable = 4
      DockWidgetVerticalTitleBar = 8
      DockWidgetFeatureMask = 15
      AllDockWidgetFeatures = 7
      NoDockWidgetFeatures = 0
      Reserved = 255
    end
    def on_features_changed(&_proc_ : Proc(DockWidget::Features, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_CONNECT_featuresChanged_CrystalProc_void__QDockWidget__DockWidgetFeatures_(self, BindgenHelper.wrap_proc(Proc(DockWidget::Features, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_top_level_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_CONNECT_topLevelChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_allowed_areas_changed(&_proc_ : Proc(DockWidgetAreas, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_CONNECT_allowedAreasChanged_CrystalProc_void__Qt__DockWidgetAreas_(self, BindgenHelper.wrap_proc(Proc(DockWidgetAreas, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_visibility_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_CONNECT_visibilityChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_dock_location_changed(&_proc_ : Proc(DockWidgetArea, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDockWidget_CONNECT_dockLocationChanged_CrystalProc_void__Qt__DockWidgetArea_(self, BindgenHelper.wrap_proc(Proc(DockWidgetArea, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QDockWidget*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : DockWidget)
      end
      protected def change_event(event : Event) : Void
        Binding.bg_QDockWidget_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QDockWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QDockWidget_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QDockWidget_event_SUPER_QEvent_X(@myself, event)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class FileDialog < Dialog
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QFileDialog_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFileDialog_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget, f : WindowFlags)
      result = Binding.bg_QFileDialog__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|result| self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QFileDialog__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|result| self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, caption : String)
      result = Binding.bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption))
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|result| self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, caption : String, directory : String)
      result = Binding.bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(directory))
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|result| self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, caption : String, directory : String, filter : String)
      result = Binding.bg_QFileDialog__CONSTRUCT_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(directory), Qt::Converter::QString.wrap(filter))
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|result| self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def directory=(directory : String) : Void
      Binding.bg_QFileDialog_setDirectory_const_QString_R(self, Qt::Converter::QString.wrap(directory))
    end
    
    def directory=(directory : Dir) : Void
      Binding.bg_QFileDialog_setDirectory_const_QDir_R(self, directory)
    end
    
    def directory() : Dir
      Dir.new(unwrap: Binding.bg_QFileDialog_directory_(self))
    end
    
    def directory_url=(directory : Url) : Void
      Binding.bg_QFileDialog_setDirectoryUrl_const_QUrl_R(self, directory)
    end
    
    def directory_url() : Url
      Url.new(unwrap: Binding.bg_QFileDialog_directoryUrl_(self))
    end
    
    def select_file(filename : String) : Void
      Binding.bg_QFileDialog_selectFile_const_QString_R(self, Qt::Converter::QString.wrap(filename))
    end
    
    def selected_files() : Binding::QStringList*
      Binding.bg_QFileDialog_selectedFiles_(self)
    end
    
    def select_url(url : Url) : Void
      Binding.bg_QFileDialog_selectUrl_const_QUrl_R(self, url)
    end
    
    def selected_urls() : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QFileDialog_selectedUrls_(self))
    end
    
    def name_filter=(filter : String) : Void
      Binding.bg_QFileDialog_setNameFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    
    def name_filters=(filters : Binding::QStringList*) : Void
      Binding.bg_QFileDialog_setNameFilters_const_QStringList_R(self, filters)
    end
    
    def name_filters() : Binding::QStringList*
      Binding.bg_QFileDialog_nameFilters_(self)
    end
    
    def select_name_filter(filter : String) : Void
      Binding.bg_QFileDialog_selectNameFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    
    def selected_mime_type_filter() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_selectedMimeTypeFilter_(self))
    end
    
    def selected_name_filter() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_selectedNameFilter_(self))
    end
    
    def mime_type_filters=(filters : Binding::QStringList*) : Void
      Binding.bg_QFileDialog_setMimeTypeFilters_const_QStringList_R(self, filters)
    end
    
    def mime_type_filters() : Binding::QStringList*
      Binding.bg_QFileDialog_mimeTypeFilters_(self)
    end
    
    def select_mime_type_filter(filter : String) : Void
      Binding.bg_QFileDialog_selectMimeTypeFilter_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    
    def filter() : Dir::Filters
      Binding.bg_QFileDialog_filter_(self)
    end
    
    def filter=(filters : Dir::Filters) : Void
      Binding.bg_QFileDialog_setFilter_QDir__Filters(self, filters)
    end
    
    def view_mode=(mode : FileDialog::ViewMode) : Void
      Binding.bg_QFileDialog_setViewMode_QFileDialog__ViewMode(self, mode)
    end
    
    def view_mode() : FileDialog::ViewMode
      Binding.bg_QFileDialog_viewMode_(self)
    end
    
    def file_mode=(mode : FileDialog::FileMode) : Void
      Binding.bg_QFileDialog_setFileMode_QFileDialog__FileMode(self, mode)
    end
    
    def file_mode() : FileDialog::FileMode
      Binding.bg_QFileDialog_fileMode_(self)
    end
    
    def accept_mode=(mode : FileDialog::AcceptMode) : Void
      Binding.bg_QFileDialog_setAcceptMode_QFileDialog__AcceptMode(self, mode)
    end
    
    def accept_mode() : FileDialog::AcceptMode
      Binding.bg_QFileDialog_acceptMode_(self)
    end
    
    def read_only=(enabled : Bool) : Void
      Binding.bg_QFileDialog_setReadOnly_bool(self, enabled)
    end
    
    def read_only?() : Bool
      Binding.bg_QFileDialog_isReadOnly_(self)
    end
    
    def sidebar_urls=(urls : Enumerable(Url)) : Void
      Binding.bg_QFileDialog_setSidebarUrls_const_QList_QUrl__R(self, BindgenHelper.wrap_container(Container_QList_QUrl_, urls).to_unsafe)
    end
    
    def sidebar_urls() : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QFileDialog_sidebarUrls_(self))
    end
    
    def save_state() : Binding::QByteArray*
      Binding.bg_QFileDialog_saveState_(self)
    end
    
    def restore_state(state : Binding::QByteArray*) : Bool
      Binding.bg_QFileDialog_restoreState_const_QByteArray_R(self, state)
    end
    
    def default_suffix=(suffix : String) : Void
      Binding.bg_QFileDialog_setDefaultSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    
    def default_suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_defaultSuffix_(self))
    end
    
    def history=(paths : Binding::QStringList*) : Void
      Binding.bg_QFileDialog_setHistory_const_QStringList_R(self, paths)
    end
    
    def history() : Binding::QStringList*
      Binding.bg_QFileDialog_history_(self)
    end
    
    def item_delegate=(delegate : AbstractItemDelegate) : Void
      Binding.bg_QFileDialog_setItemDelegate_QAbstractItemDelegate_X(self, delegate)
    end
    
    def item_delegate() : AbstractItemDelegate
      AbstractItemDelegateImpl.new(unwrap: Binding.bg_QFileDialog_itemDelegate_(self))
    end
    
    def icon_provider=(provider : Binding::QFileIconProvider*) : Void
      Binding.bg_QFileDialog_setIconProvider_QFileIconProvider_X(self, provider)
    end
    
    def icon_provider() : Binding::QFileIconProvider*
      Binding.bg_QFileDialog_iconProvider_(self)
    end
    
    def set_label_text(label : FileDialog::DialogLabel, text : String) : Void
      Binding.bg_QFileDialog_setLabelText_QFileDialog__DialogLabel_const_QString_R(self, label, Qt::Converter::QString.wrap(text))
    end
    
    def label_text(label : FileDialog::DialogLabel) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_labelText_QFileDialog__DialogLabel(self, label))
    end
    
    def supported_schemes=(schemes : Binding::QStringList*) : Void
      Binding.bg_QFileDialog_setSupportedSchemes_const_QStringList_R(self, schemes)
    end
    
    def supported_schemes() : Binding::QStringList*
      Binding.bg_QFileDialog_supportedSchemes_(self)
    end
    
    def proxy_model=(model : Binding::QAbstractProxyModel*) : Void
      Binding.bg_QFileDialog_setProxyModel_QAbstractProxyModel_X(self, model)
    end
    
    def proxy_model() : Binding::QAbstractProxyModel*
      Binding.bg_QFileDialog_proxyModel_(self)
    end
    
    def set_option(option : FileDialog::Option, on : Bool = true) : Void
      Binding.bg_QFileDialog_setOption_QFileDialog__Option_bool(self, option, on)
    end
    
    def test_option(option : FileDialog::Option) : Bool
      Binding.bg_QFileDialog_testOption_QFileDialog__Option(self, option)
    end
    
    def options=(options : FileDialog::Options) : Void
      Binding.bg_QFileDialog_setOptions_QFileDialog__Options(self, options)
    end
    
    def options() : FileDialog::Options
      Binding.bg_QFileDialog_options_(self)
    end
    
    def open(receiver : Object, member : UInt8*) : Void
      Binding.bg_QFileDialog_open_QObject_X_const_char_X(self, receiver, member)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QFileDialog_setVisible_bool(self, visible)
    end
    
    def file_selected(file : String) : Void
      Binding.bg_QFileDialog_fileSelected_const_QString_R(self, Qt::Converter::QString.wrap(file))
    end
    
    def files_selected(files : Binding::QStringList*) : Void
      Binding.bg_QFileDialog_filesSelected_const_QStringList_R(self, files)
    end
    
    def current_changed(path : String) : Void
      Binding.bg_QFileDialog_currentChanged_const_QString_R(self, Qt::Converter::QString.wrap(path))
    end
    
    def directory_entered(directory : String) : Void
      Binding.bg_QFileDialog_directoryEntered_const_QString_R(self, Qt::Converter::QString.wrap(directory))
    end
    
    def url_selected(url : Url) : Void
      Binding.bg_QFileDialog_urlSelected_const_QUrl_R(self, url)
    end
    
    def urls_selected(urls : Enumerable(Url)) : Void
      Binding.bg_QFileDialog_urlsSelected_const_QList_QUrl__R(self, BindgenHelper.wrap_container(Container_QList_QUrl_, urls).to_unsafe)
    end
    
    def current_url_changed(url : Url) : Void
      Binding.bg_QFileDialog_currentUrlChanged_const_QUrl_R(self, url)
    end
    
    def directory_url_entered(directory : Url) : Void
      Binding.bg_QFileDialog_directoryUrlEntered_const_QUrl_R(self, directory)
    end
    
    def filter_selected(filter : String) : Void
      Binding.bg_QFileDialog_filterSelected_const_QString_R(self, Qt::Converter::QString.wrap(filter))
    end
    
    def self.get_open_file_name(parent : Widget? = nil) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X(parent))
    end
    
    def self.get_open_file_name(parent : Widget?, caption : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_open_file_name(parent : Widget?, caption : String, dir : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    
    def self.get_open_file_name(parent : Widget?, caption : String, dir : String, filter : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getOpenFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), Qt::Converter::QString.wrap(filter)))
    end
    
    def self.get_open_file_url(parent : Widget? = nil) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X(parent))
    end
    
    def self.get_open_file_url(parent : Widget?, caption : String) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_open_file_url(parent : Widget?, caption : String, dir : Url) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    
    def self.get_open_file_url(parent : Widget?, caption : String, dir : Url, filter : String) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    
    def self.get_save_file_name(parent : Widget? = nil) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X(parent))
    end
    
    def self.get_save_file_name(parent : Widget?, caption : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_save_file_name(parent : Widget?, caption : String, dir : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    
    def self.get_save_file_name(parent : Widget?, caption : String, dir : String, filter : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getSaveFileName_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), Qt::Converter::QString.wrap(filter)))
    end
    
    def self.get_save_file_url(parent : Widget? = nil) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X(parent))
    end
    
    def self.get_save_file_url(parent : Widget?, caption : String) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_save_file_url(parent : Widget?, caption : String, dir : Url) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    
    def self.get_save_file_url(parent : Widget?, caption : String, dir : Url, filter : String) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getSaveFileUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    
    def self.get_existing_directory(parent : Widget? = nil) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X(parent))
    end
    
    def self.get_existing_directory(parent : Widget?, caption : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_existing_directory(parent : Widget?, caption : String, dir : String) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir)))
    end
    
    def self.get_existing_directory(parent : Widget?, caption : String, dir : String, options : FileDialog::Options) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFileDialog_getExistingDirectory_STATIC_QWidget_X_const_QString_R_const_QString_R_QFileDialog__Options(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), options))
    end
    
    def self.get_existing_directory_url(parent : Widget? = nil) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X(parent))
    end
    
    def self.get_existing_directory_url(parent : Widget?, caption : String) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_existing_directory_url(parent : Widget?, caption : String, dir : Url) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    
    def self.get_existing_directory_url(parent : Widget?, caption : String, dir : Url, options : FileDialog::Options) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options(parent, Qt::Converter::QString.wrap(caption), dir, options))
    end
    
    def self.get_existing_directory_url(parent : Widget?, caption : String, dir : Url, options : FileDialog::Options, supported_schemes : Binding::QStringList*) : Url
      Url.new(unwrap: Binding.bg_QFileDialog_getExistingDirectoryUrl_STATIC_QWidget_X_const_QString_R_const_QUrl_R_QFileDialog__Options_const_QStringList_R(parent, Qt::Converter::QString.wrap(caption), dir, options, supported_schemes))
    end
    
    def self.get_open_file_names(parent : Widget? = nil) : Binding::QStringList*
      Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X(parent)
    end
    
    def self.get_open_file_names(parent : Widget?, caption : String) : Binding::QStringList*
      Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption))
    end
    
    def self.get_open_file_names(parent : Widget?, caption : String, dir : String) : Binding::QStringList*
      Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir))
    end
    
    def self.get_open_file_names(parent : Widget?, caption : String, dir : String, filter : String) : Binding::QStringList*
      Binding.bg_QFileDialog_getOpenFileNames_STATIC_QWidget_X_const_QString_R_const_QString_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), Qt::Converter::QString.wrap(dir), Qt::Converter::QString.wrap(filter))
    end
    
    def self.get_open_file_urls(parent : Widget? = nil) : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X(parent))
    end
    
    def self.get_open_file_urls(parent : Widget?, caption : String) : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R(parent, Qt::Converter::QString.wrap(caption)))
    end
    
    def self.get_open_file_urls(parent : Widget?, caption : String, dir : Url) : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R(parent, Qt::Converter::QString.wrap(caption), dir))
    end
    
    def self.get_open_file_urls(parent : Widget?, caption : String, dir : Url, filter : String) : Enumerable(Url)
      Container_QList_QUrl_.new(unwrap: Binding.bg_QFileDialog_getOpenFileUrls_STATIC_QWidget_X_const_QString_R_const_QUrl_R_const_QString_R(parent, Qt::Converter::QString.wrap(caption), dir, Qt::Converter::QString.wrap(filter)))
    end
    
    def self.save_file_content(file_content : Binding::QByteArray*) : Void
      Binding.bg_QFileDialog_saveFileContent_STATIC_const_QByteArray_R(file_content)
    end
    
    def self.save_file_content(file_content : Binding::QByteArray*, file_name_hint : String) : Void
      Binding.bg_QFileDialog_saveFileContent_STATIC_const_QByteArray_R_const_QString_R(file_content, Qt::Converter::QString.wrap(file_name_hint))
    end
    
    protected def initialize(args : Binding::QFileDialogArgs*)
      result = Binding.bg_QFileDialog__CONSTRUCT_const_QFileDialogArgs_R(args)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FileDialog)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall visible= done accept change_event size_hint minimum_size_hint open exec reject key_press_event close_event show_event resize_event context_menu_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFileDialog.new(
      bg_QFileDialog_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFileDialog_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFileDialog_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QFileDialog_done_int: BindgenHelper.wrap_proc({% if forwarded.includes?("done") %} Proc(Int32, Void).new{|result| self.done(result) } {% else %} nil {% end %}),
      bg_QFileDialog_accept_: BindgenHelper.wrap_proc({% if forwarded.includes?("accept") %} Proc(Void).new{ self.accept() } {% else %} nil {% end %}),
      bg_QFileDialog_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QDialog_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QDialog_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QDialog_open_: BindgenHelper.wrap_proc({% if forwarded.includes?("open") %} Proc(Void).new{ self.open() } {% else %} nil {% end %}),
      bg_QDialog_exec_: BindgenHelper.wrap_proc({% if forwarded.includes?("exec") %} Proc(Int32).new{ self.exec() } {% else %} nil {% end %}),
      bg_QDialog_reject_: BindgenHelper.wrap_proc({% if forwarded.includes?("reject") %} Proc(Void).new{ self.reject() } {% else %} nil {% end %}),
      bg_QDialog_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|unnamed_arg_0| self.close_event(CloseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QDialog_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDialog_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFileDialog_JUMPTABLE_BgJumptable_QFileDialog_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def done(result : Int32) : Void
      Binding.bg_QFileDialog_done_int(self, result)
    end
    
    protected def accept() : Void
      Binding.bg_QFileDialog_accept_(self)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QFileDialog_changeEvent_QEvent_X(self, e)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QDialog_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QDialog_minimumSizeHint_(self)
    end
    
    def open() : Void
      Binding.bg_QDialog_open_(self)
    end
    
    def exec() : Int32
      Binding.bg_QDialog_exec_(self)
    end
    
    def reject() : Void
      Binding.bg_QDialog_reject_(self)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QDialog_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def close_event(unnamed_arg_0 : CloseEvent) : Void
      Binding.bg_QDialog_closeEvent_QCloseEvent_X(self, unnamed_arg_0)
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QDialog_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QDialog_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QDialog_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QDialog_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QFileDialog_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ViewMode : UInt32
      Detail = 0
      List = 1
    end
    enum FileMode : UInt32
      AnyFile = 0
      ExistingFile = 1
      Directory = 2
      ExistingFiles = 3
      DirectoryOnly = 4
    end
    enum AcceptMode : UInt32
      AcceptOpen = 0
      AcceptSave = 1
    end
    enum DialogLabel : UInt32
      LookIn = 0
      FileName = 1
      FileType = 2
      Accept = 3
      Reject = 4
    end
    enum Option : UInt32
      ShowDirsOnly = 1
      DontResolveSymlinks = 2
      DontConfirmOverwrite = 4
      DontUseSheet = 8
      DontUseNativeDialog = 16
      ReadOnly = 32
      HideNameFilterDetails = 64
      DontUseCustomDirectoryIcons = 128
    end
    @[Flags]
    enum Options : UInt32
      ShowDirsOnly = 1
      DontResolveSymlinks = 2
      DontConfirmOverwrite = 4
      DontUseSheet = 8
      DontUseNativeDialog = 16
      ReadOnly = 32
      HideNameFilterDetails = 64
      DontUseCustomDirectoryIcons = 128
    end
    def on_file_selected(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_fileSelected_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_files_selected(&_proc_ : Proc(Binding::QStringList, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_filesSelected_CrystalProc_void__const_QStringList_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QStringList*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_current_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_currentChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_directory_entered(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_directoryEntered_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_url_selected(&_proc_ : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_urlSelected_CrystalProc_void__const_QUrl_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QUrl*, Void).new do |arg0| _proc_.call(Url.new(unwrap: arg0)) end)))
    end
    
    def on_urls_selected(&_proc_ : Proc(Enumerable(Url), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_urlsSelected_CrystalProc_void__const_QList_QUrl__R_(self, BindgenHelper.wrap_proc(Proc(Binding::ContainerQListQUrl*, Void).new do |arg0| _proc_.call(Container_QList_QUrl_.new(unwrap: arg0)) end)))
    end
    
    def on_current_url_changed(&_proc_ : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_currentUrlChanged_CrystalProc_void__const_QUrl_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QUrl*, Void).new do |arg0| _proc_.call(Url.new(unwrap: arg0)) end)))
    end
    
    def on_directory_url_entered(&_proc_ : Proc(Url, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_directoryUrlEntered_CrystalProc_void__const_QUrl_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QUrl*, Void).new do |arg0| _proc_.call(Url.new(unwrap: arg0)) end)))
    end
    
    def on_filter_selected(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QFileDialog_CONNECT_filterSelected_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QFileDialog*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : FileDialog)
      end
      def visible=(visible : Bool) : Void
        Binding.bg_QFileDialog_setVisible_SUPER_bool(@myself, visible)
      end
      
      protected def done(result : Int32) : Void
        Binding.bg_QFileDialog_done_SUPER_int(@myself, result)
      end
      
      protected def accept() : Void
        Binding.bg_QFileDialog_accept_SUPER_(@myself)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QFileDialog_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QDialog_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QDialog_minimumSizeHint_SUPER_(@myself)
      end
      
      def open() : Void
        Binding.bg_QDialog_open_SUPER_(@myself)
      end
      
      def exec() : Int32
        Binding.bg_QDialog_exec_SUPER_(@myself)
      end
      
      def reject() : Void
        Binding.bg_QDialog_reject_SUPER_(@myself)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QDialog_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def close_event(unnamed_arg_0 : CloseEvent) : Void
        Binding.bg_QDialog_closeEvent_SUPER_QCloseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QDialog_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QDialog_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QDialog_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QDialog_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class FormLayout < Layout
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QFormLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QFormLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFormLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFormLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QFormLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QFormLayout__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(FormLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall add_item item_at take_at geometry= minimum_size size_hint invalidate has_height_for_width? height_for_width expanding_directions count geometry maximum_size index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QFormLayout.new(
      bg_QFormLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QFormLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QFormLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QFormLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|item| self.add_item(LayoutItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QFormLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.item_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QFormLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|index| self.take_at(index).to_unsafe } {% else %} nil {% end %}),
      bg_QFormLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|rect| self.geometry=(Rect.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QFormLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QFormLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QFormLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QFormLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QFormLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|width| self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QFormLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QFormLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QFormLayout_JUMPTABLE_BgJumptable_QFormLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def field_growth_policy=(policy : FormLayout::FieldGrowthPolicy) : Void
      Binding.bg_QFormLayout_setFieldGrowthPolicy_QFormLayout__FieldGrowthPolicy(self, policy)
    end
    
    def field_growth_policy() : FormLayout::FieldGrowthPolicy
      Binding.bg_QFormLayout_fieldGrowthPolicy_(self)
    end
    
    def row_wrap_policy=(policy : FormLayout::RowWrapPolicy) : Void
      Binding.bg_QFormLayout_setRowWrapPolicy_QFormLayout__RowWrapPolicy(self, policy)
    end
    
    def row_wrap_policy() : FormLayout::RowWrapPolicy
      Binding.bg_QFormLayout_rowWrapPolicy_(self)
    end
    
    def label_alignment=(alignment : Alignment) : Void
      Binding.bg_QFormLayout_setLabelAlignment_Qt__Alignment(self, alignment)
    end
    
    def label_alignment() : Alignment
      Binding.bg_QFormLayout_labelAlignment_(self)
    end
    
    def form_alignment=(alignment : Alignment) : Void
      Binding.bg_QFormLayout_setFormAlignment_Qt__Alignment(self, alignment)
    end
    
    def form_alignment() : Alignment
      Binding.bg_QFormLayout_formAlignment_(self)
    end
    
    def horizontal_spacing=(spacing : Int32) : Void
      Binding.bg_QFormLayout_setHorizontalSpacing_int(self, spacing)
    end
    
    def horizontal_spacing() : Int32
      Binding.bg_QFormLayout_horizontalSpacing_(self)
    end
    
    def vertical_spacing=(spacing : Int32) : Void
      Binding.bg_QFormLayout_setVerticalSpacing_int(self, spacing)
    end
    
    def vertical_spacing() : Int32
      Binding.bg_QFormLayout_verticalSpacing_(self)
    end
    
    def spacing() : Int32
      Binding.bg_QFormLayout_spacing_(self)
    end
    
    def spacing=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QFormLayout_setSpacing_int(self, unnamed_arg_0)
    end
    
    def add_row(label : Widget, field : Widget) : Void
      Binding.bg_QFormLayout_addRow_QWidget_X_QWidget_X(self, label, field)
    end
    
    def add_row(label : Widget, field : Layout) : Void
      Binding.bg_QFormLayout_addRow_QWidget_X_QLayout_X(self, label, field)
    end
    
    def add_row(label_text : String, field : Widget) : Void
      Binding.bg_QFormLayout_addRow_const_QString_R_QWidget_X(self, Qt::Converter::QString.wrap(label_text), field)
    end
    
    def add_row(label_text : String, field : Layout) : Void
      Binding.bg_QFormLayout_addRow_const_QString_R_QLayout_X(self, Qt::Converter::QString.wrap(label_text), field)
    end
    
    def add_row(widget : Widget) : Void
      Binding.bg_QFormLayout_addRow_QWidget_X(self, widget)
    end
    
    def add_row(layout : Layout) : Void
      Binding.bg_QFormLayout_addRow_QLayout_X(self, layout)
    end
    
    def insert_row(row : Int32, label : Widget, field : Widget) : Void
      Binding.bg_QFormLayout_insertRow_int_QWidget_X_QWidget_X(self, row, label, field)
    end
    
    def insert_row(row : Int32, label : Widget, field : Layout) : Void
      Binding.bg_QFormLayout_insertRow_int_QWidget_X_QLayout_X(self, row, label, field)
    end
    
    def insert_row(row : Int32, label_text : String, field : Widget) : Void
      Binding.bg_QFormLayout_insertRow_int_const_QString_R_QWidget_X(self, row, Qt::Converter::QString.wrap(label_text), field)
    end
    
    def insert_row(row : Int32, label_text : String, field : Layout) : Void
      Binding.bg_QFormLayout_insertRow_int_const_QString_R_QLayout_X(self, row, Qt::Converter::QString.wrap(label_text), field)
    end
    
    def insert_row(row : Int32, widget : Widget) : Void
      Binding.bg_QFormLayout_insertRow_int_QWidget_X(self, row, widget)
    end
    
    def insert_row(row : Int32, layout : Layout) : Void
      Binding.bg_QFormLayout_insertRow_int_QLayout_X(self, row, layout)
    end
    
    def remove_row(row : Int32) : Void
      Binding.bg_QFormLayout_removeRow_int(self, row)
    end
    
    def remove_row(widget : Widget) : Void
      Binding.bg_QFormLayout_removeRow_QWidget_X(self, widget)
    end
    
    def remove_row(layout : Layout) : Void
      Binding.bg_QFormLayout_removeRow_QLayout_X(self, layout)
    end
    
    def set_item(row : Int32, role : FormLayout::ItemRole, item : LayoutItem) : Void
      Binding.bg_QFormLayout_setItem_int_QFormLayout__ItemRole_QLayoutItem_X(self, row, role, item)
    end
    
    def set_widget(row : Int32, role : FormLayout::ItemRole, widget : Widget) : Void
      Binding.bg_QFormLayout_setWidget_int_QFormLayout__ItemRole_QWidget_X(self, row, role, widget)
    end
    
    def set_layout(row : Int32, role : FormLayout::ItemRole, layout : Layout) : Void
      Binding.bg_QFormLayout_setLayout_int_QFormLayout__ItemRole_QLayout_X(self, row, role, layout)
    end
    
    def item_at(row : Int32, role : FormLayout::ItemRole) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QFormLayout_itemAt_int_QFormLayout__ItemRole(self, row, role))
    end
    
    def get_item_position(index : Int32, row_ptr : Int32*, role_ptr : FormLayout::ItemRole*) : Void
      Binding.bg_QFormLayout_getItemPosition_int_int_X_QFormLayout__ItemRole_X(self, index, row_ptr, role_ptr)
    end
    
    def get_widget_position(widget : Widget, row_ptr : Int32*, role_ptr : FormLayout::ItemRole*) : Void
      Binding.bg_QFormLayout_getWidgetPosition_QWidget_X_int_X_QFormLayout__ItemRole_X(self, widget, row_ptr, role_ptr)
    end
    
    def get_layout_position(layout : Layout, row_ptr : Int32*, role_ptr : FormLayout::ItemRole*) : Void
      Binding.bg_QFormLayout_getLayoutPosition_QLayout_X_int_X_QFormLayout__ItemRole_X(self, layout, row_ptr, role_ptr)
    end
    
    def label_for_field(field : Widget) : Widget
      Widget.new(unwrap: Binding.bg_QFormLayout_labelForField_QWidget_X(self, field))
    end
    
    def label_for_field(field : Layout) : Widget
      Widget.new(unwrap: Binding.bg_QFormLayout_labelForField_QLayout_X(self, field))
    end
    
    def add_item(item : LayoutItem) : Void
      Binding.bg_QFormLayout_addItem_QLayoutItem_X(self, item)
    end
    
    def item_at(index : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QFormLayout_itemAt_int(self, index))
    end
    
    def take_at(index : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QFormLayout_takeAt_int(self, index))
    end
    
    def geometry=(rect : Rect) : Void
      Binding.bg_QFormLayout_setGeometry_const_QRect_R(self, rect)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QFormLayout_minimumSize_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QFormLayout_sizeHint_(self)
    end
    
    def invalidate() : Void
      Binding.bg_QFormLayout_invalidate_(self)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QFormLayout_hasHeightForWidth_(self)
    end
    
    def height_for_width(width : Int32) : Int32
      Binding.bg_QFormLayout_heightForWidth_int(self, width)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QFormLayout_expandingDirections_(self)
    end
    
    def count() : Int32
      Binding.bg_QFormLayout_count_(self)
    end
    
    def row_count() : Int32
      Binding.bg_QFormLayout_rowCount_(self)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_geometry_(self))
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QLayout_maximumSize_(self)
    end
    
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayout_controlTypes_(self)
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    
    protected def child_event(e : Binding::QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QFormLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    enum FieldGrowthPolicy : UInt32
      FieldsStayAtSizeHint = 0
      ExpandingFieldsGrow = 1
      AllNonFixedFieldsGrow = 2
    end
    enum RowWrapPolicy : UInt32
      DontWrapRows = 0
      WrapLongRows = 1
      WrapAllRows = 2
    end
    enum ItemRole : UInt32
      LabelRole = 0
      FieldRole = 1
      SpanningRole = 2
    end
    def initialize(unwrap : Binding::QFormLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : FormLayout)
      end
      def add_item(item : LayoutItem) : Void
        Binding.bg_QFormLayout_addItem_SUPER_QLayoutItem_X(@myself, item)
      end
      
      def item_at(index : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QFormLayout_itemAt_SUPER_int(@myself, index))
      end
      
      def take_at(index : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QFormLayout_takeAt_SUPER_int(@myself, index))
      end
      
      def geometry=(rect : Rect) : Void
        Binding.bg_QFormLayout_setGeometry_SUPER_const_QRect_R(@myself, rect)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QFormLayout_minimumSize_SUPER_(@myself)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QFormLayout_sizeHint_SUPER_(@myself)
      end
      
      def invalidate() : Void
        Binding.bg_QFormLayout_invalidate_SUPER_(@myself)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QFormLayout_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(width : Int32) : Int32
        Binding.bg_QFormLayout_heightForWidth_SUPER_int(@myself, width)
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QFormLayout_expandingDirections_SUPER_(@myself)
      end
      
      def count() : Int32
        Binding.bg_QFormLayout_count_SUPER_(@myself)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QLayout_geometry_SUPER_(@myself))
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QLayout_maximumSize_SUPER_(@myself)
      end
      
      def index_of(unnamed_arg_0 : Widget) : Int32
        Binding.bg_QLayout_indexOf_SUPER_QWidget_X(@myself, unnamed_arg_0)
      end
      
      def empty?() : Bool
        Binding.bg_QLayout_isEmpty_SUPER_(@myself)
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayout_controlTypes_SUPER_(@myself)
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_SUPER_(@myself))
      end
      
      protected def child_event(e : Binding::QChildEvent*) : Void
        Binding.bg_QLayout_childEvent_SUPER_QChildEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Gesture < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGesture_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGesture_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGesture_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGesture_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGesture_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QGesture__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Gesture)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGesture.new(
      bg_QGesture_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGesture_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGesture_JUMPTABLE_BgJumptable_QGesture_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def gesture_type() : GestureType
      Binding.bg_QGesture_gestureType_(self)
    end
    
    def state() : GestureState
      Binding.bg_QGesture_state_(self)
    end
    
    def hot_spot() : PointF
      PointF.new(unwrap: Binding.bg_QGesture_hotSpot_(self))
    end
    
    def hot_spot=(value : PointF) : Void
      Binding.bg_QGesture_setHotSpot_const_QPointF_R(self, value)
    end
    
    def has_hot_spot?() : Bool
      Binding.bg_QGesture_hasHotSpot_(self)
    end
    
    def unset_hot_spot() : Void
      Binding.bg_QGesture_unsetHotSpot_(self)
    end
    
    def gesture_cancel_policy=(policy : Gesture::GestureCancelPolicy) : Void
      Binding.bg_QGesture_setGestureCancelPolicy_QGesture__GestureCancelPolicy(self, policy)
    end
    
    def gesture_cancel_policy() : Gesture::GestureCancelPolicy
      Binding.bg_QGesture_gestureCancelPolicy_(self)
    end
    
    protected def initialize(dd : Binding::QGesturePrivate*, parent : Object)
      result = Binding.bg_QGesture__CONSTRUCT_QGesturePrivate_R_QObject_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Gesture)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGesture.new(
      bg_QGesture_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGesture_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGesture_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGesture_JUMPTABLE_BgJumptable_QGesture_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGesture_staticMetaObject_STATIC_GETTER_()
    end
    
    enum GestureCancelPolicy : UInt32
      CancelNone = 0
      CancelAllInContext = 1
    end
    def initialize(unwrap : Binding::QGesture*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Gesture)
      end
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GestureEvent < Event
    def initialize(gestures : Enumerable(Gesture))
      result = Binding.bg_QGestureEvent__CONSTRUCT_const_QList_QGesture_X__R(BindgenHelper.wrap_container(Container_QList_QGesture_X_, gestures).to_unsafe)
    @unwrap = result
    end
    
    def gestures() : Enumerable(Gesture)
      Container_QList_QGesture_X_.new(unwrap: Binding.bg_QGestureEvent_gestures_(self))
    end
    
    def gesture(type : GestureType) : Gesture
      Gesture.new(unwrap: Binding.bg_QGestureEvent_gesture_Qt__GestureType(self, type))
    end
    
    def active_gestures() : Enumerable(Gesture)
      Container_QList_QGesture_X_.new(unwrap: Binding.bg_QGestureEvent_activeGestures_(self))
    end
    
    def canceled_gestures() : Enumerable(Gesture)
      Container_QList_QGesture_X_.new(unwrap: Binding.bg_QGestureEvent_canceledGestures_(self))
    end
    
    def set_accepted(unnamed_arg_0 : Gesture, unnamed_arg_1 : Bool) : Void
      Binding.bg_QGestureEvent_setAccepted_QGesture_X_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def accept(unnamed_arg_0 : Gesture) : Void
      Binding.bg_QGestureEvent_accept_QGesture_X(self, unnamed_arg_0)
    end
    
    def ignore(unnamed_arg_0 : Gesture) : Void
      Binding.bg_QGestureEvent_ignore_QGesture_X(self, unnamed_arg_0)
    end
    
    def is_accepted(unnamed_arg_0 : Gesture) : Bool
      Binding.bg_QGestureEvent_isAccepted_QGesture_X(self, unnamed_arg_0)
    end
    
    def set_accepted(unnamed_arg_0 : GestureType, unnamed_arg_1 : Bool) : Void
      Binding.bg_QGestureEvent_setAccepted_Qt__GestureType_bool(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def accept(unnamed_arg_0 : GestureType) : Void
      Binding.bg_QGestureEvent_accept_Qt__GestureType(self, unnamed_arg_0)
    end
    
    def ignore(unnamed_arg_0 : GestureType) : Void
      Binding.bg_QGestureEvent_ignore_Qt__GestureType(self, unnamed_arg_0)
    end
    
    def is_accepted(unnamed_arg_0 : GestureType) : Bool
      Binding.bg_QGestureEvent_isAccepted_Qt__GestureType(self, unnamed_arg_0)
    end
    
    def widget=(widget : Widget) : Void
      Binding.bg_QGestureEvent_setWidget_QWidget_X(self, widget)
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QGestureEvent_widget_(self))
    end
    
    def map_to_graphics_scene(gesture_point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGestureEvent_mapToGraphicsScene_const_QPointF_R(self, gesture_point))
    end
    
    def initialize(unwrap : Binding::QGestureEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  abstract class GraphicsItem
    @unwrap : Binding::QGraphicsItem*
    
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsItem.new(
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsItem_JUMPTABLE_BgJumptable_QGraphicsItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def scene() : GraphicsScene
      GraphicsScene.new(unwrap: Binding.bg_QGraphicsItem_scene_(self))
    end
    
    def parent_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_parentItem_(self))
    end
    
    def top_level_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_topLevelItem_(self))
    end
    
    def parent_object() : GraphicsObject
      GraphicsObjectImpl.new(unwrap: Binding.bg_QGraphicsItem_parentObject_(self))
    end
    
    def parent_widget() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsItem_parentWidget_(self))
    end
    
    def top_level_widget() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsItem_topLevelWidget_(self))
    end
    
    def window() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsItem_window_(self))
    end
    
    def panel() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_panel_(self))
    end
    
    def parent_item=(parent : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_setParentItem_QGraphicsItem_X(self, parent)
    end
    
    def child_items() : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsItem_childItems_(self))
    end
    
    def widget?() : Bool
      Binding.bg_QGraphicsItem_isWidget_(self)
    end
    
    def window?() : Bool
      Binding.bg_QGraphicsItem_isWindow_(self)
    end
    
    def panel?() : Bool
      Binding.bg_QGraphicsItem_isPanel_(self)
    end
    
    def to_graphics_object() : GraphicsObject
      GraphicsObjectImpl.new(unwrap: Binding.bg_QGraphicsItem_toGraphicsObject_(self))
    end
    
    def group() : Binding::QGraphicsItemGroup*
      Binding.bg_QGraphicsItem_group_(self)
    end
    
    def group=(group : Binding::QGraphicsItemGroup*) : Void
      Binding.bg_QGraphicsItem_setGroup_QGraphicsItemGroup_X(self, group)
    end
    
    def flags() : GraphicsItem::Flags
      Binding.bg_QGraphicsItem_flags_(self)
    end
    
    def set_flag(flag : GraphicsItem::Flag, enabled : Bool = true) : Void
      Binding.bg_QGraphicsItem_setFlag_QGraphicsItem__GraphicsItemFlag_bool(self, flag, enabled)
    end
    
    def flags=(flags : GraphicsItem::Flags) : Void
      Binding.bg_QGraphicsItem_setFlags_QGraphicsItem__GraphicsItemFlags(self, flags)
    end
    
    def cache_mode() : GraphicsItem::CacheMode
      Binding.bg_QGraphicsItem_cacheMode_(self)
    end
    
    def cache_mode=(mode : GraphicsItem::CacheMode) : Void
      Binding.bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode(self, mode)
    end
    
    def set_cache_mode(mode : GraphicsItem::CacheMode, cache_size : Binding::QSize*) : Void
      Binding.bg_QGraphicsItem_setCacheMode_QGraphicsItem__CacheMode_const_QSize_R(self, mode, cache_size)
    end
    
    def panel_modality() : GraphicsItem::PanelModality
      Binding.bg_QGraphicsItem_panelModality_(self)
    end
    
    def panel_modality=(panel_modality : GraphicsItem::PanelModality) : Void
      Binding.bg_QGraphicsItem_setPanelModality_QGraphicsItem__PanelModality(self, panel_modality)
    end
    
    def is_blocked_by_modal_panel(blocking_panel : GraphicsItem*? = nil) : Bool
      Binding.bg_QGraphicsItem_isBlockedByModalPanel_QGraphicsItem_XX(self, blocking_panel)
    end
    
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsItem_toolTip_(self))
    end
    
    def tool_tip=(tool_tip : String) : Void
      Binding.bg_QGraphicsItem_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tool_tip))
    end
    
    def cursor() : Cursor
      Cursor.new(unwrap: Binding.bg_QGraphicsItem_cursor_(self))
    end
    
    def cursor=(cursor : Cursor) : Void
      Binding.bg_QGraphicsItem_setCursor_const_QCursor_R(self, cursor)
    end
    
    def has_cursor?() : Bool
      Binding.bg_QGraphicsItem_hasCursor_(self)
    end
    
    def unset_cursor() : Void
      Binding.bg_QGraphicsItem_unsetCursor_(self)
    end
    
    def visible?() : Bool
      Binding.bg_QGraphicsItem_isVisible_(self)
    end
    
    def is_visible_to(parent : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isVisibleTo_const_QGraphicsItem_X(self, parent)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QGraphicsItem_setVisible_bool(self, visible)
    end
    
    def hide() : Void
      Binding.bg_QGraphicsItem_hide_(self)
    end
    
    def show() : Void
      Binding.bg_QGraphicsItem_show_(self)
    end
    
    def enabled?() : Bool
      Binding.bg_QGraphicsItem_isEnabled_(self)
    end
    
    def enabled=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setEnabled_bool(self, enabled)
    end
    
    def selected?() : Bool
      Binding.bg_QGraphicsItem_isSelected_(self)
    end
    
    def selected=(selected : Bool) : Void
      Binding.bg_QGraphicsItem_setSelected_bool(self, selected)
    end
    
    def accept_drops() : Bool
      Binding.bg_QGraphicsItem_acceptDrops_(self)
    end
    
    def accept_drops=(on : Bool) : Void
      Binding.bg_QGraphicsItem_setAcceptDrops_bool(self, on)
    end
    
    def opacity() : Float64
      Binding.bg_QGraphicsItem_opacity_(self)
    end
    
    def effective_opacity() : Float64
      Binding.bg_QGraphicsItem_effectiveOpacity_(self)
    end
    
    def opacity=(opacity : Float64) : Void
      Binding.bg_QGraphicsItem_setOpacity_qreal(self, opacity)
    end
    
    def graphics_effect() : Binding::QGraphicsEffect*
      Binding.bg_QGraphicsItem_graphicsEffect_(self)
    end
    
    def graphics_effect=(effect : Binding::QGraphicsEffect*) : Void
      Binding.bg_QGraphicsItem_setGraphicsEffect_QGraphicsEffect_X(self, effect)
    end
    
    def accepted_mouse_buttons() : MouseButtons
      Binding.bg_QGraphicsItem_acceptedMouseButtons_(self)
    end
    
    def accepted_mouse_buttons=(buttons : MouseButtons) : Void
      Binding.bg_QGraphicsItem_setAcceptedMouseButtons_Qt__MouseButtons(self, buttons)
    end
    
    def accept_hover_events() : Bool
      Binding.bg_QGraphicsItem_acceptHoverEvents_(self)
    end
    
    def accept_hover_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setAcceptHoverEvents_bool(self, enabled)
    end
    
    def accept_touch_events() : Bool
      Binding.bg_QGraphicsItem_acceptTouchEvents_(self)
    end
    
    def accept_touch_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setAcceptTouchEvents_bool(self, enabled)
    end
    
    def filters_child_events() : Bool
      Binding.bg_QGraphicsItem_filtersChildEvents_(self)
    end
    
    def filters_child_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setFiltersChildEvents_bool(self, enabled)
    end
    
    def handles_child_events() : Bool
      Binding.bg_QGraphicsItem_handlesChildEvents_(self)
    end
    
    def handles_child_events=(enabled : Bool) : Void
      Binding.bg_QGraphicsItem_setHandlesChildEvents_bool(self, enabled)
    end
    
    def active?() : Bool
      Binding.bg_QGraphicsItem_isActive_(self)
    end
    
    def active=(active : Bool) : Void
      Binding.bg_QGraphicsItem_setActive_bool(self, active)
    end
    
    def has_focus?() : Bool
      Binding.bg_QGraphicsItem_hasFocus_(self)
    end
    
    def focus=(focus_reason : FocusReason = FocusReason::OtherFocusReason) : Void
      Binding.bg_QGraphicsItem_setFocus_Qt__FocusReason(self, focus_reason)
    end
    
    def clear_focus() : Void
      Binding.bg_QGraphicsItem_clearFocus_(self)
    end
    
    def focus_proxy() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_focusProxy_(self))
    end
    
    def focus_proxy=(item : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_setFocusProxy_QGraphicsItem_X(self, item)
    end
    
    def focus_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_focusItem_(self))
    end
    
    def focus_scope_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_focusScopeItem_(self))
    end
    
    def grab_mouse() : Void
      Binding.bg_QGraphicsItem_grabMouse_(self)
    end
    
    def ungrab_mouse() : Void
      Binding.bg_QGraphicsItem_ungrabMouse_(self)
    end
    
    def grab_keyboard() : Void
      Binding.bg_QGraphicsItem_grabKeyboard_(self)
    end
    
    def ungrab_keyboard() : Void
      Binding.bg_QGraphicsItem_ungrabKeyboard_(self)
    end
    
    def pos() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_pos_(self))
    end
    
    def x() : Float64
      Binding.bg_QGraphicsItem_x_(self)
    end
    
    def x=(x : Float64) : Void
      Binding.bg_QGraphicsItem_setX_qreal(self, x)
    end
    
    def y() : Float64
      Binding.bg_QGraphicsItem_y_(self)
    end
    
    def y=(y : Float64) : Void
      Binding.bg_QGraphicsItem_setY_qreal(self, y)
    end
    
    def scene_pos() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_scenePos_(self))
    end
    
    def pos=(pos : PointF) : Void
      Binding.bg_QGraphicsItem_setPos_const_QPointF_R(self, pos)
    end
    
    def set_pos(x : Float64, y : Float64) : Void
      Binding.bg_QGraphicsItem_setPos_qreal_qreal(self, x, y)
    end
    
    def move_by(dx : Float64, dy : Float64) : Void
      Binding.bg_QGraphicsItem_moveBy_qreal_qreal(self, dx, dy)
    end
    
    def ensure_visible() : Void
      Binding.bg_QGraphicsItem_ensureVisible_(self)
    end
    
    def ensure_visible(rect : RectF) : Void
      Binding.bg_QGraphicsItem_ensureVisible_const_QRectF_R(self, rect)
    end
    
    def ensure_visible(rect : RectF, xmargin : Int32 = 50) : Void
      Binding.bg_QGraphicsItem_ensureVisible_const_QRectF_R_int(self, rect, xmargin)
    end
    
    def ensure_visible(rect : RectF, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsItem_ensureVisible_const_QRectF_R_int_int(self, rect, xmargin, ymargin)
    end
    
    def ensure_visible(x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsItem_ensureVisible_qreal_qreal_qreal_qreal_int_int(self, x, y, w, h, xmargin, ymargin)
    end
    
    def transform() : Binding::QTransform*
      Binding.bg_QGraphicsItem_transform_(self)
    end
    
    def scene_transform() : Binding::QTransform*
      Binding.bg_QGraphicsItem_sceneTransform_(self)
    end
    
    def device_transform(viewport_transform : Binding::QTransform*) : Binding::QTransform*
      Binding.bg_QGraphicsItem_deviceTransform_const_QTransform_R(self, viewport_transform)
    end
    
    def item_transform(other : GraphicsItem, ok : Bool*? = true) : Binding::QTransform*
      Binding.bg_QGraphicsItem_itemTransform_const_QGraphicsItem_X_bool_X(self, other, ok)
    end
    
    def set_transform(matrix : Binding::QTransform*, combine : Bool = false) : Void
      Binding.bg_QGraphicsItem_setTransform_const_QTransform_R_bool(self, matrix, combine)
    end
    
    def reset_transform() : Void
      Binding.bg_QGraphicsItem_resetTransform_(self)
    end
    
    def rotation=(angle : Float64) : Void
      Binding.bg_QGraphicsItem_setRotation_qreal(self, angle)
    end
    
    def rotation() : Float64
      Binding.bg_QGraphicsItem_rotation_(self)
    end
    
    def scale=(scale : Float64) : Void
      Binding.bg_QGraphicsItem_setScale_qreal(self, scale)
    end
    
    def scale() : Float64
      Binding.bg_QGraphicsItem_scale_(self)
    end
    
    def transformations() : Enumerable(GraphicsTransform)
      Container_QList_QGraphicsTransform_X_.new(unwrap: Binding.bg_QGraphicsItem_transformations_(self))
    end
    
    def transformations=(transformations : Enumerable(GraphicsTransform)) : Void
      Binding.bg_QGraphicsItem_setTransformations_const_QList_QGraphicsTransform_X__R(self, BindgenHelper.wrap_container(Container_QList_QGraphicsTransform_X_, transformations).to_unsafe)
    end
    
    def transform_origin_point() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_transformOriginPoint_(self))
    end
    
    def transform_origin_point=(origin : PointF) : Void
      Binding.bg_QGraphicsItem_setTransformOriginPoint_const_QPointF_R(self, origin)
    end
    
    def set_transform_origin_point(ax : Float64, ay : Float64) : Void
      Binding.bg_QGraphicsItem_setTransformOriginPoint_qreal_qreal(self, ax, ay)
    end
    
    def advance(phase : Int32) : Void
      Binding.bg_QGraphicsItem_advance_int(self, phase)
    end
    
    def z_value() : Float64
      Binding.bg_QGraphicsItem_zValue_(self)
    end
    
    def z_value=(z : Float64) : Void
      Binding.bg_QGraphicsItem_setZValue_qreal(self, z)
    end
    
    def stack_before(sibling : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_stackBefore_const_QGraphicsItem_X(self, sibling)
    end
    
    abstract def bounding_rect() : RectF
    def children_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_childrenBoundingRect_(self))
    end
    
    def scene_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_sceneBoundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_shape_(self)
    end
    
    def clipped?() : Bool
      Binding.bg_QGraphicsItem_isClipped_(self)
    end
    
    def clip_path() : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_clipPath_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsItem_contains_const_QPointF_R(self, point)
    end
    
    def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, other, mode)
    end
    
    def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    
    def colliding_items(mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsItem_collidingItems_Qt__ItemSelectionMode(self, mode))
    end
    
    def obscured?() : Bool
      Binding.bg_QGraphicsItem_isObscured_(self)
    end
    
    def is_obscured(rect : RectF) : Bool
      Binding.bg_QGraphicsItem_isObscured_const_QRectF_R(self, rect)
    end
    
    def is_obscured(x : Float64, y : Float64, w : Float64, h : Float64) : Bool
      Binding.bg_QGraphicsItem_isObscured_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_opaqueArea_(self)
    end
    
    def bounding_region(item_to_device_transform : Binding::QTransform*) : Binding::QRegion*
      Binding.bg_QGraphicsItem_boundingRegion_const_QTransform_R(self, item_to_device_transform)
    end
    
    def bounding_region_granularity() : Float64
      Binding.bg_QGraphicsItem_boundingRegionGranularity_(self)
    end
    
    def bounding_region_granularity=(granularity : Float64) : Void
      Binding.bg_QGraphicsItem_setBoundingRegionGranularity_qreal(self, granularity)
    end
    
    abstract def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
    def update() : Void
      Binding.bg_QGraphicsItem_update_(self)
    end
    
    def update(rect : RectF) : Void
      Binding.bg_QGraphicsItem_update_const_QRectF_R(self, rect)
    end
    
    def update(x : Float64, y : Float64, width : Float64, height : Float64) : Void
      Binding.bg_QGraphicsItem_update_qreal_qreal_qreal_qreal(self, x, y, width, height)
    end
    
    def scroll(dx : Float64, dy : Float64) : Void
      Binding.bg_QGraphicsItem_scroll_qreal_qreal(self, dx, dy)
    end
    
    def scroll(dx : Float64, dy : Float64, rect : RectF) : Void
      Binding.bg_QGraphicsItem_scroll_qreal_qreal_const_QRectF_R(self, dx, dy, rect)
    end
    
    def map_to_item(item : GraphicsItem, point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPointF_R(self, item, point))
    end
    
    def map_to_parent(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToParent_const_QPointF_R(self, point))
    end
    
    def map_to_scene(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToScene_const_QPointF_R(self, point))
    end
    
    def map_to_item(item : GraphicsItem, rect : RectF) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect)
    end
    
    def map_to_parent(rect : RectF) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToParent_const_QRectF_R(self, rect)
    end
    
    def map_to_scene(rect : RectF) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToScene_const_QRectF_R(self, rect)
    end
    
    def map_rect_to_item(item : GraphicsItem, rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect))
    end
    
    def map_rect_to_parent(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToParent_const_QRectF_R(self, rect))
    end
    
    def map_rect_to_scene(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToScene_const_QRectF_R(self, rect))
    end
    
    def map_to_item(item : GraphicsItem, polygon : Binding::QPolygonF*) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPolygonF_R(self, item, polygon)
    end
    
    def map_to_parent(polygon : Binding::QPolygonF*) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToParent_const_QPolygonF_R(self, polygon)
    end
    
    def map_to_scene(polygon : Binding::QPolygonF*) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToScene_const_QPolygonF_R(self, polygon)
    end
    
    def map_to_item(item : GraphicsItem, path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_const_QPainterPath_R(self, item, path)
    end
    
    def map_to_parent(path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_mapToParent_const_QPainterPath_R(self, path)
    end
    
    def map_to_scene(path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_mapToScene_const_QPainterPath_R(self, path)
    end
    
    def map_from_item(item : GraphicsItem, point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPointF_R(self, item, point))
    end
    
    def map_from_parent(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromParent_const_QPointF_R(self, point))
    end
    
    def map_from_scene(point : PointF) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromScene_const_QPointF_R(self, point))
    end
    
    def map_from_item(item : GraphicsItem, rect : RectF) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect)
    end
    
    def map_from_parent(rect : RectF) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromParent_const_QRectF_R(self, rect)
    end
    
    def map_from_scene(rect : RectF) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromScene_const_QRectF_R(self, rect)
    end
    
    def map_rect_from_item(item : GraphicsItem, rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_const_QRectF_R(self, item, rect))
    end
    
    def map_rect_from_parent(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromParent_const_QRectF_R(self, rect))
    end
    
    def map_rect_from_scene(rect : RectF) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromScene_const_QRectF_R(self, rect))
    end
    
    def map_from_item(item : GraphicsItem, polygon : Binding::QPolygonF*) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPolygonF_R(self, item, polygon)
    end
    
    def map_from_parent(polygon : Binding::QPolygonF*) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromParent_const_QPolygonF_R(self, polygon)
    end
    
    def map_from_scene(polygon : Binding::QPolygonF*) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromScene_const_QPolygonF_R(self, polygon)
    end
    
    def map_from_item(item : GraphicsItem, path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_const_QPainterPath_R(self, item, path)
    end
    
    def map_from_parent(path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_mapFromParent_const_QPainterPath_R(self, path)
    end
    
    def map_from_scene(path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_mapFromScene_const_QPainterPath_R(self, path)
    end
    
    def map_to_item(item : GraphicsItem, x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal(self, item, x, y))
    end
    
    def map_to_parent(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToParent_qreal_qreal(self, x, y))
    end
    
    def map_to_scene(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapToScene_qreal_qreal(self, x, y))
    end
    
    def map_to_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h)
    end
    
    def map_to_parent(x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToParent_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def map_to_scene(x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapToScene_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def map_rect_to_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h))
    end
    
    def map_rect_to_parent(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToParent_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    
    def map_rect_to_scene(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectToScene_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    
    def map_from_item(item : GraphicsItem, x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal(self, item, x, y))
    end
    
    def map_from_parent(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromParent_qreal_qreal(self, x, y))
    end
    
    def map_from_scene(x : Float64, y : Float64) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsItem_mapFromScene_qreal_qreal(self, x, y))
    end
    
    def map_from_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h)
    end
    
    def map_from_parent(x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromParent_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def map_from_scene(x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygonF*
      Binding.bg_QGraphicsItem_mapFromScene_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def map_rect_from_item(item : GraphicsItem, x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromItem_const_QGraphicsItem_X_qreal_qreal_qreal_qreal(self, item, x, y, w, h))
    end
    
    def map_rect_from_parent(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromParent_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    
    def map_rect_from_scene(x : Float64, y : Float64, w : Float64, h : Float64) : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_mapRectFromScene_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    
    def is_ancestor_of(child : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isAncestorOf_const_QGraphicsItem_X(self, child)
    end
    
    def common_ancestor_item(other : GraphicsItem) : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsItem_commonAncestorItem_const_QGraphicsItem_X(self, other))
    end
    
    def under_mouse?() : Bool
      Binding.bg_QGraphicsItem_isUnderMouse_(self)
    end
    
    def data(key : Int32) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_data_int(self, key))
    end
    
    def set_data(key : Int32, value : Variant) : Void
      Binding.bg_QGraphicsItem_setData_int_const_QVariant_R(self, key, (value.to_unsafe))
    end
    
    def input_method_hints() : InputMethodHints
      Binding.bg_QGraphicsItem_inputMethodHints_(self)
    end
    
    def input_method_hints=(hints : InputMethodHints) : Void
      Binding.bg_QGraphicsItem_setInputMethodHints_Qt__InputMethodHints(self, hints)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsItem_type_(self)
    end
    
    def install_scene_event_filter(filter_item : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_installSceneEventFilter_QGraphicsItem_X(self, filter_item)
    end
    
    def remove_scene_event_filter(filter_item : GraphicsItem) : Void
      Binding.bg_QGraphicsItem_removeSceneEventFilter_QGraphicsItem_X(self, filter_item)
    end
    
    protected def update_micro_focus() : Void
      Binding.bg_QGraphicsItem_updateMicroFocus_(self)
    end
    
    protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(self, watched, event)
    end
    
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEvent_QEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(self, change, (value.to_unsafe)))
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    protected def initialize(dd : Binding::QGraphicsItemPrivate*, parent : GraphicsItem)
      result = Binding.bg_QGraphicsItem__CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsItem.new(
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsItem_JUMPTABLE_BgJumptable_QGraphicsItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def add_to_index() : Void
      Binding.bg_QGraphicsItem_addToIndex_(self)
    end
    
    protected def remove_from_index() : Void
      Binding.bg_QGraphicsItem_removeFromIndex_(self)
    end
    
    protected def prepare_geometry_change() : Void
      Binding.bg_QGraphicsItem_prepareGeometryChange_(self)
    end
    
    TYPE = 1u32
    USER_TYPE = 65536u32
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QGraphicsItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsItem)
      end
      def advance(phase : Int32) : Void
        Binding.bg_QGraphicsItem_advance_SUPER_int(@myself, phase)
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(@myself, other, mode)
      end
      
      def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(@myself, path, mode)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsItem_type_SUPER_(@myself)
      end
      
      protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(@myself, watched, event)
      end
      
      protected def scene_event(event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
        Binding.bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
        Binding.bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(@myself, change, (value.to_unsafe)))
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
    enum Flag : UInt32
      ItemIsMovable = 1
      ItemIsSelectable = 2
      ItemIsFocusable = 4
      ItemClipsToShape = 8
      ItemClipsChildrenToShape = 16
      ItemIgnoresTransformations = 32
      ItemIgnoresParentOpacity = 64
      ItemDoesntPropagateOpacityToChildren = 128
      ItemStacksBehindParent = 256
      ItemUsesExtendedStyleOption = 512
      ItemHasNoContents = 1024
      ItemSendsGeometryChanges = 2048
      ItemAcceptsInputMethod = 4096
      ItemNegativeZStacksBehindParent = 8192
      ItemIsPanel = 16384
      ItemIsFocusScope = 32768
      ItemSendsScenePositionChanges = 65536
      ItemStopsClickFocusPropagation = 131072
      ItemStopsFocusHandling = 262144
      ItemContainsChildrenInShape = 524288
    end
    @[Flags]
    enum Flags : UInt32
      ItemIsMovable = 1
      ItemIsSelectable = 2
      ItemIsFocusable = 4
      ItemClipsToShape = 8
      ItemClipsChildrenToShape = 16
      ItemIgnoresTransformations = 32
      ItemIgnoresParentOpacity = 64
      ItemDoesntPropagateOpacityToChildren = 128
      ItemStacksBehindParent = 256
      ItemUsesExtendedStyleOption = 512
      ItemHasNoContents = 1024
      ItemSendsGeometryChanges = 2048
      ItemAcceptsInputMethod = 4096
      ItemNegativeZStacksBehindParent = 8192
      ItemIsPanel = 16384
      ItemIsFocusScope = 32768
      ItemSendsScenePositionChanges = 65536
      ItemStopsClickFocusPropagation = 131072
      ItemStopsFocusHandling = 262144
      ItemContainsChildrenInShape = 524288
    end
    enum Change : UInt32
      ItemPositionChange = 0
      ItemMatrixChange = 1
      ItemVisibleChange = 2
      ItemEnabledChange = 3
      ItemSelectedChange = 4
      ItemParentChange = 5
      ItemChildAddedChange = 6
      ItemChildRemovedChange = 7
      ItemTransformChange = 8
      ItemPositionHasChanged = 9
      ItemTransformHasChanged = 10
      ItemSceneChange = 11
      ItemVisibleHasChanged = 12
      ItemEnabledHasChanged = 13
      ItemSelectedHasChanged = 14
      ItemParentHasChanged = 15
      ItemSceneHasChanged = 16
      ItemCursorChange = 17
      ItemCursorHasChanged = 18
      ItemToolTipChange = 19
      ItemToolTipHasChanged = 20
      ItemFlagsChange = 21
      ItemFlagsHaveChanged = 22
      ItemZValueChange = 23
      ItemZValueHasChanged = 24
      ItemOpacityChange = 25
      ItemOpacityHasChanged = 26
      ItemScenePositionHasChanged = 27
      ItemRotationChange = 28
      ItemRotationHasChanged = 29
      ItemScaleChange = 30
      ItemScaleHasChanged = 31
      ItemTransformOriginPointChange = 32
      ItemTransformOriginPointHasChanged = 33
    end
    enum CacheMode : UInt32
      NoCache = 0
      ItemCoordinateCache = 1
      DeviceCoordinateCache = 2
    end
    enum PanelModality : UInt32
      NonModal = 0
      PanelModal = 1
      SceneModal = 2
    end
    enum Extension : UInt32
      UserExtension = 2147483648
    end
  end
  abstract class GraphicsObject < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsObject_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsObject_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsObject_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsObject_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsObject__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsObject)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsObject.new(
      bg_QGraphicsObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|ev| self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsObject_JUMPTABLE_BgJumptable_QGraphicsObject_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def grab_gesture(type : GestureType) : Void
      Binding.bg_QGraphicsObject_grabGesture_Qt__GestureType(self, type)
    end
    
    def grab_gesture(type : GestureType, flags : GestureFlags) : Void
      Binding.bg_QGraphicsObject_grabGesture_Qt__GestureType_Qt__GestureFlags(self, type, flags)
    end
    
    def ungrab_gesture(type : GestureType) : Void
      Binding.bg_QGraphicsObject_ungrabGesture_Qt__GestureType(self, type)
    end
    
    protected def update_micro_focus() : Void
      Binding.bg_QGraphicsObject_updateMicroFocus_(self)
    end
    
    def parent_changed() : Void
      Binding.bg_QGraphicsObject_parentChanged_(self)
    end
    
    def opacity_changed() : Void
      Binding.bg_QGraphicsObject_opacityChanged_(self)
    end
    
    def visible_changed() : Void
      Binding.bg_QGraphicsObject_visibleChanged_(self)
    end
    
    def enabled_changed() : Void
      Binding.bg_QGraphicsObject_enabledChanged_(self)
    end
    
    def x_changed() : Void
      Binding.bg_QGraphicsObject_xChanged_(self)
    end
    
    def y_changed() : Void
      Binding.bg_QGraphicsObject_yChanged_(self)
    end
    
    def z_changed() : Void
      Binding.bg_QGraphicsObject_zChanged_(self)
    end
    
    def rotation_changed() : Void
      Binding.bg_QGraphicsObject_rotationChanged_(self)
    end
    
    def scale_changed() : Void
      Binding.bg_QGraphicsObject_scaleChanged_(self)
    end
    
    def children_changed() : Void
      Binding.bg_QGraphicsObject_childrenChanged_(self)
    end
    
    def width_changed() : Void
      Binding.bg_QGraphicsObject_widthChanged_(self)
    end
    
    def height_changed() : Void
      Binding.bg_QGraphicsObject_heightChanged_(self)
    end
    
    protected def initialize(dd : Binding::QGraphicsItemPrivate*, parent : GraphicsItem)
      result = Binding.bg_QGraphicsObject__CONSTRUCT_QGraphicsItemPrivate_R_QGraphicsItem_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsObject)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify advance bounding_rect shape contains collides_with_item collides_with_path is_obscured_by opaque_area paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsObject.new(
      bg_QGraphicsObject_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsObject_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|ev| self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsObject_JUMPTABLE_BgJumptable_QGraphicsObject_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def event(ev : Event) : Bool
      Binding.bg_QGraphicsObject_event_QEvent_X(self, ev)
    end
    
    def as_graphics_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsObject_AS_GraphicsItem_(self))
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def advance(phase : Int32) : Void
      Binding.bg_QGraphicsItem_advance_int(self, phase)
    end
    
    abstract def bounding_rect() : RectF
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsItem_contains_const_QPointF_R(self, point)
    end
    
    def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, other, mode)
    end
    
    def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_opaqueArea_(self)
    end
    
    abstract def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
    def type() : Int32
      Binding.bg_QGraphicsItem_type_(self)
    end
    
    protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(self, watched, event)
    end
    
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEvent_QEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(self, change, (value.to_unsafe)))
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsObject_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_parent_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_parentChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_opacity_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_opacityChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_visible_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_visibleChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_enabled_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_enabledChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_x_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_xChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_y_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_yChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_z_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_zChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_rotation_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_rotationChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_scale_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_scaleChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_children_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_childrenChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_width_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_widthChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_height_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_heightChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QGraphicsObject*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsObject)
      end
      protected def event(ev : Event) : Bool
        Binding.bg_QGraphicsObject_event_SUPER_QEvent_X(@myself, ev)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      def advance(phase : Int32) : Void
        Binding.bg_QGraphicsItem_advance_SUPER_int(@myself, phase)
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(@myself, other, mode)
      end
      
      def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(@myself, path, mode)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsItem_type_SUPER_(@myself)
      end
      
      protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(@myself, watched, event)
      end
      
      protected def scene_event(event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
        Binding.bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
        Binding.bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(@myself, change, (value.to_unsafe)))
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  abstract class AbstractGraphicsShapeItem < GraphicsItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QAbstractGraphicsShapeItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractGraphicsShapeItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ is_obscured_by opaque_area advance bounding_rect shape contains collides_with_item collides_with_path paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractGraphicsShapeItem.new(
      bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QAbstractGraphicsShapeItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractGraphicsShapeItem_JUMPTABLE_BgJumptable_QAbstractGraphicsShapeItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def pen() : Binding::QPen*
      Binding.bg_QAbstractGraphicsShapeItem_pen_(self)
    end
    
    def pen=(pen : Binding::QPen*) : Void
      Binding.bg_QAbstractGraphicsShapeItem_setPen_const_QPen_R(self, pen)
    end
    
    def brush() : Brush
      Brush.new(unwrap: Binding.bg_QAbstractGraphicsShapeItem_brush_(self))
    end
    
    def brush=(brush : Brush) : Void
      Binding.bg_QAbstractGraphicsShapeItem_setBrush_const_QBrush_R(self, brush)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QAbstractGraphicsShapeItem_opaqueArea_(self)
    end
    
    protected def initialize(dd : Binding::QAbstractGraphicsShapeItemPrivate*, parent : GraphicsItem)
      result = Binding.bg_QAbstractGraphicsShapeItem__CONSTRUCT_QAbstractGraphicsShapeItemPrivate_R_QGraphicsItem_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(AbstractGraphicsShapeItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ is_obscured_by opaque_area advance bounding_rect shape contains collides_with_item collides_with_path paint type scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QAbstractGraphicsShapeItem.new(
      bg_QAbstractGraphicsShapeItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QAbstractGraphicsShapeItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QAbstractGraphicsShapeItem_JUMPTABLE_BgJumptable_QAbstractGraphicsShapeItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def advance(phase : Int32) : Void
      Binding.bg_QGraphicsItem_advance_int(self, phase)
    end
    
    abstract def bounding_rect() : RectF
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsItem_contains_const_QPointF_R(self, point)
    end
    
    def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, other, mode)
    end
    
    def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    
    abstract def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
    def type() : Int32
      Binding.bg_QGraphicsItem_type_(self)
    end
    
    protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(self, watched, event)
    end
    
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEvent_QEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(self, change, (value.to_unsafe)))
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    def initialize(unwrap : Binding::QAbstractGraphicsShapeItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : AbstractGraphicsShapeItem)
      end
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QAbstractGraphicsShapeItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QAbstractGraphicsShapeItem_opaqueArea_SUPER_(@myself)
      end
      
      def advance(phase : Int32) : Void
        Binding.bg_QGraphicsItem_advance_SUPER_int(@myself, phase)
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(@myself, other, mode)
      end
      
      def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(@myself, path, mode)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsItem_type_SUPER_(@myself)
      end
      
      protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(@myself, watched, event)
      end
      
      protected def scene_event(event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
        Binding.bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
        Binding.bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(@myself, change, (value.to_unsafe)))
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsPathItem < AbstractGraphicsShapeItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsPathItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPathItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsPathItem.new(
      bg_QGraphicsPathItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsPathItem_JUMPTABLE_BgJumptable_QGraphicsPathItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(path : Binding::QPainterPath*, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsPathItem__CONSTRUCT_const_QPainterPath_R_QGraphicsItem_X(path, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPathItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsPathItem.new(
      bg_QGraphicsPathItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsPathItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsPathItem_JUMPTABLE_BgJumptable_QGraphicsPathItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def path() : Binding::QPainterPath*
      Binding.bg_QGraphicsPathItem_path_(self)
    end
    
    def path=(path : Binding::QPainterPath*) : Void
      Binding.bg_QGraphicsPathItem_setPath_const_QPainterPath_R(self, path)
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsPathItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsPathItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsPathItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsPathItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsPathItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsPathItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsPathItem_type_(self)
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsPathItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsPathItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsPathItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    TYPE = 2u32
    def initialize(unwrap : Binding::QGraphicsPathItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsPathItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsPathItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsPathItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsPathItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsPathItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsPathItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsPathItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsPathItem_type_SUPER_(@myself)
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsPathItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsPathItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsPathItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsRectItem < AbstractGraphicsShapeItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsRectItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsRectItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsRectItem.new(
      bg_QGraphicsRectItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsRectItem_JUMPTABLE_BgJumptable_QGraphicsRectItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(rect : RectF, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsRectItem__CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsRectItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsRectItem.new(
      bg_QGraphicsRectItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsRectItem_JUMPTABLE_BgJumptable_QGraphicsRectItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(x : Float64, y : Float64, w : Float64, h : Float64, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsRectItem__CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x, y, w, h, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsRectItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsRectItem.new(
      bg_QGraphicsRectItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsRectItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsRectItem_JUMPTABLE_BgJumptable_QGraphicsRectItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsRectItem_rect_(self))
    end
    
    def rect=(rect : RectF) : Void
      Binding.bg_QGraphicsRectItem_setRect_const_QRectF_R(self, rect)
    end
    
    def set_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsRectItem_setRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsRectItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsRectItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsRectItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsRectItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsRectItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsRectItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsRectItem_type_(self)
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsRectItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsRectItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsRectItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    TYPE = 3u32
    def initialize(unwrap : Binding::QGraphicsRectItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsRectItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsRectItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsRectItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsRectItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsRectItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsRectItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsRectItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsRectItem_type_SUPER_(@myself)
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsRectItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsRectItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsRectItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsEllipseItem < AbstractGraphicsShapeItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsEllipseItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsEllipseItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsEllipseItem.new(
      bg_QGraphicsEllipseItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsEllipseItem_JUMPTABLE_BgJumptable_QGraphicsEllipseItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(rect : RectF, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsEllipseItem__CONSTRUCT_const_QRectF_R_QGraphicsItem_X(rect, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsEllipseItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsEllipseItem.new(
      bg_QGraphicsEllipseItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsEllipseItem_JUMPTABLE_BgJumptable_QGraphicsEllipseItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(x : Float64, y : Float64, w : Float64, h : Float64, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsEllipseItem__CONSTRUCT_qreal_qreal_qreal_qreal_QGraphicsItem_X(x, y, w, h, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsEllipseItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsEllipseItem.new(
      bg_QGraphicsEllipseItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsEllipseItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsEllipseItem_JUMPTABLE_BgJumptable_QGraphicsEllipseItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsEllipseItem_rect_(self))
    end
    
    def rect=(rect : RectF) : Void
      Binding.bg_QGraphicsEllipseItem_setRect_const_QRectF_R(self, rect)
    end
    
    def set_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsEllipseItem_setRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def start_angle() : Int32
      Binding.bg_QGraphicsEllipseItem_startAngle_(self)
    end
    
    def start_angle=(angle : Int32) : Void
      Binding.bg_QGraphicsEllipseItem_setStartAngle_int(self, angle)
    end
    
    def span_angle() : Int32
      Binding.bg_QGraphicsEllipseItem_spanAngle_(self)
    end
    
    def span_angle=(angle : Int32) : Void
      Binding.bg_QGraphicsEllipseItem_setSpanAngle_int(self, angle)
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsEllipseItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsEllipseItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsEllipseItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsEllipseItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsEllipseItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsEllipseItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsEllipseItem_type_(self)
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsEllipseItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsEllipseItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsEllipseItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    TYPE = 4u32
    def initialize(unwrap : Binding::QGraphicsEllipseItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsEllipseItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsEllipseItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsEllipseItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsEllipseItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsEllipseItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsEllipseItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsEllipseItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsEllipseItem_type_SUPER_(@myself)
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsEllipseItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsEllipseItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsEllipseItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsPolygonItem < AbstractGraphicsShapeItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsPolygonItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPolygonItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsPolygonItem.new(
      bg_QGraphicsPolygonItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsPolygonItem_JUMPTABLE_BgJumptable_QGraphicsPolygonItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(polygon : Binding::QPolygonF*, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsPolygonItem__CONSTRUCT_const_QPolygonF_R_QGraphicsItem_X(polygon, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPolygonItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsPolygonItem.new(
      bg_QGraphicsPolygonItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsPolygonItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsPolygonItem_JUMPTABLE_BgJumptable_QGraphicsPolygonItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def polygon() : Binding::QPolygonF*
      Binding.bg_QGraphicsPolygonItem_polygon_(self)
    end
    
    def polygon=(polygon : Binding::QPolygonF*) : Void
      Binding.bg_QGraphicsPolygonItem_setPolygon_const_QPolygonF_R(self, polygon)
    end
    
    def fill_rule() : FillRule
      Binding.bg_QGraphicsPolygonItem_fillRule_(self)
    end
    
    def fill_rule=(rule : FillRule) : Void
      Binding.bg_QGraphicsPolygonItem_setFillRule_Qt__FillRule(self, rule)
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsPolygonItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsPolygonItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsPolygonItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsPolygonItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsPolygonItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsPolygonItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsPolygonItem_type_(self)
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsPolygonItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsPolygonItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsPolygonItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    TYPE = 5u32
    def initialize(unwrap : Binding::QGraphicsPolygonItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsPolygonItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsPolygonItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsPolygonItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsPolygonItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsPolygonItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsPolygonItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsPolygonItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsPolygonItem_type_SUPER_(@myself)
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsPolygonItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsPolygonItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsPolygonItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsPixmapItem < GraphicsItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsPixmapItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPixmapItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsPixmapItem.new(
      bg_QGraphicsPixmapItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsPixmapItem_JUMPTABLE_BgJumptable_QGraphicsPixmapItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(pixmap : Pixmap, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsPixmapItem__CONSTRUCT_const_QPixmap_R_QGraphicsItem_X(pixmap, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsPixmapItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension advance collides_with_item collides_with_path scene_event_filter scene_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event hover_enter_event hover_move_event hover_leave_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event input_method_query item_change ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsPixmapItem.new(
      bg_QGraphicsPixmapItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsPixmapItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_advance_int: BindgenHelper.wrap_proc({% if forwarded.includes?("advance") %} Proc(Int32, Void).new{|phase| self.advance(phase) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_item") %} Proc(Binding::QGraphicsItem*, ItemSelectionMode, Bool).new{|other, mode| self.collides_with_item(GraphicsItemImpl.new(unwrap: other), mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode: BindgenHelper.wrap_proc({% if forwarded.includes?("collides_with_path") %} Proc(Binding::QPainterPath*, ItemSelectionMode, Bool).new{|path, mode| self.collides_with_path(path, mode) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event_filter") %} Proc(Binding::QGraphicsItem*, Binding::QEvent*, Bool).new{|watched, event| self.scene_event_filter(GraphicsItemImpl.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsPixmapItem_JUMPTABLE_BgJumptable_QGraphicsPixmapItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def pixmap() : Pixmap
      Pixmap.new(unwrap: Binding.bg_QGraphicsPixmapItem_pixmap_(self))
    end
    
    def pixmap=(pixmap : Pixmap) : Void
      Binding.bg_QGraphicsPixmapItem_setPixmap_const_QPixmap_R(self, pixmap)
    end
    
    def transformation_mode() : TransformationMode
      Binding.bg_QGraphicsPixmapItem_transformationMode_(self)
    end
    
    def transformation_mode=(mode : TransformationMode) : Void
      Binding.bg_QGraphicsPixmapItem_setTransformationMode_Qt__TransformationMode(self, mode)
    end
    
    def offset() : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsPixmapItem_offset_(self))
    end
    
    def offset=(offset : PointF) : Void
      Binding.bg_QGraphicsPixmapItem_setOffset_const_QPointF_R(self, offset)
    end
    
    def set_offset(x : Float64, y : Float64) : Void
      Binding.bg_QGraphicsPixmapItem_setOffset_qreal_qreal(self, x, y)
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsPixmapItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsPixmapItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsPixmapItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget) : Void
      Binding.bg_QGraphicsPixmapItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsPixmapItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsPixmapItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsPixmapItem_type_(self)
    end
    
    def shape_mode() : GraphicsPixmapItem::ShapeMode
      Binding.bg_QGraphicsPixmapItem_shapeMode_(self)
    end
    
    def shape_mode=(mode : GraphicsPixmapItem::ShapeMode) : Void
      Binding.bg_QGraphicsPixmapItem_setShapeMode_QGraphicsPixmapItem__ShapeMode(self, mode)
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsPixmapItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsPixmapItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsPixmapItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    def advance(phase : Int32) : Void
      Binding.bg_QGraphicsItem_advance_int(self, phase)
    end
    
    def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithItem_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, other, mode)
    end
    
    def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
      Binding.bg_QGraphicsItem_collidesWithPath_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    
    protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEventFilter_QGraphicsItem_X_QEvent_X(self, watched, event)
    end
    
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsItem_sceneEvent_QEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsItem_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(self, change, (value.to_unsafe)))
    end
    
    TYPE = 7u32
    def initialize(unwrap : Binding::QGraphicsPixmapItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsPixmapItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsPixmapItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsPixmapItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsPixmapItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget) : Void
        Binding.bg_QGraphicsPixmapItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsPixmapItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsPixmapItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsPixmapItem_type_SUPER_(@myself)
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsPixmapItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsPixmapItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsPixmapItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
      def advance(phase : Int32) : Void
        Binding.bg_QGraphicsItem_advance_SUPER_int(@myself, phase)
      end
      
      def collides_with_item(other : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithItem_SUPER_const_QGraphicsItem_X_Qt__ItemSelectionMode(@myself, other, mode)
      end
      
      def collides_with_path(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Bool
        Binding.bg_QGraphicsItem_collidesWithPath_SUPER_const_QPainterPath_R_Qt__ItemSelectionMode(@myself, path, mode)
      end
      
      protected def scene_event_filter(watched : GraphicsItem, event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEventFilter_SUPER_QGraphicsItem_X_QEvent_X(@myself, watched, event)
      end
      
      protected def scene_event(event : Event) : Bool
        Binding.bg_QGraphicsItem_sceneEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
        Binding.bg_QGraphicsItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsItem_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsItem_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
        Binding.bg_QGraphicsItem_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsItem_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsItem_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(@myself, change, (value.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
    enum ShapeMode : UInt32
      MaskShape = 0
      BoundingRectShape = 1
      HeuristicMaskShape = 2
    end
  end
  class GraphicsTextItem < GraphicsObject
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsTextItem_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsTextItem_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsTextItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall bounding_rect shape contains paint is_obscured_by opaque_area type scene_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event context_menu_event key_press_event key_release_event focus_in_event focus_out_event drag_enter_event drag_leave_event drag_move_event drop_event input_method_event hover_enter_event hover_move_event hover_leave_event input_method_query supports_extension set_extension extension event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsTextItem.new(
      bg_QGraphicsTextItem_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|ev| self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsTextItem_JUMPTABLE_BgJumptable_QGraphicsTextItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsTextItem__CONSTRUCT_const_QString_R_QGraphicsItem_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall bounding_rect shape contains paint is_obscured_by opaque_area type scene_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event context_menu_event key_press_event key_release_event focus_in_event focus_out_event drag_enter_event drag_leave_event drag_move_event drop_event input_method_event hover_enter_event hover_move_event hover_leave_event input_method_query supports_extension set_extension extension event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsTextItem.new(
      bg_QGraphicsTextItem_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_enter_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsTextItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|ev| self.event(Event.new(unwrap: ev)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsTextItem_JUMPTABLE_BgJumptable_QGraphicsTextItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_toHtml_(self))
    end
    
    def html=(html : String) : Void
      Binding.bg_QGraphicsTextItem_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(html))
    end
    
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTextItem_toPlainText_(self))
    end
    
    def plain_text=(text : String) : Void
      Binding.bg_QGraphicsTextItem_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsTextItem_font_(self))
    end
    
    def font=(font : Font) : Void
      Binding.bg_QGraphicsTextItem_setFont_const_QFont_R(self, font)
    end
    
    def default_text_color=(c : Color) : Void
      Binding.bg_QGraphicsTextItem_setDefaultTextColor_const_QColor_R(self, c)
    end
    
    def default_text_color() : Color
      Color.new(unwrap: Binding.bg_QGraphicsTextItem_defaultTextColor_(self))
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsTextItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsTextItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsTextItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget) : Void
      Binding.bg_QGraphicsTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsTextItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsTextItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsTextItem_type_(self)
    end
    
    def text_width=(width : Float64) : Void
      Binding.bg_QGraphicsTextItem_setTextWidth_qreal(self, width)
    end
    
    def text_width() : Float64
      Binding.bg_QGraphicsTextItem_textWidth_(self)
    end
    
    def adjust_size() : Void
      Binding.bg_QGraphicsTextItem_adjustSize_(self)
    end
    
    def document=(document : TextDocument) : Void
      Binding.bg_QGraphicsTextItem_setDocument_QTextDocument_X(self, document)
    end
    
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QGraphicsTextItem_document_(self))
    end
    
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QGraphicsTextItem_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    
    def text_interaction_flags() : TextInteractionFlags
      Binding.bg_QGraphicsTextItem_textInteractionFlags_(self)
    end
    
    def tab_changes_focus=(b : Bool) : Void
      Binding.bg_QGraphicsTextItem_setTabChangesFocus_bool(self, b)
    end
    
    def tab_changes_focus() : Bool
      Binding.bg_QGraphicsTextItem_tabChangesFocus_(self)
    end
    
    def open_external_links=(open : Bool) : Void
      Binding.bg_QGraphicsTextItem_setOpenExternalLinks_bool(self, open)
    end
    
    def open_external_links() : Bool
      Binding.bg_QGraphicsTextItem_openExternalLinks_(self)
    end
    
    def text_cursor=(cursor : TextCursor) : Void
      Binding.bg_QGraphicsTextItem_setTextCursor_const_QTextCursor_R(self, cursor)
    end
    
    def text_cursor() : TextCursor
      TextCursor.new(unwrap: Binding.bg_QGraphicsTextItem_textCursor_(self))
    end
    
    def link_activated(unnamed_arg_0 : String) : Void
      Binding.bg_QGraphicsTextItem_linkActivated_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def link_hovered(unnamed_arg_0 : String) : Void
      Binding.bg_QGraphicsTextItem_linkHovered_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsTextItem_sceneEvent_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsTextItem_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsTextItem_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsTextItem_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsTextItem_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsTextItem_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsTextItem_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsTextItem_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsTextItem_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsTextItem_hoverEnterEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsTextItem_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsTextItem_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsTextItem_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsTextItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsTextItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    protected def event(ev : Event) : Bool
      Binding.bg_QGraphicsObject_event_QEvent_X(self, ev)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsTextItem_staticMetaObject_STATIC_GETTER_()
    end
    
    TYPE = 8u32
    def initialize(unwrap : Binding::QGraphicsTextItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsTextItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsTextItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsTextItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsTextItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget) : Void
        Binding.bg_QGraphicsTextItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsTextItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsTextItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsTextItem_type_SUPER_(@myself)
      end
      
      protected def scene_event(event : Event) : Bool
        Binding.bg_QGraphicsTextItem_sceneEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsTextItem_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsTextItem_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsTextItem_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsTextItem_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
        Binding.bg_QGraphicsTextItem_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsTextItem_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsTextItem_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsTextItem_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsTextItem_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsTextItem_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsTextItem_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsTextItem_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsTextItem_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsTextItem_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def hover_enter_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsTextItem_hoverEnterEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsTextItem_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsTextItem_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsTextItem_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsTextItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsTextItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsTextItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
      protected def event(ev : Event) : Bool
        Binding.bg_QGraphicsObject_event_SUPER_QEvent_X(@myself, ev)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
    def on_link_activated(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsTextItem_CONNECT_linkActivated_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_link_hovered(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsTextItem_CONNECT_linkHovered_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
  end
  class GraphicsSimpleTextItem < AbstractGraphicsShapeItem
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsSimpleTextItem__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsSimpleTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsSimpleTextItem.new(
      bg_QGraphicsSimpleTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsSimpleTextItem_JUMPTABLE_BgJumptable_QGraphicsSimpleTextItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsSimpleTextItem__CONSTRUCT_const_QString_R_QGraphicsItem_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsSimpleTextItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ bounding_rect shape contains paint is_obscured_by opaque_area type supports_extension set_extension extension ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsSimpleTextItem.new(
      bg_QGraphicsSimpleTextItem_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_contains_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("contains") %} Proc(Binding::QPointF, Bool).new{|point| self.contains(PointF.new(unwrap: point)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("is_obscured_by") %} Proc(Binding::QGraphicsItem*, Bool).new{|item| self.is_obscured_by(GraphicsItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_opaqueArea_: BindgenHelper.wrap_proc({% if forwarded.includes?("opaque_area") %} Proc(Binding::QPainterPath*).new{ self.opaque_area() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension: BindgenHelper.wrap_proc({% if forwarded.includes?("supports_extension") %} Proc(GraphicsItem::Extension, Bool).new{|extension| self.supports_extension(extension) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_extension") %} Proc(GraphicsItem::Extension, Binding::CrystalVariant, Void).new{|extension, variant| self.set_extension(extension, Qt::Variant.new(variant)) } {% else %} nil {% end %}),
      bg_QGraphicsSimpleTextItem_extension_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("extension") %} Proc(Binding::CrystalVariant, Binding::CrystalVariant).new{|variant| (self.extension(Qt::Variant.new(variant)).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsSimpleTextItem_JUMPTABLE_BgJumptable_QGraphicsSimpleTextItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def text=(text : String) : Void
      Binding.bg_QGraphicsSimpleTextItem_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsSimpleTextItem_text_(self))
    end
    
    def font=(font : Font) : Void
      Binding.bg_QGraphicsSimpleTextItem_setFont_const_QFont_R(self, font)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsSimpleTextItem_font_(self))
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsSimpleTextItem_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsSimpleTextItem_shape_(self)
    end
    
    def contains(point : PointF) : Bool
      Binding.bg_QGraphicsSimpleTextItem_contains_const_QPointF_R(self, point)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget) : Void
      Binding.bg_QGraphicsSimpleTextItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def is_obscured_by(item : GraphicsItem) : Bool
      Binding.bg_QGraphicsSimpleTextItem_isObscuredBy_const_QGraphicsItem_X(self, item)
    end
    
    def opaque_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsSimpleTextItem_opaqueArea_(self)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsSimpleTextItem_type_(self)
    end
    
    protected def supports_extension(extension : GraphicsItem::Extension) : Bool
      Binding.bg_QGraphicsSimpleTextItem_supportsExtension_QGraphicsItem__Extension(self, extension)
    end
    
    protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
      Binding.bg_QGraphicsSimpleTextItem_setExtension_QGraphicsItem__Extension_const_QVariant_R(self, extension, (variant.to_unsafe))
    end
    
    protected def extension(variant : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsSimpleTextItem_extension_const_QVariant_R(self, (variant.to_unsafe)))
    end
    
    TYPE = 9u32
    def initialize(unwrap : Binding::QGraphicsSimpleTextItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsSimpleTextItem)
      end
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsSimpleTextItem_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsSimpleTextItem_shape_SUPER_(@myself)
      end
      
      def contains(point : PointF) : Bool
        Binding.bg_QGraphicsSimpleTextItem_contains_SUPER_const_QPointF_R(@myself, point)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget) : Void
        Binding.bg_QGraphicsSimpleTextItem_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def is_obscured_by(item : GraphicsItem) : Bool
        Binding.bg_QGraphicsSimpleTextItem_isObscuredBy_SUPER_const_QGraphicsItem_X(@myself, item)
      end
      
      def opaque_area() : Binding::QPainterPath*
        Binding.bg_QGraphicsSimpleTextItem_opaqueArea_SUPER_(@myself)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsSimpleTextItem_type_SUPER_(@myself)
      end
      
      protected def supports_extension(extension : GraphicsItem::Extension) : Bool
        Binding.bg_QGraphicsSimpleTextItem_supportsExtension_SUPER_QGraphicsItem__Extension(@myself, extension)
      end
      
      protected def set_extension(extension : GraphicsItem::Extension, variant : Variant) : Void
        Binding.bg_QGraphicsSimpleTextItem_setExtension_SUPER_QGraphicsItem__Extension_const_QVariant_R(@myself, extension, (variant.to_unsafe))
      end
      
      protected def extension(variant : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsSimpleTextItem_extension_SUPER_const_QVariant_R(@myself, (variant.to_unsafe)))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsWidget < GraphicsObject
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsWidget_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : GraphicsItem? = nil)
      result = Binding.bg_QGraphicsWidget__CONSTRUCT_QGraphicsItem_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint size_hint update_geometry item_change property_change scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRectF*, Void).new{|rect| self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} Proc(Float64*, Float64*, Float64*, Float64*, Void).new{|left, top, right, bottom| self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint_window_frame(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} Proc(Binding::QStyleOption*, Void).new{|option| self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*).new{|which| self.size_hint(which) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*, Binding::QSizeF*).new{|which, constraint| self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} Proc(Void).new{ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("property_change") %} Proc(Binding::CrystalString, Binding::CrystalVariant, Binding::CrystalVariant).new{|property_name, value| (self.property_change(Qt::Converter::QString.unwrap(property_name), Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} Proc(Binding::QEvent*, Bool).new{|e| self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} Proc(Binding::QPointF, WindowFrameSection).new{|pos| self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QGraphicsSceneMoveEvent*, Void).new{|event| self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} Proc(Void).new{ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QGraphicsSceneResizeEvent*, Void).new{|event| self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsWidget_JUMPTABLE_BgJumptable_QGraphicsWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : GraphicsItem?, w_flags : WindowFlags)
      result = Binding.bg_QGraphicsWidget__CONSTRUCT_QGraphicsItem_X_Qt__WindowFlags(parent, w_flags)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint size_hint update_geometry item_change property_change scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRectF*, Void).new{|rect| self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} Proc(Float64*, Float64*, Float64*, Float64*, Void).new{|left, top, right, bottom| self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint_window_frame(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} Proc(Binding::QStyleOption*, Void).new{|option| self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*).new{|which| self.size_hint(which) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*, Binding::QSizeF*).new{|which, constraint| self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} Proc(Void).new{ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("property_change") %} Proc(Binding::CrystalString, Binding::CrystalVariant, Binding::CrystalVariant).new{|property_name, value| (self.property_change(Qt::Converter::QString.unwrap(property_name), Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} Proc(Binding::QEvent*, Bool).new{|e| self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} Proc(Binding::QPointF, WindowFrameSection).new{|pos| self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QGraphicsSceneMoveEvent*, Void).new{|event| self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} Proc(Void).new{ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QGraphicsSceneResizeEvent*, Void).new{|event| self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsWidget_JUMPTABLE_BgJumptable_QGraphicsWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def layout() : Binding::QGraphicsLayout*
      Binding.bg_QGraphicsWidget_layout_(self)
    end
    
    def layout=(layout : Binding::QGraphicsLayout*) : Void
      Binding.bg_QGraphicsWidget_setLayout_QGraphicsLayout_X(self, layout)
    end
    
    def adjust_size() : Void
      Binding.bg_QGraphicsWidget_adjustSize_(self)
    end
    
    def layout_direction() : LayoutDirection
      Binding.bg_QGraphicsWidget_layoutDirection_(self)
    end
    
    def layout_direction=(direction : LayoutDirection) : Void
      Binding.bg_QGraphicsWidget_setLayoutDirection_Qt__LayoutDirection(self, direction)
    end
    
    def unset_layout_direction() : Void
      Binding.bg_QGraphicsWidget_unsetLayoutDirection_(self)
    end
    
    def style() : Binding::QStyle*
      Binding.bg_QGraphicsWidget_style_(self)
    end
    
    def style=(style : Binding::QStyle*) : Void
      Binding.bg_QGraphicsWidget_setStyle_QStyle_X(self, style)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsWidget_font_(self))
    end
    
    def font=(font : Font) : Void
      Binding.bg_QGraphicsWidget_setFont_const_QFont_R(self, font)
    end
    
    def palette() : Palette
      Palette.new(unwrap: Binding.bg_QGraphicsWidget_palette_(self))
    end
    
    def palette=(palette : Palette) : Void
      Binding.bg_QGraphicsWidget_setPalette_const_QPalette_R(self, palette)
    end
    
    def auto_fill_background() : Bool
      Binding.bg_QGraphicsWidget_autoFillBackground_(self)
    end
    
    def auto_fill_background=(enabled : Bool) : Void
      Binding.bg_QGraphicsWidget_setAutoFillBackground_bool(self, enabled)
    end
    
    def resize(size : Binding::QSizeF*) : Void
      Binding.bg_QGraphicsWidget_resize_const_QSizeF_R(self, size)
    end
    
    def resize(w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsWidget_resize_qreal_qreal(self, w, h)
    end
    
    def size() : Binding::QSizeF*
      Binding.bg_QGraphicsWidget_size_(self)
    end
    
    def geometry=(rect : RectF) : Void
      Binding.bg_QGraphicsWidget_setGeometry_const_QRectF_R(self, rect)
    end
    
    def set_geometry(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsWidget_setGeometry_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_rect_(self))
    end
    
    def set_contents_margins(left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
      Binding.bg_QGraphicsWidget_setContentsMargins_qreal_qreal_qreal_qreal(self, left, top, right, bottom)
    end
    
    def contents_margins=(margins : Binding::QMarginsF*) : Void
      Binding.bg_QGraphicsWidget_setContentsMargins_QMarginsF(self, margins)
    end
    
    def get_contents_margins(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
      Binding.bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X(self, left, top, right, bottom)
    end
    
    def set_window_frame_margins(left : Float64, top : Float64, right : Float64, bottom : Float64) : Void
      Binding.bg_QGraphicsWidget_setWindowFrameMargins_qreal_qreal_qreal_qreal(self, left, top, right, bottom)
    end
    
    def window_frame_margins=(margins : Binding::QMarginsF*) : Void
      Binding.bg_QGraphicsWidget_setWindowFrameMargins_QMarginsF(self, margins)
    end
    
    def get_window_frame_margins(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
      Binding.bg_QGraphicsWidget_getWindowFrameMargins_qreal_X_qreal_X_qreal_X_qreal_X(self, left, top, right, bottom)
    end
    
    def unset_window_frame_margins() : Void
      Binding.bg_QGraphicsWidget_unsetWindowFrameMargins_(self)
    end
    
    def window_frame_geometry() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_windowFrameGeometry_(self))
    end
    
    def window_frame_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_windowFrameRect_(self))
    end
    
    def window_flags() : WindowFlags
      Binding.bg_QGraphicsWidget_windowFlags_(self)
    end
    
    def window_type() : WindowType
      Binding.bg_QGraphicsWidget_windowType_(self)
    end
    
    def window_flags=(w_flags : WindowFlags) : Void
      Binding.bg_QGraphicsWidget_setWindowFlags_Qt__WindowFlags(self, w_flags)
    end
    
    def active_window?() : Bool
      Binding.bg_QGraphicsWidget_isActiveWindow_(self)
    end
    
    def window_title=(title : String) : Void
      Binding.bg_QGraphicsWidget_setWindowTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    
    def window_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsWidget_windowTitle_(self))
    end
    
    def focus_policy() : FocusPolicy
      Binding.bg_QGraphicsWidget_focusPolicy_(self)
    end
    
    def focus_policy=(policy : FocusPolicy) : Void
      Binding.bg_QGraphicsWidget_setFocusPolicy_Qt__FocusPolicy(self, policy)
    end
    
    def self.set_tab_order(first : GraphicsWidget, second : GraphicsWidget) : Void
      Binding.bg_QGraphicsWidget_setTabOrder_STATIC_QGraphicsWidget_X_QGraphicsWidget_X(first, second)
    end
    
    def focus_widget() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsWidget_focusWidget_(self))
    end
    
    def grab_shortcut(sequence : KeySequence, context : ShortcutContext = ShortcutContext::WindowShortcut) : Int32
      Binding.bg_QGraphicsWidget_grabShortcut_const_QKeySequence_R_Qt__ShortcutContext(self, sequence, context)
    end
    
    def release_shortcut(id : Int32) : Void
      Binding.bg_QGraphicsWidget_releaseShortcut_int(self, id)
    end
    
    def set_shortcut_enabled(id : Int32, enabled : Bool = true) : Void
      Binding.bg_QGraphicsWidget_setShortcutEnabled_int_bool(self, id, enabled)
    end
    
    def set_shortcut_auto_repeat(id : Int32, enabled : Bool = true) : Void
      Binding.bg_QGraphicsWidget_setShortcutAutoRepeat_int_bool(self, id, enabled)
    end
    
    def add_action(action : Action) : Void
      Binding.bg_QGraphicsWidget_addAction_QAction_X(self, action)
    end
    
    def add_actions(actions : Enumerable(Action)) : Void
      Binding.bg_QGraphicsWidget_addActions_QList_QAction_X_(self, BindgenHelper.wrap_container(Container_QList_QAction_X_, actions).to_unsafe)
    end
    
    def insert_actions(before : Action, actions : Enumerable(Action)) : Void
      Binding.bg_QGraphicsWidget_insertActions_QAction_X_QList_QAction_X_(self, before, BindgenHelper.wrap_container(Container_QList_QAction_X_, actions).to_unsafe)
    end
    
    def insert_action(before : Action, action : Action) : Void
      Binding.bg_QGraphicsWidget_insertAction_QAction_X_QAction_X(self, before, action)
    end
    
    def remove_action(action : Action) : Void
      Binding.bg_QGraphicsWidget_removeAction_QAction_X(self, action)
    end
    
    def actions() : Enumerable(Action)
      Container_QList_QAction_X_.new(unwrap: Binding.bg_QGraphicsWidget_actions_(self))
    end
    
    def set_attribute(attribute : WidgetAttribute, on : Bool = true) : Void
      Binding.bg_QGraphicsWidget_setAttribute_Qt__WidgetAttribute_bool(self, attribute, on)
    end
    
    def test_attribute(attribute : WidgetAttribute) : Bool
      Binding.bg_QGraphicsWidget_testAttribute_Qt__WidgetAttribute(self, attribute)
    end
    
    def type() : Int32
      Binding.bg_QGraphicsWidget_type_(self)
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def paint_window_frame(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsWidget_boundingRect_(self))
    end
    
    def shape() : Binding::QPainterPath*
      Binding.bg_QGraphicsWidget_shape_(self)
    end
    
    def geometry_changed() : Void
      Binding.bg_QGraphicsWidget_geometryChanged_(self)
    end
    
    def layout_changed() : Void
      Binding.bg_QGraphicsWidget_layoutChanged_(self)
    end
    
    def close() : Bool
      Binding.bg_QGraphicsWidget_close_(self)
    end
    
    protected def init_style_option(option : Binding::QStyleOption*) : Void
      Binding.bg_QGraphicsWidget_initStyleOption_QStyleOption_X(self, option)
    end
    
    protected def size_hint(which : SizeHint) : Binding::QSizeF*
      Binding.bg_QGraphicsWidget_sizeHint_Qt__SizeHint(self, which)
    end
    
    protected def size_hint(which : SizeHint, constraint : Binding::QSizeF*) : Binding::QSizeF*
      Binding.bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R(self, which, constraint)
    end
    
    protected def update_geometry() : Void
      Binding.bg_QGraphicsWidget_updateGeometry_(self)
    end
    
    protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R(self, change, (value.to_unsafe)))
    end
    
    protected def property_change(property_name : String, value : Variant) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R(self, Qt::Converter::QString.wrap(property_name), (value.to_unsafe)))
    end
    
    protected def scene_event(event : Event) : Bool
      Binding.bg_QGraphicsWidget_sceneEvent_QEvent_X(self, event)
    end
    
    protected def window_frame_event(e : Event) : Bool
      Binding.bg_QGraphicsWidget_windowFrameEvent_QEvent_X(self, e)
    end
    
    protected def window_frame_section_at(pos : PointF) : WindowFrameSection
      Binding.bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R(self, pos)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QGraphicsWidget_event_QEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_changeEvent_QEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QGraphicsWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QGraphicsWidget_focusNextPrevChild_bool(self, next_)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QGraphicsWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def move_event(event : Binding::QGraphicsSceneMoveEvent*) : Void
      Binding.bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X(self, event)
    end
    
    protected def polish_event() : Void
      Binding.bg_QGraphicsWidget_polishEvent_(self)
    end
    
    protected def resize_event(event : Binding::QGraphicsSceneResizeEvent*) : Void
      Binding.bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QGraphicsWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
      Binding.bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X(self, event)
    end
    
    protected def grab_mouse_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_grabMouseEvent_QEvent_X(self, event)
    end
    
    protected def ungrab_mouse_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X(self, event)
    end
    
    protected def grab_keyboard_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X(self, event)
    end
    
    protected def ungrab_keyboard_event(event : Event) : Void
      Binding.bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X(self, event)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QGraphicsWidgetPrivate*, parent : GraphicsItem)
      result = Binding.bg_QGraphicsWidget__CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint size_hint update_geometry item_change property_change scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRectF*, Void).new{|rect| self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} Proc(Float64*, Float64*, Float64*, Float64*, Void).new{|left, top, right, bottom| self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint_window_frame(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} Proc(Binding::QStyleOption*, Void).new{|option| self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*).new{|which| self.size_hint(which) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*, Binding::QSizeF*).new{|which, constraint| self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} Proc(Void).new{ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("property_change") %} Proc(Binding::CrystalString, Binding::CrystalVariant, Binding::CrystalVariant).new{|property_name, value| (self.property_change(Qt::Converter::QString.unwrap(property_name), Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} Proc(Binding::QEvent*, Bool).new{|e| self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} Proc(Binding::QPointF, WindowFrameSection).new{|pos| self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QGraphicsSceneMoveEvent*, Void).new{|event| self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} Proc(Void).new{ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QGraphicsSceneResizeEvent*, Void).new{|event| self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsWidget_JUMPTABLE_BgJumptable_QGraphicsWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QGraphicsWidgetPrivate*, parent : GraphicsItem, w_flags : WindowFlags)
      result = Binding.bg_QGraphicsWidget__CONSTRUCT_QGraphicsWidgetPrivate_R_QGraphicsItem_X_Qt__WindowFlags(unnamed_arg_0, parent, w_flags)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall geometry= get_contents_margins type paint paint_window_frame bounding_rect shape init_style_option size_hint size_hint update_geometry item_change property_change scene_event window_frame_event window_frame_section_at event change_event close_event focus_in_event focus_next_prev_child focus_out_event hide_event move_event polish_event resize_event show_event hover_move_event hover_leave_event grab_mouse_event ungrab_mouse_event grab_keyboard_event ungrab_keyboard_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsWidget.new(
      bg_QGraphicsWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_setGeometry_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRectF*, Void).new{|rect| self.geometry=(RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_getContentsMargins_qreal_X_qreal_X_qreal_X_qreal_X: BindgenHelper.wrap_proc({% if forwarded.includes?("get_contents_margins") %} Proc(Float64*, Float64*, Float64*, Float64*, Void).new{|left, top, right, bottom| self.get_contents_margins(left, top, right, bottom) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_type_: BindgenHelper.wrap_proc({% if forwarded.includes?("type") %} Proc(Int32).new{ self.type() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_paintWindowFrame_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_window_frame") %} Proc(Binding::QPainter*, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, option, widget| self.paint_window_frame(Painter.new(unwrap: painter), StyleOptionGraphicsItem.new(unwrap: option), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_boundingRect_: BindgenHelper.wrap_proc({% if forwarded.includes?("bounding_rect") %} Proc(Binding::QRectF*).new{ self.bounding_rect().to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_shape_: BindgenHelper.wrap_proc({% if forwarded.includes?("shape") %} Proc(Binding::QPainterPath*).new{ self.shape() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_initStyleOption_QStyleOption_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} Proc(Binding::QStyleOption*, Void).new{|option| self.init_style_option(option) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*).new{|which| self.size_hint(which) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sizeHint_Qt__SizeHint_const_QSizeF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(SizeHint, Binding::QSizeF*, Binding::QSizeF*).new{|which, constraint| self.size_hint(which, constraint) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_updateGeometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometry") %} Proc(Void).new{ self.update_geometry() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_itemChange_QGraphicsItem__GraphicsItemChange_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("item_change") %} Proc(GraphicsItem::Change, Binding::CrystalVariant, Binding::CrystalVariant).new{|change, value| (self.item_change(change, Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_propertyChange_const_QString_R_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("property_change") %} Proc(Binding::CrystalString, Binding::CrystalVariant, Binding::CrystalVariant).new{|property_name, value| (self.property_change(Qt::Converter::QString.unwrap(property_name), Qt::Variant.new(value)).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_sceneEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("scene_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.scene_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_event") %} Proc(Binding::QEvent*, Bool).new{|e| self.window_frame_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_windowFrameSectionAt_const_QPointF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("window_frame_section_at") %} Proc(Binding::QPointF, WindowFrameSection).new{|pos| self.window_frame_section_at(PointF.new(unwrap: pos)).to_unsafe } {% else %} nil {% end %}),
      bg_QGraphicsWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_moveEvent_QGraphicsSceneMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QGraphicsSceneMoveEvent*, Void).new{|event| self.move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_polishEvent_: BindgenHelper.wrap_proc({% if forwarded.includes?("polish_event") %} Proc(Void).new{ self.polish_event() } {% else %} nil {% end %}),
      bg_QGraphicsWidget_resizeEvent_QGraphicsSceneResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QGraphicsSceneResizeEvent*, Void).new{|event| self.resize_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverMoveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_move_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_hoverLeaveEvent_QGraphicsSceneHoverEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hover_leave_event") %} Proc(Binding::QGraphicsSceneHoverEvent*, Void).new{|event| self.hover_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabMouseEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_mouse_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_mouse_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_grabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("grab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.grab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsWidget_ungrabKeyboardEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("ungrab_keyboard_event") %} Proc(Binding::QEvent*, Void).new{|event| self.ungrab_keyboard_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsWidget_JUMPTABLE_BgJumptable_QGraphicsWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsWidget_staticMetaObject_STATIC_GETTER_()
    end
    
    TYPE = 11u32
    def initialize(unwrap : Binding::QGraphicsWidget*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsWidget)
      end
      def geometry=(rect : RectF) : Void
        Binding.bg_QGraphicsWidget_setGeometry_SUPER_const_QRectF_R(@myself, rect)
      end
      
      def get_contents_margins(left : Float64*, top : Float64*, right : Float64*, bottom : Float64*) : Void
        Binding.bg_QGraphicsWidget_getContentsMargins_SUPER_qreal_X_qreal_X_qreal_X_qreal_X(@myself, left, top, right, bottom)
      end
      
      def type() : Int32
        Binding.bg_QGraphicsWidget_type_SUPER_(@myself)
      end
      
      def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsWidget_paint_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def paint_window_frame(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsWidget_paintWindowFrame_SUPER_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, option, widget)
      end
      
      def bounding_rect() : RectF
        RectF.new(unwrap: Binding.bg_QGraphicsWidget_boundingRect_SUPER_(@myself))
      end
      
      def shape() : Binding::QPainterPath*
        Binding.bg_QGraphicsWidget_shape_SUPER_(@myself)
      end
      
      protected def init_style_option(option : Binding::QStyleOption*) : Void
        Binding.bg_QGraphicsWidget_initStyleOption_SUPER_QStyleOption_X(@myself, option)
      end
      
      protected def size_hint(which : SizeHint, constraint : Binding::QSizeF*) : Binding::QSizeF*
        Binding.bg_QGraphicsWidget_sizeHint_SUPER_Qt__SizeHint_const_QSizeF_R(@myself, which, constraint)
      end
      
      protected def update_geometry() : Void
        Binding.bg_QGraphicsWidget_updateGeometry_SUPER_(@myself)
      end
      
      protected def item_change(change : GraphicsItem::Change, value : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsWidget_itemChange_SUPER_QGraphicsItem__GraphicsItemChange_const_QVariant_R(@myself, change, (value.to_unsafe)))
      end
      
      protected def property_change(property_name : String, value : Variant) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsWidget_propertyChange_SUPER_const_QString_R_const_QVariant_R(@myself, Qt::Converter::QString.wrap(property_name), (value.to_unsafe)))
      end
      
      protected def scene_event(event : Event) : Bool
        Binding.bg_QGraphicsWidget_sceneEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def window_frame_event(e : Event) : Bool
        Binding.bg_QGraphicsWidget_windowFrameEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def window_frame_section_at(pos : PointF) : WindowFrameSection
        Binding.bg_QGraphicsWidget_windowFrameSectionAt_SUPER_const_QPointF_R(@myself, pos)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QGraphicsWidget_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QGraphicsWidget_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QGraphicsWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QGraphicsWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QGraphicsWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def move_event(event : Binding::QGraphicsSceneMoveEvent*) : Void
        Binding.bg_QGraphicsWidget_moveEvent_SUPER_QGraphicsSceneMoveEvent_X(@myself, event)
      end
      
      protected def polish_event() : Void
        Binding.bg_QGraphicsWidget_polishEvent_SUPER_(@myself)
      end
      
      protected def resize_event(event : Binding::QGraphicsSceneResizeEvent*) : Void
        Binding.bg_QGraphicsWidget_resizeEvent_SUPER_QGraphicsSceneResizeEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QGraphicsWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hover_move_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsWidget_hoverMoveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def hover_leave_event(event : Binding::QGraphicsSceneHoverEvent*) : Void
        Binding.bg_QGraphicsWidget_hoverLeaveEvent_SUPER_QGraphicsSceneHoverEvent_X(@myself, event)
      end
      
      protected def grab_mouse_event(event : Event) : Void
        Binding.bg_QGraphicsWidget_grabMouseEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def ungrab_mouse_event(event : Event) : Void
        Binding.bg_QGraphicsWidget_ungrabMouseEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def grab_keyboard_event(event : Event) : Void
        Binding.bg_QGraphicsWidget_grabKeyboardEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def ungrab_keyboard_event(event : Event) : Void
        Binding.bg_QGraphicsWidget_ungrabKeyboardEvent_SUPER_QEvent_X(@myself, event)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
    def on_geometry_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsWidget_CONNECT_geometryChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_layout_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsWidget_CONNECT_layoutChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
  end
  class GraphicsScene < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsScene_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsScene_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsScene_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsScene_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QGraphicsScene__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsScene)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall input_method_query event event_filter context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event help_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event draw_background draw_foreground draw_items timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsScene.new(
      bg_QGraphicsScene_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsScene_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} Proc(Binding::QGraphicsSceneHelpEvent*, Void).new{|event| self.help_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} Proc(Binding::QPainter*, Int32, Binding::QGraphicsItem**, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, num_items, items, options, widget| self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItemImpl.new(unwrap: items), StyleOptionGraphicsItem.new(unwrap: options), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsScene_JUMPTABLE_BgJumptable_QGraphicsScene_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(scene_rect : RectF, parent : Object? = nil)
      result = Binding.bg_QGraphicsScene__CONSTRUCT_const_QRectF_R_QObject_X(scene_rect, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsScene)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall input_method_query event event_filter context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event help_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event draw_background draw_foreground draw_items timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsScene.new(
      bg_QGraphicsScene_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsScene_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} Proc(Binding::QGraphicsSceneHelpEvent*, Void).new{|event| self.help_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} Proc(Binding::QPainter*, Int32, Binding::QGraphicsItem**, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, num_items, items, options, widget| self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItemImpl.new(unwrap: items), StyleOptionGraphicsItem.new(unwrap: options), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsScene_JUMPTABLE_BgJumptable_QGraphicsScene_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(x : Float64, y : Float64, width : Float64, height : Float64, parent : Object? = nil)
      result = Binding.bg_QGraphicsScene__CONSTRUCT_qreal_qreal_qreal_qreal_QObject_X(x, y, width, height, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsScene)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall input_method_query event event_filter context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event help_event key_press_event key_release_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event wheel_event input_method_event draw_background draw_foreground draw_items timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsScene.new(
      bg_QGraphicsScene_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsScene_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsScene_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QGraphicsSceneContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_enter_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drag_leave_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QGraphicsSceneDragDropEvent*, Void).new{|event| self.drop_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} Proc(Binding::QGraphicsSceneHelpEvent*, Void).new{|event| self.help_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_press_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_move_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_release_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QGraphicsSceneMouseEvent*, Void).new{|event| self.mouse_double_click_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QGraphicsSceneWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} Proc(Binding::QPainter*, Int32, Binding::QGraphicsItem**, Binding::QStyleOptionGraphicsItem*, Binding::QWidget*, Void).new{|painter, num_items, items, options, widget| self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItemImpl.new(unwrap: items), StyleOptionGraphicsItem.new(unwrap: options), widget.try {|ptr| Widget.new(unwrap: ptr) unless ptr.null?}) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsScene_JUMPTABLE_BgJumptable_QGraphicsScene_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def scene_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsScene_sceneRect_(self))
    end
    
    def width() : Float64
      Binding.bg_QGraphicsScene_width_(self)
    end
    
    def height() : Float64
      Binding.bg_QGraphicsScene_height_(self)
    end
    
    def scene_rect=(rect : RectF) : Void
      Binding.bg_QGraphicsScene_setSceneRect_const_QRectF_R(self, rect)
    end
    
    def set_scene_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsScene_setSceneRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def render(painter : Painter) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X(self, painter)
    end
    
    def render(painter : Painter, target : RectF) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X_const_QRectF_R(self, painter, target)
    end
    
    def render(painter : Painter, target : RectF, source : RectF) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R(self, painter, target, source)
    end
    
    def render(painter : Painter, target : RectF, source : RectF, aspect_ratio_mode : AspectRatioMode = AspectRatioMode::KeepAspectRatio) : Void
      Binding.bg_QGraphicsScene_render_QPainter_X_const_QRectF_R_const_QRectF_R_Qt__AspectRatioMode(self, painter, target, source, aspect_ratio_mode)
    end
    
    def item_index_method() : GraphicsScene::ItemIndexMethod
      Binding.bg_QGraphicsScene_itemIndexMethod_(self)
    end
    
    def item_index_method=(method : GraphicsScene::ItemIndexMethod) : Void
      Binding.bg_QGraphicsScene_setItemIndexMethod_QGraphicsScene__ItemIndexMethod(self, method)
    end
    
    def bsp_tree_depth() : Int32
      Binding.bg_QGraphicsScene_bspTreeDepth_(self)
    end
    
    def bsp_tree_depth=(depth : Int32) : Void
      Binding.bg_QGraphicsScene_setBspTreeDepth_int(self, depth)
    end
    
    def items_bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsScene_itemsBoundingRect_(self))
    end
    
    def items(order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_Qt__SortOrder(self, order))
    end
    
    def items(pos : PointF, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder(self, pos, mode, order))
    end
    
    def items(pos : PointF, mode : ItemSelectionMode, order : SortOrder, device_transform : Binding::QTransform*) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPointF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, pos, mode, order, device_transform))
    end
    
    def items(rect : RectF, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder(self, rect, mode, order))
    end
    
    def items(rect : RectF, mode : ItemSelectionMode, order : SortOrder, device_transform : Binding::QTransform*) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QRectF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, rect, mode, order, device_transform))
    end
    
    def items(polygon : Binding::QPolygonF*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder(self, polygon, mode, order))
    end
    
    def items(polygon : Binding::QPolygonF*, mode : ItemSelectionMode, order : SortOrder, device_transform : Binding::QTransform*) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPolygonF_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, polygon, mode, order, device_transform))
    end
    
    def items(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape, order : SortOrder = SortOrder::DescendingOrder) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder(self, path, mode, order))
    end
    
    def items(path : Binding::QPainterPath*, mode : ItemSelectionMode, order : SortOrder, device_transform : Binding::QTransform*) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_const_QPainterPath_R_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, path, mode, order, device_transform))
    end
    
    def colliding_items(item : GraphicsItem, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_collidingItems_const_QGraphicsItem_X_Qt__ItemSelectionMode(self, item, mode))
    end
    
    def item_at(pos : PointF, device_transform : Binding::QTransform*) : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsScene_itemAt_const_QPointF_R_const_QTransform_R(self, pos, device_transform))
    end
    
    def items(x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder(self, x, y, w, h, mode, order))
    end
    
    def items(x : Float64, y : Float64, w : Float64, h : Float64, mode : ItemSelectionMode, order : SortOrder, device_transform : Binding::QTransform*) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_items_qreal_qreal_qreal_qreal_Qt__ItemSelectionMode_Qt__SortOrder_const_QTransform_R(self, x, y, w, h, mode, order, device_transform))
    end
    
    def item_at(x : Float64, y : Float64, device_transform : Binding::QTransform*) : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsScene_itemAt_qreal_qreal_const_QTransform_R(self, x, y, device_transform))
    end
    
    def selected_items() : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsScene_selectedItems_(self))
    end
    
    def selection_area() : Binding::QPainterPath*
      Binding.bg_QGraphicsScene_selectionArea_(self)
    end
    
    def set_selection_area(path : Binding::QPainterPath*, device_transform : Binding::QTransform*) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_const_QTransform_R(self, path, device_transform)
    end
    
    def set_selection_area(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode)
    end
    
    def set_selection_area(path : Binding::QPainterPath*, mode : ItemSelectionMode, device_transform : Binding::QTransform*) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionMode_const_QTransform_R(self, path, mode, device_transform)
    end
    
    def set_selection_area(path : Binding::QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode(self, path, selection_operation, mode)
    end
    
    def set_selection_area(path : Binding::QPainterPath*, selection_operation : ItemSelectionOperation, mode : ItemSelectionMode, device_transform : Binding::QTransform*) : Void
      Binding.bg_QGraphicsScene_setSelectionArea_const_QPainterPath_R_Qt__ItemSelectionOperation_Qt__ItemSelectionMode_const_QTransform_R(self, path, selection_operation, mode, device_transform)
    end
    
    def create_item_group(items : Enumerable(GraphicsItem)) : Binding::QGraphicsItemGroup*
      Binding.bg_QGraphicsScene_createItemGroup_const_QList_QGraphicsItem_X__R(self, BindgenHelper.wrap_container(Container_QList_QGraphicsItem_X_, items).to_unsafe)
    end
    
    def destroy_item_group(group : Binding::QGraphicsItemGroup*) : Void
      Binding.bg_QGraphicsScene_destroyItemGroup_QGraphicsItemGroup_X(self, group)
    end
    
    def add_item(item : GraphicsItem) : Void
      Binding.bg_QGraphicsScene_addItem_QGraphicsItem_X(self, item)
    end
    
    def add_ellipse(rect : RectF) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_const_QRectF_R(self, rect))
    end
    
    def add_ellipse(rect : RectF, pen : Binding::QPen*) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R(self, rect, pen))
    end
    
    def add_ellipse(rect : RectF, pen : Binding::QPen*, brush : Brush) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_const_QRectF_R_const_QPen_R_const_QBrush_R(self, rect, pen, brush))
    end
    
    def add_line(line : QLineF) : Binding::QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_const_QLineF_R(self, line)
    end
    
    def add_line(line : QLineF, pen : Binding::QPen*) : Binding::QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_const_QLineF_R_const_QPen_R(self, line, pen)
    end
    
    def add_path(path : Binding::QPainterPath*) : GraphicsPathItem
      GraphicsPathItem.new(unwrap: Binding.bg_QGraphicsScene_addPath_const_QPainterPath_R(self, path))
    end
    
    def add_path(path : Binding::QPainterPath*, pen : Binding::QPen*) : GraphicsPathItem
      GraphicsPathItem.new(unwrap: Binding.bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R(self, path, pen))
    end
    
    def add_path(path : Binding::QPainterPath*, pen : Binding::QPen*, brush : Brush) : GraphicsPathItem
      GraphicsPathItem.new(unwrap: Binding.bg_QGraphicsScene_addPath_const_QPainterPath_R_const_QPen_R_const_QBrush_R(self, path, pen, brush))
    end
    
    def add_pixmap(pixmap : Pixmap) : GraphicsPixmapItem
      GraphicsPixmapItem.new(unwrap: Binding.bg_QGraphicsScene_addPixmap_const_QPixmap_R(self, pixmap))
    end
    
    def add_polygon(polygon : Binding::QPolygonF*) : GraphicsPolygonItem
      GraphicsPolygonItem.new(unwrap: Binding.bg_QGraphicsScene_addPolygon_const_QPolygonF_R(self, polygon))
    end
    
    def add_polygon(polygon : Binding::QPolygonF*, pen : Binding::QPen*) : GraphicsPolygonItem
      GraphicsPolygonItem.new(unwrap: Binding.bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R(self, polygon, pen))
    end
    
    def add_polygon(polygon : Binding::QPolygonF*, pen : Binding::QPen*, brush : Brush) : GraphicsPolygonItem
      GraphicsPolygonItem.new(unwrap: Binding.bg_QGraphicsScene_addPolygon_const_QPolygonF_R_const_QPen_R_const_QBrush_R(self, polygon, pen, brush))
    end
    
    def add_rect(rect : RectF) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_const_QRectF_R(self, rect))
    end
    
    def add_rect(rect : RectF, pen : Binding::QPen*) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R(self, rect, pen))
    end
    
    def add_rect(rect : RectF, pen : Binding::QPen*, brush : Brush) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_const_QRectF_R_const_QPen_R_const_QBrush_R(self, rect, pen, brush))
    end
    
    def add_text(text : String) : GraphicsTextItem
      GraphicsTextItem.new(unwrap: Binding.bg_QGraphicsScene_addText_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def add_text(text : String, font : Font) : GraphicsTextItem
      GraphicsTextItem.new(unwrap: Binding.bg_QGraphicsScene_addText_const_QString_R_const_QFont_R(self, Qt::Converter::QString.wrap(text), font))
    end
    
    def add_simple_text(text : String) : GraphicsSimpleTextItem
      GraphicsSimpleTextItem.new(unwrap: Binding.bg_QGraphicsScene_addSimpleText_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def add_simple_text(text : String, font : Font) : GraphicsSimpleTextItem
      GraphicsSimpleTextItem.new(unwrap: Binding.bg_QGraphicsScene_addSimpleText_const_QString_R_const_QFont_R(self, Qt::Converter::QString.wrap(text), font))
    end
    
    def add_widget(widget : Widget) : Binding::QGraphicsProxyWidget*
      Binding.bg_QGraphicsScene_addWidget_QWidget_X(self, widget)
    end
    
    def add_widget(widget : Widget, w_flags : WindowFlags) : Binding::QGraphicsProxyWidget*
      Binding.bg_QGraphicsScene_addWidget_QWidget_X_Qt__WindowFlags(self, widget, w_flags)
    end
    
    def add_ellipse(x : Float64, y : Float64, w : Float64, h : Float64) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    
    def add_ellipse(x : Float64, y : Float64, w : Float64, h : Float64, pen : Binding::QPen*) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R(self, x, y, w, h, pen))
    end
    
    def add_ellipse(x : Float64, y : Float64, w : Float64, h : Float64, pen : Binding::QPen*, brush : Brush) : GraphicsEllipseItem
      GraphicsEllipseItem.new(unwrap: Binding.bg_QGraphicsScene_addEllipse_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(self, x, y, w, h, pen, brush))
    end
    
    def add_line(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64) : Binding::QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal(self, x1, y1, x2, y2)
    end
    
    def add_line(x1 : Float64, y1 : Float64, x2 : Float64, y2 : Float64, pen : Binding::QPen*) : Binding::QGraphicsLineItem*
      Binding.bg_QGraphicsScene_addLine_qreal_qreal_qreal_qreal_const_QPen_R(self, x1, y1, x2, y2, pen)
    end
    
    def add_rect(x : Float64, y : Float64, w : Float64, h : Float64) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal(self, x, y, w, h))
    end
    
    def add_rect(x : Float64, y : Float64, w : Float64, h : Float64, pen : Binding::QPen*) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R(self, x, y, w, h, pen))
    end
    
    def add_rect(x : Float64, y : Float64, w : Float64, h : Float64, pen : Binding::QPen*, brush : Brush) : GraphicsRectItem
      GraphicsRectItem.new(unwrap: Binding.bg_QGraphicsScene_addRect_qreal_qreal_qreal_qreal_const_QPen_R_const_QBrush_R(self, x, y, w, h, pen, brush))
    end
    
    def remove_item(item : GraphicsItem) : Void
      Binding.bg_QGraphicsScene_removeItem_QGraphicsItem_X(self, item)
    end
    
    def focus_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsScene_focusItem_(self))
    end
    
    def set_focus_item(item : GraphicsItem, focus_reason : FocusReason = FocusReason::OtherFocusReason) : Void
      Binding.bg_QGraphicsScene_setFocusItem_QGraphicsItem_X_Qt__FocusReason(self, item, focus_reason)
    end
    
    def has_focus?() : Bool
      Binding.bg_QGraphicsScene_hasFocus_(self)
    end
    
    def focus=(focus_reason : FocusReason = FocusReason::OtherFocusReason) : Void
      Binding.bg_QGraphicsScene_setFocus_Qt__FocusReason(self, focus_reason)
    end
    
    def clear_focus() : Void
      Binding.bg_QGraphicsScene_clearFocus_(self)
    end
    
    def sticky_focus=(enabled : Bool) : Void
      Binding.bg_QGraphicsScene_setStickyFocus_bool(self, enabled)
    end
    
    def sticky_focus() : Bool
      Binding.bg_QGraphicsScene_stickyFocus_(self)
    end
    
    def mouse_grabber_item() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsScene_mouseGrabberItem_(self))
    end
    
    def background_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsScene_backgroundBrush_(self))
    end
    
    def background_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsScene_setBackgroundBrush_const_QBrush_R(self, brush)
    end
    
    def foreground_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsScene_foregroundBrush_(self))
    end
    
    def foreground_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsScene_setForegroundBrush_const_QBrush_R(self, brush)
    end
    
    def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsScene_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    def views() : Enumerable(GraphicsView)
      Container_QList_QGraphicsView_X_.new(unwrap: Binding.bg_QGraphicsScene_views_(self))
    end
    
    def update(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsScene_update_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def invalidate(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def invalidate(x : Float64, y : Float64, w : Float64, h : Float64, layers : GraphicsScene::SceneLayers) : Void
      Binding.bg_QGraphicsScene_invalidate_qreal_qreal_qreal_qreal_QGraphicsScene__SceneLayers(self, x, y, w, h, layers)
    end
    
    def style() : Binding::QStyle*
      Binding.bg_QGraphicsScene_style_(self)
    end
    
    def style=(style : Binding::QStyle*) : Void
      Binding.bg_QGraphicsScene_setStyle_QStyle_X(self, style)
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QGraphicsScene_font_(self))
    end
    
    def font=(font : Font) : Void
      Binding.bg_QGraphicsScene_setFont_const_QFont_R(self, font)
    end
    
    def palette() : Palette
      Palette.new(unwrap: Binding.bg_QGraphicsScene_palette_(self))
    end
    
    def palette=(palette : Palette) : Void
      Binding.bg_QGraphicsScene_setPalette_const_QPalette_R(self, palette)
    end
    
    def active?() : Bool
      Binding.bg_QGraphicsScene_isActive_(self)
    end
    
    def active_panel() : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsScene_activePanel_(self))
    end
    
    def active_panel=(item : GraphicsItem) : Void
      Binding.bg_QGraphicsScene_setActivePanel_QGraphicsItem_X(self, item)
    end
    
    def active_window() : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_QGraphicsScene_activeWindow_(self))
    end
    
    def active_window=(widget : GraphicsWidget) : Void
      Binding.bg_QGraphicsScene_setActiveWindow_QGraphicsWidget_X(self, widget)
    end
    
    def send_event(item : GraphicsItem, event : Event) : Bool
      Binding.bg_QGraphicsScene_sendEvent_QGraphicsItem_X_QEvent_X(self, item, event)
    end
    
    def minimum_render_size() : Float64
      Binding.bg_QGraphicsScene_minimumRenderSize_(self)
    end
    
    def minimum_render_size=(min_size : Float64) : Void
      Binding.bg_QGraphicsScene_setMinimumRenderSize_qreal(self, min_size)
    end
    
    def focus_on_touch() : Bool
      Binding.bg_QGraphicsScene_focusOnTouch_(self)
    end
    
    def focus_on_touch=(enabled : Bool) : Void
      Binding.bg_QGraphicsScene_setFocusOnTouch_bool(self, enabled)
    end
    
    def update() : Void
      Binding.bg_QGraphicsScene_update_(self)
    end
    
    def update(rect : RectF) : Void
      Binding.bg_QGraphicsScene_update_const_QRectF_R(self, rect)
    end
    
    def invalidate() : Void
      Binding.bg_QGraphicsScene_invalidate_(self)
    end
    
    def invalidate(rect : RectF) : Void
      Binding.bg_QGraphicsScene_invalidate_const_QRectF_R(self, rect)
    end
    
    def invalidate(rect : RectF, layers : GraphicsScene::SceneLayers) : Void
      Binding.bg_QGraphicsScene_invalidate_const_QRectF_R_QGraphicsScene__SceneLayers(self, rect, layers)
    end
    
    def advance() : Void
      Binding.bg_QGraphicsScene_advance_(self)
    end
    
    def clear_selection() : Void
      Binding.bg_QGraphicsScene_clearSelection_(self)
    end
    
    def clear() : Void
      Binding.bg_QGraphicsScene_clear_(self)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QGraphicsScene_event_QEvent_X(self, event)
    end
    
    protected def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QGraphicsScene_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
      Binding.bg_QGraphicsScene_contextMenuEvent_QGraphicsSceneContextMenuEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dragEnterEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dragMoveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dragLeaveEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
      Binding.bg_QGraphicsScene_dropEvent_QGraphicsSceneDragDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsScene_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsScene_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def help_event(event : Binding::QGraphicsSceneHelpEvent*) : Void
      Binding.bg_QGraphicsScene_helpEvent_QGraphicsSceneHelpEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsScene_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsScene_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mousePressEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mouseMoveEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mouseReleaseEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
      Binding.bg_QGraphicsScene_mouseDoubleClickEvent_QGraphicsSceneMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
      Binding.bg_QGraphicsScene_wheelEvent_QGraphicsSceneWheelEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsScene_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def draw_background(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsScene_drawBackground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    
    protected def draw_foreground(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsScene_drawForeground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    
    protected def draw_items(painter : Painter, num_items : Int32, items : GraphicsItem*, options : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsScene_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, num_items, items, options, widget)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QGraphicsScene_focusNextPrevChild_bool(self, next_)
    end
    
    def changed(region : Enumerable(RectF)) : Void
      Binding.bg_QGraphicsScene_changed_const_QList_QRectF__R(self, BindgenHelper.wrap_container(Container_QList_QRectF_, region).to_unsafe)
    end
    
    def scene_rect_changed(rect : RectF) : Void
      Binding.bg_QGraphicsScene_sceneRectChanged_const_QRectF_R(self, rect)
    end
    
    def selection_changed() : Void
      Binding.bg_QGraphicsScene_selectionChanged_(self)
    end
    
    def focus_item_changed(new_focus : GraphicsItem, old_focus : GraphicsItem, reason : FocusReason) : Void
      Binding.bg_QGraphicsScene_focusItemChanged_QGraphicsItem_X_QGraphicsItem_X_Qt__FocusReason(self, new_focus, old_focus, reason)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsScene_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ItemIndexMethod : Int32
      BspTreeIndex = 0
      NoIndex = -1
    end
    enum SceneLayer : UInt32
      ItemLayer = 1
      BackgroundLayer = 2
      ForegroundLayer = 4
      AllLayers = 65535
    end
    @[Flags]
    enum SceneLayers : UInt32
      ItemLayer = 1
      BackgroundLayer = 2
      ForegroundLayer = 4
      AllLayers = 65535
    end
    def on_changed(&_proc_ : Proc(Enumerable(RectF), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_CONNECT_changed_CrystalProc_void__const_QList_QRectF__R_(self, BindgenHelper.wrap_proc(Proc(Binding::ContainerQListQRectF*, Void).new do |arg0| _proc_.call(Container_QList_QRectF_.new(unwrap: arg0)) end)))
    end
    
    def on_scene_rect_changed(&_proc_ : Proc(RectF, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_CONNECT_sceneRectChanged_CrystalProc_void__const_QRectF_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QRectF*, Void).new do |arg0| _proc_.call(RectF.new(unwrap: arg0)) end)))
    end
    
    def on_selection_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_CONNECT_selectionChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_focus_item_changed(&_proc_ : Proc(GraphicsItem, GraphicsItem, FocusReason, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsScene_CONNECT_focusItemChanged_CrystalProc_void__QGraphicsItem_X__QGraphicsItem_X__Qt__FocusReason_(self, BindgenHelper.wrap_proc(Proc(Binding::QGraphicsItem*, Binding::QGraphicsItem*, FocusReason, Void).new do |arg0, arg1, arg2| _proc_.call(GraphicsItemImpl.new(unwrap: arg0), GraphicsItemImpl.new(unwrap: arg1), arg2) end)))
    end
    
    def initialize(unwrap : Binding::QGraphicsScene*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsScene)
      end
      def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsScene_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QGraphicsScene_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QGraphicsScene_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def context_menu_event(event : Binding::QGraphicsSceneContextMenuEvent*) : Void
        Binding.bg_QGraphicsScene_contextMenuEvent_SUPER_QGraphicsSceneContextMenuEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsScene_dragEnterEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsScene_dragMoveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsScene_dragLeaveEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def drop_event(event : Binding::QGraphicsSceneDragDropEvent*) : Void
        Binding.bg_QGraphicsScene_dropEvent_SUPER_QGraphicsSceneDragDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsScene_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsScene_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def help_event(event : Binding::QGraphicsSceneHelpEvent*) : Void
        Binding.bg_QGraphicsScene_helpEvent_SUPER_QGraphicsSceneHelpEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsScene_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsScene_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsScene_mousePressEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsScene_mouseMoveEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsScene_mouseReleaseEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : Binding::QGraphicsSceneMouseEvent*) : Void
        Binding.bg_QGraphicsScene_mouseDoubleClickEvent_SUPER_QGraphicsSceneMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QGraphicsSceneWheelEvent*) : Void
        Binding.bg_QGraphicsScene_wheelEvent_SUPER_QGraphicsSceneWheelEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsScene_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def draw_background(painter : Painter, rect : RectF) : Void
        Binding.bg_QGraphicsScene_drawBackground_SUPER_QPainter_X_const_QRectF_R(@myself, painter, rect)
      end
      
      protected def draw_foreground(painter : Painter, rect : RectF) : Void
        Binding.bg_QGraphicsScene_drawForeground_SUPER_QPainter_X_const_QRectF_R(@myself, painter, rect)
      end
      
      protected def draw_items(painter : Painter, num_items : Int32, items : GraphicsItem*, options : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
        Binding.bg_QGraphicsScene_drawItems_SUPER_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X_QWidget_X(@myself, painter, num_items, items, options, widget)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsSceneEvent < Event
    def initialize(type : Event::Type)
      result = Binding.bg_QGraphicsSceneEvent__CONSTRUCT_QEvent__Type(type)
    @unwrap = result
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QGraphicsSceneEvent_widget_(self))
    end
    
    def widget=(widget : Widget) : Void
      Binding.bg_QGraphicsSceneEvent_setWidget_QWidget_X(self, widget)
    end
    
    protected def initialize(dd : Binding::QGraphicsSceneEventPrivate*, type : Event::Type = Event::Type::None)
      result = Binding.bg_QGraphicsSceneEvent__CONSTRUCT_QGraphicsSceneEventPrivate_R_QEvent__Type(dd, type)
    @unwrap = result
    end
    
    protected def d_func() : Binding::QGraphicsSceneEventPrivate*
      Binding.bg_QGraphicsSceneEvent_d_func_(self)
    end
    
    def initialize(unwrap : Binding::QGraphicsSceneEvent*)
      result = unwrap
    @unwrap = result
    end
    
  end
  abstract class GraphicsTransform < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsTransform_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsTransform_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTransform_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsTransform_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QGraphicsTransform__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTransform)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall apply_to event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsTransform.new(
      bg_QGraphicsTransform_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_applyTo_QMatrix4x4_X: BindgenHelper.wrap_proc({% if forwarded.includes?("apply_to") %} Proc(Binding::QMatrix4x4*, Void).new{|matrix| self.apply_to(matrix) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsTransform_JUMPTABLE_BgJumptable_QGraphicsTransform_R(result, pointerof(jump_table))
    {% end %}
    end
    
    abstract def apply_to(matrix : Binding::QMatrix4x4*) : Void
    protected def update() : Void
      Binding.bg_QGraphicsTransform_update_(self)
    end
    
    protected def initialize(p : Binding::QGraphicsTransformPrivate*, parent : Object)
      result = Binding.bg_QGraphicsTransform__CONSTRUCT_QGraphicsTransformPrivate_R_QObject_X(p, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsTransform)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall apply_to event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsTransform.new(
      bg_QGraphicsTransform_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsTransform_applyTo_QMatrix4x4_X: BindgenHelper.wrap_proc({% if forwarded.includes?("apply_to") %} Proc(Binding::QMatrix4x4*, Void).new{|matrix| self.apply_to(matrix) } {% else %} nil {% end %}),
      bg_QObject_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsTransform_JUMPTABLE_BgJumptable_QGraphicsTransform_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def event(event : Event) : Bool
      Binding.bg_QObject_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsTransform_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QGraphicsTransform*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsTransform)
      end
      def event(event : Event) : Bool
        Binding.bg_QObject_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ScrollArea < AbstractScrollArea
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QScrollArea_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScrollArea_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollArea_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QScrollArea__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|unnamed_arg_0| self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|unnamed_arg_0| self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|unnamed_arg_0| self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|unnamed_arg_0| self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QScrollArea_JUMPTABLE_BgJumptable_QScrollArea_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def widget() : Widget
      Widget.new(unwrap: Binding.bg_QScrollArea_widget_(self))
    end
    
    def widget=(widget : Widget) : Void
      Binding.bg_QScrollArea_setWidget_QWidget_X(self, widget)
    end
    
    def take_widget() : Widget
      Widget.new(unwrap: Binding.bg_QScrollArea_takeWidget_(self))
    end
    
    def widget_resizable() : Bool
      Binding.bg_QScrollArea_widgetResizable_(self)
    end
    
    def widget_resizable=(resizable : Bool) : Void
      Binding.bg_QScrollArea_setWidgetResizable_bool(self, resizable)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QScrollArea_sizeHint_(self)
    end
    
    def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QScrollArea_focusNextPrevChild_bool(self, next_)
    end
    
    def alignment() : Alignment
      Binding.bg_QScrollArea_alignment_(self)
    end
    
    def alignment=(unnamed_arg_0 : Alignment) : Void
      Binding.bg_QScrollArea_setAlignment_Qt__Alignment(self, unnamed_arg_0)
    end
    
    def ensure_visible(x : Int32, y : Int32, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QScrollArea_ensureVisible_int_int_int_int(self, x, y, xmargin, ymargin)
    end
    
    def ensure_widget_visible(child_widget : Widget, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QScrollArea_ensureWidgetVisible_QWidget_X_int_int(self, child_widget, xmargin, ymargin)
    end
    
    protected def initialize(dd : Binding::QScrollAreaPrivate*, parent : Widget? = nil)
      result = Binding.bg_QScrollArea__CONSTRUCT_QScrollAreaPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollArea)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint focus_next_prev_child event event_filter resize_event scroll_contents_by viewport_size_hint minimum_size_hint setup_viewport viewport_event paint_event mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event context_menu_event drag_enter_event drag_move_event drag_leave_event drop_event key_press_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QScrollArea.new(
      bg_QScrollArea_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollArea_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollArea_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QScrollArea_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QScrollArea_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollArea_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|unnamed_arg_0| self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|unnamed_arg_0| self.drag_move_event(DragMoveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|unnamed_arg_0| self.drag_leave_event(DragLeaveEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|unnamed_arg_0| self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QScrollArea_JUMPTABLE_BgJumptable_QScrollArea_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QScrollArea_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QScrollArea_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QScrollArea_scrollContentsBy_int_int(self, dx, dy)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QScrollArea_viewportSizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    
    def setup_viewport(viewport : Widget) : Void
      Binding.bg_QAbstractScrollArea_setupViewport_QWidget_X(self, viewport)
    end
    
    protected def viewport_event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAbstractScrollArea_viewportEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QAbstractScrollArea_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QAbstractScrollArea_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractScrollArea_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractScrollArea_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
      Binding.bg_QAbstractScrollArea_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_move_event(unnamed_arg_0 : DragMoveEvent) : Void
      Binding.bg_QAbstractScrollArea_dragMoveEvent_QDragMoveEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_leave_event(unnamed_arg_0 : DragLeaveEvent) : Void
      Binding.bg_QAbstractScrollArea_dragLeaveEvent_QDragLeaveEvent_X(self, unnamed_arg_0)
    end
    
    protected def drop_event(unnamed_arg_0 : DropEvent) : Void
      Binding.bg_QAbstractScrollArea_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QAbstractScrollArea_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QScrollArea_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QScrollArea*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ScrollArea)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QScrollArea_sizeHint_SUPER_(@myself)
      end
      
      def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QScrollArea_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QScrollArea_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QScrollArea_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QScrollArea_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QScrollArea_viewportSizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_minimumSizeHint_SUPER_(@myself)
      end
      
      def setup_viewport(viewport : Widget) : Void
        Binding.bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(@myself, viewport)
      end
      
      protected def viewport_event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QAbstractScrollArea_viewportEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QAbstractScrollArea_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QAbstractScrollArea_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractScrollArea_wheelEvent_SUPER_QWheelEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractScrollArea_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
        Binding.bg_QAbstractScrollArea_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_move_event(unnamed_arg_0 : DragMoveEvent) : Void
        Binding.bg_QAbstractScrollArea_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_leave_event(unnamed_arg_0 : DragLeaveEvent) : Void
        Binding.bg_QAbstractScrollArea_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drop_event(unnamed_arg_0 : DropEvent) : Void
        Binding.bg_QAbstractScrollArea_dropEvent_SUPER_QDropEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QAbstractScrollArea_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GraphicsView < AbstractScrollArea
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsView_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGraphicsView_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsView_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGraphicsView_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QGraphicsView__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint input_method_query setup_viewport event viewport_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_next_prev_child focus_out_event key_press_event key_release_event mouse_double_click_event mouse_press_event mouse_move_event mouse_release_event wheel_event paint_event resize_event scroll_contents_by show_event input_method_event draw_background draw_foreground draw_items minimum_size_hint event_filter viewport_size_hint ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsView.new(
      bg_QGraphicsView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsView_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsView_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|widget| self.setup_viewport(Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QGraphicsView_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} Proc(Binding::QPainter*, Int32, Binding::QGraphicsItem**, Binding::QStyleOptionGraphicsItem*, Void).new{|painter, num_items, items, options| self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItemImpl.new(unwrap: items), StyleOptionGraphicsItem.new(unwrap: options)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsView_JUMPTABLE_BgJumptable_QGraphicsView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(scene : GraphicsScene, parent : Widget? = nil)
      result = Binding.bg_QGraphicsView__CONSTRUCT_QGraphicsScene_X_QWidget_X(scene, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint input_method_query setup_viewport event viewport_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_next_prev_child focus_out_event key_press_event key_release_event mouse_double_click_event mouse_press_event mouse_move_event mouse_release_event wheel_event paint_event resize_event scroll_contents_by show_event input_method_event draw_background draw_foreground draw_items minimum_size_hint event_filter viewport_size_hint ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsView.new(
      bg_QGraphicsView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsView_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsView_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|widget| self.setup_viewport(Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QGraphicsView_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} Proc(Binding::QPainter*, Int32, Binding::QGraphicsItem**, Binding::QStyleOptionGraphicsItem*, Void).new{|painter, num_items, items, options| self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItemImpl.new(unwrap: items), StyleOptionGraphicsItem.new(unwrap: options)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsView_JUMPTABLE_BgJumptable_QGraphicsView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QGraphicsView_sizeHint_(self)
    end
    
    def render_hints() : Painter::RenderHints
      Binding.bg_QGraphicsView_renderHints_(self)
    end
    
    def set_render_hint(hint : Painter::RenderHint, enabled : Bool = true) : Void
      Binding.bg_QGraphicsView_setRenderHint_QPainter__RenderHint_bool(self, hint, enabled)
    end
    
    def render_hints=(hints : Painter::RenderHints) : Void
      Binding.bg_QGraphicsView_setRenderHints_QPainter__RenderHints(self, hints)
    end
    
    def alignment() : Alignment
      Binding.bg_QGraphicsView_alignment_(self)
    end
    
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QGraphicsView_setAlignment_Qt__Alignment(self, alignment)
    end
    
    def transformation_anchor() : GraphicsView::ViewportAnchor
      Binding.bg_QGraphicsView_transformationAnchor_(self)
    end
    
    def transformation_anchor=(anchor : GraphicsView::ViewportAnchor) : Void
      Binding.bg_QGraphicsView_setTransformationAnchor_QGraphicsView__ViewportAnchor(self, anchor)
    end
    
    def resize_anchor() : GraphicsView::ViewportAnchor
      Binding.bg_QGraphicsView_resizeAnchor_(self)
    end
    
    def resize_anchor=(anchor : GraphicsView::ViewportAnchor) : Void
      Binding.bg_QGraphicsView_setResizeAnchor_QGraphicsView__ViewportAnchor(self, anchor)
    end
    
    def viewport_update_mode() : GraphicsView::ViewportUpdateMode
      Binding.bg_QGraphicsView_viewportUpdateMode_(self)
    end
    
    def viewport_update_mode=(mode : GraphicsView::ViewportUpdateMode) : Void
      Binding.bg_QGraphicsView_setViewportUpdateMode_QGraphicsView__ViewportUpdateMode(self, mode)
    end
    
    def optimization_flags() : GraphicsView::OptimizationFlags
      Binding.bg_QGraphicsView_optimizationFlags_(self)
    end
    
    def set_optimization_flag(flag : GraphicsView::OptimizationFlag, enabled : Bool = true) : Void
      Binding.bg_QGraphicsView_setOptimizationFlag_QGraphicsView__OptimizationFlag_bool(self, flag, enabled)
    end
    
    def optimization_flags=(flags : GraphicsView::OptimizationFlags) : Void
      Binding.bg_QGraphicsView_setOptimizationFlags_QGraphicsView__OptimizationFlags(self, flags)
    end
    
    def drag_mode() : GraphicsView::DragMode
      Binding.bg_QGraphicsView_dragMode_(self)
    end
    
    def drag_mode=(mode : GraphicsView::DragMode) : Void
      Binding.bg_QGraphicsView_setDragMode_QGraphicsView__DragMode(self, mode)
    end
    
    def rubber_band_selection_mode() : ItemSelectionMode
      Binding.bg_QGraphicsView_rubberBandSelectionMode_(self)
    end
    
    def rubber_band_selection_mode=(mode : ItemSelectionMode) : Void
      Binding.bg_QGraphicsView_setRubberBandSelectionMode_Qt__ItemSelectionMode(self, mode)
    end
    
    def rubber_band_rect() : Rect
      Rect.new(unwrap: Binding.bg_QGraphicsView_rubberBandRect_(self))
    end
    
    def cache_mode() : GraphicsView::CacheMode
      Binding.bg_QGraphicsView_cacheMode_(self)
    end
    
    def cache_mode=(mode : GraphicsView::CacheMode) : Void
      Binding.bg_QGraphicsView_setCacheMode_QGraphicsView__CacheMode(self, mode)
    end
    
    def reset_cached_content() : Void
      Binding.bg_QGraphicsView_resetCachedContent_(self)
    end
    
    def interactive?() : Bool
      Binding.bg_QGraphicsView_isInteractive_(self)
    end
    
    def interactive=(allowed : Bool) : Void
      Binding.bg_QGraphicsView_setInteractive_bool(self, allowed)
    end
    
    def scene() : GraphicsScene
      GraphicsScene.new(unwrap: Binding.bg_QGraphicsView_scene_(self))
    end
    
    def scene=(scene : GraphicsScene) : Void
      Binding.bg_QGraphicsView_setScene_QGraphicsScene_X(self, scene)
    end
    
    def scene_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsView_sceneRect_(self))
    end
    
    def scene_rect=(rect : RectF) : Void
      Binding.bg_QGraphicsView_setSceneRect_const_QRectF_R(self, rect)
    end
    
    def set_scene_rect(x : Float64, y : Float64, w : Float64, h : Float64) : Void
      Binding.bg_QGraphicsView_setSceneRect_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def transform() : Binding::QTransform*
      Binding.bg_QGraphicsView_transform_(self)
    end
    
    def viewport_transform() : Binding::QTransform*
      Binding.bg_QGraphicsView_viewportTransform_(self)
    end
    
    def transformed?() : Bool
      Binding.bg_QGraphicsView_isTransformed_(self)
    end
    
    def set_transform(matrix : Binding::QTransform*, combine : Bool = false) : Void
      Binding.bg_QGraphicsView_setTransform_const_QTransform_R_bool(self, matrix, combine)
    end
    
    def reset_transform() : Void
      Binding.bg_QGraphicsView_resetTransform_(self)
    end
    
    def rotate(angle : Float64) : Void
      Binding.bg_QGraphicsView_rotate_qreal(self, angle)
    end
    
    def scale(sx : Float64, sy : Float64) : Void
      Binding.bg_QGraphicsView_scale_qreal_qreal(self, sx, sy)
    end
    
    def shear(sh : Float64, sv : Float64) : Void
      Binding.bg_QGraphicsView_shear_qreal_qreal(self, sh, sv)
    end
    
    def translate(dx : Float64, dy : Float64) : Void
      Binding.bg_QGraphicsView_translate_qreal_qreal(self, dx, dy)
    end
    
    def center_on(pos : PointF) : Void
      Binding.bg_QGraphicsView_centerOn_const_QPointF_R(self, pos)
    end
    
    def center_on(x : Float64, y : Float64) : Void
      Binding.bg_QGraphicsView_centerOn_qreal_qreal(self, x, y)
    end
    
    def center_on(item : GraphicsItem) : Void
      Binding.bg_QGraphicsView_centerOn_const_QGraphicsItem_X(self, item)
    end
    
    def ensure_visible(rect : RectF, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsView_ensureVisible_const_QRectF_R_int_int(self, rect, xmargin, ymargin)
    end
    
    def ensure_visible(x : Float64, y : Float64, w : Float64, h : Float64, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsView_ensureVisible_qreal_qreal_qreal_qreal_int_int(self, x, y, w, h, xmargin, ymargin)
    end
    
    def ensure_visible(item : GraphicsItem, xmargin : Int32 = 50, ymargin : Int32 = 50) : Void
      Binding.bg_QGraphicsView_ensureVisible_const_QGraphicsItem_X_int_int(self, item, xmargin, ymargin)
    end
    
    def fit_in_view(rect : RectF, aspect_radio_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio) : Void
      Binding.bg_QGraphicsView_fitInView_const_QRectF_R_Qt__AspectRatioMode(self, rect, aspect_radio_mode)
    end
    
    def fit_in_view(x : Float64, y : Float64, w : Float64, h : Float64, aspect_radio_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio) : Void
      Binding.bg_QGraphicsView_fitInView_qreal_qreal_qreal_qreal_Qt__AspectRatioMode(self, x, y, w, h, aspect_radio_mode)
    end
    
    def fit_in_view(item : GraphicsItem, aspect_radio_mode : AspectRatioMode = AspectRatioMode::IgnoreAspectRatio) : Void
      Binding.bg_QGraphicsView_fitInView_const_QGraphicsItem_X_Qt__AspectRatioMode(self, item, aspect_radio_mode)
    end
    
    def render(painter : Painter) : Void
      Binding.bg_QGraphicsView_render_QPainter_X(self, painter)
    end
    
    def render(painter : Painter, target : RectF) : Void
      Binding.bg_QGraphicsView_render_QPainter_X_const_QRectF_R(self, painter, target)
    end
    
    def render(painter : Painter, target : RectF, source : Rect) : Void
      Binding.bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R(self, painter, target, source)
    end
    
    def render(painter : Painter, target : RectF, source : Rect, aspect_ratio_mode : AspectRatioMode = AspectRatioMode::KeepAspectRatio) : Void
      Binding.bg_QGraphicsView_render_QPainter_X_const_QRectF_R_const_QRect_R_Qt__AspectRatioMode(self, painter, target, source, aspect_ratio_mode)
    end
    
    def items() : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_(self))
    end
    
    def items(pos : Point) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_const_QPoint_R(self, pos))
    end
    
    def items(x : Int32, y : Int32) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_int_int(self, x, y))
    end
    
    def items(rect : Rect, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_const_QRect_R_Qt__ItemSelectionMode(self, rect, mode))
    end
    
    def items(x : Int32, y : Int32, w : Int32, h : Int32, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_int_int_int_int_Qt__ItemSelectionMode(self, x, y, w, h, mode))
    end
    
    def items(polygon : Binding::QPolygon*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_const_QPolygon_R_Qt__ItemSelectionMode(self, polygon, mode))
    end
    
    def items(path : Binding::QPainterPath*, mode : ItemSelectionMode = ItemSelectionMode::IntersectsItemShape) : Enumerable(GraphicsItem)
      Container_QList_QGraphicsItem_X_.new(unwrap: Binding.bg_QGraphicsView_items_const_QPainterPath_R_Qt__ItemSelectionMode(self, path, mode))
    end
    
    def item_at(pos : Point) : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsView_itemAt_const_QPoint_R(self, pos))
    end
    
    def item_at(x : Int32, y : Int32) : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_QGraphicsView_itemAt_int_int(self, x, y))
    end
    
    def map_to_scene(point : Point) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsView_mapToScene_const_QPoint_R(self, point))
    end
    
    def map_to_scene(rect : Rect) : Binding::QPolygonF*
      Binding.bg_QGraphicsView_mapToScene_const_QRect_R(self, rect)
    end
    
    def map_to_scene(polygon : Binding::QPolygon*) : Binding::QPolygonF*
      Binding.bg_QGraphicsView_mapToScene_const_QPolygon_R(self, polygon)
    end
    
    def map_to_scene(path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsView_mapToScene_const_QPainterPath_R(self, path)
    end
    
    def map_from_scene(point : PointF) : Point
      Point.new(unwrap: Binding.bg_QGraphicsView_mapFromScene_const_QPointF_R(self, point))
    end
    
    def map_from_scene(rect : RectF) : Binding::QPolygon*
      Binding.bg_QGraphicsView_mapFromScene_const_QRectF_R(self, rect)
    end
    
    def map_from_scene(polygon : Binding::QPolygonF*) : Binding::QPolygon*
      Binding.bg_QGraphicsView_mapFromScene_const_QPolygonF_R(self, polygon)
    end
    
    def map_from_scene(path : Binding::QPainterPath*) : Binding::QPainterPath*
      Binding.bg_QGraphicsView_mapFromScene_const_QPainterPath_R(self, path)
    end
    
    def map_to_scene(x : Int32, y : Int32) : PointF
      PointF.new(unwrap: Binding.bg_QGraphicsView_mapToScene_int_int(self, x, y))
    end
    
    def map_to_scene(x : Int32, y : Int32, w : Int32, h : Int32) : Binding::QPolygonF*
      Binding.bg_QGraphicsView_mapToScene_int_int_int_int(self, x, y, w, h)
    end
    
    def map_from_scene(x : Float64, y : Float64) : Point
      Point.new(unwrap: Binding.bg_QGraphicsView_mapFromScene_qreal_qreal(self, x, y))
    end
    
    def map_from_scene(x : Float64, y : Float64, w : Float64, h : Float64) : Binding::QPolygon*
      Binding.bg_QGraphicsView_mapFromScene_qreal_qreal_qreal_qreal(self, x, y, w, h)
    end
    
    def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    def background_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsView_backgroundBrush_(self))
    end
    
    def background_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsView_setBackgroundBrush_const_QBrush_R(self, brush)
    end
    
    def foreground_brush() : Brush
      Brush.new(unwrap: Binding.bg_QGraphicsView_foregroundBrush_(self))
    end
    
    def foreground_brush=(brush : Brush) : Void
      Binding.bg_QGraphicsView_setForegroundBrush_const_QBrush_R(self, brush)
    end
    
    def update_scene(rects : Enumerable(RectF)) : Void
      Binding.bg_QGraphicsView_updateScene_const_QList_QRectF__R(self, BindgenHelper.wrap_container(Container_QList_QRectF_, rects).to_unsafe)
    end
    
    def invalidate_scene() : Void
      Binding.bg_QGraphicsView_invalidateScene_(self)
    end
    
    def invalidate_scene(rect : RectF) : Void
      Binding.bg_QGraphicsView_invalidateScene_const_QRectF_R(self, rect)
    end
    
    def invalidate_scene(rect : RectF, layers : GraphicsScene::SceneLayers) : Void
      Binding.bg_QGraphicsView_invalidateScene_const_QRectF_R_QGraphicsScene__SceneLayers(self, rect, layers)
    end
    
    def update_scene_rect(rect : RectF) : Void
      Binding.bg_QGraphicsView_updateSceneRect_const_QRectF_R(self, rect)
    end
    
    def rubber_band_changed(viewport_rect : Rect, from_scene_point : PointF, to_scene_point : PointF) : Void
      Binding.bg_QGraphicsView_rubberBandChanged_QRect_QPointF_QPointF(self, viewport_rect, from_scene_point, to_scene_point)
    end
    
    protected def setup_viewport(widget : Widget) : Void
      Binding.bg_QGraphicsView_setupViewport_QWidget_X(self, widget)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QGraphicsViewPrivate*, parent : Widget? = nil)
      result = Binding.bg_QGraphicsView__CONSTRUCT_QGraphicsViewPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GraphicsView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint input_method_query setup_viewport event viewport_event context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_next_prev_child focus_out_event key_press_event key_release_event mouse_double_click_event mouse_press_event mouse_move_event mouse_release_event wheel_event paint_event resize_event scroll_contents_by show_event input_method_event draw_background draw_foreground draw_items minimum_size_hint event_filter viewport_size_hint ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGraphicsView.new(
      bg_QGraphicsView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGraphicsView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGraphicsView_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QGraphicsView_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|widget| self.setup_viewport(Widget.new(unwrap: widget)) } {% else %} nil {% end %}),
      bg_QGraphicsView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QGraphicsView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QGraphicsView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QGraphicsView_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_background") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_background(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_foreground") %} Proc(Binding::QPainter*, Binding::QRectF*, Void).new{|painter, rect| self.draw_foreground(Painter.new(unwrap: painter), RectF.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("draw_items") %} Proc(Binding::QPainter*, Int32, Binding::QGraphicsItem**, Binding::QStyleOptionGraphicsItem*, Void).new{|painter, num_items, items, options| self.draw_items(Painter.new(unwrap: painter), num_items, GraphicsItemImpl.new(unwrap: items), StyleOptionGraphicsItem.new(unwrap: options)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGraphicsView_JUMPTABLE_BgJumptable_QGraphicsView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QGraphicsView_event_QEvent_X(self, event)
    end
    
    protected def viewport_event(event : Event) : Bool
      Binding.bg_QGraphicsView_viewportEvent_QEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QGraphicsView_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QGraphicsView_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QGraphicsView_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QGraphicsView_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QGraphicsView_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsView_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QGraphicsView_focusNextPrevChild_bool(self, next_)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QGraphicsView_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsView_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QGraphicsView_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QGraphicsView_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QGraphicsView_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QGraphicsView_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QGraphicsView_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QGraphicsView_scrollContentsBy_int_int(self, dx, dy)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QGraphicsView_showEvent_QShowEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QGraphicsView_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def draw_background(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsView_drawBackground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    
    protected def draw_foreground(painter : Painter, rect : RectF) : Void
      Binding.bg_QGraphicsView_drawForeground_QPainter_X_const_QRectF_R(self, painter, rect)
    end
    
    protected def draw_items(painter : Painter, num_items : Int32, items : GraphicsItem*, options : StyleOptionGraphicsItem) : Void
      Binding.bg_QGraphicsView_drawItems_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(self, painter, num_items, items, options)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_viewportSizeHint_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGraphicsView_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ViewportAnchor : UInt32
      NoAnchor = 0
      AnchorViewCenter = 1
      AnchorUnderMouse = 2
    end
    @[Flags]
    enum CacheMode : UInt32
      CacheNone = 0
      CacheBackground = 1
    end
    enum DragMode : UInt32
      NoDrag = 0
      ScrollHandDrag = 1
      RubberBandDrag = 2
    end
    enum ViewportUpdateMode : UInt32
      FullViewportUpdate = 0
      MinimalViewportUpdate = 1
      SmartViewportUpdate = 2
      NoViewportUpdate = 3
      BoundingRectViewportUpdate = 4
    end
    enum OptimizationFlag : UInt32
      DontClipPainter = 1
      DontSavePainterState = 2
      DontAdjustForAntialiasing = 4
      IndirectPainting = 8
    end
    @[Flags]
    enum OptimizationFlags : UInt32
      DontClipPainter = 1
      DontSavePainterState = 2
      DontAdjustForAntialiasing = 4
      IndirectPainting = 8
    end
    def on_rubber_band_changed(&_proc_ : Proc(Rect, PointF, PointF, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsView_CONNECT_rubberBandChanged_CrystalProc_void__QRect__QPointF__QPointF_(self, BindgenHelper.wrap_proc(Proc(Binding::QRect*, Binding::QPointF, Binding::QPointF, Void).new do |arg0, arg1, arg2| _proc_.call(Rect.new(unwrap: arg0), PointF.new(unwrap: arg1), PointF.new(unwrap: arg2)) end)))
    end
    
    def initialize(unwrap : Binding::QGraphicsView*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GraphicsView)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QGraphicsView_sizeHint_SUPER_(@myself)
      end
      
      def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QGraphicsView_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      protected def setup_viewport(widget : Widget) : Void
        Binding.bg_QGraphicsView_setupViewport_SUPER_QWidget_X(@myself, widget)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QGraphicsView_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def viewport_event(event : Event) : Bool
        Binding.bg_QGraphicsView_viewportEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QGraphicsView_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QGraphicsView_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QGraphicsView_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QGraphicsView_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QGraphicsView_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsView_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QGraphicsView_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QGraphicsView_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsView_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QGraphicsView_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QGraphicsView_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QGraphicsView_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QGraphicsView_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QGraphicsView_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QGraphicsView_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QGraphicsView_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QGraphicsView_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QGraphicsView_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QGraphicsView_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QGraphicsView_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def draw_background(painter : Painter, rect : RectF) : Void
        Binding.bg_QGraphicsView_drawBackground_SUPER_QPainter_X_const_QRectF_R(@myself, painter, rect)
      end
      
      protected def draw_foreground(painter : Painter, rect : RectF) : Void
        Binding.bg_QGraphicsView_drawForeground_SUPER_QPainter_X_const_QRectF_R(@myself, painter, rect)
      end
      
      protected def draw_items(painter : Painter, num_items : Int32, items : GraphicsItem*, options : StyleOptionGraphicsItem) : Void
        Binding.bg_QGraphicsView_drawItems_SUPER_QPainter_X_int_QGraphicsItem_XX_const_QStyleOptionGraphicsItem_X(@myself, painter, num_items, items, options)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QAbstractScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_viewportSizeHint_SUPER_(@myself)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class GroupBox < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QGroupBox_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QGroupBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QGroupBox__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GroupBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint event child_event resize_event paint_event focus_in_event change_event mouse_press_event mouse_move_event mouse_release_event dev_type visible= size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event key_press_event key_release_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGroupBox.new(
      bg_QGroupBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGroupBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QGroupBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QGroupBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGroupBox_JUMPTABLE_BgJumptable_QGroupBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(title : String, parent : Widget? = nil)
      result = Binding.bg_QGroupBox__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(GroupBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall minimum_size_hint event child_event resize_event paint_event focus_in_event change_event mouse_press_event mouse_move_event mouse_release_event dev_type visible= size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event wheel_event key_press_event key_release_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QGroupBox.new(
      bg_QGroupBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QGroupBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QGroupBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QGroupBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QGroupBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QGroupBox_JUMPTABLE_BgJumptable_QGroupBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QGroupBox_title_(self))
    end
    
    def title=(title : String) : Void
      Binding.bg_QGroupBox_setTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    
    def alignment() : Alignment
      Binding.bg_QGroupBox_alignment_(self)
    end
    
    def alignment=(alignment : Int32) : Void
      Binding.bg_QGroupBox_setAlignment_int(self, alignment)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QGroupBox_minimumSizeHint_(self)
    end
    
    def flat?() : Bool
      Binding.bg_QGroupBox_isFlat_(self)
    end
    
    def flat=(flat : Bool) : Void
      Binding.bg_QGroupBox_setFlat_bool(self, flat)
    end
    
    def checkable?() : Bool
      Binding.bg_QGroupBox_isCheckable_(self)
    end
    
    def checkable=(checkable : Bool) : Void
      Binding.bg_QGroupBox_setCheckable_bool(self, checkable)
    end
    
    def checked?() : Bool
      Binding.bg_QGroupBox_isChecked_(self)
    end
    
    def checked=(checked : Bool) : Void
      Binding.bg_QGroupBox_setChecked_bool(self, checked)
    end
    
    def clicked(checked : Bool = false) : Void
      Binding.bg_QGroupBox_clicked_bool(self, checked)
    end
    
    def toggled(unnamed_arg_0 : Bool) : Void
      Binding.bg_QGroupBox_toggled_bool(self, unnamed_arg_0)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QGroupBox_event_QEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QGroupBox_childEvent_QChildEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QGroupBox_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QGroupBox_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QGroupBox_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QGroupBox_changeEvent_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QGroupBox_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QGroupBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QGroupBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionGroupBox*) : Void
      Binding.bg_QGroupBox_initStyleOption_QStyleOptionGroupBox_X(self, option)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QGroupBox_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_clicked(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGroupBox_CONNECT_clicked_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_toggled(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGroupBox_CONNECT_toggled_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QGroupBox*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : GroupBox)
      end
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QGroupBox_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QGroupBox_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QGroupBox_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QGroupBox_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QGroupBox_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QGroupBox_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QGroupBox_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QGroupBox_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QGroupBox_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QGroupBox_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class LineEdit < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QLineEdit_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLineEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QLineEdit__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event input_method_query event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|unnamed_arg_0| self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|e| self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|e| self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|unnamed_arg_0| self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLineEdit_JUMPTABLE_BgJumptable_QLineEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(unnamed_arg_0 : String, parent : Widget? = nil)
      result = Binding.bg_QLineEdit__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(unnamed_arg_0), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LineEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event key_press_event focus_in_event focus_out_event paint_event drag_enter_event drag_move_event drag_leave_event drop_event change_event context_menu_event input_method_event input_method_query event dev_type visible= height_for_width has_height_for_width? paint_engine wheel_event key_release_event enter_event leave_event move_event resize_event close_event tablet_event action_event show_event hide_event native_event metric init_painter shared_painter focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLineEdit.new(
      bg_QLineEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLineEdit_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLineEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_double_click_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|unnamed_arg_0| self.drag_enter_event(DragEnterEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|e| self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|e| self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLineEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|unnamed_arg_0| self.drop_event(DropEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QLineEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLineEdit_JUMPTABLE_BgJumptable_QLineEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_text_(self))
    end
    
    def display_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_displayText_(self))
    end
    
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_placeholderText_(self))
    end
    
    def placeholder_text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def max_length() : Int32
      Binding.bg_QLineEdit_maxLength_(self)
    end
    
    def max_length=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLineEdit_setMaxLength_int(self, unnamed_arg_0)
    end
    
    def frame=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setFrame_bool(self, unnamed_arg_0)
    end
    
    def has_frame?() : Bool
      Binding.bg_QLineEdit_hasFrame_(self)
    end
    
    def clear_button_enabled=(enable : Bool) : Void
      Binding.bg_QLineEdit_setClearButtonEnabled_bool(self, enable)
    end
    
    def clear_button_enabled?() : Bool
      Binding.bg_QLineEdit_isClearButtonEnabled_(self)
    end
    
    def echo_mode() : LineEdit::EchoMode
      Binding.bg_QLineEdit_echoMode_(self)
    end
    
    def echo_mode=(unnamed_arg_0 : LineEdit::EchoMode) : Void
      Binding.bg_QLineEdit_setEchoMode_QLineEdit__EchoMode(self, unnamed_arg_0)
    end
    
    def read_only?() : Bool
      Binding.bg_QLineEdit_isReadOnly_(self)
    end
    
    def read_only=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setReadOnly_bool(self, unnamed_arg_0)
    end
    
    def validator=(unnamed_arg_0 : Binding::QValidator*) : Void
      Binding.bg_QLineEdit_setValidator_const_QValidator_X(self, unnamed_arg_0)
    end
    
    def validator() : Binding::QValidator*
      Binding.bg_QLineEdit_validator_(self)
    end
    
    def completer=(completer : Completer) : Void
      Binding.bg_QLineEdit_setCompleter_QCompleter_X(self, completer)
    end
    
    def completer() : Completer
      Completer.new(unwrap: Binding.bg_QLineEdit_completer_(self))
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QLineEdit_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QLineEdit_minimumSizeHint_(self)
    end
    
    def cursor_position() : Int32
      Binding.bg_QLineEdit_cursorPosition_(self)
    end
    
    def cursor_position=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLineEdit_setCursorPosition_int(self, unnamed_arg_0)
    end
    
    def cursor_position_at(pos : Point) : Int32
      Binding.bg_QLineEdit_cursorPositionAt_const_QPoint_R(self, pos)
    end
    
    def alignment=(flag : Alignment) : Void
      Binding.bg_QLineEdit_setAlignment_Qt__Alignment(self, flag)
    end
    
    def alignment() : Alignment
      Binding.bg_QLineEdit_alignment_(self)
    end
    
    def cursor_forward(mark : Bool, steps : Int32 = 1) : Void
      Binding.bg_QLineEdit_cursorForward_bool_int(self, mark, steps)
    end
    
    def cursor_backward(mark : Bool, steps : Int32 = 1) : Void
      Binding.bg_QLineEdit_cursorBackward_bool_int(self, mark, steps)
    end
    
    def cursor_word_forward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorWordForward_bool(self, mark)
    end
    
    def cursor_word_backward(mark : Bool) : Void
      Binding.bg_QLineEdit_cursorWordBackward_bool(self, mark)
    end
    
    def backspace() : Void
      Binding.bg_QLineEdit_backspace_(self)
    end
    
    def del() : Void
      Binding.bg_QLineEdit_del_(self)
    end
    
    def home(mark : Bool) : Void
      Binding.bg_QLineEdit_home_bool(self, mark)
    end
    
    def end(mark : Bool) : Void
      Binding.bg_QLineEdit_end_bool(self, mark)
    end
    
    def modified?() : Bool
      Binding.bg_QLineEdit_isModified_(self)
    end
    
    def modified=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLineEdit_setModified_bool(self, unnamed_arg_0)
    end
    
    def set_selection(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLineEdit_setSelection_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def has_selected_text?() : Bool
      Binding.bg_QLineEdit_hasSelectedText_(self)
    end
    
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_selectedText_(self))
    end
    
    def selection_start() : Int32
      Binding.bg_QLineEdit_selectionStart_(self)
    end
    
    def selection_end() : Int32
      Binding.bg_QLineEdit_selectionEnd_(self)
    end
    
    def selection_length() : Int32
      Binding.bg_QLineEdit_selectionLength_(self)
    end
    
    def undo_available?() : Bool
      Binding.bg_QLineEdit_isUndoAvailable_(self)
    end
    
    def redo_available?() : Bool
      Binding.bg_QLineEdit_isRedoAvailable_(self)
    end
    
    def drag_enabled=(b : Bool) : Void
      Binding.bg_QLineEdit_setDragEnabled_bool(self, b)
    end
    
    def drag_enabled() : Bool
      Binding.bg_QLineEdit_dragEnabled_(self)
    end
    
    def cursor_move_style=(style : CursorMoveStyle) : Void
      Binding.bg_QLineEdit_setCursorMoveStyle_Qt__CursorMoveStyle(self, style)
    end
    
    def cursor_move_style() : CursorMoveStyle
      Binding.bg_QLineEdit_cursorMoveStyle_(self)
    end
    
    def input_mask() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLineEdit_inputMask_(self))
    end
    
    def input_mask=(input_mask : String) : Void
      Binding.bg_QLineEdit_setInputMask_const_QString_R(self, Qt::Converter::QString.wrap(input_mask))
    end
    
    def has_acceptable_input?() : Bool
      Binding.bg_QLineEdit_hasAcceptableInput_(self)
    end
    
    def set_text_margins(left : Int32, top : Int32, right : Int32, bottom : Int32) : Void
      Binding.bg_QLineEdit_setTextMargins_int_int_int_int(self, left, top, right, bottom)
    end
    
    def text_margins=(margins : Binding::QMargins*) : Void
      Binding.bg_QLineEdit_setTextMargins_const_QMargins_R(self, margins)
    end
    
    def text_margins() : Binding::QMargins*
      Binding.bg_QLineEdit_textMargins_(self)
    end
    
    def add_action(action : Action, position : LineEdit::ActionPosition) : Void
      Binding.bg_QLineEdit_addAction_QAction_X_QLineEdit__ActionPosition(self, action, position)
    end
    
    def add_action(icon : Icon, position : LineEdit::ActionPosition) : Action
      Action.new(unwrap: Binding.bg_QLineEdit_addAction_const_QIcon_R_QLineEdit__ActionPosition(self, icon, position))
    end
    
    def text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_setText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def clear() : Void
      Binding.bg_QLineEdit_clear_(self)
    end
    
    def select_all() : Void
      Binding.bg_QLineEdit_selectAll_(self)
    end
    
    def undo() : Void
      Binding.bg_QLineEdit_undo_(self)
    end
    
    def redo() : Void
      Binding.bg_QLineEdit_redo_(self)
    end
    
    def cut() : Void
      Binding.bg_QLineEdit_cut_(self)
    end
    
    def copy() : Void
      Binding.bg_QLineEdit_copy_(self)
    end
    
    def paste() : Void
      Binding.bg_QLineEdit_paste_(self)
    end
    
    def deselect() : Void
      Binding.bg_QLineEdit_deselect_(self)
    end
    
    def insert(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_insert_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def create_standard_context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QLineEdit_createStandardContextMenu_(self))
    end
    
    def text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_textChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def text_edited(unnamed_arg_0 : String) : Void
      Binding.bg_QLineEdit_textEdited_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def cursor_position_changed(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLineEdit_cursorPositionChanged_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def return_pressed() : Void
      Binding.bg_QLineEdit_returnPressed_(self)
    end
    
    def editing_finished() : Void
      Binding.bg_QLineEdit_editingFinished_(self)
    end
    
    def selection_changed() : Void
      Binding.bg_QLineEdit_selectionChanged_(self)
    end
    
    def input_rejected() : Void
      Binding.bg_QLineEdit_inputRejected_(self)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QLineEdit_mouseDoubleClickEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QLineEdit_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QLineEdit_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QLineEdit_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QLineEdit_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
      Binding.bg_QLineEdit_dragEnterEvent_QDragEnterEvent_X(self, unnamed_arg_0)
    end
    
    protected def drag_move_event(e : DragMoveEvent) : Void
      Binding.bg_QLineEdit_dragMoveEvent_QDragMoveEvent_X(self, e)
    end
    
    protected def drag_leave_event(e : DragLeaveEvent) : Void
      Binding.bg_QLineEdit_dragLeaveEvent_QDragLeaveEvent_X(self, e)
    end
    
    protected def drop_event(unnamed_arg_0 : DropEvent) : Void
      Binding.bg_QLineEdit_dropEvent_QDropEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QLineEdit_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QLineEdit_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QLineEdit_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionFrame*) : Void
      Binding.bg_QLineEdit_initStyleOption_QStyleOptionFrame_X(self, option)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def input_method_query(property : InputMethodQuery, argument : Variant) : Variant
      Qt::Variant.new(Binding.bg_QLineEdit_inputMethodQuery_Qt__InputMethodQuery_QVariant(self, property, (argument.to_unsafe)))
    end
    
    def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QLineEdit_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def cursor_rect() : Rect
      Rect.new(unwrap: Binding.bg_QLineEdit_cursorRect_(self))
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QLineEdit_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ActionPosition : UInt32
      LeadingPosition = 0
      TrailingPosition = 1
    end
    enum EchoMode : UInt32
      Normal = 0
      NoEcho = 1
      Password = 2
      PasswordEchoOnEdit = 3
    end
    def on_text_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_textChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_text_edited(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_textEdited_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_cursor_position_changed(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_cursorPositionChanged_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_return_pressed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_returnPressed_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_editing_finished(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_editingFinished_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_selection_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_selectionChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_input_rejected(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLineEdit_CONNECT_inputRejected_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QLineEdit*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : LineEdit)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QLineEdit_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QLineEdit_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QLineEdit_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QLineEdit_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QLineEdit_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_double_click_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QLineEdit_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QLineEdit_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QLineEdit_focusInEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QLineEdit_focusOutEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QLineEdit_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_enter_event(unnamed_arg_0 : DragEnterEvent) : Void
        Binding.bg_QLineEdit_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def drag_move_event(e : DragMoveEvent) : Void
        Binding.bg_QLineEdit_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, e)
      end
      
      protected def drag_leave_event(e : DragLeaveEvent) : Void
        Binding.bg_QLineEdit_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, e)
      end
      
      protected def drop_event(unnamed_arg_0 : DropEvent) : Void
        Binding.bg_QLineEdit_dropEvent_SUPER_QDropEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QLineEdit_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QLineEdit_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QLineEdit_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QLineEdit_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QLineEdit_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ItemEditorFactory
    @unwrap : Binding::QItemEditorFactory*
    
    def initialize()
      result = Binding.bg_QItemEditorFactory__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ItemEditorFactory)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ create_editor value_property_name ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QItemEditorFactory.new(
      bg_QItemEditorFactory_createEditor_int_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("create_editor") %} Proc(Int32, Binding::QWidget*, Binding::QWidget*).new{|user_type, parent| self.create_editor(user_type, Widget.new(unwrap: parent)).to_unsafe } {% else %} nil {% end %}),
      bg_QItemEditorFactory_valuePropertyName_int: BindgenHelper.wrap_proc({% if forwarded.includes?("value_property_name") %} Proc(Int32, Binding::QByteArray*).new{|user_type| self.value_property_name(user_type) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QItemEditorFactory_JUMPTABLE_BgJumptable_QItemEditorFactory_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def create_editor(user_type : Int32, parent : Widget) : Widget
      Widget.new(unwrap: Binding.bg_QItemEditorFactory_createEditor_int_QWidget_X(self, user_type, parent))
    end
    
    def value_property_name(user_type : Int32) : Binding::QByteArray*
      Binding.bg_QItemEditorFactory_valuePropertyName_int(self, user_type)
    end
    
    def register_editor(user_type : Int32, creator : Binding::QItemEditorCreatorBase*) : Void
      Binding.bg_QItemEditorFactory_registerEditor_int_QItemEditorCreatorBase_X(self, user_type, creator)
    end
    
    def self.default_factory() : ItemEditorFactory
      ItemEditorFactory.new(unwrap: Binding.bg_QItemEditorFactory_defaultFactory_STATIC_())
    end
    
    def self.default_factory=(factory : ItemEditorFactory) : Void
      Binding.bg_QItemEditorFactory_setDefaultFactory_STATIC_QItemEditorFactory_X(factory)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QItemEditorFactory*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ItemEditorFactory)
      end
      def create_editor(user_type : Int32, parent : Widget) : Widget
        Widget.new(unwrap: Binding.bg_QItemEditorFactory_createEditor_SUPER_int_QWidget_X(@myself, user_type, parent))
      end
      
      def value_property_name(user_type : Int32) : Binding::QByteArray*
        Binding.bg_QItemEditorFactory_valuePropertyName_SUPER_int(@myself, user_type)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Label < Frame
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QLabel_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLabel_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QLabel__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|ev| self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLabel_JUMPTABLE_BgJumptable_QLabel_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, f : WindowFlags)
      result = Binding.bg_QLabel__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|ev| self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLabel_JUMPTABLE_BgJumptable_QLabel_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Widget? = nil)
      result = Binding.bg_QLabel__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|ev| self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLabel_JUMPTABLE_BgJumptable_QLabel_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Widget?, f : WindowFlags)
      result = Binding.bg_QLabel__CONSTRUCT_const_QString_R_QWidget_X_Qt__WindowFlags(Qt::Converter::QString.wrap(text), parent, f)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Label)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width event key_press_event paint_event change_event mouse_press_event mouse_move_event mouse_release_event context_menu_event focus_in_event focus_out_event focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLabel.new(
      bg_QLabel_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLabel_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLabel_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLabel_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QLabel_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLabel_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLabel_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLabel_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_press_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_move_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|ev| self.mouse_release_event(MouseEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|ev| self.context_menu_event(ev) } {% else %} nil {% end %}),
      bg_QLabel_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_in_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|ev| self.focus_out_event(FocusEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QLabel_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLabel_JUMPTABLE_BgJumptable_QLabel_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_text_(self))
    end
    
    def movie() : Binding::QMovie*
      Binding.bg_QLabel_movie_(self)
    end
    
    def text_format() : TextFormatEnum
      Binding.bg_QLabel_textFormat_(self)
    end
    
    def text_format=(unnamed_arg_0 : TextFormatEnum) : Void
      Binding.bg_QLabel_setTextFormat_Qt__TextFormat(self, unnamed_arg_0)
    end
    
    def alignment() : Alignment
      Binding.bg_QLabel_alignment_(self)
    end
    
    def alignment=(unnamed_arg_0 : Alignment) : Void
      Binding.bg_QLabel_setAlignment_Qt__Alignment(self, unnamed_arg_0)
    end
    
    def word_wrap=(on : Bool) : Void
      Binding.bg_QLabel_setWordWrap_bool(self, on)
    end
    
    def word_wrap() : Bool
      Binding.bg_QLabel_wordWrap_(self)
    end
    
    def indent() : Int32
      Binding.bg_QLabel_indent_(self)
    end
    
    def indent=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setIndent_int(self, unnamed_arg_0)
    end
    
    def margin() : Int32
      Binding.bg_QLabel_margin_(self)
    end
    
    def margin=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setMargin_int(self, unnamed_arg_0)
    end
    
    def has_scaled_contents?() : Bool
      Binding.bg_QLabel_hasScaledContents_(self)
    end
    
    def scaled_contents=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLabel_setScaledContents_bool(self, unnamed_arg_0)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QLabel_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QLabel_minimumSizeHint_(self)
    end
    
    def buddy=(unnamed_arg_0 : Widget) : Void
      Binding.bg_QLabel_setBuddy_QWidget_X(self, unnamed_arg_0)
    end
    
    def buddy() : Widget
      Widget.new(unwrap: Binding.bg_QLabel_buddy_(self))
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QLabel_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def open_external_links() : Bool
      Binding.bg_QLabel_openExternalLinks_(self)
    end
    
    def open_external_links=(open : Bool) : Void
      Binding.bg_QLabel_setOpenExternalLinks_bool(self, open)
    end
    
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QLabel_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    
    def text_interaction_flags() : TextInteractionFlags
      Binding.bg_QLabel_textInteractionFlags_(self)
    end
    
    def set_selection(unnamed_arg_0 : Int32, unnamed_arg_1 : Int32) : Void
      Binding.bg_QLabel_setSelection_int_int(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    def has_selected_text?() : Bool
      Binding.bg_QLabel_hasSelectedText_(self)
    end
    
    def selected_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QLabel_selectedText_(self))
    end
    
    def selection_start() : Int32
      Binding.bg_QLabel_selectionStart_(self)
    end
    
    def text=(unnamed_arg_0 : String) : Void
      Binding.bg_QLabel_setText_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def pixmap=(unnamed_arg_0 : Pixmap) : Void
      Binding.bg_QLabel_setPixmap_const_QPixmap_R(self, unnamed_arg_0)
    end
    
    def picture=(unnamed_arg_0 : Binding::QPicture*) : Void
      Binding.bg_QLabel_setPicture_const_QPicture_R(self, unnamed_arg_0)
    end
    
    def movie=(movie : Binding::QMovie*) : Void
      Binding.bg_QLabel_setMovie_QMovie_X(self, movie)
    end
    
    def num=(unnamed_arg_0 : Int32) : Void
      Binding.bg_QLabel_setNum_int(self, unnamed_arg_0)
    end
    
    def num=(unnamed_arg_0 : Float64) : Void
      Binding.bg_QLabel_setNum_double(self, unnamed_arg_0)
    end
    
    def clear() : Void
      Binding.bg_QLabel_clear_(self)
    end
    
    def link_activated(link : String) : Void
      Binding.bg_QLabel_linkActivated_const_QString_R(self, Qt::Converter::QString.wrap(link))
    end
    
    def link_hovered(link : String) : Void
      Binding.bg_QLabel_linkHovered_const_QString_R(self, Qt::Converter::QString.wrap(link))
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QLabel_event_QEvent_X(self, e)
    end
    
    protected def key_press_event(ev : KeyEvent) : Void
      Binding.bg_QLabel_keyPressEvent_QKeyEvent_X(self, ev)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QLabel_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QLabel_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(ev : MouseEvent) : Void
      Binding.bg_QLabel_mousePressEvent_QMouseEvent_X(self, ev)
    end
    
    protected def mouse_move_event(ev : MouseEvent) : Void
      Binding.bg_QLabel_mouseMoveEvent_QMouseEvent_X(self, ev)
    end
    
    protected def mouse_release_event(ev : MouseEvent) : Void
      Binding.bg_QLabel_mouseReleaseEvent_QMouseEvent_X(self, ev)
    end
    
    protected def context_menu_event(ev : Binding::QContextMenuEvent*) : Void
      Binding.bg_QLabel_contextMenuEvent_QContextMenuEvent_X(self, ev)
    end
    
    protected def focus_in_event(ev : FocusEvent) : Void
      Binding.bg_QLabel_focusInEvent_QFocusEvent_X(self, ev)
    end
    
    protected def focus_out_event(ev : FocusEvent) : Void
      Binding.bg_QLabel_focusOutEvent_QFocusEvent_X(self, ev)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QLabel_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QLabel_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_link_activated(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLabel_CONNECT_linkActivated_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_link_hovered(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLabel_CONNECT_linkHovered_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QLabel*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Label)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QLabel_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QLabel_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QLabel_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QLabel_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def key_press_event(ev : KeyEvent) : Void
        Binding.bg_QLabel_keyPressEvent_SUPER_QKeyEvent_X(@myself, ev)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QLabel_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QLabel_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(ev : MouseEvent) : Void
        Binding.bg_QLabel_mousePressEvent_SUPER_QMouseEvent_X(@myself, ev)
      end
      
      protected def mouse_move_event(ev : MouseEvent) : Void
        Binding.bg_QLabel_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, ev)
      end
      
      protected def mouse_release_event(ev : MouseEvent) : Void
        Binding.bg_QLabel_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, ev)
      end
      
      protected def context_menu_event(ev : Binding::QContextMenuEvent*) : Void
        Binding.bg_QLabel_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, ev)
      end
      
      protected def focus_in_event(ev : FocusEvent) : Void
        Binding.bg_QLabel_focusInEvent_SUPER_QFocusEvent_X(@myself, ev)
      end
      
      protected def focus_out_event(ev : FocusEvent) : Void
        Binding.bg_QLabel_focusOutEvent_SUPER_QFocusEvent_X(@myself, ev)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QLabel_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class LcdNumber < Frame
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QLCDNumber_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QLCDNumber_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QLCDNumber_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QLCDNumber__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLCDNumber_JUMPTABLE_BgJumptable_QLCDNumber_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(num_digits : UInt32, parent : Widget? = nil)
      result = Binding.bg_QLCDNumber__CONSTRUCT_uint_QWidget_X(num_digits, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(LcdNumber)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event paint_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QLCDNumber.new(
      bg_QLCDNumber_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QLCDNumber_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QLCDNumber_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QLCDNumber_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QLCDNumber_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QFrame_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QLCDNumber_JUMPTABLE_BgJumptable_QLCDNumber_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def small_decimal_point() : Bool
      Binding.bg_QLCDNumber_smallDecimalPoint_(self)
    end
    
    def digit_count() : Int32
      Binding.bg_QLCDNumber_digitCount_(self)
    end
    
    def digit_count=(n_digits : Int32) : Void
      Binding.bg_QLCDNumber_setDigitCount_int(self, n_digits)
    end
    
    def check_overflow(num : Float64) : Bool
      Binding.bg_QLCDNumber_checkOverflow_double(self, num)
    end
    
    def check_overflow(num : Int32) : Bool
      Binding.bg_QLCDNumber_checkOverflow_int(self, num)
    end
    
    def mode() : LcdNumber::Mode
      Binding.bg_QLCDNumber_mode_(self)
    end
    
    def mode=(unnamed_arg_0 : LcdNumber::Mode) : Void
      Binding.bg_QLCDNumber_setMode_QLCDNumber__Mode(self, unnamed_arg_0)
    end
    
    def segment_style() : LcdNumber::SegmentStyle
      Binding.bg_QLCDNumber_segmentStyle_(self)
    end
    
    def segment_style=(unnamed_arg_0 : LcdNumber::SegmentStyle) : Void
      Binding.bg_QLCDNumber_setSegmentStyle_QLCDNumber__SegmentStyle(self, unnamed_arg_0)
    end
    
    def value() : Float64
      Binding.bg_QLCDNumber_value_(self)
    end
    
    def int_value() : Int32
      Binding.bg_QLCDNumber_intValue_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QLCDNumber_sizeHint_(self)
    end
    
    def display(str : String) : Void
      Binding.bg_QLCDNumber_display_const_QString_R(self, Qt::Converter::QString.wrap(str))
    end
    
    def display(num : Int32) : Void
      Binding.bg_QLCDNumber_display_int(self, num)
    end
    
    def display(num : Float64) : Void
      Binding.bg_QLCDNumber_display_double(self, num)
    end
    
    def set_hex_mode() : Void
      Binding.bg_QLCDNumber_setHexMode_(self)
    end
    
    def set_dec_mode() : Void
      Binding.bg_QLCDNumber_setDecMode_(self)
    end
    
    def set_oct_mode() : Void
      Binding.bg_QLCDNumber_setOctMode_(self)
    end
    
    def set_bin_mode() : Void
      Binding.bg_QLCDNumber_setBinMode_(self)
    end
    
    def small_decimal_point=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QLCDNumber_setSmallDecimalPoint_bool(self, unnamed_arg_0)
    end
    
    def overflow() : Void
      Binding.bg_QLCDNumber_overflow_(self)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QLCDNumber_event_QEvent_X(self, e)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QLCDNumber_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QFrame_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QLCDNumber_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Mode : UInt32
      Hex = 0
      Dec = 1
      Oct = 2
      Bin = 3
    end
    enum SegmentStyle : UInt32
      Outline = 0
      Filled = 1
      Flat = 2
    end
    def on_overflow(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QLCDNumber_CONNECT_overflow_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QLCDNumber*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : LcdNumber)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QLCDNumber_sizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QLCDNumber_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QLCDNumber_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QFrame_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class MainWindow < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QMainWindow_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMainWindow_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMainWindow_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QMainWindow__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} Proc(Binding::QMenu*).new{ self.create_popup_menu().to_unsafe } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMainWindow_JUMPTABLE_BgJumptable_QMainWindow_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget?, flags : WindowFlags)
      result = Binding.bg_QMainWindow__CONSTRUCT_QWidget_X_Qt__WindowFlags(parent, flags)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MainWindow)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall create_popup_menu context_menu_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event paint_event move_event resize_event close_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMainWindow.new(
      bg_QMainWindow_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMainWindow_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMainWindow_createPopupMenu_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_popup_menu") %} Proc(Binding::QMenu*).new{ self.create_popup_menu().to_unsafe } {% else %} nil {% end %}),
      bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QMainWindow_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMainWindow_JUMPTABLE_BgJumptable_QMainWindow_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QMainWindow_iconSize_(self)
    end
    
    def icon_size=(icon_size : Binding::QSize*) : Void
      Binding.bg_QMainWindow_setIconSize_const_QSize_R(self, icon_size)
    end
    
    def tool_button_style() : ToolButtonStyle
      Binding.bg_QMainWindow_toolButtonStyle_(self)
    end
    
    def tool_button_style=(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QMainWindow_setToolButtonStyle_Qt__ToolButtonStyle(self, tool_button_style)
    end
    
    def animated?() : Bool
      Binding.bg_QMainWindow_isAnimated_(self)
    end
    
    def dock_nesting_enabled?() : Bool
      Binding.bg_QMainWindow_isDockNestingEnabled_(self)
    end
    
    def document_mode() : Bool
      Binding.bg_QMainWindow_documentMode_(self)
    end
    
    def document_mode=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setDocumentMode_bool(self, enabled)
    end
    
    def tab_shape() : TabWidget::TabShape
      Binding.bg_QMainWindow_tabShape_(self)
    end
    
    def tab_shape=(tab_shape : TabWidget::TabShape) : Void
      Binding.bg_QMainWindow_setTabShape_QTabWidget__TabShape(self, tab_shape)
    end
    
    def tab_position(area : DockWidgetArea) : TabWidget::TabPosition
      Binding.bg_QMainWindow_tabPosition_Qt__DockWidgetArea(self, area)
    end
    
    def set_tab_position(areas : DockWidgetAreas, tab_position : TabWidget::TabPosition) : Void
      Binding.bg_QMainWindow_setTabPosition_Qt__DockWidgetAreas_QTabWidget__TabPosition(self, areas, tab_position)
    end
    
    def dock_options=(options : MainWindow::DockOptions) : Void
      Binding.bg_QMainWindow_setDockOptions_QMainWindow__DockOptions(self, options)
    end
    
    def dock_options() : MainWindow::DockOptions
      Binding.bg_QMainWindow_dockOptions_(self)
    end
    
    def is_separator(pos : Point) : Bool
      Binding.bg_QMainWindow_isSeparator_const_QPoint_R(self, pos)
    end
    
    def menu_bar() : MenuBar
      MenuBar.new(unwrap: Binding.bg_QMainWindow_menuBar_(self))
    end
    
    def menu_bar=(menubar : MenuBar) : Void
      Binding.bg_QMainWindow_setMenuBar_QMenuBar_X(self, menubar)
    end
    
    def menu_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_menuWidget_(self))
    end
    
    def menu_widget=(menubar : Widget) : Void
      Binding.bg_QMainWindow_setMenuWidget_QWidget_X(self, menubar)
    end
    
    def status_bar() : StatusBar
      StatusBar.new(unwrap: Binding.bg_QMainWindow_statusBar_(self))
    end
    
    def status_bar=(statusbar : StatusBar) : Void
      Binding.bg_QMainWindow_setStatusBar_QStatusBar_X(self, statusbar)
    end
    
    def central_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_centralWidget_(self))
    end
    
    def central_widget=(widget : Widget) : Void
      Binding.bg_QMainWindow_setCentralWidget_QWidget_X(self, widget)
    end
    
    def take_central_widget() : Widget
      Widget.new(unwrap: Binding.bg_QMainWindow_takeCentralWidget_(self))
    end
    
    def set_corner(corner : Corner, area : DockWidgetArea) : Void
      Binding.bg_QMainWindow_setCorner_Qt__Corner_Qt__DockWidgetArea(self, corner, area)
    end
    
    def corner(corner : Corner) : DockWidgetArea
      Binding.bg_QMainWindow_corner_Qt__Corner(self, corner)
    end
    
    def add_tool_bar_break(area : ToolBarArea = ToolBarArea::TopToolBarArea) : Void
      Binding.bg_QMainWindow_addToolBarBreak_Qt__ToolBarArea(self, area)
    end
    
    def insert_tool_bar_break(before : ToolBar) : Void
      Binding.bg_QMainWindow_insertToolBarBreak_QToolBar_X(self, before)
    end
    
    def add_tool_bar(area : ToolBarArea, toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_addToolBar_Qt__ToolBarArea_QToolBar_X(self, area, toolbar)
    end
    
    def add_tool_bar(toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_addToolBar_QToolBar_X(self, toolbar)
    end
    
    def add_tool_bar(title : String) : ToolBar
      ToolBar.new(unwrap: Binding.bg_QMainWindow_addToolBar_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    
    def insert_tool_bar(before : ToolBar, toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_insertToolBar_QToolBar_X_QToolBar_X(self, before, toolbar)
    end
    
    def remove_tool_bar(toolbar : ToolBar) : Void
      Binding.bg_QMainWindow_removeToolBar_QToolBar_X(self, toolbar)
    end
    
    def remove_tool_bar_break(before : ToolBar) : Void
      Binding.bg_QMainWindow_removeToolBarBreak_QToolBar_X(self, before)
    end
    
    def unified_title_and_tool_bar_on_mac() : Bool
      Binding.bg_QMainWindow_unifiedTitleAndToolBarOnMac_(self)
    end
    
    def tool_bar_area(toolbar : ToolBar) : ToolBarArea
      Binding.bg_QMainWindow_toolBarArea_QToolBar_X(self, toolbar)
    end
    
    def tool_bar_break(toolbar : ToolBar) : Bool
      Binding.bg_QMainWindow_toolBarBreak_QToolBar_X(self, toolbar)
    end
    
    def add_dock_widget(area : DockWidgetArea, dockwidget : DockWidget) : Void
      Binding.bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X(self, area, dockwidget)
    end
    
    def add_dock_widget(area : DockWidgetArea, dockwidget : DockWidget, orientation : Orientation) : Void
      Binding.bg_QMainWindow_addDockWidget_Qt__DockWidgetArea_QDockWidget_X_Qt__Orientation(self, area, dockwidget, orientation)
    end
    
    def split_dock_widget(after : DockWidget, dockwidget : DockWidget, orientation : Orientation) : Void
      Binding.bg_QMainWindow_splitDockWidget_QDockWidget_X_QDockWidget_X_Qt__Orientation(self, after, dockwidget, orientation)
    end
    
    def tabify_dock_widget(first : DockWidget, second : DockWidget) : Void
      Binding.bg_QMainWindow_tabifyDockWidget_QDockWidget_X_QDockWidget_X(self, first, second)
    end
    
    def tabified_dock_widgets(dockwidget : DockWidget) : Enumerable(DockWidget)
      Container_QList_QDockWidget_X_.new(unwrap: Binding.bg_QMainWindow_tabifiedDockWidgets_QDockWidget_X(self, dockwidget))
    end
    
    def remove_dock_widget(dockwidget : DockWidget) : Void
      Binding.bg_QMainWindow_removeDockWidget_QDockWidget_X(self, dockwidget)
    end
    
    def restore_dock_widget(dockwidget : DockWidget) : Bool
      Binding.bg_QMainWindow_restoreDockWidget_QDockWidget_X(self, dockwidget)
    end
    
    def dock_widget_area(dockwidget : DockWidget) : DockWidgetArea
      Binding.bg_QMainWindow_dockWidgetArea_QDockWidget_X(self, dockwidget)
    end
    
    def resize_docks(docks : Enumerable(DockWidget), sizes : Enumerable(Int32), orientation : Orientation) : Void
      Binding.bg_QMainWindow_resizeDocks_const_QList_QDockWidget_X__R_const_QList_int__R_Qt__Orientation(self, BindgenHelper.wrap_container(Container_QList_QDockWidget_X_, docks).to_unsafe, BindgenHelper.wrap_container(Container_QList_int_, sizes).to_unsafe, orientation)
    end
    
    def save_state(version : Int32 = 0) : Binding::QByteArray*
      Binding.bg_QMainWindow_saveState_int(self, version)
    end
    
    def restore_state(state : Binding::QByteArray*, version : Int32 = 0) : Bool
      Binding.bg_QMainWindow_restoreState_const_QByteArray_R_int(self, state, version)
    end
    
    def create_popup_menu() : Menu
      Menu.new(unwrap: Binding.bg_QMainWindow_createPopupMenu_(self))
    end
    
    def animated=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setAnimated_bool(self, enabled)
    end
    
    def dock_nesting_enabled=(enabled : Bool) : Void
      Binding.bg_QMainWindow_setDockNestingEnabled_bool(self, enabled)
    end
    
    def unified_title_and_tool_bar_on_mac=(set : Bool) : Void
      Binding.bg_QMainWindow_setUnifiedTitleAndToolBarOnMac_bool(self, set)
    end
    
    def icon_size_changed(icon_size : Binding::QSize*) : Void
      Binding.bg_QMainWindow_iconSizeChanged_const_QSize_R(self, icon_size)
    end
    
    def tool_button_style_changed(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QMainWindow_toolButtonStyleChanged_Qt__ToolButtonStyle(self, tool_button_style)
    end
    
    def tabified_dock_widget_activated(dock_widget : DockWidget) : Void
      Binding.bg_QMainWindow_tabifiedDockWidgetActivated_QDockWidget_X(self, dock_widget)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QMainWindow_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QMainWindow_event_QEvent_X(self, event)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QWidget_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QMainWindow_staticMetaObject_STATIC_GETTER_()
    end
    
    @[Flags]
    enum DockOptions : UInt32
      AnimatedDocks = 1
      AllowNestedDocks = 2
      AllowTabbedDocks = 4
      ForceTabbedDocks = 8
      VerticalTabs = 16
      GroupedDragging = 32
    end
    def on_icon_size_changed(&_proc_ : Proc(Binding::QSize, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSize*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tool_button_style_changed(&_proc_ : Proc(ToolButtonStyle, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_CONNECT_toolButtonStyleChanged_CrystalProc_void__Qt__ToolButtonStyle_(self, BindgenHelper.wrap_proc(Proc(ToolButtonStyle, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tabified_dock_widget_activated(&_proc_ : Proc(DockWidget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMainWindow_CONNECT_tabifiedDockWidgetActivated_CrystalProc_void__QDockWidget_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QDockWidget*, Void).new do |arg0| _proc_.call(DockWidget.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QMainWindow*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : MainWindow)
      end
      def create_popup_menu() : Menu
        Menu.new(unwrap: Binding.bg_QMainWindow_createPopupMenu_SUPER_(@myself))
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QMainWindow_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QMainWindow_event_SUPER_QEvent_X(@myself, event)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QWidget_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class Menu < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QMenu_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMenu_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QMenu__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event input_method_query ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|unnamed_arg_0| self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMenu_JUMPTABLE_BgJumptable_QMenu_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(title : String, parent : Widget? = nil)
      result = Binding.bg_QMenu__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event input_method_query ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|unnamed_arg_0| self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMenu_JUMPTABLE_BgJumptable_QMenu_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def add_action(icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    
    def add_action(text : String, receiver : Object, member : UInt8*, shortcut : KeySequence) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(self, Qt::Converter::QString.wrap(text), receiver, member, shortcut))
    end
    
    def add_action(icon : Icon, text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(self, icon, Qt::Converter::QString.wrap(text), receiver, member))
    end
    
    def add_action(icon : Icon, text : String, receiver : Object, member : UInt8*, shortcut : KeySequence) : Action
      Action.new(unwrap: Binding.bg_QMenu_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X_const_QKeySequence_R(self, icon, Qt::Converter::QString.wrap(text), receiver, member, shortcut))
    end
    
    def add_menu(menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenu_addMenu_QMenu_X(self, menu))
    end
    
    def add_menu(title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenu_addMenu_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    
    def add_menu(icon : Icon, title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenu_addMenu_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(title)))
    end
    
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QMenu_addSeparator_(self))
    end
    
    def add_section(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addSection_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def add_section(icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_addSection_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    
    def insert_menu(before : Action, menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertMenu_QAction_X_QMenu_X(self, before, menu))
    end
    
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSeparator_QAction_X(self, before))
    end
    
    def insert_section(before : Action, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSection_QAction_X_const_QString_R(self, before, Qt::Converter::QString.wrap(text)))
    end
    
    def insert_section(before : Action, icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QMenu_insertSection_QAction_X_const_QIcon_R_const_QString_R(self, before, icon, Qt::Converter::QString.wrap(text)))
    end
    
    def empty?() : Bool
      Binding.bg_QMenu_isEmpty_(self)
    end
    
    def clear() : Void
      Binding.bg_QMenu_clear_(self)
    end
    
    def tear_off_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QMenu_setTearOffEnabled_bool(self, unnamed_arg_0)
    end
    
    def tear_off_enabled?() : Bool
      Binding.bg_QMenu_isTearOffEnabled_(self)
    end
    
    def tear_off_menu_visible?() : Bool
      Binding.bg_QMenu_isTearOffMenuVisible_(self)
    end
    
    def show_tear_off_menu() : Void
      Binding.bg_QMenu_showTearOffMenu_(self)
    end
    
    def show_tear_off_menu(pos : Point) : Void
      Binding.bg_QMenu_showTearOffMenu_const_QPoint_R(self, pos)
    end
    
    def hide_tear_off_menu() : Void
      Binding.bg_QMenu_hideTearOffMenu_(self)
    end
    
    def default_action=(unnamed_arg_0 : Action) : Void
      Binding.bg_QMenu_setDefaultAction_QAction_X(self, unnamed_arg_0)
    end
    
    def default_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_defaultAction_(self))
    end
    
    def active_action=(act : Action) : Void
      Binding.bg_QMenu_setActiveAction_QAction_X(self, act)
    end
    
    def active_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_activeAction_(self))
    end
    
    def popup(pos : Point, at : Action? = nil) : Void
      Binding.bg_QMenu_popup_const_QPoint_R_QAction_X(self, pos, at)
    end
    
    def exec() : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_(self))
    end
    
    def exec(pos : Point, at : Action? = nil) : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_const_QPoint_R_QAction_X(self, pos, at))
    end
    
    def self.exec(actions : Enumerable(Action), pos : Point, at : Action? = nil, parent : Widget? = nil) : Action
      Action.new(unwrap: Binding.bg_QMenu_exec_STATIC_QList_QAction_X__const_QPoint_R_QAction_X_QWidget_X(BindgenHelper.wrap_container(Container_QList_QAction_X_, actions).to_unsafe, pos, at, parent))
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QMenu_sizeHint_(self)
    end
    
    def action_geometry(unnamed_arg_0 : Action) : Rect
      Rect.new(unwrap: Binding.bg_QMenu_actionGeometry_QAction_X(self, unnamed_arg_0))
    end
    
    def action_at(unnamed_arg_0 : Point) : Action
      Action.new(unwrap: Binding.bg_QMenu_actionAt_const_QPoint_R(self, unnamed_arg_0))
    end
    
    def menu_action() : Action
      Action.new(unwrap: Binding.bg_QMenu_menuAction_(self))
    end
    
    def title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenu_title_(self))
    end
    
    def title=(title : String) : Void
      Binding.bg_QMenu_setTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QMenu_icon_(self))
    end
    
    def icon=(icon : Icon) : Void
      Binding.bg_QMenu_setIcon_const_QIcon_R(self, icon)
    end
    
    def no_replay_for=(widget : Widget) : Void
      Binding.bg_QMenu_setNoReplayFor_QWidget_X(self, widget)
    end
    
    def platform_menu() : Binding::QPlatformMenu*
      Binding.bg_QMenu_platformMenu_(self)
    end
    
    def platform_menu=(platform_menu : Binding::QPlatformMenu*) : Void
      Binding.bg_QMenu_setPlatformMenu_QPlatformMenu_X(self, platform_menu)
    end
    
    def to_ns_menu() : Binding::NSMenu*
      Binding.bg_QMenu_toNSMenu_(self)
    end
    
    def set_as_dock_menu() : Void
      Binding.bg_QMenu_setAsDockMenu_(self)
    end
    
    def separators_collapsible() : Bool
      Binding.bg_QMenu_separatorsCollapsible_(self)
    end
    
    def separators_collapsible=(collapse : Bool) : Void
      Binding.bg_QMenu_setSeparatorsCollapsible_bool(self, collapse)
    end
    
    def tool_tips_visible() : Bool
      Binding.bg_QMenu_toolTipsVisible_(self)
    end
    
    def tool_tips_visible=(visible : Bool) : Void
      Binding.bg_QMenu_setToolTipsVisible_bool(self, visible)
    end
    
    def about_to_show() : Void
      Binding.bg_QMenu_aboutToShow_(self)
    end
    
    def about_to_hide() : Void
      Binding.bg_QMenu_aboutToHide_(self)
    end
    
    def triggered(action : Action) : Void
      Binding.bg_QMenu_triggered_QAction_X(self, action)
    end
    
    def hovered(action : Action) : Void
      Binding.bg_QMenu_hovered_QAction_X(self, action)
    end
    
    protected def column_count() : Int32
      Binding.bg_QMenu_columnCount_(self)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenu_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QMenu_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenu_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenu_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenu_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
      Binding.bg_QMenu_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    
    protected def enter_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenu_enterEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def leave_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenu_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QMenu_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QMenu_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def action_event(unnamed_arg_0 : ActionEvent) : Void
      Binding.bg_QMenu_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QMenu_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QMenu_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QMenu_focusNextPrevChild_bool(self, next_)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionMenuItem*, action : Action) : Void
      Binding.bg_QMenu_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(self, option, action)
    end
    
    protected def initialize(dd : Binding::QMenuPrivate*, parent : Widget? = nil)
      result = Binding.bg_QMenu__CONSTRUCT_QMenuPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(Menu)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint change_event key_press_event mouse_release_event mouse_press_event mouse_move_event wheel_event enter_event leave_event hide_event paint_event action_event timer_event event focus_next_prev_child dev_type visible= minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_double_click_event key_release_event focus_in_event focus_out_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event native_event metric init_painter shared_painter input_method_event input_method_query ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMenu.new(
      bg_QMenu_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenu_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenu_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenu_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenu_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|unnamed_arg_0| self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenu_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMenu_JUMPTABLE_BgJumptable_QMenu_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QMenu_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_about_to_show(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_CONNECT_aboutToShow_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_about_to_hide(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_CONNECT_aboutToHide_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_triggered(&_proc_ : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_CONNECT_triggered_CrystalProc_void__QAction_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAction*, Void).new do |arg0| _proc_.call(Action.new(unwrap: arg0)) end)))
    end
    
    def on_hovered(&_proc_ : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenu_CONNECT_hovered_CrystalProc_void__QAction_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAction*, Void).new do |arg0| _proc_.call(Action.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QMenu*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : Menu)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QMenu_sizeHint_SUPER_(@myself)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QMenu_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QMenu_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QMenu_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QMenu_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QMenu_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
        Binding.bg_QMenu_wheelEvent_SUPER_QWheelEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def enter_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QMenu_enterEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def leave_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QMenu_leaveEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def hide_event(unnamed_arg_0 : HideEvent) : Void
        Binding.bg_QMenu_hideEvent_SUPER_QHideEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QMenu_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def action_event(unnamed_arg_0 : ActionEvent) : Void
        Binding.bg_QMenu_actionEvent_SUPER_QActionEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QMenu_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QMenu_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QMenu_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class MenuBar < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QMenuBar_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QMenuBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QMenuBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QMenuBar__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(MenuBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint height_for_width visible= change_event key_press_event mouse_release_event mouse_press_event mouse_move_event leave_event paint_event resize_event action_event focus_out_event focus_in_event timer_event event_filter event dev_type has_height_for_width? paint_engine mouse_double_click_event wheel_event key_release_event enter_event move_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QMenuBar.new(
      bg_QMenuBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QMenuBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QMenuBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QMenuBar_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QMenuBar_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QMenuBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|unnamed_arg_0| self.key_press_event(KeyEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|unnamed_arg_0| self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_out_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|unnamed_arg_0| self.focus_in_event(FocusEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QMenuBar_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QMenuBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QMenuBar_JUMPTABLE_BgJumptable_QMenuBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    
    def add_menu(menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addMenu_QMenu_X(self, menu))
    end
    
    def add_menu(title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenuBar_addMenu_const_QString_R(self, Qt::Converter::QString.wrap(title)))
    end
    
    def add_menu(icon : Icon, title : String) : Menu
      Menu.new(unwrap: Binding.bg_QMenuBar_addMenu_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(title)))
    end
    
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QMenuBar_addSeparator_(self))
    end
    
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_insertSeparator_QAction_X(self, before))
    end
    
    def insert_menu(before : Action, menu : Menu) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_insertMenu_QAction_X_QMenu_X(self, before, menu))
    end
    
    def clear() : Void
      Binding.bg_QMenuBar_clear_(self)
    end
    
    def active_action() : Action
      Action.new(unwrap: Binding.bg_QMenuBar_activeAction_(self))
    end
    
    def active_action=(action : Action) : Void
      Binding.bg_QMenuBar_setActiveAction_QAction_X(self, action)
    end
    
    def default_up=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QMenuBar_setDefaultUp_bool(self, unnamed_arg_0)
    end
    
    def default_up?() : Bool
      Binding.bg_QMenuBar_isDefaultUp_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QMenuBar_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QMenuBar_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QMenuBar_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def action_geometry(unnamed_arg_0 : Action) : Rect
      Rect.new(unwrap: Binding.bg_QMenuBar_actionGeometry_QAction_X(self, unnamed_arg_0))
    end
    
    def action_at(unnamed_arg_0 : Point) : Action
      Action.new(unwrap: Binding.bg_QMenuBar_actionAt_const_QPoint_R(self, unnamed_arg_0))
    end
    
    def set_corner_widget(w : Widget, corner : Corner = Corner::TopRightCorner) : Void
      Binding.bg_QMenuBar_setCornerWidget_QWidget_X_Qt__Corner(self, w, corner)
    end
    
    def corner_widget(corner : Corner = Corner::TopRightCorner) : Widget
      Widget.new(unwrap: Binding.bg_QMenuBar_cornerWidget_Qt__Corner(self, corner))
    end
    
    def to_ns_menu() : Binding::NSMenu*
      Binding.bg_QMenuBar_toNSMenu_(self)
    end
    
    def native_menu_bar?() : Bool
      Binding.bg_QMenuBar_isNativeMenuBar_(self)
    end
    
    def native_menu_bar=(native_menu_bar : Bool) : Void
      Binding.bg_QMenuBar_setNativeMenuBar_bool(self, native_menu_bar)
    end
    
    def platform_menu_bar() : Binding::QPlatformMenuBar*
      Binding.bg_QMenuBar_platformMenuBar_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QMenuBar_setVisible_bool(self, visible)
    end
    
    def triggered(action : Action) : Void
      Binding.bg_QMenuBar_triggered_QAction_X(self, action)
    end
    
    def hovered(action : Action) : Void
      Binding.bg_QMenuBar_hovered_QAction_X(self, action)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenuBar_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
      Binding.bg_QMenuBar_keyPressEvent_QKeyEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenuBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenuBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QMenuBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def leave_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QMenuBar_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QMenuBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QMenuBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def action_event(unnamed_arg_0 : ActionEvent) : Void
      Binding.bg_QMenuBar_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QMenuBar_focusOutEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
      Binding.bg_QMenuBar_focusInEvent_QFocusEvent_X(self, unnamed_arg_0)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QMenuBar_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QMenuBar_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QMenuBar_event_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionMenuItem*, action : Action) : Void
      Binding.bg_QMenuBar_initStyleOption_QStyleOptionMenuItem_X_const_QAction_X(self, option, action)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QMenuBar_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_triggered(&_proc_ : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenuBar_CONNECT_triggered_CrystalProc_void__QAction_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAction*, Void).new do |arg0| _proc_.call(Action.new(unwrap: arg0)) end)))
    end
    
    def on_hovered(&_proc_ : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QMenuBar_CONNECT_hovered_CrystalProc_void__QAction_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAction*, Void).new do |arg0| _proc_.call(Action.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QMenuBar*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : MenuBar)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QMenuBar_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QMenuBar_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QMenuBar_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QMenuBar_setVisible_SUPER_bool(@myself, visible)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QMenuBar_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(unnamed_arg_0 : KeyEvent) : Void
        Binding.bg_QMenuBar_keyPressEvent_SUPER_QKeyEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QMenuBar_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QMenuBar_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QMenuBar_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def leave_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QMenuBar_leaveEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QMenuBar_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QMenuBar_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def action_event(unnamed_arg_0 : ActionEvent) : Void
        Binding.bg_QMenuBar_actionEvent_SUPER_QActionEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_out_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QMenuBar_focusOutEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def focus_in_event(unnamed_arg_0 : FocusEvent) : Void
        Binding.bg_QMenuBar_focusInEvent_SUPER_QFocusEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QMenuBar_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QMenuBar_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QMenuBar_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class TextEdit < AbstractScrollArea
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTextEdit_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTextEdit_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QTextEdit__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall load_resource input_method_query event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextEdit_loadResource_int_const_QUrl_R: BindgenHelper.wrap_proc({% if forwarded.includes?("load_resource") %} Proc(Int32, Binding::QUrl*, Binding::CrystalVariant).new{|type, name| (self.load_resource(type, Url.new(unwrap: name)).to_unsafe) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|property| (self.input_method_query(property).to_unsafe) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|e| self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_double_click_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|e| self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|e| self.drag_enter_event(DragEnterEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|e| self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|e| self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|e| self.drop_event(DropEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} Proc(Binding::QMimeData*).new{ self.create_mime_data_from_selection().to_unsafe } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} Proc(Binding::QMimeData*, Bool).new{|source| self.can_insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} Proc(Binding::QMimeData*, Void).new{|source| self.insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} Proc(Binding::QTextCursor*, Void).new{|cursor| self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTextEdit_JUMPTABLE_BgJumptable_QTextEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Widget? = nil)
      result = Binding.bg_QTextEdit__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall load_resource input_method_query event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextEdit_loadResource_int_const_QUrl_R: BindgenHelper.wrap_proc({% if forwarded.includes?("load_resource") %} Proc(Int32, Binding::QUrl*, Binding::CrystalVariant).new{|type, name| (self.load_resource(type, Url.new(unwrap: name)).to_unsafe) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|property| (self.input_method_query(property).to_unsafe) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|e| self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_double_click_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|e| self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|e| self.drag_enter_event(DragEnterEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|e| self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|e| self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|e| self.drop_event(DropEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} Proc(Binding::QMimeData*).new{ self.create_mime_data_from_selection().to_unsafe } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} Proc(Binding::QMimeData*, Bool).new{|source| self.can_insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} Proc(Binding::QMimeData*, Void).new{|source| self.insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} Proc(Binding::QTextCursor*, Void).new{|cursor| self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTextEdit_JUMPTABLE_BgJumptable_QTextEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def document=(document : TextDocument) : Void
      Binding.bg_QTextEdit_setDocument_QTextDocument_X(self, document)
    end
    
    def document() : TextDocument
      TextDocument.new(unwrap: Binding.bg_QTextEdit_document_(self))
    end
    
    def placeholder_text=(placeholder_text : String) : Void
      Binding.bg_QTextEdit_setPlaceholderText_const_QString_R(self, Qt::Converter::QString.wrap(placeholder_text))
    end
    
    def placeholder_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_placeholderText_(self))
    end
    
    def text_cursor=(cursor : TextCursor) : Void
      Binding.bg_QTextEdit_setTextCursor_const_QTextCursor_R(self, cursor)
    end
    
    def text_cursor() : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextEdit_textCursor_(self))
    end
    
    def read_only?() : Bool
      Binding.bg_QTextEdit_isReadOnly_(self)
    end
    
    def read_only=(ro : Bool) : Void
      Binding.bg_QTextEdit_setReadOnly_bool(self, ro)
    end
    
    def text_interaction_flags=(flags : TextInteractionFlags) : Void
      Binding.bg_QTextEdit_setTextInteractionFlags_Qt__TextInteractionFlags(self, flags)
    end
    
    def text_interaction_flags() : TextInteractionFlags
      Binding.bg_QTextEdit_textInteractionFlags_(self)
    end
    
    def font_point_size() : Float64
      Binding.bg_QTextEdit_fontPointSize_(self)
    end
    
    def font_family() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_fontFamily_(self))
    end
    
    def font_weight() : Int32
      Binding.bg_QTextEdit_fontWeight_(self)
    end
    
    def font_underline() : Bool
      Binding.bg_QTextEdit_fontUnderline_(self)
    end
    
    def font_italic() : Bool
      Binding.bg_QTextEdit_fontItalic_(self)
    end
    
    def text_color() : Color
      Color.new(unwrap: Binding.bg_QTextEdit_textColor_(self))
    end
    
    def text_background_color() : Color
      Color.new(unwrap: Binding.bg_QTextEdit_textBackgroundColor_(self))
    end
    
    def current_font() : Font
      Font.new(unwrap: Binding.bg_QTextEdit_currentFont_(self))
    end
    
    def alignment() : Alignment
      Binding.bg_QTextEdit_alignment_(self)
    end
    
    def merge_current_char_format(modifier : TextCharFormat) : Void
      Binding.bg_QTextEdit_mergeCurrentCharFormat_const_QTextCharFormat_R(self, modifier)
    end
    
    def current_char_format=(format : TextCharFormat) : Void
      Binding.bg_QTextEdit_setCurrentCharFormat_const_QTextCharFormat_R(self, format)
    end
    
    def current_char_format() : TextCharFormat
      TextCharFormat.new(unwrap: Binding.bg_QTextEdit_currentCharFormat_(self))
    end
    
    def auto_formatting() : TextEdit::AutoFormatting
      Binding.bg_QTextEdit_autoFormatting_(self)
    end
    
    def auto_formatting=(features : TextEdit::AutoFormatting) : Void
      Binding.bg_QTextEdit_setAutoFormatting_QTextEdit__AutoFormatting(self, features)
    end
    
    def tab_changes_focus() : Bool
      Binding.bg_QTextEdit_tabChangesFocus_(self)
    end
    
    def tab_changes_focus=(b : Bool) : Void
      Binding.bg_QTextEdit_setTabChangesFocus_bool(self, b)
    end
    
    def document_title=(title : String) : Void
      Binding.bg_QTextEdit_setDocumentTitle_const_QString_R(self, Qt::Converter::QString.wrap(title))
    end
    
    def document_title() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_documentTitle_(self))
    end
    
    def undo_redo_enabled?() : Bool
      Binding.bg_QTextEdit_isUndoRedoEnabled_(self)
    end
    
    def undo_redo_enabled=(enable : Bool) : Void
      Binding.bg_QTextEdit_setUndoRedoEnabled_bool(self, enable)
    end
    
    def line_wrap_mode() : TextEdit::LineWrapMode
      Binding.bg_QTextEdit_lineWrapMode_(self)
    end
    
    def line_wrap_mode=(mode : TextEdit::LineWrapMode) : Void
      Binding.bg_QTextEdit_setLineWrapMode_QTextEdit__LineWrapMode(self, mode)
    end
    
    def line_wrap_column_or_width() : Int32
      Binding.bg_QTextEdit_lineWrapColumnOrWidth_(self)
    end
    
    def line_wrap_column_or_width=(w : Int32) : Void
      Binding.bg_QTextEdit_setLineWrapColumnOrWidth_int(self, w)
    end
    
    def word_wrap_mode() : TextOption::WrapMode
      Binding.bg_QTextEdit_wordWrapMode_(self)
    end
    
    def word_wrap_mode=(policy : TextOption::WrapMode) : Void
      Binding.bg_QTextEdit_setWordWrapMode_QTextOption__WrapMode(self, policy)
    end
    
    def find(exp : String) : Bool
      Binding.bg_QTextEdit_find_const_QString_R(self, Qt::Converter::QString.wrap(exp))
    end
    
    def find(exp : String, options : TextDocument::FindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QString_R_QTextDocument__FindFlags(self, Qt::Converter::QString.wrap(exp), options)
    end
    
    def find(exp : Binding::QRegExp*) : Bool
      Binding.bg_QTextEdit_find_const_QRegExp_R(self, exp)
    end
    
    def find(exp : Binding::QRegExp*, options : TextDocument::FindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QRegExp_R_QTextDocument__FindFlags(self, exp, options)
    end
    
    def find(exp : Binding::QRegularExpression*) : Bool
      Binding.bg_QTextEdit_find_const_QRegularExpression_R(self, exp)
    end
    
    def find(exp : Binding::QRegularExpression*, options : TextDocument::FindFlags) : Bool
      Binding.bg_QTextEdit_find_const_QRegularExpression_R_QTextDocument__FindFlags(self, exp, options)
    end
    
    def to_plain_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toPlainText_(self))
    end
    
    def to_html() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toHtml_(self))
    end
    
    def to_markdown() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toMarkdown_(self))
    end
    
    def to_markdown(features : TextDocument::MarkdownFeatures) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_toMarkdown_QTextDocument__MarkdownFeatures(self, features))
    end
    
    def ensure_cursor_visible() : Void
      Binding.bg_QTextEdit_ensureCursorVisible_(self)
    end
    
    def load_resource(type : Int32, name : Url) : Variant
      Qt::Variant.new(Binding.bg_QTextEdit_loadResource_int_const_QUrl_R(self, type, name))
    end
    
    def create_standard_context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QTextEdit_createStandardContextMenu_(self))
    end
    
    def create_standard_context_menu(position : Point) : Menu
      Menu.new(unwrap: Binding.bg_QTextEdit_createStandardContextMenu_const_QPoint_R(self, position))
    end
    
    def cursor_for_position(pos : Point) : TextCursor
      TextCursor.new(unwrap: Binding.bg_QTextEdit_cursorForPosition_const_QPoint_R(self, pos))
    end
    
    def cursor_rect(cursor : TextCursor) : Rect
      Rect.new(unwrap: Binding.bg_QTextEdit_cursorRect_const_QTextCursor_R(self, cursor))
    end
    
    def cursor_rect() : Rect
      Rect.new(unwrap: Binding.bg_QTextEdit_cursorRect_(self))
    end
    
    def anchor_at(pos : Point) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTextEdit_anchorAt_const_QPoint_R(self, pos))
    end
    
    def overwrite_mode() : Bool
      Binding.bg_QTextEdit_overwriteMode_(self)
    end
    
    def overwrite_mode=(overwrite : Bool) : Void
      Binding.bg_QTextEdit_setOverwriteMode_bool(self, overwrite)
    end
    
    def tab_stop_distance() : Float64
      Binding.bg_QTextEdit_tabStopDistance_(self)
    end
    
    def tab_stop_distance=(distance : Float64) : Void
      Binding.bg_QTextEdit_setTabStopDistance_qreal(self, distance)
    end
    
    def cursor_width() : Int32
      Binding.bg_QTextEdit_cursorWidth_(self)
    end
    
    def cursor_width=(width : Int32) : Void
      Binding.bg_QTextEdit_setCursorWidth_int(self, width)
    end
    
    def accept_rich_text() : Bool
      Binding.bg_QTextEdit_acceptRichText_(self)
    end
    
    def accept_rich_text=(accept : Bool) : Void
      Binding.bg_QTextEdit_setAcceptRichText_bool(self, accept)
    end
    
    def move_cursor(operation : TextCursor::MoveOperation, mode : TextCursor::MoveMode = TextCursor::MoveMode::MoveAnchor) : Void
      Binding.bg_QTextEdit_moveCursor_QTextCursor__MoveOperation_QTextCursor__MoveMode(self, operation, mode)
    end
    
    def can_paste() : Bool
      Binding.bg_QTextEdit_canPaste_(self)
    end
    
    def print(printer : Binding::QPagedPaintDevice*) : Void
      Binding.bg_QTextEdit_print_QPagedPaintDevice_X(self, printer)
    end
    
    def input_method_query(property : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery(self, property))
    end
    
    def input_method_query(query : InputMethodQuery, argument : Variant) : Variant
      Qt::Variant.new(Binding.bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery_QVariant(self, query, (argument.to_unsafe)))
    end
    
    def font_point_size=(s : Float64) : Void
      Binding.bg_QTextEdit_setFontPointSize_qreal(self, s)
    end
    
    def font_family=(font_family : String) : Void
      Binding.bg_QTextEdit_setFontFamily_const_QString_R(self, Qt::Converter::QString.wrap(font_family))
    end
    
    def font_weight=(w : Int32) : Void
      Binding.bg_QTextEdit_setFontWeight_int(self, w)
    end
    
    def font_underline=(b : Bool) : Void
      Binding.bg_QTextEdit_setFontUnderline_bool(self, b)
    end
    
    def font_italic=(b : Bool) : Void
      Binding.bg_QTextEdit_setFontItalic_bool(self, b)
    end
    
    def text_color=(c : Color) : Void
      Binding.bg_QTextEdit_setTextColor_const_QColor_R(self, c)
    end
    
    def text_background_color=(c : Color) : Void
      Binding.bg_QTextEdit_setTextBackgroundColor_const_QColor_R(self, c)
    end
    
    def current_font=(f : Font) : Void
      Binding.bg_QTextEdit_setCurrentFont_const_QFont_R(self, f)
    end
    
    def alignment=(a : Alignment) : Void
      Binding.bg_QTextEdit_setAlignment_Qt__Alignment(self, a)
    end
    
    def plain_text=(text : String) : Void
      Binding.bg_QTextEdit_setPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def html=(text : String) : Void
      Binding.bg_QTextEdit_setHtml_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def markdown=(markdown : String) : Void
      Binding.bg_QTextEdit_setMarkdown_const_QString_R(self, Qt::Converter::QString.wrap(markdown))
    end
    
    def text=(text : String) : Void
      Binding.bg_QTextEdit_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def cut() : Void
      Binding.bg_QTextEdit_cut_(self)
    end
    
    def copy() : Void
      Binding.bg_QTextEdit_copy_(self)
    end
    
    def paste() : Void
      Binding.bg_QTextEdit_paste_(self)
    end
    
    def undo() : Void
      Binding.bg_QTextEdit_undo_(self)
    end
    
    def redo() : Void
      Binding.bg_QTextEdit_redo_(self)
    end
    
    def clear() : Void
      Binding.bg_QTextEdit_clear_(self)
    end
    
    def select_all() : Void
      Binding.bg_QTextEdit_selectAll_(self)
    end
    
    def insert_plain_text(text : String) : Void
      Binding.bg_QTextEdit_insertPlainText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def insert_html(text : String) : Void
      Binding.bg_QTextEdit_insertHtml_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def append(text : String) : Void
      Binding.bg_QTextEdit_append_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def scroll_to_anchor(name : String) : Void
      Binding.bg_QTextEdit_scrollToAnchor_const_QString_R(self, Qt::Converter::QString.wrap(name))
    end
    
    def zoom_in(range : Int32 = 1) : Void
      Binding.bg_QTextEdit_zoomIn_int(self, range)
    end
    
    def zoom_out(range : Int32 = 1) : Void
      Binding.bg_QTextEdit_zoomOut_int(self, range)
    end
    
    def text_changed() : Void
      Binding.bg_QTextEdit_textChanged_(self)
    end
    
    def undo_available(b : Bool) : Void
      Binding.bg_QTextEdit_undoAvailable_bool(self, b)
    end
    
    def redo_available(b : Bool) : Void
      Binding.bg_QTextEdit_redoAvailable_bool(self, b)
    end
    
    def current_char_format_changed(format : TextCharFormat) : Void
      Binding.bg_QTextEdit_currentCharFormatChanged_const_QTextCharFormat_R(self, format)
    end
    
    def copy_available(b : Bool) : Void
      Binding.bg_QTextEdit_copyAvailable_bool(self, b)
    end
    
    def selection_changed() : Void
      Binding.bg_QTextEdit_selectionChanged_(self)
    end
    
    def cursor_position_changed() : Void
      Binding.bg_QTextEdit_cursorPositionChanged_(self)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QTextEdit_event_QEvent_X(self, e)
    end
    
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QTextEdit_timerEvent_QTimerEvent_X(self, e)
    end
    
    protected def key_press_event(e : KeyEvent) : Void
      Binding.bg_QTextEdit_keyPressEvent_QKeyEvent_X(self, e)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QTextEdit_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def resize_event(e : ResizeEvent) : Void
      Binding.bg_QTextEdit_resizeEvent_QResizeEvent_X(self, e)
    end
    
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QTextEdit_paintEvent_QPaintEvent_X(self, e)
    end
    
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mousePressEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_move_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_double_click_event(e : MouseEvent) : Void
      Binding.bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X(self, e)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QTextEdit_focusNextPrevChild_bool(self, next_)
    end
    
    protected def context_menu_event(e : Binding::QContextMenuEvent*) : Void
      Binding.bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X(self, e)
    end
    
    protected def drag_enter_event(e : DragEnterEvent) : Void
      Binding.bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X(self, e)
    end
    
    protected def drag_leave_event(e : DragLeaveEvent) : Void
      Binding.bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X(self, e)
    end
    
    protected def drag_move_event(e : DragMoveEvent) : Void
      Binding.bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X(self, e)
    end
    
    protected def drop_event(e : DropEvent) : Void
      Binding.bg_QTextEdit_dropEvent_QDropEvent_X(self, e)
    end
    
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QTextEdit_focusInEvent_QFocusEvent_X(self, e)
    end
    
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QTextEdit_focusOutEvent_QFocusEvent_X(self, e)
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QTextEdit_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QTextEdit_changeEvent_QEvent_X(self, e)
    end
    
    protected def wheel_event(e : Binding::QWheelEvent*) : Void
      Binding.bg_QTextEdit_wheelEvent_QWheelEvent_X(self, e)
    end
    
    protected def create_mime_data_from_selection() : MimeData
      MimeData.new(unwrap: Binding.bg_QTextEdit_createMimeDataFromSelection_(self))
    end
    
    protected def can_insert_from_mime_data(source : MimeData) : Bool
      Binding.bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X(self, source)
    end
    
    protected def insert_from_mime_data(source : MimeData) : Void
      Binding.bg_QTextEdit_insertFromMimeData_const_QMimeData_X(self, source)
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    protected def initialize(dd : Binding::QTextEditPrivate*, parent : Widget)
      result = Binding.bg_QTextEdit__CONSTRUCT_QTextEditPrivate_R_QWidget_X(dd, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TextEdit)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall load_resource input_method_query event timer_event key_press_event key_release_event resize_event paint_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event focus_next_prev_child context_menu_event drag_enter_event drag_leave_event drag_move_event drop_event focus_in_event focus_out_event show_event change_event wheel_event create_mime_data_from_selection can_insert_from_mime_data insert_from_mime_data input_method_event scroll_contents_by do_set_text_cursor minimum_size_hint size_hint setup_viewport event_filter viewport_event viewport_size_hint ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTextEdit.new(
      bg_QTextEdit_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTextEdit_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTextEdit_loadResource_int_const_QUrl_R: BindgenHelper.wrap_proc({% if forwarded.includes?("load_resource") %} Proc(Int32, Binding::QUrl*, Binding::CrystalVariant).new{|type, name| (self.load_resource(type, Url.new(unwrap: name)).to_unsafe) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|property| (self.input_method_query(property).to_unsafe) } {% else %} nil {% end %}),
      bg_QTextEdit_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|e| self.resize_event(ResizeEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_double_click_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QTextEdit_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|e| self.context_menu_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|e| self.drag_enter_event(DragEnterEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|e| self.drag_leave_event(DragLeaveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|e| self.drag_move_event(DragMoveEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|e| self.drop_event(DropEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTextEdit_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|e| self.wheel_event(e) } {% else %} nil {% end %}),
      bg_QTextEdit_createMimeDataFromSelection_: BindgenHelper.wrap_proc({% if forwarded.includes?("create_mime_data_from_selection") %} Proc(Binding::QMimeData*).new{ self.create_mime_data_from_selection().to_unsafe } {% else %} nil {% end %}),
      bg_QTextEdit_canInsertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("can_insert_from_mime_data") %} Proc(Binding::QMimeData*, Bool).new{|source| self.can_insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_insertFromMimeData_const_QMimeData_X: BindgenHelper.wrap_proc({% if forwarded.includes?("insert_from_mime_data") %} Proc(Binding::QMimeData*, Void).new{|source| self.insert_from_mime_data(MimeData.new(unwrap: source)) } {% else %} nil {% end %}),
      bg_QTextEdit_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QTextEdit_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTextEdit_doSetTextCursor_const_QTextCursor_R: BindgenHelper.wrap_proc({% if forwarded.includes?("do_set_text_cursor") %} Proc(Binding::QTextCursor*, Void).new{|cursor| self.do_set_text_cursor(TextCursor.new(unwrap: cursor)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_setupViewport_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("setup_viewport") %} Proc(Binding::QWidget*, Void).new{|viewport| self.setup_viewport(Widget.new(unwrap: viewport)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|unnamed_arg_0, unnamed_arg_1| self.event_filter(Object.new(unwrap: unnamed_arg_0), Event.new(unwrap: unnamed_arg_1)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.viewport_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractScrollArea_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTextEdit_JUMPTABLE_BgJumptable_QTextEdit_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QTextEdit_scrollContentsBy_int_int(self, dx, dy)
    end
    
    protected def do_set_text_cursor(cursor : TextCursor) : Void
      Binding.bg_QTextEdit_doSetTextCursor_const_QTextCursor_R(self, cursor)
    end
    
    protected def zoom_in_f(range : Float32) : Void
      Binding.bg_QTextEdit_zoomInF_float(self, range)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_minimumSizeHint_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_sizeHint_(self)
    end
    
    def setup_viewport(viewport : Widget) : Void
      Binding.bg_QAbstractScrollArea_setupViewport_QWidget_X(self, viewport)
    end
    
    protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
      Binding.bg_QAbstractScrollArea_eventFilter_QObject_X_QEvent_X(self, unnamed_arg_0, unnamed_arg_1)
    end
    
    protected def viewport_event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QAbstractScrollArea_viewportEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QAbstractScrollArea_viewportSizeHint_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTextEdit_staticMetaObject_STATIC_GETTER_()
    end
    
    enum LineWrapMode : UInt32
      NoWrap = 0
      WidgetWidth = 1
      FixedPixelWidth = 2
      FixedColumnWidth = 3
    end
    enum AutoFormattingFlag : UInt32
      AutoNone = 0
      AutoBulletList = 1
      AutoAll = 4294967295
    end
    @[Flags]
    enum AutoFormatting : UInt32
      AutoNone = 0
      AutoBulletList = 1
      AutoAll = 4294967295
    end
    def on_text_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_textChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_undo_available(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_undoAvailable_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_redo_available(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_redoAvailable_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_current_char_format_changed(&_proc_ : Proc(TextCharFormat, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_currentCharFormatChanged_CrystalProc_void__const_QTextCharFormat_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QTextCharFormat*, Void).new do |arg0| _proc_.call(TextCharFormat.new(unwrap: arg0)) end)))
    end
    
    def on_copy_available(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_copyAvailable_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_selection_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_selectionChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_cursor_position_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTextEdit_CONNECT_cursorPositionChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QTextEdit*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TextEdit)
      end
      def load_resource(type : Int32, name : Url) : Variant
        Qt::Variant.new(Binding.bg_QTextEdit_loadResource_SUPER_int_const_QUrl_R(@myself, type, name))
      end
      
      def input_method_query(property : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QTextEdit_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, property))
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QTextEdit_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def timer_event(e : TimerEvent) : Void
        Binding.bg_QTextEdit_timerEvent_SUPER_QTimerEvent_X(@myself, e)
      end
      
      protected def key_press_event(e : KeyEvent) : Void
        Binding.bg_QTextEdit_keyPressEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QTextEdit_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def resize_event(e : ResizeEvent) : Void
        Binding.bg_QTextEdit_resizeEvent_SUPER_QResizeEvent_X(@myself, e)
      end
      
      protected def paint_event(e : PaintEvent) : Void
        Binding.bg_QTextEdit_paintEvent_SUPER_QPaintEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(e : MouseEvent) : Void
        Binding.bg_QTextEdit_mousePressEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_move_event(e : MouseEvent) : Void
        Binding.bg_QTextEdit_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_release_event(e : MouseEvent) : Void
        Binding.bg_QTextEdit_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_double_click_event(e : MouseEvent) : Void
        Binding.bg_QTextEdit_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QTextEdit_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def context_menu_event(e : Binding::QContextMenuEvent*) : Void
        Binding.bg_QTextEdit_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, e)
      end
      
      protected def drag_enter_event(e : DragEnterEvent) : Void
        Binding.bg_QTextEdit_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, e)
      end
      
      protected def drag_leave_event(e : DragLeaveEvent) : Void
        Binding.bg_QTextEdit_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, e)
      end
      
      protected def drag_move_event(e : DragMoveEvent) : Void
        Binding.bg_QTextEdit_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, e)
      end
      
      protected def drop_event(e : DropEvent) : Void
        Binding.bg_QTextEdit_dropEvent_SUPER_QDropEvent_X(@myself, e)
      end
      
      protected def focus_in_event(e : FocusEvent) : Void
        Binding.bg_QTextEdit_focusInEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def focus_out_event(e : FocusEvent) : Void
        Binding.bg_QTextEdit_focusOutEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QTextEdit_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QTextEdit_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def wheel_event(e : Binding::QWheelEvent*) : Void
        Binding.bg_QTextEdit_wheelEvent_SUPER_QWheelEvent_X(@myself, e)
      end
      
      protected def create_mime_data_from_selection() : MimeData
        MimeData.new(unwrap: Binding.bg_QTextEdit_createMimeDataFromSelection_SUPER_(@myself))
      end
      
      protected def can_insert_from_mime_data(source : MimeData) : Bool
        Binding.bg_QTextEdit_canInsertFromMimeData_SUPER_const_QMimeData_X(@myself, source)
      end
      
      protected def insert_from_mime_data(source : MimeData) : Void
        Binding.bg_QTextEdit_insertFromMimeData_SUPER_const_QMimeData_X(@myself, source)
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QTextEdit_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QTextEdit_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
      protected def do_set_text_cursor(cursor : TextCursor) : Void
        Binding.bg_QTextEdit_doSetTextCursor_SUPER_const_QTextCursor_R(@myself, cursor)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_minimumSizeHint_SUPER_(@myself)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_sizeHint_SUPER_(@myself)
      end
      
      def setup_viewport(viewport : Widget) : Void
        Binding.bg_QAbstractScrollArea_setupViewport_SUPER_QWidget_X(@myself, viewport)
      end
      
      protected def event_filter(unnamed_arg_0 : Object, unnamed_arg_1 : Event) : Bool
        Binding.bg_QAbstractScrollArea_eventFilter_SUPER_QObject_X_QEvent_X(@myself, unnamed_arg_0, unnamed_arg_1)
      end
      
      protected def viewport_event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QAbstractScrollArea_viewportEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QAbstractScrollArea_viewportSizeHint_SUPER_(@myself)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ProgressBar < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QProgressBar_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QProgressBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QProgressBar__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ProgressBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall text size_hint minimum_size_hint event paint_event dev_type visible= height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QProgressBar.new(
      bg_QProgressBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QProgressBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QProgressBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QProgressBar_text_: BindgenHelper.wrap_proc({% if forwarded.includes?("text") %} Proc(Binding::CrystalString).new{ Qt::Converter::QString.wrap(self.text()) } {% else %} nil {% end %}),
      bg_QProgressBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QProgressBar_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QProgressBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QProgressBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QProgressBar_JUMPTABLE_BgJumptable_QProgressBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def minimum() : Int32
      Binding.bg_QProgressBar_minimum_(self)
    end
    
    def maximum() : Int32
      Binding.bg_QProgressBar_maximum_(self)
    end
    
    def value() : Int32
      Binding.bg_QProgressBar_value_(self)
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_text_(self))
    end
    
    def text_visible=(visible : Bool) : Void
      Binding.bg_QProgressBar_setTextVisible_bool(self, visible)
    end
    
    def text_visible?() : Bool
      Binding.bg_QProgressBar_isTextVisible_(self)
    end
    
    def alignment() : Alignment
      Binding.bg_QProgressBar_alignment_(self)
    end
    
    def alignment=(alignment : Alignment) : Void
      Binding.bg_QProgressBar_setAlignment_Qt__Alignment(self, alignment)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QProgressBar_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QProgressBar_minimumSizeHint_(self)
    end
    
    def orientation() : Orientation
      Binding.bg_QProgressBar_orientation_(self)
    end
    
    def inverted_appearance=(invert : Bool) : Void
      Binding.bg_QProgressBar_setInvertedAppearance_bool(self, invert)
    end
    
    def inverted_appearance() : Bool
      Binding.bg_QProgressBar_invertedAppearance_(self)
    end
    
    def text_direction=(text_direction : ProgressBar::Direction) : Void
      Binding.bg_QProgressBar_setTextDirection_QProgressBar__Direction(self, text_direction)
    end
    
    def text_direction() : ProgressBar::Direction
      Binding.bg_QProgressBar_textDirection_(self)
    end
    
    def format=(format : String) : Void
      Binding.bg_QProgressBar_setFormat_const_QString_R(self, Qt::Converter::QString.wrap(format))
    end
    
    def reset_format() : Void
      Binding.bg_QProgressBar_resetFormat_(self)
    end
    
    def format() : String
      Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_format_(self))
    end
    
    def reset() : Void
      Binding.bg_QProgressBar_reset_(self)
    end
    
    def set_range(minimum : Int32, maximum : Int32) : Void
      Binding.bg_QProgressBar_setRange_int_int(self, minimum, maximum)
    end
    
    def minimum=(minimum : Int32) : Void
      Binding.bg_QProgressBar_setMinimum_int(self, minimum)
    end
    
    def maximum=(maximum : Int32) : Void
      Binding.bg_QProgressBar_setMaximum_int(self, maximum)
    end
    
    def value=(value : Int32) : Void
      Binding.bg_QProgressBar_setValue_int(self, value)
    end
    
    def orientation=(unnamed_arg_0 : Orientation) : Void
      Binding.bg_QProgressBar_setOrientation_Qt__Orientation(self, unnamed_arg_0)
    end
    
    def value_changed(value : Int32) : Void
      Binding.bg_QProgressBar_valueChanged_int(self, value)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QProgressBar_event_QEvent_X(self, e)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QProgressBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionProgressBar*) : Void
      Binding.bg_QProgressBar_initStyleOption_QStyleOptionProgressBar_X(self, option)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QProgressBar_staticMetaObject_STATIC_GETTER_()
    end
    
    enum Direction : UInt32
      TopToBottom = 0
      BottomToTop = 1
    end
    def on_value_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QProgressBar_CONNECT_valueChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QProgressBar*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ProgressBar)
      end
      def text() : String
        Qt::Converter::QString.unwrap(Binding.bg_QProgressBar_text_SUPER_(@myself))
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QProgressBar_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QProgressBar_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QProgressBar_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QProgressBar_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class RadioButton < AbstractButton
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QRadioButton_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QRadioButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QRadioButton_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QRadioButton_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QRadioButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QRadioButton__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(RadioButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button paint_event mouse_move_event check_state_set next_check_state key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QRadioButton.new(
      bg_QRadioButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QRadioButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QRadioButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|unnamed_arg_0| self.hit_button(Point.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QRadioButton_JUMPTABLE_BgJumptable_QRadioButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, parent : Widget? = nil)
      result = Binding.bg_QRadioButton__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(text), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(RadioButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event hit_button paint_event mouse_move_event check_state_set next_check_state key_press_event key_release_event mouse_press_event mouse_release_event focus_in_event focus_out_event change_event timer_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QRadioButton.new(
      bg_QRadioButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QRadioButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QRadioButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QRadioButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QRadioButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|unnamed_arg_0| self.hit_button(Point.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QRadioButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_press_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_release_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|e| self.timer_event(TimerEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QRadioButton_JUMPTABLE_BgJumptable_QRadioButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QRadioButton_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QRadioButton_minimumSizeHint_(self)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QRadioButton_event_QEvent_X(self, e)
    end
    
    protected def hit_button(unnamed_arg_0 : Point) : Bool
      Binding.bg_QRadioButton_hitButton_const_QPoint_R(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QRadioButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QRadioButton_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(button : Binding::QStyleOptionButton*) : Void
      Binding.bg_QRadioButton_initStyleOption_QStyleOptionButton_X(self, button)
    end
    
    protected def check_state_set() : Void
      Binding.bg_QAbstractButton_checkStateSet_(self)
    end
    
    protected def next_check_state() : Void
      Binding.bg_QAbstractButton_nextCheckState_(self)
    end
    
    protected def key_press_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(self, e)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def mouse_press_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mousePressEvent_QMouseEvent_X(self, e)
    end
    
    protected def mouse_release_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseReleaseEvent_QMouseEvent_X(self, e)
    end
    
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusInEvent_QFocusEvent_X(self, e)
    end
    
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(self, e)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractButton_changeEvent_QEvent_X(self, e)
    end
    
    protected def timer_event(e : TimerEvent) : Void
      Binding.bg_QAbstractButton_timerEvent_QTimerEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QRadioButton_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QRadioButton*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : RadioButton)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QRadioButton_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QRadioButton_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QRadioButton_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def hit_button(unnamed_arg_0 : Point) : Bool
        Binding.bg_QRadioButton_hitButton_SUPER_const_QPoint_R(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QRadioButton_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QRadioButton_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def check_state_set() : Void
        Binding.bg_QAbstractButton_checkStateSet_SUPER_(@myself)
      end
      
      protected def next_check_state() : Void
        Binding.bg_QAbstractButton_nextCheckState_SUPER_(@myself)
      end
      
      protected def key_press_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mousePressEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def mouse_release_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def focus_in_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def focus_out_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractButton_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
      protected def timer_event(e : TimerEvent) : Void
        Binding.bg_QAbstractButton_timerEvent_SUPER_QTimerEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ScrollBar < AbstractSlider
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QScrollBar_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QScrollBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollBar_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QScrollBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QScrollBar__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event wheel_event paint_event mouse_press_event mouse_release_event mouse_move_event hide_event slider_change context_menu_event key_press_event timer_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QScrollBar.new(
      bg_QScrollBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QScrollBar_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QScrollBar_JUMPTABLE_BgJumptable_QScrollBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(unnamed_arg_0 : Orientation, parent : Widget? = nil)
      result = Binding.bg_QScrollBar__CONSTRUCT_Qt__Orientation_QWidget_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ScrollBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint event wheel_event paint_event mouse_press_event mouse_release_event mouse_move_event hide_event slider_change context_menu_event key_press_event timer_event change_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QScrollBar.new(
      bg_QScrollBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QScrollBar_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QScrollBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QScrollBar_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|unnamed_arg_0| self.wheel_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QScrollBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_move_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|unnamed_arg_0| self.hide_event(HideEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange: BindgenHelper.wrap_proc({% if forwarded.includes?("slider_change") %} Proc(AbstractSlider::SliderChange, Void).new{|change| self.slider_change(change) } {% else %} nil {% end %}),
      bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|unnamed_arg_0| self.context_menu_event(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QAbstractSlider_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|ev| self.key_press_event(KeyEvent.new(unwrap: ev)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QAbstractSlider_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|e| self.change_event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QScrollBar_JUMPTABLE_BgJumptable_QScrollBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QScrollBar_sizeHint_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QScrollBar_event_QEvent_X(self, event)
    end
    
    protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
      Binding.bg_QScrollBar_wheelEvent_QWheelEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QScrollBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QScrollBar_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QScrollBar_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QScrollBar_mouseMoveEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def hide_event(unnamed_arg_0 : HideEvent) : Void
      Binding.bg_QScrollBar_hideEvent_QHideEvent_X(self, unnamed_arg_0)
    end
    
    protected def slider_change(change : AbstractSlider::SliderChange) : Void
      Binding.bg_QScrollBar_sliderChange_QAbstractSlider__SliderChange(self, change)
    end
    
    protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
      Binding.bg_QScrollBar_contextMenuEvent_QContextMenuEvent_X(self, unnamed_arg_0)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionSlider*) : Void
      Binding.bg_QScrollBar_initStyleOption_QStyleOptionSlider_X(self, option)
    end
    
    protected def key_press_event(ev : KeyEvent) : Void
      Binding.bg_QAbstractSlider_keyPressEvent_QKeyEvent_X(self, ev)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QAbstractSlider_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(e : Event) : Void
      Binding.bg_QAbstractSlider_changeEvent_QEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QScrollBar_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QScrollBar*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ScrollBar)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QScrollBar_sizeHint_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QScrollBar_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def wheel_event(unnamed_arg_0 : Binding::QWheelEvent*) : Void
        Binding.bg_QScrollBar_wheelEvent_SUPER_QWheelEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QScrollBar_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QScrollBar_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QScrollBar_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_move_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QScrollBar_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def hide_event(unnamed_arg_0 : HideEvent) : Void
        Binding.bg_QScrollBar_hideEvent_SUPER_QHideEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def slider_change(change : AbstractSlider::SliderChange) : Void
        Binding.bg_QScrollBar_sliderChange_SUPER_QAbstractSlider__SliderChange(@myself, change)
      end
      
      protected def context_menu_event(unnamed_arg_0 : Binding::QContextMenuEvent*) : Void
        Binding.bg_QScrollBar_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def key_press_event(ev : KeyEvent) : Void
        Binding.bg_QAbstractSlider_keyPressEvent_SUPER_QKeyEvent_X(@myself, ev)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QAbstractSlider_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(e : Event) : Void
        Binding.bg_QAbstractSlider_changeEvent_SUPER_QEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class SpinBox < AbstractSpinBox
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QSpinBox_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSpinBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QSpinBox__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event value_from_text text_from_value size_hint minimum_size_hint input_method_query step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSpinBox.new(
      bg_QSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QSpinBox_valueFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("value_from_text") %} Proc(Binding::CrystalString, Int32).new{|text| self.value_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QSpinBox_textFromValue_int: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_value") %} Proc(Int32, Binding::CrystalString).new{|val| Qt::Converter::QString.wrap(self.text_from_value(val)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSpinBox_JUMPTABLE_BgJumptable_QSpinBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def value() : Int32
      Binding.bg_QSpinBox_value_(self)
    end
    
    def prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_prefix_(self))
    end
    
    def prefix=(prefix : String) : Void
      Binding.bg_QSpinBox_setPrefix_const_QString_R(self, Qt::Converter::QString.wrap(prefix))
    end
    
    def suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_suffix_(self))
    end
    
    def suffix=(suffix : String) : Void
      Binding.bg_QSpinBox_setSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    
    def clean_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_cleanText_(self))
    end
    
    def single_step() : Int32
      Binding.bg_QSpinBox_singleStep_(self)
    end
    
    def single_step=(val : Int32) : Void
      Binding.bg_QSpinBox_setSingleStep_int(self, val)
    end
    
    def minimum() : Int32
      Binding.bg_QSpinBox_minimum_(self)
    end
    
    def minimum=(min : Int32) : Void
      Binding.bg_QSpinBox_setMinimum_int(self, min)
    end
    
    def maximum() : Int32
      Binding.bg_QSpinBox_maximum_(self)
    end
    
    def maximum=(max : Int32) : Void
      Binding.bg_QSpinBox_setMaximum_int(self, max)
    end
    
    def set_range(min : Int32, max : Int32) : Void
      Binding.bg_QSpinBox_setRange_int_int(self, min, max)
    end
    
    def step_type() : AbstractSpinBox::StepType
      Binding.bg_QSpinBox_stepType_(self)
    end
    
    def step_type=(step_type : AbstractSpinBox::StepType) : Void
      Binding.bg_QSpinBox_setStepType_QAbstractSpinBox__StepType(self, step_type)
    end
    
    def display_integer_base() : Int32
      Binding.bg_QSpinBox_displayIntegerBase_(self)
    end
    
    def display_integer_base=(base : Int32) : Void
      Binding.bg_QSpinBox_setDisplayIntegerBase_int(self, base)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QSpinBox_event_QEvent_X(self, event)
    end
    
    protected def value_from_text(text : String) : Int32
      Binding.bg_QSpinBox_valueFromText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    protected def text_from_value(val : Int32) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_textFromValue_int(self, val))
    end
    
    def value=(val : Int32) : Void
      Binding.bg_QSpinBox_setValue_int(self, val)
    end
    
    def text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QSpinBox_textChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_minimumSizeHint_(self)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def step_by(steps : Int32) : Void
      Binding.bg_QAbstractSpinBox_stepBy_int(self, steps)
    end
    
    def clear() : Void
      Binding.bg_QAbstractSpinBox_clear_(self)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QAbstractSpinBox_changeEvent_QEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QAbstractSpinBox_showEvent_QShowEvent_X(self, event)
    end
    
    protected def step_enabled() : AbstractSpinBox::StepEnabled
      Binding.bg_QAbstractSpinBox_stepEnabled_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QSpinBox_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_value_changed(_type1_ : Int32.class, &_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSpinBox_CONNECT_valueChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_text_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSpinBox_CONNECT_textChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_value_changed(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSpinBox_CONNECT_valueChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QSpinBox*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : SpinBox)
      end
      protected def event(event : Event) : Bool
        Binding.bg_QSpinBox_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def value_from_text(text : String) : Int32
        Binding.bg_QSpinBox_valueFromText_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(text))
      end
      
      protected def text_from_value(val : Int32) : String
        Qt::Converter::QString.unwrap(Binding.bg_QSpinBox_textFromValue_SUPER_int(@myself, val))
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_minimumSizeHint_SUPER_(@myself)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      def step_by(steps : Int32) : Void
        Binding.bg_QAbstractSpinBox_stepBy_SUPER_int(@myself, steps)
      end
      
      def clear() : Void
        Binding.bg_QAbstractSpinBox_clear_SUPER_(@myself)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractSpinBox_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QAbstractSpinBox_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def step_enabled() : AbstractSpinBox::StepEnabled
        Binding.bg_QAbstractSpinBox_stepEnabled_SUPER_(@myself)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class DoubleSpinBox < AbstractSpinBox
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QDoubleSpinBox_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QDoubleSpinBox_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QDoubleSpinBox__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(DoubleSpinBox)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall value_from_text text_from_value size_hint minimum_size_hint event input_method_query step_by clear resize_event key_press_event key_release_event wheel_event focus_in_event focus_out_event context_menu_event change_event close_event hide_event mouse_press_event mouse_release_event mouse_move_event timer_event paint_event show_event step_enabled ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QDoubleSpinBox.new(
      bg_QDoubleSpinBox_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_valueFromText_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("value_from_text") %} Proc(Binding::CrystalString, Float64).new{|text| self.value_from_text(Qt::Converter::QString.unwrap(text)) } {% else %} nil {% end %}),
      bg_QDoubleSpinBox_textFromValue_double: BindgenHelper.wrap_proc({% if forwarded.includes?("text_from_value") %} Proc(Float64, Binding::CrystalString).new{|val| Qt::Converter::QString.wrap(self.text_from_value(val)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepBy_int: BindgenHelper.wrap_proc({% if forwarded.includes?("step_by") %} Proc(Int32, Void).new{|steps| self.step_by(steps) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_clear_: BindgenHelper.wrap_proc({% if forwarded.includes?("clear") %} Proc(Void).new{ self.clear() } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractSpinBox_stepEnabled_: BindgenHelper.wrap_proc({% if forwarded.includes?("step_enabled") %} Proc(AbstractSpinBox::StepEnabled).new{ self.step_enabled().to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QDoubleSpinBox_JUMPTABLE_BgJumptable_QDoubleSpinBox_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def value() : Float64
      Binding.bg_QDoubleSpinBox_value_(self)
    end
    
    def prefix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_prefix_(self))
    end
    
    def prefix=(prefix : String) : Void
      Binding.bg_QDoubleSpinBox_setPrefix_const_QString_R(self, Qt::Converter::QString.wrap(prefix))
    end
    
    def suffix() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_suffix_(self))
    end
    
    def suffix=(suffix : String) : Void
      Binding.bg_QDoubleSpinBox_setSuffix_const_QString_R(self, Qt::Converter::QString.wrap(suffix))
    end
    
    def clean_text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_cleanText_(self))
    end
    
    def single_step() : Float64
      Binding.bg_QDoubleSpinBox_singleStep_(self)
    end
    
    def single_step=(val : Float64) : Void
      Binding.bg_QDoubleSpinBox_setSingleStep_double(self, val)
    end
    
    def minimum() : Float64
      Binding.bg_QDoubleSpinBox_minimum_(self)
    end
    
    def minimum=(min : Float64) : Void
      Binding.bg_QDoubleSpinBox_setMinimum_double(self, min)
    end
    
    def maximum() : Float64
      Binding.bg_QDoubleSpinBox_maximum_(self)
    end
    
    def maximum=(max : Float64) : Void
      Binding.bg_QDoubleSpinBox_setMaximum_double(self, max)
    end
    
    def set_range(min : Float64, max : Float64) : Void
      Binding.bg_QDoubleSpinBox_setRange_double_double(self, min, max)
    end
    
    def step_type() : AbstractSpinBox::StepType
      Binding.bg_QDoubleSpinBox_stepType_(self)
    end
    
    def step_type=(step_type : AbstractSpinBox::StepType) : Void
      Binding.bg_QDoubleSpinBox_setStepType_QAbstractSpinBox__StepType(self, step_type)
    end
    
    def decimals() : Int32
      Binding.bg_QDoubleSpinBox_decimals_(self)
    end
    
    def decimals=(prec : Int32) : Void
      Binding.bg_QDoubleSpinBox_setDecimals_int(self, prec)
    end
    
    def value_from_text(text : String) : Float64
      Binding.bg_QDoubleSpinBox_valueFromText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def text_from_value(val : Float64) : String
      Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_textFromValue_double(self, val))
    end
    
    def value=(val : Float64) : Void
      Binding.bg_QDoubleSpinBox_setValue_double(self, val)
    end
    
    def text_changed(unnamed_arg_0 : String) : Void
      Binding.bg_QDoubleSpinBox_textChanged_const_QString_R(self, Qt::Converter::QString.wrap(unnamed_arg_0))
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QAbstractSpinBox_minimumSizeHint_(self)
    end
    
    def event(event : Event) : Bool
      Binding.bg_QAbstractSpinBox_event_QEvent_X(self, event)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    def step_by(steps : Int32) : Void
      Binding.bg_QAbstractSpinBox_stepBy_int(self, steps)
    end
    
    def clear() : Void
      Binding.bg_QAbstractSpinBox_clear_(self)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractSpinBox_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QAbstractSpinBox_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QAbstractSpinBox_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractSpinBox_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QAbstractSpinBox_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QAbstractSpinBox_changeEvent_QEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QAbstractSpinBox_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QAbstractSpinBox_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractSpinBox_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QAbstractSpinBox_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QAbstractSpinBox_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QAbstractSpinBox_showEvent_QShowEvent_X(self, event)
    end
    
    protected def step_enabled() : AbstractSpinBox::StepEnabled
      Binding.bg_QAbstractSpinBox_stepEnabled_(self)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QDoubleSpinBox_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_value_changed(_type1_ : Float64.class, &_proc_ : Proc(Float64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDoubleSpinBox_CONNECT_valueChanged_CrystalProc_void__double_(self, BindgenHelper.wrap_proc(Proc(Float64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_text_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDoubleSpinBox_CONNECT_textChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def on_value_changed(_type1_ : String.class, &_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QDoubleSpinBox_CONNECT_valueChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QDoubleSpinBox*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : DoubleSpinBox)
      end
      def value_from_text(text : String) : Float64
        Binding.bg_QDoubleSpinBox_valueFromText_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(text))
      end
      
      def text_from_value(val : Float64) : String
        Qt::Converter::QString.unwrap(Binding.bg_QDoubleSpinBox_textFromValue_SUPER_double(@myself, val))
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QAbstractSpinBox_minimumSizeHint_SUPER_(@myself)
      end
      
      def event(event : Event) : Bool
        Binding.bg_QAbstractSpinBox_event_SUPER_QEvent_X(@myself, event)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QAbstractSpinBox_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      def step_by(steps : Int32) : Void
        Binding.bg_QAbstractSpinBox_stepBy_SUPER_int(@myself, steps)
      end
      
      def clear() : Void
        Binding.bg_QAbstractSpinBox_clear_SUPER_(@myself)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QAbstractSpinBox_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QAbstractSpinBox_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QAbstractSpinBox_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QAbstractSpinBox_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QAbstractSpinBox_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QAbstractSpinBox_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QAbstractSpinBox_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QAbstractSpinBox_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QAbstractSpinBox_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QAbstractSpinBox_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QAbstractSpinBox_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QAbstractSpinBox_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def step_enabled() : AbstractSpinBox::StepEnabled
        Binding.bg_QAbstractSpinBox_stepEnabled_SUPER_(@myself)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class StackedLayout < Layout
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QStackedLayout_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QStackedLayout_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStackedLayout_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStackedLayout_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStackedLayout_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize()
      result = Binding.bg_QStackedLayout__CONSTRUCT_()
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(StackedLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall count add_item size_hint minimum_size item_at take_at geometry= has_height_for_width? height_for_width invalidate geometry expanding_directions maximum_size index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QStackedLayout.new(
      bg_QStackedLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QStackedLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QStackedLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QStackedLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|item| self.add_item(LayoutItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QStackedLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QStackedLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QStackedLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QStackedLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QStackedLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|rect| self.geometry=(Rect.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QStackedLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QStackedLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|width| self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QStackedLayout_JUMPTABLE_BgJumptable_QStackedLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget)
      result = Binding.bg_QStackedLayout__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(StackedLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall count add_item size_hint minimum_size item_at take_at geometry= has_height_for_width? height_for_width invalidate geometry expanding_directions maximum_size index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QStackedLayout.new(
      bg_QStackedLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QStackedLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QStackedLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QStackedLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|item| self.add_item(LayoutItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QStackedLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QStackedLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QStackedLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QStackedLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QStackedLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|rect| self.geometry=(Rect.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QStackedLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QStackedLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|width| self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QStackedLayout_JUMPTABLE_BgJumptable_QStackedLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent_layout : Layout)
      result = Binding.bg_QStackedLayout__CONSTRUCT_QLayout_X(parent_layout)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(StackedLayout)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall count add_item size_hint minimum_size item_at take_at geometry= has_height_for_width? height_for_width invalidate geometry expanding_directions maximum_size index_of empty? control_types layout child_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QStackedLayout.new(
      bg_QStackedLayout_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QStackedLayout_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QStackedLayout_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QStackedLayout_count_: BindgenHelper.wrap_proc({% if forwarded.includes?("count") %} Proc(Int32).new{ self.count() } {% else %} nil {% end %}),
      bg_QStackedLayout_addItem_QLayoutItem_X: BindgenHelper.wrap_proc({% if forwarded.includes?("add_item") %} Proc(Binding::QLayoutItem*, Void).new{|item| self.add_item(LayoutItemImpl.new(unwrap: item)) } {% else %} nil {% end %}),
      bg_QStackedLayout_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QStackedLayout_minimumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size") %} Proc(Binding::QSize*).new{ self.minimum_size() } {% else %} nil {% end %}),
      bg_QStackedLayout_itemAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("item_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.item_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QStackedLayout_takeAt_int: BindgenHelper.wrap_proc({% if forwarded.includes?("take_at") %} Proc(Int32, Binding::QLayoutItem*).new{|unnamed_arg_0| self.take_at(unnamed_arg_0).to_unsafe } {% else %} nil {% end %}),
      bg_QStackedLayout_setGeometry_const_QRect_R: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry=") %} Proc(Binding::QRect*, Void).new{|rect| self.geometry=(Rect.new(unwrap: rect)) } {% else %} nil {% end %}),
      bg_QStackedLayout_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QStackedLayout_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|width| self.height_for_width(width) } {% else %} nil {% end %}),
      bg_QLayout_invalidate_: BindgenHelper.wrap_proc({% if forwarded.includes?("invalidate") %} Proc(Void).new{ self.invalidate() } {% else %} nil {% end %}),
      bg_QLayout_geometry_: BindgenHelper.wrap_proc({% if forwarded.includes?("geometry") %} Proc(Binding::QRect*).new{ self.geometry().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_expandingDirections_: BindgenHelper.wrap_proc({% if forwarded.includes?("expanding_directions") %} Proc(Orientations).new{ self.expanding_directions().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_maximumSize_: BindgenHelper.wrap_proc({% if forwarded.includes?("maximum_size") %} Proc(Binding::QSize*).new{ self.maximum_size() } {% else %} nil {% end %}),
      bg_QLayout_indexOf_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("index_of") %} Proc(Binding::QWidget*, Int32).new{|unnamed_arg_0| self.index_of(Widget.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QLayout_isEmpty_: BindgenHelper.wrap_proc({% if forwarded.includes?("empty?") %} Proc(Bool).new{ self.empty?() } {% else %} nil {% end %}),
      bg_QLayout_controlTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("control_types") %} Proc(SizePolicy::ControlTypes).new{ self.control_types().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_layout_: BindgenHelper.wrap_proc({% if forwarded.includes?("layout") %} Proc(Binding::QLayout*).new{ self.layout().to_unsafe } {% else %} nil {% end %}),
      bg_QLayout_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|e| self.child_event(e) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QStackedLayout_JUMPTABLE_BgJumptable_QStackedLayout_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_widget(w : Widget) : Int32
      Binding.bg_QStackedLayout_addWidget_QWidget_X(self, w)
    end
    
    def insert_widget(index : Int32, w : Widget) : Int32
      Binding.bg_QStackedLayout_insertWidget_int_QWidget_X(self, index, w)
    end
    
    def current_widget() : Widget
      Widget.new(unwrap: Binding.bg_QStackedLayout_currentWidget_(self))
    end
    
    def current_index() : Int32
      Binding.bg_QStackedLayout_currentIndex_(self)
    end
    
    def widget(unnamed_arg_0 : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QStackedLayout_widget_int(self, unnamed_arg_0))
    end
    
    def count() : Int32
      Binding.bg_QStackedLayout_count_(self)
    end
    
    def stacking_mode() : StackedLayout::StackingMode
      Binding.bg_QStackedLayout_stackingMode_(self)
    end
    
    def stacking_mode=(stacking_mode : StackedLayout::StackingMode) : Void
      Binding.bg_QStackedLayout_setStackingMode_QStackedLayout__StackingMode(self, stacking_mode)
    end
    
    def add_item(item : LayoutItem) : Void
      Binding.bg_QStackedLayout_addItem_QLayoutItem_X(self, item)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QStackedLayout_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QStackedLayout_minimumSize_(self)
    end
    
    def item_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QStackedLayout_itemAt_int(self, unnamed_arg_0))
    end
    
    def take_at(unnamed_arg_0 : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QStackedLayout_takeAt_int(self, unnamed_arg_0))
    end
    
    def geometry=(rect : Rect) : Void
      Binding.bg_QStackedLayout_setGeometry_const_QRect_R(self, rect)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QStackedLayout_hasHeightForWidth_(self)
    end
    
    def height_for_width(width : Int32) : Int32
      Binding.bg_QStackedLayout_heightForWidth_int(self, width)
    end
    
    def widget_removed(index : Int32) : Void
      Binding.bg_QStackedLayout_widgetRemoved_int(self, index)
    end
    
    def current_changed(index : Int32) : Void
      Binding.bg_QStackedLayout_currentChanged_int(self, index)
    end
    
    def current_index=(index : Int32) : Void
      Binding.bg_QStackedLayout_setCurrentIndex_int(self, index)
    end
    
    def current_widget=(w : Widget) : Void
      Binding.bg_QStackedLayout_setCurrentWidget_QWidget_X(self, w)
    end
    
    def invalidate() : Void
      Binding.bg_QLayout_invalidate_(self)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayout_geometry_(self))
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QLayout_expandingDirections_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QLayout_maximumSize_(self)
    end
    
    def index_of(unnamed_arg_0 : Widget) : Int32
      Binding.bg_QLayout_indexOf_QWidget_X(self, unnamed_arg_0)
    end
    
    def empty?() : Bool
      Binding.bg_QLayout_isEmpty_(self)
    end
    
    def control_types() : SizePolicy::ControlTypes
      Binding.bg_QLayout_controlTypes_(self)
    end
    
    def layout() : Layout
      LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_(self))
    end
    
    protected def child_event(e : Binding::QChildEvent*) : Void
      Binding.bg_QLayout_childEvent_QChildEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QStackedLayout_staticMetaObject_STATIC_GETTER_()
    end
    
    enum StackingMode : UInt32
      StackOne = 0
      StackAll = 1
    end
    def on_widget_removed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QStackedLayout_CONNECT_widgetRemoved_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_current_changed(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QStackedLayout_CONNECT_currentChanged_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QStackedLayout*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : StackedLayout)
      end
      def count() : Int32
        Binding.bg_QStackedLayout_count_SUPER_(@myself)
      end
      
      def add_item(item : LayoutItem) : Void
        Binding.bg_QStackedLayout_addItem_SUPER_QLayoutItem_X(@myself, item)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QStackedLayout_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size() : Binding::QSize*
        Binding.bg_QStackedLayout_minimumSize_SUPER_(@myself)
      end
      
      def item_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QStackedLayout_itemAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def take_at(unnamed_arg_0 : Int32) : LayoutItem
        LayoutItemImpl.new(unwrap: Binding.bg_QStackedLayout_takeAt_SUPER_int(@myself, unnamed_arg_0))
      end
      
      def geometry=(rect : Rect) : Void
        Binding.bg_QStackedLayout_setGeometry_SUPER_const_QRect_R(@myself, rect)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QStackedLayout_hasHeightForWidth_SUPER_(@myself)
      end
      
      def height_for_width(width : Int32) : Int32
        Binding.bg_QStackedLayout_heightForWidth_SUPER_int(@myself, width)
      end
      
      def invalidate() : Void
        Binding.bg_QLayout_invalidate_SUPER_(@myself)
      end
      
      def geometry() : Rect
        Rect.new(unwrap: Binding.bg_QLayout_geometry_SUPER_(@myself))
      end
      
      def expanding_directions() : Orientations
        Binding.bg_QLayout_expandingDirections_SUPER_(@myself)
      end
      
      def maximum_size() : Binding::QSize*
        Binding.bg_QLayout_maximumSize_SUPER_(@myself)
      end
      
      def index_of(unnamed_arg_0 : Widget) : Int32
        Binding.bg_QLayout_indexOf_SUPER_QWidget_X(@myself, unnamed_arg_0)
      end
      
      def empty?() : Bool
        Binding.bg_QLayout_isEmpty_SUPER_(@myself)
      end
      
      def control_types() : SizePolicy::ControlTypes
        Binding.bg_QLayout_controlTypes_SUPER_(@myself)
      end
      
      def layout() : Layout
        LayoutImpl.new(unwrap: Binding.bg_QLayout_layout_SUPER_(@myself))
      end
      
      protected def child_event(e : Binding::QChildEvent*) : Void
        Binding.bg_QLayout_childEvent_SUPER_QChildEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class StatusBar < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QStatusBar_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QStatusBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QStatusBar__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(StatusBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall show_event paint_event resize_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event close_event context_menu_event tablet_event action_event drag_enter_event drag_move_event drag_leave_event drop_event hide_event native_event change_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QStatusBar.new(
      bg_QStatusBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QStatusBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QStatusBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QStatusBar_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|unnamed_arg_0| self.show_event(ShowEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QStatusBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QStatusBar_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|unnamed_arg_0| self.resize_event(ResizeEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QStatusBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|unnamed_arg_0| self.event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QStatusBar_JUMPTABLE_BgJumptable_QStatusBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def add_widget(widget : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QStatusBar_addWidget_QWidget_X_int(self, widget, stretch)
    end
    
    def insert_widget(index : Int32, widget : Widget, stretch : Int32 = 0) : Int32
      Binding.bg_QStatusBar_insertWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    
    def add_permanent_widget(widget : Widget, stretch : Int32 = 0) : Void
      Binding.bg_QStatusBar_addPermanentWidget_QWidget_X_int(self, widget, stretch)
    end
    
    def insert_permanent_widget(index : Int32, widget : Widget, stretch : Int32 = 0) : Int32
      Binding.bg_QStatusBar_insertPermanentWidget_int_QWidget_X_int(self, index, widget, stretch)
    end
    
    def remove_widget(widget : Widget) : Void
      Binding.bg_QStatusBar_removeWidget_QWidget_X(self, widget)
    end
    
    def size_grip_enabled=(unnamed_arg_0 : Bool) : Void
      Binding.bg_QStatusBar_setSizeGripEnabled_bool(self, unnamed_arg_0)
    end
    
    def size_grip_enabled?() : Bool
      Binding.bg_QStatusBar_isSizeGripEnabled_(self)
    end
    
    def current_message() : String
      Qt::Converter::QString.unwrap(Binding.bg_QStatusBar_currentMessage_(self))
    end
    
    def show_message(text : String, timeout : Int32 = 0) : Void
      Binding.bg_QStatusBar_showMessage_const_QString_R_int(self, Qt::Converter::QString.wrap(text), timeout)
    end
    
    def clear_message() : Void
      Binding.bg_QStatusBar_clearMessage_(self)
    end
    
    def message_changed(text : String) : Void
      Binding.bg_QStatusBar_messageChanged_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    protected def show_event(unnamed_arg_0 : ShowEvent) : Void
      Binding.bg_QStatusBar_showEvent_QShowEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QStatusBar_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
      Binding.bg_QStatusBar_resizeEvent_QResizeEvent_X(self, unnamed_arg_0)
    end
    
    protected def reformat() : Void
      Binding.bg_QStatusBar_reformat_(self)
    end
    
    protected def hide_or_show() : Void
      Binding.bg_QStatusBar_hideOrShow_(self)
    end
    
    protected def event(unnamed_arg_0 : Event) : Bool
      Binding.bg_QStatusBar_event_QEvent_X(self, unnamed_arg_0)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QWidget_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QWidget_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QStatusBar_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_message_changed(&_proc_ : Proc(String, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QStatusBar_CONNECT_messageChanged_CrystalProc_void__const_QString_R_(self, BindgenHelper.wrap_proc(Proc(Binding::CrystalString, Void).new do |arg0| _proc_.call(Qt::Converter::QString.unwrap(arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QStatusBar*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : StatusBar)
      end
      protected def show_event(unnamed_arg_0 : ShowEvent) : Void
        Binding.bg_QStatusBar_showEvent_SUPER_QShowEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QStatusBar_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def resize_event(unnamed_arg_0 : ResizeEvent) : Void
        Binding.bg_QStatusBar_resizeEvent_SUPER_QResizeEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def event(unnamed_arg_0 : Event) : Bool
        Binding.bg_QStatusBar_event_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QWidget_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QWidget_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class StyledItemDelegate < AbstractItemDelegate
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QStyledItemDelegate_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QStyledItemDelegate_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QStyledItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStyledItemDelegate_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStyledItemDelegate_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStyledItemDelegate_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QStyledItemDelegate__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(StyledItemDelegate)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall paint size_hint create_editor set_editor_data set_model_data update_editor_geometry display_text init_style_option event_filter editor_event destroy_editor help_event painting_roles ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QStyledItemDelegate.new(
      bg_QStyledItemDelegate_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("paint") %} Proc(Binding::QPainter*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Void).new{|painter, option, index| self.paint(Painter.new(unwrap: painter), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Binding::QSize*).new{|option, index| self.size_hint(option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("create_editor") %} Proc(Binding::QWidget*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Binding::QWidget*).new{|parent, option, index| self.create_editor(Widget.new(unwrap: parent), option, ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_editor_data") %} Proc(Binding::QWidget*, Binding::QModelIndex*, Void).new{|editor, index| self.set_editor_data(Widget.new(unwrap: editor), ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_model_data") %} Proc(Binding::QWidget*, Binding::QAbstractItemModel*, Binding::QModelIndex*, Void).new{|editor, model, index| self.set_model_data(Widget.new(unwrap: editor), AbstractItemModelImpl.new(unwrap: model), ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_geometry") %} Proc(Binding::QWidget*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Void).new{|editor, option, index| self.update_editor_geometry(Widget.new(unwrap: editor), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_displayText_const_QVariant_R_const_QLocale_R: BindgenHelper.wrap_proc({% if forwarded.includes?("display_text") %} Proc(Binding::CrystalVariant, Binding::QLocale*, Binding::CrystalString).new{|value, locale| Qt::Converter::QString.wrap(self.display_text(Qt::Variant.new(value), locale)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_initStyleOption_QStyleOptionViewItem_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("init_style_option") %} Proc(Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Void).new{|option, index| self.init_style_option(option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|object, event| self.event_filter(Object.new(unwrap: object), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QStyledItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("editor_event") %} Proc(Binding::QEvent*, Binding::QAbstractItemModel*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Bool).new{|event, model, option, index| self.editor_event(Event.new(unwrap: event), AbstractItemModelImpl.new(unwrap: model), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("destroy_editor") %} Proc(Binding::QWidget*, Binding::QModelIndex*, Void).new{|editor, index| self.destroy_editor(Widget.new(unwrap: editor), ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("help_event") %} Proc(Binding::QHelpEvent*, Binding::QAbstractItemView*, Binding::QStyleOptionViewItem*, Binding::QModelIndex*, Bool).new{|event, view, option, index| self.help_event(HelpEvent.new(unwrap: event), AbstractItemViewImpl.new(unwrap: view), option, ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QAbstractItemDelegate_paintingRoles_: BindgenHelper.wrap_proc({% if forwarded.includes?("painting_roles") %} Proc(Binding::ContainerQVectorInt*).new{ BindgenHelper.wrap_container(Container_QVector_int_, self.painting_roles()).to_unsafe } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QStyledItemDelegate_JUMPTABLE_BgJumptable_QStyledItemDelegate_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def paint(painter : Painter, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
      Binding.bg_QStyledItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, painter, option, index)
    end
    
    def size_hint(option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Binding::QSize*
      Binding.bg_QStyledItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, option, index)
    end
    
    def create_editor(parent : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Widget
      Widget.new(unwrap: Binding.bg_QStyledItemDelegate_createEditor_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, parent, option, index))
    end
    
    def set_editor_data(editor : Widget, index : ModelIndex) : Void
      Binding.bg_QStyledItemDelegate_setEditorData_QWidget_X_const_QModelIndex_R(self, editor, index)
    end
    
    def set_model_data(editor : Widget, model : AbstractItemModel, index : ModelIndex) : Void
      Binding.bg_QStyledItemDelegate_setModelData_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(self, editor, model, index)
    end
    
    def update_editor_geometry(editor : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
      Binding.bg_QStyledItemDelegate_updateEditorGeometry_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, editor, option, index)
    end
    
    def item_editor_factory() : ItemEditorFactory
      ItemEditorFactory.new(unwrap: Binding.bg_QStyledItemDelegate_itemEditorFactory_(self))
    end
    
    def item_editor_factory=(factory : ItemEditorFactory) : Void
      Binding.bg_QStyledItemDelegate_setItemEditorFactory_QItemEditorFactory_X(self, factory)
    end
    
    def display_text(value : Variant, locale : Binding::QLocale*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QStyledItemDelegate_displayText_const_QVariant_R_const_QLocale_R(self, (value.to_unsafe), locale))
    end
    
    protected def init_style_option(option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
      Binding.bg_QStyledItemDelegate_initStyleOption_QStyleOptionViewItem_X_const_QModelIndex_R(self, option, index)
    end
    
    protected def event_filter(object : Object, event : Event) : Bool
      Binding.bg_QStyledItemDelegate_eventFilter_QObject_X_QEvent_X(self, object, event)
    end
    
    protected def editor_event(event : Event, model : AbstractItemModel, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
      Binding.bg_QStyledItemDelegate_editorEvent_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, event, model, option, index)
    end
    
    def destroy_editor(editor : Widget, index : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_destroyEditor_QWidget_X_const_QModelIndex_R(self, editor, index)
    end
    
    def help_event(event : HelpEvent, view : AbstractItemView, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
      Binding.bg_QAbstractItemDelegate_helpEvent_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, event, view, option, index)
    end
    
    def painting_roles() : Enumerable(Int32)
      Container_QVector_int_.new(unwrap: Binding.bg_QAbstractItemDelegate_paintingRoles_(self))
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QStyledItemDelegate_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QStyledItemDelegate*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : StyledItemDelegate)
      end
      def paint(painter : Painter, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
        Binding.bg_QStyledItemDelegate_paint_SUPER_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, painter, option, index)
      end
      
      def size_hint(option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Binding::QSize*
        Binding.bg_QStyledItemDelegate_sizeHint_SUPER_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, option, index)
      end
      
      def create_editor(parent : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Widget
        Widget.new(unwrap: Binding.bg_QStyledItemDelegate_createEditor_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, parent, option, index))
      end
      
      def set_editor_data(editor : Widget, index : ModelIndex) : Void
        Binding.bg_QStyledItemDelegate_setEditorData_SUPER_QWidget_X_const_QModelIndex_R(@myself, editor, index)
      end
      
      def set_model_data(editor : Widget, model : AbstractItemModel, index : ModelIndex) : Void
        Binding.bg_QStyledItemDelegate_setModelData_SUPER_QWidget_X_QAbstractItemModel_X_const_QModelIndex_R(@myself, editor, model, index)
      end
      
      def update_editor_geometry(editor : Widget, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
        Binding.bg_QStyledItemDelegate_updateEditorGeometry_SUPER_QWidget_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, editor, option, index)
      end
      
      def display_text(value : Variant, locale : Binding::QLocale*) : String
        Qt::Converter::QString.unwrap(Binding.bg_QStyledItemDelegate_displayText_SUPER_const_QVariant_R_const_QLocale_R(@myself, (value.to_unsafe), locale))
      end
      
      protected def init_style_option(option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
        Binding.bg_QStyledItemDelegate_initStyleOption_SUPER_QStyleOptionViewItem_X_const_QModelIndex_R(@myself, option, index)
      end
      
      protected def event_filter(object : Object, event : Event) : Bool
        Binding.bg_QStyledItemDelegate_eventFilter_SUPER_QObject_X_QEvent_X(@myself, object, event)
      end
      
      protected def editor_event(event : Event, model : AbstractItemModel, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
        Binding.bg_QStyledItemDelegate_editorEvent_SUPER_QEvent_X_QAbstractItemModel_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, event, model, option, index)
      end
      
      def destroy_editor(editor : Widget, index : ModelIndex) : Void
        Binding.bg_QAbstractItemDelegate_destroyEditor_SUPER_QWidget_X_const_QModelIndex_R(@myself, editor, index)
      end
      
      def help_event(event : HelpEvent, view : AbstractItemView, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Bool
        Binding.bg_QAbstractItemDelegate_helpEvent_SUPER_QHelpEvent_X_QAbstractItemView_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(@myself, event, view, option, index)
      end
      
      def painting_roles() : Enumerable(Int32)
        Container_QVector_int_.new(unwrap: Binding.bg_QAbstractItemDelegate_paintingRoles_SUPER_(@myself))
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class SystemTrayIcon < Object
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QSystemTrayIcon_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QSystemTrayIcon_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Object? = nil)
      result = Binding.bg_QSystemTrayIcon__CONSTRUCT_QObject_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SystemTrayIcon)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSystemTrayIcon.new(
      bg_QSystemTrayIcon_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSystemTrayIcon_JUMPTABLE_BgJumptable_QSystemTrayIcon_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(icon : Icon, parent : Object? = nil)
      result = Binding.bg_QSystemTrayIcon__CONSTRUCT_const_QIcon_R_QObject_X(icon, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(SystemTrayIcon)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event event_filter timer_event child_event custom_event connect_notify disconnect_notify ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QSystemTrayIcon.new(
      bg_QSystemTrayIcon_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QSystemTrayIcon_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|watched, event| self.event_filter(Object.new(unwrap: watched), Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_childEvent_QChildEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("child_event") %} Proc(Binding::QChildEvent*, Void).new{|event| self.child_event(event) } {% else %} nil {% end %}),
      bg_QObject_customEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("custom_event") %} Proc(Binding::QEvent*, Void).new{|event| self.custom_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QObject_connectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("connect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.connect_notify(signal) } {% else %} nil {% end %}),
      bg_QObject_disconnectNotify_const_QMetaMethod_R: BindgenHelper.wrap_proc({% if forwarded.includes?("disconnect_notify") %} Proc(Binding::QMetaMethod*, Void).new{|signal| self.disconnect_notify(signal) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QSystemTrayIcon_JUMPTABLE_BgJumptable_QSystemTrayIcon_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def context_menu=(menu : Menu) : Void
      Binding.bg_QSystemTrayIcon_setContextMenu_QMenu_X(self, menu)
    end
    
    def context_menu() : Menu
      Menu.new(unwrap: Binding.bg_QSystemTrayIcon_contextMenu_(self))
    end
    
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QSystemTrayIcon_icon_(self))
    end
    
    def icon=(icon : Icon) : Void
      Binding.bg_QSystemTrayIcon_setIcon_const_QIcon_R(self, icon)
    end
    
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QSystemTrayIcon_toolTip_(self))
    end
    
    def tool_tip=(tip : String) : Void
      Binding.bg_QSystemTrayIcon_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tip))
    end
    
    def self.system_tray_available?() : Bool
      Binding.bg_QSystemTrayIcon_isSystemTrayAvailable_STATIC_()
    end
    
    def self.supports_messages() : Bool
      Binding.bg_QSystemTrayIcon_supportsMessages_STATIC_()
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QSystemTrayIcon_geometry_(self))
    end
    
    def visible?() : Bool
      Binding.bg_QSystemTrayIcon_isVisible_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QSystemTrayIcon_setVisible_bool(self, visible)
    end
    
    def show() : Void
      Binding.bg_QSystemTrayIcon_show_(self)
    end
    
    def hide() : Void
      Binding.bg_QSystemTrayIcon_hide_(self)
    end
    
    def show_message(title : String, msg : String, icon : Icon, msecs : Int32 = 10000) : Void
      Binding.bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_const_QIcon_R_int(self, Qt::Converter::QString.wrap(title), Qt::Converter::QString.wrap(msg), icon, msecs)
    end
    
    def show_message(title : String, msg : String, icon : SystemTrayIcon::MessageIcon = SystemTrayIcon::MessageIcon::Information, msecs : Int32 = 10000) : Void
      Binding.bg_QSystemTrayIcon_showMessage_const_QString_R_const_QString_R_QSystemTrayIcon__MessageIcon_int(self, Qt::Converter::QString.wrap(title), Qt::Converter::QString.wrap(msg), icon, msecs)
    end
    
    def activated(reason : SystemTrayIcon::ActivationReason) : Void
      Binding.bg_QSystemTrayIcon_activated_QSystemTrayIcon__ActivationReason(self, reason)
    end
    
    def message_clicked() : Void
      Binding.bg_QSystemTrayIcon_messageClicked_(self)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QSystemTrayIcon_event_QEvent_X(self, event)
    end
    
    def event_filter(watched : Object, event : Event) : Bool
      Binding.bg_QObject_eventFilter_QObject_X_QEvent_X(self, watched, event)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QObject_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def child_event(event : Binding::QChildEvent*) : Void
      Binding.bg_QObject_childEvent_QChildEvent_X(self, event)
    end
    
    protected def custom_event(event : Event) : Void
      Binding.bg_QObject_customEvent_QEvent_X(self, event)
    end
    
    protected def connect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_connectNotify_const_QMetaMethod_R(self, signal)
    end
    
    protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
      Binding.bg_QObject_disconnectNotify_const_QMetaMethod_R(self, signal)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QSystemTrayIcon_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ActivationReason : UInt32
      Unknown = 0
      Context = 1
      DoubleClick = 2
      Trigger = 3
      MiddleClick = 4
    end
    enum MessageIcon : UInt32
      NoIcon = 0
      Information = 1
      Warning = 2
      Critical = 3
    end
    def on_activated(&_proc_ : Proc(SystemTrayIcon::ActivationReason, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSystemTrayIcon_CONNECT_activated_CrystalProc_void__QSystemTrayIcon__ActivationReason_(self, BindgenHelper.wrap_proc(Proc(SystemTrayIcon::ActivationReason, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_message_clicked(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QSystemTrayIcon_CONNECT_messageClicked_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QSystemTrayIcon*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : SystemTrayIcon)
      end
      protected def event(event : Event) : Bool
        Binding.bg_QSystemTrayIcon_event_SUPER_QEvent_X(@myself, event)
      end
      
      def event_filter(watched : Object, event : Event) : Bool
        Binding.bg_QObject_eventFilter_SUPER_QObject_X_QEvent_X(@myself, watched, event)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QObject_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def child_event(event : Binding::QChildEvent*) : Void
        Binding.bg_QObject_childEvent_SUPER_QChildEvent_X(@myself, event)
      end
      
      protected def custom_event(event : Event) : Void
        Binding.bg_QObject_customEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def connect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_connectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
      protected def disconnect_notify(signal : Binding::QMetaMethod*) : Void
        Binding.bg_QObject_disconnectNotify_SUPER_const_QMetaMethod_R(@myself, signal)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class TableView < AbstractItemView
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTableView_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTableView_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTableView_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableView_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableView_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableView_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QTableView__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall model= root_index= selection_model= do_items_layout visual_rect scroll_to index_at scroll_contents_by view_options paint_event timer_event horizontal_offset vertical_offset move_cursor set_selection visual_region_for_selection selected_indexes update_geometries viewport_size_hint size_hint_for_row size_hint_for_column vertical_scrollbar_action horizontal_scrollbar_action is_index_hidden selection_changed current_changed keyboard_search input_method_query reset select_all data_changed rows_inserted rows_about_to_be_removed update_editor_data update_editor_geometries vertical_scrollbar_value_changed horizontal_scrollbar_value_changed close_editor commit_data editor_destroyed edit selection_command start_drag focus_next_prev_child event viewport_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event key_press_event resize_event input_method_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableView.new(
      bg_QTableView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTableView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTableView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTableView_setModel_QAbstractItemModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("model=") %} Proc(Binding::QAbstractItemModel*, Void).new{|model| self.model=(AbstractItemModelImpl.new(unwrap: model)) } {% else %} nil {% end %}),
      bg_QTableView_setRootIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("root_index=") %} Proc(Binding::QModelIndex*, Void).new{|index| self.root_index=(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_setSelectionModel_QItemSelectionModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_model=") %} Proc(Binding::QItemSelectionModel*, Void).new{|selection_model| self.selection_model=(selection_model) } {% else %} nil {% end %}),
      bg_QTableView_doItemsLayout_: BindgenHelper.wrap_proc({% if forwarded.includes?("do_items_layout") %} Proc(Void).new{ self.do_items_layout() } {% else %} nil {% end %}),
      bg_QTableView_visualRect_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_rect") %} Proc(Binding::QModelIndex*, Binding::QRect*).new{|index| self.visual_rect(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_to") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::ScrollHint, Void).new{|index, hint| self.scroll_to(ModelIndex.new(unwrap: index), hint) } {% else %} nil {% end %}),
      bg_QTableView_indexAt_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index_at") %} Proc(Binding::QPoint, Binding::QModelIndex*).new{|p| self.index_at(Point.new(unwrap: p)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTableView_viewOptions_: BindgenHelper.wrap_proc({% if forwarded.includes?("view_options") %} Proc(Binding::QStyleOptionViewItem*).new{ self.view_options() } {% else %} nil {% end %}),
      bg_QTableView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTableView_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QTableView_horizontalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_offset") %} Proc(Int32).new{ self.horizontal_offset() } {% else %} nil {% end %}),
      bg_QTableView_verticalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_offset") %} Proc(Int32).new{ self.vertical_offset() } {% else %} nil {% end %}),
      bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers: BindgenHelper.wrap_proc({% if forwarded.includes?("move_cursor") %} Proc(AbstractItemDelegate::CursorAction, KeyboardModifiers, Binding::QModelIndex*).new{|cursor_action, modifiers| self.move_cursor(cursor_action, modifiers).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("set_selection") %} Proc(Binding::QRect*, ItemSelectionModel::SelectionFlags, Void).new{|rect, command| self.set_selection(Rect.new(unwrap: rect), command) } {% else %} nil {% end %}),
      bg_QTableView_visualRegionForSelection_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_region_for_selection") %} Proc(Binding::QItemSelection*, Binding::QRegion*).new{|selection| self.visual_region_for_selection(selection) } {% else %} nil {% end %}),
      bg_QTableView_selectedIndexes_: BindgenHelper.wrap_proc({% if forwarded.includes?("selected_indexes") %} Proc(Binding::QModelIndexList*).new{ self.selected_indexes() } {% else %} nil {% end %}),
      bg_QTableView_updateGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometries") %} Proc(Void).new{ self.update_geometries() } {% else %} nil {% end %}),
      bg_QTableView_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForRow_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_row") %} Proc(Int32, Int32).new{|row| self.size_hint_for_row(row) } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForColumn_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_column") %} Proc(Int32, Int32).new{|column| self.size_hint_for_column(column) } {% else %} nil {% end %}),
      bg_QTableView_verticalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_action") %} Proc(Int32, Void).new{|action| self.vertical_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_horizontalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_action") %} Proc(Int32, Void).new{|action| self.horizontal_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_isIndexHidden_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("is_index_hidden") %} Proc(Binding::QModelIndex*, Bool).new{|index| self.is_index_hidden(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_changed") %} Proc(Binding::QItemSelection*, Binding::QItemSelection*, Void).new{|selected, deselected| self.selection_changed(selected, deselected) } {% else %} nil {% end %}),
      bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("current_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|current, previous| self.current_changed(ModelIndex.new(unwrap: current), ModelIndex.new(unwrap: previous)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyboardSearch_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("keyboard_search") %} Proc(Binding::CrystalString, Void).new{|search| self.keyboard_search(Qt::Converter::QString.unwrap(search)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemView_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Void).new{ self.reset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectAll_: BindgenHelper.wrap_proc({% if forwarded.includes?("select_all") %} Proc(Void).new{ self.select_all() } {% else %} nil {% end %}),
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R: BindgenHelper.wrap_proc({% if forwarded.includes?("data_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Binding::ContainerQVectorInt*, Void).new{|top_left, bottom_right, roles| self.data_changed(ModelIndex.new(unwrap: top_left), ModelIndex.new(unwrap: bottom_right), Container_QVector_int_.new(unwrap: roles)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_inserted") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_inserted(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_about_to_be_removed") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_about_to_be_removed(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorData_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_data") %} Proc(Void).new{ self.update_editor_data() } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_geometries") %} Proc(Void).new{ self.update_editor_geometries() } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.vertical_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.horizontal_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint: BindgenHelper.wrap_proc({% if forwarded.includes?("close_editor") %} Proc(Binding::QWidget*, AbstractItemDelegate::EndEditHint, Void).new{|editor, hint| self.close_editor(Widget.new(unwrap: editor), hint) } {% else %} nil {% end %}),
      bg_QAbstractItemView_commitData_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("commit_data") %} Proc(Binding::QWidget*, Void).new{|editor| self.commit_data(Widget.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_editorDestroyed_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("editor_destroyed") %} Proc(Binding::QObject*, Void).new{|editor| self.editor_destroyed(Object.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("edit") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::EditTrigger, Binding::QEvent*, Bool).new{|index, trigger, event| self.edit(ModelIndex.new(unwrap: index), trigger, Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_command") %} Proc(Binding::QModelIndex*, Binding::QEvent*, ItemSelectionModel::SelectionFlags).new{|index, event| self.selection_command(ModelIndex.new(unwrap: index), event.try {|ptr| Event.new(unwrap: ptr) unless ptr.null?}).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_startDrag_Qt__DropActions: BindgenHelper.wrap_proc({% if forwarded.includes?("start_drag") %} Proc(DropActions, Void).new{|supported_actions| self.start_drag(supported_actions) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|object, event| self.event_filter(Object.new(unwrap: object), Event.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableView_JUMPTABLE_BgJumptable_QTableView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def model=(model : AbstractItemModel) : Void
      Binding.bg_QTableView_setModel_QAbstractItemModel_X(self, model)
    end
    
    def root_index=(index : ModelIndex) : Void
      Binding.bg_QTableView_setRootIndex_const_QModelIndex_R(self, index)
    end
    
    def selection_model=(selection_model : Binding::QItemSelectionModel*) : Void
      Binding.bg_QTableView_setSelectionModel_QItemSelectionModel_X(self, selection_model)
    end
    
    def do_items_layout() : Void
      Binding.bg_QTableView_doItemsLayout_(self)
    end
    
    def horizontal_header() : Binding::QHeaderView*
      Binding.bg_QTableView_horizontalHeader_(self)
    end
    
    def vertical_header() : Binding::QHeaderView*
      Binding.bg_QTableView_verticalHeader_(self)
    end
    
    def horizontal_header=(header : Binding::QHeaderView*) : Void
      Binding.bg_QTableView_setHorizontalHeader_QHeaderView_X(self, header)
    end
    
    def vertical_header=(header : Binding::QHeaderView*) : Void
      Binding.bg_QTableView_setVerticalHeader_QHeaderView_X(self, header)
    end
    
    def row_viewport_position(row : Int32) : Int32
      Binding.bg_QTableView_rowViewportPosition_int(self, row)
    end
    
    def row_at(y : Int32) : Int32
      Binding.bg_QTableView_rowAt_int(self, y)
    end
    
    def set_row_height(row : Int32, height : Int32) : Void
      Binding.bg_QTableView_setRowHeight_int_int(self, row, height)
    end
    
    def row_height(row : Int32) : Int32
      Binding.bg_QTableView_rowHeight_int(self, row)
    end
    
    def column_viewport_position(column : Int32) : Int32
      Binding.bg_QTableView_columnViewportPosition_int(self, column)
    end
    
    def column_at(x : Int32) : Int32
      Binding.bg_QTableView_columnAt_int(self, x)
    end
    
    def set_column_width(column : Int32, width : Int32) : Void
      Binding.bg_QTableView_setColumnWidth_int_int(self, column, width)
    end
    
    def column_width(column : Int32) : Int32
      Binding.bg_QTableView_columnWidth_int(self, column)
    end
    
    def is_row_hidden(row : Int32) : Bool
      Binding.bg_QTableView_isRowHidden_int(self, row)
    end
    
    def set_row_hidden(row : Int32, hide : Bool) : Void
      Binding.bg_QTableView_setRowHidden_int_bool(self, row, hide)
    end
    
    def is_column_hidden(column : Int32) : Bool
      Binding.bg_QTableView_isColumnHidden_int(self, column)
    end
    
    def set_column_hidden(column : Int32, hide : Bool) : Void
      Binding.bg_QTableView_setColumnHidden_int_bool(self, column, hide)
    end
    
    def sorting_enabled=(enable : Bool) : Void
      Binding.bg_QTableView_setSortingEnabled_bool(self, enable)
    end
    
    def sorting_enabled?() : Bool
      Binding.bg_QTableView_isSortingEnabled_(self)
    end
    
    def show_grid() : Bool
      Binding.bg_QTableView_showGrid_(self)
    end
    
    def grid_style() : PenStyle
      Binding.bg_QTableView_gridStyle_(self)
    end
    
    def grid_style=(style : PenStyle) : Void
      Binding.bg_QTableView_setGridStyle_Qt__PenStyle(self, style)
    end
    
    def word_wrap=(on : Bool) : Void
      Binding.bg_QTableView_setWordWrap_bool(self, on)
    end
    
    def word_wrap() : Bool
      Binding.bg_QTableView_wordWrap_(self)
    end
    
    def corner_button_enabled=(enable : Bool) : Void
      Binding.bg_QTableView_setCornerButtonEnabled_bool(self, enable)
    end
    
    def corner_button_enabled?() : Bool
      Binding.bg_QTableView_isCornerButtonEnabled_(self)
    end
    
    def visual_rect(index : ModelIndex) : Rect
      Rect.new(unwrap: Binding.bg_QTableView_visualRect_const_QModelIndex_R(self, index))
    end
    
    def scroll_to(index : ModelIndex, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
      Binding.bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint(self, index, hint)
    end
    
    def index_at(p : Point) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QTableView_indexAt_const_QPoint_R(self, p))
    end
    
    def set_span(row : Int32, column : Int32, row_span : Int32, column_span : Int32) : Void
      Binding.bg_QTableView_setSpan_int_int_int_int(self, row, column, row_span, column_span)
    end
    
    def row_span(row : Int32, column : Int32) : Int32
      Binding.bg_QTableView_rowSpan_int_int(self, row, column)
    end
    
    def column_span(row : Int32, column : Int32) : Int32
      Binding.bg_QTableView_columnSpan_int_int(self, row, column)
    end
    
    def clear_spans() : Void
      Binding.bg_QTableView_clearSpans_(self)
    end
    
    def select_row(row : Int32) : Void
      Binding.bg_QTableView_selectRow_int(self, row)
    end
    
    def select_column(column : Int32) : Void
      Binding.bg_QTableView_selectColumn_int(self, column)
    end
    
    def hide_row(row : Int32) : Void
      Binding.bg_QTableView_hideRow_int(self, row)
    end
    
    def hide_column(column : Int32) : Void
      Binding.bg_QTableView_hideColumn_int(self, column)
    end
    
    def show_row(row : Int32) : Void
      Binding.bg_QTableView_showRow_int(self, row)
    end
    
    def show_column(column : Int32) : Void
      Binding.bg_QTableView_showColumn_int(self, column)
    end
    
    def resize_row_to_contents(row : Int32) : Void
      Binding.bg_QTableView_resizeRowToContents_int(self, row)
    end
    
    def resize_rows_to_contents() : Void
      Binding.bg_QTableView_resizeRowsToContents_(self)
    end
    
    def resize_column_to_contents(column : Int32) : Void
      Binding.bg_QTableView_resizeColumnToContents_int(self, column)
    end
    
    def resize_columns_to_contents() : Void
      Binding.bg_QTableView_resizeColumnsToContents_(self)
    end
    
    def show_grid=(show : Bool) : Void
      Binding.bg_QTableView_setShowGrid_bool(self, show)
    end
    
    protected def row_moved(row : Int32, old_index : Int32, new_index : Int32) : Void
      Binding.bg_QTableView_rowMoved_int_int_int(self, row, old_index, new_index)
    end
    
    protected def column_moved(column : Int32, old_index : Int32, new_index : Int32) : Void
      Binding.bg_QTableView_columnMoved_int_int_int(self, column, old_index, new_index)
    end
    
    protected def row_resized(row : Int32, old_height : Int32, new_height : Int32) : Void
      Binding.bg_QTableView_rowResized_int_int_int(self, row, old_height, new_height)
    end
    
    protected def column_resized(column : Int32, old_width : Int32, new_width : Int32) : Void
      Binding.bg_QTableView_columnResized_int_int_int(self, column, old_width, new_width)
    end
    
    protected def row_count_changed(old_count : Int32, new_count : Int32) : Void
      Binding.bg_QTableView_rowCountChanged_int_int(self, old_count, new_count)
    end
    
    protected def column_count_changed(old_count : Int32, new_count : Int32) : Void
      Binding.bg_QTableView_columnCountChanged_int_int(self, old_count, new_count)
    end
    
    protected def initialize(unnamed_arg_0 : Binding::QTableViewPrivate*, parent : Widget)
      result = Binding.bg_QTableView__CONSTRUCT_QTableViewPrivate_R_QWidget_X(unnamed_arg_0, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableView)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall model= root_index= selection_model= do_items_layout visual_rect scroll_to index_at scroll_contents_by view_options paint_event timer_event horizontal_offset vertical_offset move_cursor set_selection visual_region_for_selection selected_indexes update_geometries viewport_size_hint size_hint_for_row size_hint_for_column vertical_scrollbar_action horizontal_scrollbar_action is_index_hidden selection_changed current_changed keyboard_search input_method_query reset select_all data_changed rows_inserted rows_about_to_be_removed update_editor_data update_editor_geometries vertical_scrollbar_value_changed horizontal_scrollbar_value_changed close_editor commit_data editor_destroyed edit selection_command start_drag focus_next_prev_child event viewport_event mouse_press_event mouse_move_event mouse_release_event mouse_double_click_event drag_enter_event drag_move_event drag_leave_event drop_event focus_in_event focus_out_event key_press_event resize_event input_method_event event_filter ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableView.new(
      bg_QTableView_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTableView_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTableView_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTableView_setModel_QAbstractItemModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("model=") %} Proc(Binding::QAbstractItemModel*, Void).new{|model| self.model=(AbstractItemModelImpl.new(unwrap: model)) } {% else %} nil {% end %}),
      bg_QTableView_setRootIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("root_index=") %} Proc(Binding::QModelIndex*, Void).new{|index| self.root_index=(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_setSelectionModel_QItemSelectionModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_model=") %} Proc(Binding::QItemSelectionModel*, Void).new{|selection_model| self.selection_model=(selection_model) } {% else %} nil {% end %}),
      bg_QTableView_doItemsLayout_: BindgenHelper.wrap_proc({% if forwarded.includes?("do_items_layout") %} Proc(Void).new{ self.do_items_layout() } {% else %} nil {% end %}),
      bg_QTableView_visualRect_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_rect") %} Proc(Binding::QModelIndex*, Binding::QRect*).new{|index| self.visual_rect(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_to") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::ScrollHint, Void).new{|index, hint| self.scroll_to(ModelIndex.new(unwrap: index), hint) } {% else %} nil {% end %}),
      bg_QTableView_indexAt_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index_at") %} Proc(Binding::QPoint, Binding::QModelIndex*).new{|p| self.index_at(Point.new(unwrap: p)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTableView_viewOptions_: BindgenHelper.wrap_proc({% if forwarded.includes?("view_options") %} Proc(Binding::QStyleOptionViewItem*).new{ self.view_options() } {% else %} nil {% end %}),
      bg_QTableView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTableView_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QTableView_horizontalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_offset") %} Proc(Int32).new{ self.horizontal_offset() } {% else %} nil {% end %}),
      bg_QTableView_verticalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_offset") %} Proc(Int32).new{ self.vertical_offset() } {% else %} nil {% end %}),
      bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers: BindgenHelper.wrap_proc({% if forwarded.includes?("move_cursor") %} Proc(AbstractItemDelegate::CursorAction, KeyboardModifiers, Binding::QModelIndex*).new{|cursor_action, modifiers| self.move_cursor(cursor_action, modifiers).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("set_selection") %} Proc(Binding::QRect*, ItemSelectionModel::SelectionFlags, Void).new{|rect, command| self.set_selection(Rect.new(unwrap: rect), command) } {% else %} nil {% end %}),
      bg_QTableView_visualRegionForSelection_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_region_for_selection") %} Proc(Binding::QItemSelection*, Binding::QRegion*).new{|selection| self.visual_region_for_selection(selection) } {% else %} nil {% end %}),
      bg_QTableView_selectedIndexes_: BindgenHelper.wrap_proc({% if forwarded.includes?("selected_indexes") %} Proc(Binding::QModelIndexList*).new{ self.selected_indexes() } {% else %} nil {% end %}),
      bg_QTableView_updateGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometries") %} Proc(Void).new{ self.update_geometries() } {% else %} nil {% end %}),
      bg_QTableView_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForRow_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_row") %} Proc(Int32, Int32).new{|row| self.size_hint_for_row(row) } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForColumn_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_column") %} Proc(Int32, Int32).new{|column| self.size_hint_for_column(column) } {% else %} nil {% end %}),
      bg_QTableView_verticalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_action") %} Proc(Int32, Void).new{|action| self.vertical_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_horizontalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_action") %} Proc(Int32, Void).new{|action| self.horizontal_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_isIndexHidden_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("is_index_hidden") %} Proc(Binding::QModelIndex*, Bool).new{|index| self.is_index_hidden(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_changed") %} Proc(Binding::QItemSelection*, Binding::QItemSelection*, Void).new{|selected, deselected| self.selection_changed(selected, deselected) } {% else %} nil {% end %}),
      bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("current_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|current, previous| self.current_changed(ModelIndex.new(unwrap: current), ModelIndex.new(unwrap: previous)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyboardSearch_const_QString_R: BindgenHelper.wrap_proc({% if forwarded.includes?("keyboard_search") %} Proc(Binding::CrystalString, Void).new{|search| self.keyboard_search(Qt::Converter::QString.unwrap(search)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|query| (self.input_method_query(query).to_unsafe) } {% else %} nil {% end %}),
      bg_QAbstractItemView_reset_: BindgenHelper.wrap_proc({% if forwarded.includes?("reset") %} Proc(Void).new{ self.reset() } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectAll_: BindgenHelper.wrap_proc({% if forwarded.includes?("select_all") %} Proc(Void).new{ self.select_all() } {% else %} nil {% end %}),
      bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R: BindgenHelper.wrap_proc({% if forwarded.includes?("data_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Binding::ContainerQVectorInt*, Void).new{|top_left, bottom_right, roles| self.data_changed(ModelIndex.new(unwrap: top_left), ModelIndex.new(unwrap: bottom_right), Container_QVector_int_.new(unwrap: roles)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_inserted") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_inserted(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("rows_about_to_be_removed") %} Proc(Binding::QModelIndex*, Int32, Int32, Void).new{|parent, start, end_| self.rows_about_to_be_removed(ModelIndex.new(unwrap: parent), start, end_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorData_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_data") %} Proc(Void).new{ self.update_editor_data() } {% else %} nil {% end %}),
      bg_QAbstractItemView_updateEditorGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_editor_geometries") %} Proc(Void).new{ self.update_editor_geometries() } {% else %} nil {% end %}),
      bg_QAbstractItemView_verticalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.vertical_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_horizontalScrollbarValueChanged_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_value_changed") %} Proc(Int32, Void).new{|value| self.horizontal_scrollbar_value_changed(value) } {% else %} nil {% end %}),
      bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint: BindgenHelper.wrap_proc({% if forwarded.includes?("close_editor") %} Proc(Binding::QWidget*, AbstractItemDelegate::EndEditHint, Void).new{|editor, hint| self.close_editor(Widget.new(unwrap: editor), hint) } {% else %} nil {% end %}),
      bg_QAbstractItemView_commitData_QWidget_X: BindgenHelper.wrap_proc({% if forwarded.includes?("commit_data") %} Proc(Binding::QWidget*, Void).new{|editor| self.commit_data(Widget.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_editorDestroyed_QObject_X: BindgenHelper.wrap_proc({% if forwarded.includes?("editor_destroyed") %} Proc(Binding::QObject*, Void).new{|editor| self.editor_destroyed(Object.new(unwrap: editor)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("edit") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::EditTrigger, Binding::QEvent*, Bool).new{|index, trigger, event| self.edit(ModelIndex.new(unwrap: index), trigger, Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_command") %} Proc(Binding::QModelIndex*, Binding::QEvent*, ItemSelectionModel::SelectionFlags).new{|index, event| self.selection_command(ModelIndex.new(unwrap: index), event.try {|ptr| Event.new(unwrap: ptr) unless ptr.null?}).to_unsafe } {% else %} nil {% end %}),
      bg_QAbstractItemView_startDrag_Qt__DropActions: BindgenHelper.wrap_proc({% if forwarded.includes?("start_drag") %} Proc(DropActions, Void).new{|supported_actions| self.start_drag(supported_actions) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
      bg_QAbstractItemView_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_viewportEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_event") %} Proc(Binding::QEvent*, Bool).new{|event| self.viewport_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|event| self.input_method_event(InputMethodEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event_filter") %} Proc(Binding::QObject*, Binding::QEvent*, Bool).new{|object, event| self.event_filter(Object.new(unwrap: object), Event.new(unwrap: event)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableView_JUMPTABLE_BgJumptable_QTableView_R(result, pointerof(jump_table))
    {% end %}
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QTableView_scrollContentsBy_int_int(self, dx, dy)
    end
    
    protected def view_options() : Binding::QStyleOptionViewItem*
      Binding.bg_QTableView_viewOptions_(self)
    end
    
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QTableView_paintEvent_QPaintEvent_X(self, e)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QTableView_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def horizontal_offset() : Int32
      Binding.bg_QTableView_horizontalOffset_(self)
    end
    
    protected def vertical_offset() : Int32
      Binding.bg_QTableView_verticalOffset_(self)
    end
    
    protected def move_cursor(cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(self, cursor_action, modifiers))
    end
    
    protected def set_selection(rect : Rect, command : ItemSelectionModel::SelectionFlags) : Void
      Binding.bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags(self, rect, command)
    end
    
    protected def visual_region_for_selection(selection : Binding::QItemSelection*) : Binding::QRegion*
      Binding.bg_QTableView_visualRegionForSelection_const_QItemSelection_R(self, selection)
    end
    
    protected def selected_indexes() : Binding::QModelIndexList*
      Binding.bg_QTableView_selectedIndexes_(self)
    end
    
    protected def update_geometries() : Void
      Binding.bg_QTableView_updateGeometries_(self)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QTableView_viewportSizeHint_(self)
    end
    
    protected def size_hint_for_row(row : Int32) : Int32
      Binding.bg_QTableView_sizeHintForRow_int(self, row)
    end
    
    protected def size_hint_for_column(column : Int32) : Int32
      Binding.bg_QTableView_sizeHintForColumn_int(self, column)
    end
    
    protected def vertical_scrollbar_action(action : Int32) : Void
      Binding.bg_QTableView_verticalScrollbarAction_int(self, action)
    end
    
    protected def horizontal_scrollbar_action(action : Int32) : Void
      Binding.bg_QTableView_horizontalScrollbarAction_int(self, action)
    end
    
    protected def is_index_hidden(index : ModelIndex) : Bool
      Binding.bg_QTableView_isIndexHidden_const_QModelIndex_R(self, index)
    end
    
    protected def selection_changed(selected : Binding::QItemSelection*, deselected : Binding::QItemSelection*) : Void
      Binding.bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R(self, selected, deselected)
    end
    
    protected def current_changed(current : ModelIndex, previous : ModelIndex) : Void
      Binding.bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R(self, current, previous)
    end
    
    def keyboard_search(search : String) : Void
      Binding.bg_QAbstractItemView_keyboardSearch_const_QString_R(self, Qt::Converter::QString.wrap(search))
    end
    
    def input_method_query(query : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QAbstractItemView_inputMethodQuery_Qt__InputMethodQuery(self, query))
    end
    
    def reset() : Void
      Binding.bg_QAbstractItemView_reset_(self)
    end
    
    def select_all() : Void
      Binding.bg_QAbstractItemView_selectAll_(self)
    end
    
    protected def data_changed(top_left : ModelIndex, bottom_right : ModelIndex, roles : Enumerable(Int32)) : Void
      Binding.bg_QAbstractItemView_dataChanged_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(self, top_left, bottom_right, BindgenHelper.wrap_container(Container_QVector_int_, roles).to_unsafe)
    end
    
    protected def rows_inserted(parent : ModelIndex, start : Int32, end_ : Int32) : Void
      Binding.bg_QAbstractItemView_rowsInserted_const_QModelIndex_R_int_int(self, parent, start, end_)
    end
    
    protected def rows_about_to_be_removed(parent : ModelIndex, start : Int32, end_ : Int32) : Void
      Binding.bg_QAbstractItemView_rowsAboutToBeRemoved_const_QModelIndex_R_int_int(self, parent, start, end_)
    end
    
    protected def update_editor_data() : Void
      Binding.bg_QAbstractItemView_updateEditorData_(self)
    end
    
    protected def update_editor_geometries() : Void
      Binding.bg_QAbstractItemView_updateEditorGeometries_(self)
    end
    
    protected def vertical_scrollbar_value_changed(value : Int32) : Void
      Binding.bg_QAbstractItemView_verticalScrollbarValueChanged_int(self, value)
    end
    
    protected def horizontal_scrollbar_value_changed(value : Int32) : Void
      Binding.bg_QAbstractItemView_horizontalScrollbarValueChanged_int(self, value)
    end
    
    protected def close_editor(editor : Widget, hint : AbstractItemDelegate::EndEditHint) : Void
      Binding.bg_QAbstractItemView_closeEditor_QWidget_X_QAbstractItemDelegate__EndEditHint(self, editor, hint)
    end
    
    protected def commit_data(editor : Widget) : Void
      Binding.bg_QAbstractItemView_commitData_QWidget_X(self, editor)
    end
    
    protected def editor_destroyed(editor : Object) : Void
      Binding.bg_QAbstractItemView_editorDestroyed_QObject_X(self, editor)
    end
    
    protected def edit(index : ModelIndex, trigger : AbstractItemDelegate::EditTrigger, event : Event) : Bool
      Binding.bg_QAbstractItemView_edit_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(self, index, trigger, event)
    end
    
    protected def selection_command(index : ModelIndex, event : Event? = nil) : ItemSelectionModel::SelectionFlags
      Binding.bg_QAbstractItemView_selectionCommand_const_QModelIndex_R_const_QEvent_X(self, index, event)
    end
    
    protected def start_drag(supported_actions : DropActions) : Void
      Binding.bg_QAbstractItemView_startDrag_Qt__DropActions(self, supported_actions)
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QAbstractItemView_focusNextPrevChild_bool(self, next_)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QAbstractItemView_event_QEvent_X(self, event)
    end
    
    protected def viewport_event(event : Event) : Bool
      Binding.bg_QAbstractItemView_viewportEvent_QEvent_X(self, event)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QAbstractItemView_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QAbstractItemView_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QAbstractItemView_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QAbstractItemView_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QAbstractItemView_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QAbstractItemView_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QAbstractItemView_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QAbstractItemView_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QAbstractItemView_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def input_method_event(event : InputMethodEvent) : Void
      Binding.bg_QAbstractItemView_inputMethodEvent_QInputMethodEvent_X(self, event)
    end
    
    protected def event_filter(object : Object, event : Event) : Bool
      Binding.bg_QAbstractItemView_eventFilter_QObject_X_QEvent_X(self, object, event)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTableView_staticMetaObject_STATIC_GETTER_()
    end
    
    def initialize(unwrap : Binding::QTableView*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TableView)
      end
      def model=(model : AbstractItemModel) : Void
        Binding.bg_QTableView_setModel_SUPER_QAbstractItemModel_X(@myself, model)
      end
      
      def root_index=(index : ModelIndex) : Void
        Binding.bg_QTableView_setRootIndex_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      def selection_model=(selection_model : Binding::QItemSelectionModel*) : Void
        Binding.bg_QTableView_setSelectionModel_SUPER_QItemSelectionModel_X(@myself, selection_model)
      end
      
      def do_items_layout() : Void
        Binding.bg_QTableView_doItemsLayout_SUPER_(@myself)
      end
      
      def visual_rect(index : ModelIndex) : Rect
        Rect.new(unwrap: Binding.bg_QTableView_visualRect_SUPER_const_QModelIndex_R(@myself, index))
      end
      
      def scroll_to(index : ModelIndex, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
        Binding.bg_QTableView_scrollTo_SUPER_const_QModelIndex_R_QAbstractItemView__ScrollHint(@myself, index, hint)
      end
      
      def index_at(p : Point) : ModelIndex
        ModelIndex.new(unwrap: Binding.bg_QTableView_indexAt_SUPER_const_QPoint_R(@myself, p))
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QTableView_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
      protected def view_options() : Binding::QStyleOptionViewItem*
        Binding.bg_QTableView_viewOptions_SUPER_(@myself)
      end
      
      protected def paint_event(e : PaintEvent) : Void
        Binding.bg_QTableView_paintEvent_SUPER_QPaintEvent_X(@myself, e)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QTableView_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def horizontal_offset() : Int32
        Binding.bg_QTableView_horizontalOffset_SUPER_(@myself)
      end
      
      protected def vertical_offset() : Int32
        Binding.bg_QTableView_verticalOffset_SUPER_(@myself)
      end
      
      protected def move_cursor(cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : ModelIndex
        ModelIndex.new(unwrap: Binding.bg_QTableView_moveCursor_SUPER_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(@myself, cursor_action, modifiers))
      end
      
      protected def set_selection(rect : Rect, command : ItemSelectionModel::SelectionFlags) : Void
        Binding.bg_QTableView_setSelection_SUPER_const_QRect_R_QItemSelectionModel__SelectionFlags(@myself, rect, command)
      end
      
      protected def visual_region_for_selection(selection : Binding::QItemSelection*) : Binding::QRegion*
        Binding.bg_QTableView_visualRegionForSelection_SUPER_const_QItemSelection_R(@myself, selection)
      end
      
      protected def selected_indexes() : Binding::QModelIndexList*
        Binding.bg_QTableView_selectedIndexes_SUPER_(@myself)
      end
      
      protected def update_geometries() : Void
        Binding.bg_QTableView_updateGeometries_SUPER_(@myself)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QTableView_viewportSizeHint_SUPER_(@myself)
      end
      
      protected def size_hint_for_row(row : Int32) : Int32
        Binding.bg_QTableView_sizeHintForRow_SUPER_int(@myself, row)
      end
      
      protected def size_hint_for_column(column : Int32) : Int32
        Binding.bg_QTableView_sizeHintForColumn_SUPER_int(@myself, column)
      end
      
      protected def vertical_scrollbar_action(action : Int32) : Void
        Binding.bg_QTableView_verticalScrollbarAction_SUPER_int(@myself, action)
      end
      
      protected def horizontal_scrollbar_action(action : Int32) : Void
        Binding.bg_QTableView_horizontalScrollbarAction_SUPER_int(@myself, action)
      end
      
      protected def is_index_hidden(index : ModelIndex) : Bool
        Binding.bg_QTableView_isIndexHidden_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      protected def selection_changed(selected : Binding::QItemSelection*, deselected : Binding::QItemSelection*) : Void
        Binding.bg_QTableView_selectionChanged_SUPER_const_QItemSelection_R_const_QItemSelection_R(@myself, selected, deselected)
      end
      
      protected def current_changed(current : ModelIndex, previous : ModelIndex) : Void
        Binding.bg_QTableView_currentChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R(@myself, current, previous)
      end
      
      def keyboard_search(search : String) : Void
        Binding.bg_QAbstractItemView_keyboardSearch_SUPER_const_QString_R(@myself, Qt::Converter::QString.wrap(search))
      end
      
      def input_method_query(query : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QAbstractItemView_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, query))
      end
      
      def reset() : Void
        Binding.bg_QAbstractItemView_reset_SUPER_(@myself)
      end
      
      def select_all() : Void
        Binding.bg_QAbstractItemView_selectAll_SUPER_(@myself)
      end
      
      protected def data_changed(top_left : ModelIndex, bottom_right : ModelIndex, roles : Enumerable(Int32)) : Void
        Binding.bg_QAbstractItemView_dataChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R_const_QVector_int__R(@myself, top_left, bottom_right, BindgenHelper.wrap_container(Container_QVector_int_, roles).to_unsafe)
      end
      
      protected def rows_inserted(parent : ModelIndex, start : Int32, end_ : Int32) : Void
        Binding.bg_QAbstractItemView_rowsInserted_SUPER_const_QModelIndex_R_int_int(@myself, parent, start, end_)
      end
      
      protected def rows_about_to_be_removed(parent : ModelIndex, start : Int32, end_ : Int32) : Void
        Binding.bg_QAbstractItemView_rowsAboutToBeRemoved_SUPER_const_QModelIndex_R_int_int(@myself, parent, start, end_)
      end
      
      protected def update_editor_data() : Void
        Binding.bg_QAbstractItemView_updateEditorData_SUPER_(@myself)
      end
      
      protected def update_editor_geometries() : Void
        Binding.bg_QAbstractItemView_updateEditorGeometries_SUPER_(@myself)
      end
      
      protected def vertical_scrollbar_value_changed(value : Int32) : Void
        Binding.bg_QAbstractItemView_verticalScrollbarValueChanged_SUPER_int(@myself, value)
      end
      
      protected def horizontal_scrollbar_value_changed(value : Int32) : Void
        Binding.bg_QAbstractItemView_horizontalScrollbarValueChanged_SUPER_int(@myself, value)
      end
      
      protected def close_editor(editor : Widget, hint : AbstractItemDelegate::EndEditHint) : Void
        Binding.bg_QAbstractItemView_closeEditor_SUPER_QWidget_X_QAbstractItemDelegate__EndEditHint(@myself, editor, hint)
      end
      
      protected def commit_data(editor : Widget) : Void
        Binding.bg_QAbstractItemView_commitData_SUPER_QWidget_X(@myself, editor)
      end
      
      protected def editor_destroyed(editor : Object) : Void
        Binding.bg_QAbstractItemView_editorDestroyed_SUPER_QObject_X(@myself, editor)
      end
      
      protected def edit(index : ModelIndex, trigger : AbstractItemDelegate::EditTrigger, event : Event) : Bool
        Binding.bg_QAbstractItemView_edit_SUPER_const_QModelIndex_R_QAbstractItemView__EditTrigger_QEvent_X(@myself, index, trigger, event)
      end
      
      protected def selection_command(index : ModelIndex, event : Event? = nil) : ItemSelectionModel::SelectionFlags
        Binding.bg_QAbstractItemView_selectionCommand_SUPER_const_QModelIndex_R_const_QEvent_X(@myself, index, event)
      end
      
      protected def start_drag(supported_actions : DropActions) : Void
        Binding.bg_QAbstractItemView_startDrag_SUPER_Qt__DropActions(@myself, supported_actions)
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QAbstractItemView_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QAbstractItemView_event_SUPER_QEvent_X(@myself, event)
      end
      
      protected def viewport_event(event : Event) : Bool
        Binding.bg_QAbstractItemView_viewportEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QAbstractItemView_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QAbstractItemView_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QAbstractItemView_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QAbstractItemView_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QAbstractItemView_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QAbstractItemView_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QAbstractItemView_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QAbstractItemView_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QAbstractItemView_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def input_method_event(event : InputMethodEvent) : Void
        Binding.bg_QAbstractItemView_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, event)
      end
      
      protected def event_filter(object : Object, event : Event) : Bool
        Binding.bg_QAbstractItemView_eventFilter_SUPER_QObject_X_QEvent_X(@myself, object, event)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class TableWidgetItem
    @unwrap : Binding::QTableWidgetItem*
    
    def initialize(type : Int32 = 0)
      result = Binding.bg_QTableWidgetItem__CONSTRUCT_int(type)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableWidgetItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ clone data set_data read write ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableWidgetItem.new(
      bg_QTableWidgetItem_clone_: BindgenHelper.wrap_proc({% if forwarded.includes?("clone") %} Proc(Binding::QTableWidgetItem*).new{ self.clone().to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidgetItem_data_int: BindgenHelper.wrap_proc({% if forwarded.includes?("data") %} Proc(Int32, Binding::CrystalVariant).new{|role| (self.data(role).to_unsafe) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_setData_int_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_data") %} Proc(Int32, Binding::CrystalVariant, Void).new{|role, value| self.set_data(role, Qt::Variant.new(value)) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_read_QDataStream_R: BindgenHelper.wrap_proc({% if forwarded.includes?("read") %} Proc(Binding::QDataStream*, Void).new{|in_| self.read(in_) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_write_QDataStream_R: BindgenHelper.wrap_proc({% if forwarded.includes?("write") %} Proc(Binding::QDataStream*, Void).new{|out_| self.write(out_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableWidgetItem_JUMPTABLE_BgJumptable_QTableWidgetItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(text : String, type : Int32 = 0)
      result = Binding.bg_QTableWidgetItem__CONSTRUCT_const_QString_R_int(Qt::Converter::QString.wrap(text), type)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableWidgetItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ clone data set_data read write ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableWidgetItem.new(
      bg_QTableWidgetItem_clone_: BindgenHelper.wrap_proc({% if forwarded.includes?("clone") %} Proc(Binding::QTableWidgetItem*).new{ self.clone().to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidgetItem_data_int: BindgenHelper.wrap_proc({% if forwarded.includes?("data") %} Proc(Int32, Binding::CrystalVariant).new{|role| (self.data(role).to_unsafe) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_setData_int_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_data") %} Proc(Int32, Binding::CrystalVariant, Void).new{|role, value| self.set_data(role, Qt::Variant.new(value)) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_read_QDataStream_R: BindgenHelper.wrap_proc({% if forwarded.includes?("read") %} Proc(Binding::QDataStream*, Void).new{|in_| self.read(in_) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_write_QDataStream_R: BindgenHelper.wrap_proc({% if forwarded.includes?("write") %} Proc(Binding::QDataStream*, Void).new{|out_| self.write(out_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableWidgetItem_JUMPTABLE_BgJumptable_QTableWidgetItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(icon : Icon, text : String, type : Int32 = 0)
      result = Binding.bg_QTableWidgetItem__CONSTRUCT_const_QIcon_R_const_QString_R_int(icon, Qt::Converter::QString.wrap(text), type)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableWidgetItem)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ clone data set_data read write ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableWidgetItem.new(
      bg_QTableWidgetItem_clone_: BindgenHelper.wrap_proc({% if forwarded.includes?("clone") %} Proc(Binding::QTableWidgetItem*).new{ self.clone().to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidgetItem_data_int: BindgenHelper.wrap_proc({% if forwarded.includes?("data") %} Proc(Int32, Binding::CrystalVariant).new{|role| (self.data(role).to_unsafe) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_setData_int_const_QVariant_R: BindgenHelper.wrap_proc({% if forwarded.includes?("set_data") %} Proc(Int32, Binding::CrystalVariant, Void).new{|role, value| self.set_data(role, Qt::Variant.new(value)) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_read_QDataStream_R: BindgenHelper.wrap_proc({% if forwarded.includes?("read") %} Proc(Binding::QDataStream*, Void).new{|in_| self.read(in_) } {% else %} nil {% end %}),
      bg_QTableWidgetItem_write_QDataStream_R: BindgenHelper.wrap_proc({% if forwarded.includes?("write") %} Proc(Binding::QDataStream*, Void).new{|out_| self.write(out_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableWidgetItem_JUMPTABLE_BgJumptable_QTableWidgetItem_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def clone() : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidgetItem_clone_(self))
    end
    
    def table_widget() : TableWidget
      TableWidget.new(unwrap: Binding.bg_QTableWidgetItem_tableWidget_(self))
    end
    
    def row() : Int32
      Binding.bg_QTableWidgetItem_row_(self)
    end
    
    def column() : Int32
      Binding.bg_QTableWidgetItem_column_(self)
    end
    
    def selected=(select_ : Bool) : Void
      Binding.bg_QTableWidgetItem_setSelected_bool(self, select_)
    end
    
    def selected?() : Bool
      Binding.bg_QTableWidgetItem_isSelected_(self)
    end
    
    def flags() : ItemFlags
      Binding.bg_QTableWidgetItem_flags_(self)
    end
    
    def flags=(flags : ItemFlags) : Void
      Binding.bg_QTableWidgetItem_setFlags_Qt__ItemFlags(self, flags)
    end
    
    def text() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidgetItem_text_(self))
    end
    
    def text=(text : String) : Void
      Binding.bg_QTableWidgetItem_setText_const_QString_R(self, Qt::Converter::QString.wrap(text))
    end
    
    def icon() : Icon
      Icon.new(unwrap: Binding.bg_QTableWidgetItem_icon_(self))
    end
    
    def icon=(icon : Icon) : Void
      Binding.bg_QTableWidgetItem_setIcon_const_QIcon_R(self, icon)
    end
    
    def status_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidgetItem_statusTip_(self))
    end
    
    def status_tip=(status_tip : String) : Void
      Binding.bg_QTableWidgetItem_setStatusTip_const_QString_R(self, Qt::Converter::QString.wrap(status_tip))
    end
    
    def tool_tip() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidgetItem_toolTip_(self))
    end
    
    def tool_tip=(tool_tip : String) : Void
      Binding.bg_QTableWidgetItem_setToolTip_const_QString_R(self, Qt::Converter::QString.wrap(tool_tip))
    end
    
    def whats_this() : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidgetItem_whatsThis_(self))
    end
    
    def whats_this=(whats_this : String) : Void
      Binding.bg_QTableWidgetItem_setWhatsThis_const_QString_R(self, Qt::Converter::QString.wrap(whats_this))
    end
    
    def font() : Font
      Font.new(unwrap: Binding.bg_QTableWidgetItem_font_(self))
    end
    
    def font=(font : Font) : Void
      Binding.bg_QTableWidgetItem_setFont_const_QFont_R(self, font)
    end
    
    def text_alignment() : Int32
      Binding.bg_QTableWidgetItem_textAlignment_(self)
    end
    
    def text_alignment=(alignment : Int32) : Void
      Binding.bg_QTableWidgetItem_setTextAlignment_int(self, alignment)
    end
    
    def background() : Brush
      Brush.new(unwrap: Binding.bg_QTableWidgetItem_background_(self))
    end
    
    def background=(brush : Brush) : Void
      Binding.bg_QTableWidgetItem_setBackground_const_QBrush_R(self, brush)
    end
    
    def foreground() : Brush
      Brush.new(unwrap: Binding.bg_QTableWidgetItem_foreground_(self))
    end
    
    def foreground=(brush : Brush) : Void
      Binding.bg_QTableWidgetItem_setForeground_const_QBrush_R(self, brush)
    end
    
    def check_state() : CheckState
      Binding.bg_QTableWidgetItem_checkState_(self)
    end
    
    def check_state=(state : CheckState) : Void
      Binding.bg_QTableWidgetItem_setCheckState_Qt__CheckState(self, state)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QTableWidgetItem_sizeHint_(self)
    end
    
    def size_hint=(size : Binding::QSize*) : Void
      Binding.bg_QTableWidgetItem_setSizeHint_const_QSize_R(self, size)
    end
    
    def data(role : Int32) : Variant
      Qt::Variant.new(Binding.bg_QTableWidgetItem_data_int(self, role))
    end
    
    def set_data(role : Int32, value : Variant) : Void
      Binding.bg_QTableWidgetItem_setData_int_const_QVariant_R(self, role, (value.to_unsafe))
    end
    
    def read(in_ : Binding::QDataStream*) : Void
      Binding.bg_QTableWidgetItem_read_QDataStream_R(self, in_)
    end
    
    def write(out_ : Binding::QDataStream*) : Void
      Binding.bg_QTableWidgetItem_write_QDataStream_R(self, out_)
    end
    
    def type() : Int32
      Binding.bg_QTableWidgetItem_type_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::QTableWidgetItem*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TableWidgetItem)
      end
      def clone() : TableWidgetItem
        TableWidgetItem.new(unwrap: Binding.bg_QTableWidgetItem_clone_SUPER_(@myself))
      end
      
      def data(role : Int32) : Variant
        Qt::Variant.new(Binding.bg_QTableWidgetItem_data_SUPER_int(@myself, role))
      end
      
      def set_data(role : Int32, value : Variant) : Void
        Binding.bg_QTableWidgetItem_setData_SUPER_int_const_QVariant_R(@myself, role, (value.to_unsafe))
      end
      
      def read(in_ : Binding::QDataStream*) : Void
        Binding.bg_QTableWidgetItem_read_SUPER_QDataStream_R(@myself, in_)
      end
      
      def write(out_ : Binding::QDataStream*) : Void
        Binding.bg_QTableWidgetItem_write_SUPER_QDataStream_R(@myself, out_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class TableWidget < TableView
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QTableWidget_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QTableWidget_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QTableWidget_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidget_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidget_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QTableWidget_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QTableWidget__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event mime_types mime_data drop_mime_data supported_drop_actions drop_event model= root_index= selection_model= do_items_layout visual_rect scroll_to index_at scroll_contents_by view_options paint_event timer_event horizontal_offset vertical_offset move_cursor set_selection visual_region_for_selection selected_indexes update_geometries viewport_size_hint size_hint_for_row size_hint_for_column vertical_scrollbar_action horizontal_scrollbar_action is_index_hidden selection_changed current_changed ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableWidget.new(
      bg_QTableWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTableWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTableWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTableWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTableWidget_mimeTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_types") %} Proc(Binding::QStringList*).new{ self.mime_types() } {% else %} nil {% end %}),
      bg_QTableWidget_mimeData_const_QList_QTableWidgetItem_X_: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_data") %} Proc(Binding::ContainerQListQTableWidgetItemX*, Binding::QMimeData*).new{|items| self.mime_data(Container_QList_QTableWidgetItem_X_.new(unwrap: items)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidget_dropMimeData_int_int_const_QMimeData_X_Qt__DropAction: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_mime_data") %} Proc(Int32, Int32, Binding::QMimeData*, DropAction, Bool).new{|row, column, data, action| self.drop_mime_data(row, column, MimeData.new(unwrap: data), action) } {% else %} nil {% end %}),
      bg_QTableWidget_supportedDropActions_: BindgenHelper.wrap_proc({% if forwarded.includes?("supported_drop_actions") %} Proc(DropActions).new{ self.supported_drop_actions().to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QTableView_setModel_QAbstractItemModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("model=") %} Proc(Binding::QAbstractItemModel*, Void).new{|model| self.model=(AbstractItemModelImpl.new(unwrap: model)) } {% else %} nil {% end %}),
      bg_QTableView_setRootIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("root_index=") %} Proc(Binding::QModelIndex*, Void).new{|index| self.root_index=(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_setSelectionModel_QItemSelectionModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_model=") %} Proc(Binding::QItemSelectionModel*, Void).new{|selection_model| self.selection_model=(selection_model) } {% else %} nil {% end %}),
      bg_QTableView_doItemsLayout_: BindgenHelper.wrap_proc({% if forwarded.includes?("do_items_layout") %} Proc(Void).new{ self.do_items_layout() } {% else %} nil {% end %}),
      bg_QTableView_visualRect_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_rect") %} Proc(Binding::QModelIndex*, Binding::QRect*).new{|index| self.visual_rect(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_to") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::ScrollHint, Void).new{|index, hint| self.scroll_to(ModelIndex.new(unwrap: index), hint) } {% else %} nil {% end %}),
      bg_QTableView_indexAt_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index_at") %} Proc(Binding::QPoint, Binding::QModelIndex*).new{|p| self.index_at(Point.new(unwrap: p)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTableView_viewOptions_: BindgenHelper.wrap_proc({% if forwarded.includes?("view_options") %} Proc(Binding::QStyleOptionViewItem*).new{ self.view_options() } {% else %} nil {% end %}),
      bg_QTableView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTableView_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QTableView_horizontalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_offset") %} Proc(Int32).new{ self.horizontal_offset() } {% else %} nil {% end %}),
      bg_QTableView_verticalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_offset") %} Proc(Int32).new{ self.vertical_offset() } {% else %} nil {% end %}),
      bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers: BindgenHelper.wrap_proc({% if forwarded.includes?("move_cursor") %} Proc(AbstractItemDelegate::CursorAction, KeyboardModifiers, Binding::QModelIndex*).new{|cursor_action, modifiers| self.move_cursor(cursor_action, modifiers).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("set_selection") %} Proc(Binding::QRect*, ItemSelectionModel::SelectionFlags, Void).new{|rect, command| self.set_selection(Rect.new(unwrap: rect), command) } {% else %} nil {% end %}),
      bg_QTableView_visualRegionForSelection_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_region_for_selection") %} Proc(Binding::QItemSelection*, Binding::QRegion*).new{|selection| self.visual_region_for_selection(selection) } {% else %} nil {% end %}),
      bg_QTableView_selectedIndexes_: BindgenHelper.wrap_proc({% if forwarded.includes?("selected_indexes") %} Proc(Binding::QModelIndexList*).new{ self.selected_indexes() } {% else %} nil {% end %}),
      bg_QTableView_updateGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometries") %} Proc(Void).new{ self.update_geometries() } {% else %} nil {% end %}),
      bg_QTableView_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForRow_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_row") %} Proc(Int32, Int32).new{|row| self.size_hint_for_row(row) } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForColumn_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_column") %} Proc(Int32, Int32).new{|column| self.size_hint_for_column(column) } {% else %} nil {% end %}),
      bg_QTableView_verticalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_action") %} Proc(Int32, Void).new{|action| self.vertical_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_horizontalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_action") %} Proc(Int32, Void).new{|action| self.horizontal_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_isIndexHidden_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("is_index_hidden") %} Proc(Binding::QModelIndex*, Bool).new{|index| self.is_index_hidden(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_changed") %} Proc(Binding::QItemSelection*, Binding::QItemSelection*, Void).new{|selected, deselected| self.selection_changed(selected, deselected) } {% else %} nil {% end %}),
      bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("current_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|current, previous| self.current_changed(ModelIndex.new(unwrap: current), ModelIndex.new(unwrap: previous)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableWidget_JUMPTABLE_BgJumptable_QTableWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(rows : Int32, columns : Int32, parent : Widget? = nil)
      result = Binding.bg_QTableWidget__CONSTRUCT_int_int_QWidget_X(rows, columns, parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(TableWidget)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall event mime_types mime_data drop_mime_data supported_drop_actions drop_event model= root_index= selection_model= do_items_layout visual_rect scroll_to index_at scroll_contents_by view_options paint_event timer_event horizontal_offset vertical_offset move_cursor set_selection visual_region_for_selection selected_indexes update_geometries viewport_size_hint size_hint_for_row size_hint_for_column vertical_scrollbar_action horizontal_scrollbar_action is_index_hidden selection_changed current_changed ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QTableWidget.new(
      bg_QTableWidget_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QTableWidget_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QTableWidget_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QTableWidget_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTableWidget_mimeTypes_: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_types") %} Proc(Binding::QStringList*).new{ self.mime_types() } {% else %} nil {% end %}),
      bg_QTableWidget_mimeData_const_QList_QTableWidgetItem_X_: BindgenHelper.wrap_proc({% if forwarded.includes?("mime_data") %} Proc(Binding::ContainerQListQTableWidgetItemX*, Binding::QMimeData*).new{|items| self.mime_data(Container_QList_QTableWidgetItem_X_.new(unwrap: items)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidget_dropMimeData_int_int_const_QMimeData_X_Qt__DropAction: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_mime_data") %} Proc(Int32, Int32, Binding::QMimeData*, DropAction, Bool).new{|row, column, data, action| self.drop_mime_data(row, column, MimeData.new(unwrap: data), action) } {% else %} nil {% end %}),
      bg_QTableWidget_supportedDropActions_: BindgenHelper.wrap_proc({% if forwarded.includes?("supported_drop_actions") %} Proc(DropActions).new{ self.supported_drop_actions().to_unsafe } {% else %} nil {% end %}),
      bg_QTableWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QTableView_setModel_QAbstractItemModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("model=") %} Proc(Binding::QAbstractItemModel*, Void).new{|model| self.model=(AbstractItemModelImpl.new(unwrap: model)) } {% else %} nil {% end %}),
      bg_QTableView_setRootIndex_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("root_index=") %} Proc(Binding::QModelIndex*, Void).new{|index| self.root_index=(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_setSelectionModel_QItemSelectionModel_X: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_model=") %} Proc(Binding::QItemSelectionModel*, Void).new{|selection_model| self.selection_model=(selection_model) } {% else %} nil {% end %}),
      bg_QTableView_doItemsLayout_: BindgenHelper.wrap_proc({% if forwarded.includes?("do_items_layout") %} Proc(Void).new{ self.do_items_layout() } {% else %} nil {% end %}),
      bg_QTableView_visualRect_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_rect") %} Proc(Binding::QModelIndex*, Binding::QRect*).new{|index| self.visual_rect(ModelIndex.new(unwrap: index)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_to") %} Proc(Binding::QModelIndex*, AbstractItemDelegate::ScrollHint, Void).new{|index, hint| self.scroll_to(ModelIndex.new(unwrap: index), hint) } {% else %} nil {% end %}),
      bg_QTableView_indexAt_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("index_at") %} Proc(Binding::QPoint, Binding::QModelIndex*).new{|p| self.index_at(Point.new(unwrap: p)).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_scrollContentsBy_int_int: BindgenHelper.wrap_proc({% if forwarded.includes?("scroll_contents_by") %} Proc(Int32, Int32, Void).new{|dx, dy| self.scroll_contents_by(dx, dy) } {% else %} nil {% end %}),
      bg_QTableView_viewOptions_: BindgenHelper.wrap_proc({% if forwarded.includes?("view_options") %} Proc(Binding::QStyleOptionViewItem*).new{ self.view_options() } {% else %} nil {% end %}),
      bg_QTableView_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|e| self.paint_event(PaintEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QTableView_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|event| self.timer_event(TimerEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QTableView_horizontalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_offset") %} Proc(Int32).new{ self.horizontal_offset() } {% else %} nil {% end %}),
      bg_QTableView_verticalOffset_: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_offset") %} Proc(Int32).new{ self.vertical_offset() } {% else %} nil {% end %}),
      bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers: BindgenHelper.wrap_proc({% if forwarded.includes?("move_cursor") %} Proc(AbstractItemDelegate::CursorAction, KeyboardModifiers, Binding::QModelIndex*).new{|cursor_action, modifiers| self.move_cursor(cursor_action, modifiers).to_unsafe } {% else %} nil {% end %}),
      bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags: BindgenHelper.wrap_proc({% if forwarded.includes?("set_selection") %} Proc(Binding::QRect*, ItemSelectionModel::SelectionFlags, Void).new{|rect, command| self.set_selection(Rect.new(unwrap: rect), command) } {% else %} nil {% end %}),
      bg_QTableView_visualRegionForSelection_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("visual_region_for_selection") %} Proc(Binding::QItemSelection*, Binding::QRegion*).new{|selection| self.visual_region_for_selection(selection) } {% else %} nil {% end %}),
      bg_QTableView_selectedIndexes_: BindgenHelper.wrap_proc({% if forwarded.includes?("selected_indexes") %} Proc(Binding::QModelIndexList*).new{ self.selected_indexes() } {% else %} nil {% end %}),
      bg_QTableView_updateGeometries_: BindgenHelper.wrap_proc({% if forwarded.includes?("update_geometries") %} Proc(Void).new{ self.update_geometries() } {% else %} nil {% end %}),
      bg_QTableView_viewportSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("viewport_size_hint") %} Proc(Binding::QSize*).new{ self.viewport_size_hint() } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForRow_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_row") %} Proc(Int32, Int32).new{|row| self.size_hint_for_row(row) } {% else %} nil {% end %}),
      bg_QTableView_sizeHintForColumn_int: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint_for_column") %} Proc(Int32, Int32).new{|column| self.size_hint_for_column(column) } {% else %} nil {% end %}),
      bg_QTableView_verticalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("vertical_scrollbar_action") %} Proc(Int32, Void).new{|action| self.vertical_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_horizontalScrollbarAction_int: BindgenHelper.wrap_proc({% if forwarded.includes?("horizontal_scrollbar_action") %} Proc(Int32, Void).new{|action| self.horizontal_scrollbar_action(action) } {% else %} nil {% end %}),
      bg_QTableView_isIndexHidden_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("is_index_hidden") %} Proc(Binding::QModelIndex*, Bool).new{|index| self.is_index_hidden(ModelIndex.new(unwrap: index)) } {% else %} nil {% end %}),
      bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R: BindgenHelper.wrap_proc({% if forwarded.includes?("selection_changed") %} Proc(Binding::QItemSelection*, Binding::QItemSelection*, Void).new{|selected, deselected| self.selection_changed(selected, deselected) } {% else %} nil {% end %}),
      bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R: BindgenHelper.wrap_proc({% if forwarded.includes?("current_changed") %} Proc(Binding::QModelIndex*, Binding::QModelIndex*, Void).new{|current, previous| self.current_changed(ModelIndex.new(unwrap: current), ModelIndex.new(unwrap: previous)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QTableWidget_JUMPTABLE_BgJumptable_QTableWidget_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def row_count=(rows : Int32) : Void
      Binding.bg_QTableWidget_setRowCount_int(self, rows)
    end
    
    def row_count() : Int32
      Binding.bg_QTableWidget_rowCount_(self)
    end
    
    def column_count=(columns : Int32) : Void
      Binding.bg_QTableWidget_setColumnCount_int(self, columns)
    end
    
    def column_count() : Int32
      Binding.bg_QTableWidget_columnCount_(self)
    end
    
    def row(item : TableWidgetItem) : Int32
      Binding.bg_QTableWidget_row_const_QTableWidgetItem_X(self, item)
    end
    
    def column(item : TableWidgetItem) : Int32
      Binding.bg_QTableWidget_column_const_QTableWidgetItem_X(self, item)
    end
    
    def item(row : Int32, column : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_item_int_int(self, row, column))
    end
    
    def set_item(row : Int32, column : Int32, item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_setItem_int_int_QTableWidgetItem_X(self, row, column, item)
    end
    
    def take_item(row : Int32, column : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_takeItem_int_int(self, row, column))
    end
    
    def vertical_header_item(row : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_verticalHeaderItem_int(self, row))
    end
    
    def set_vertical_header_item(row : Int32, item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_setVerticalHeaderItem_int_QTableWidgetItem_X(self, row, item)
    end
    
    def take_vertical_header_item(row : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_takeVerticalHeaderItem_int(self, row))
    end
    
    def horizontal_header_item(column : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_horizontalHeaderItem_int(self, column))
    end
    
    def set_horizontal_header_item(column : Int32, item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_setHorizontalHeaderItem_int_QTableWidgetItem_X(self, column, item)
    end
    
    def take_horizontal_header_item(column : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_takeHorizontalHeaderItem_int(self, column))
    end
    
    def vertical_header_labels=(labels : Binding::QStringList*) : Void
      Binding.bg_QTableWidget_setVerticalHeaderLabels_const_QStringList_R(self, labels)
    end
    
    def horizontal_header_labels=(labels : Binding::QStringList*) : Void
      Binding.bg_QTableWidget_setHorizontalHeaderLabels_const_QStringList_R(self, labels)
    end
    
    def current_row() : Int32
      Binding.bg_QTableWidget_currentRow_(self)
    end
    
    def current_column() : Int32
      Binding.bg_QTableWidget_currentColumn_(self)
    end
    
    def current_item() : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_currentItem_(self))
    end
    
    def current_item=(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_setCurrentItem_QTableWidgetItem_X(self, item)
    end
    
    def set_current_item(item : TableWidgetItem, command : ItemSelectionModel::SelectionFlags) : Void
      Binding.bg_QTableWidget_setCurrentItem_QTableWidgetItem_X_QItemSelectionModel__SelectionFlags(self, item, command)
    end
    
    def set_current_cell(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_setCurrentCell_int_int(self, row, column)
    end
    
    def set_current_cell(row : Int32, column : Int32, command : ItemSelectionModel::SelectionFlags) : Void
      Binding.bg_QTableWidget_setCurrentCell_int_int_QItemSelectionModel__SelectionFlags(self, row, column, command)
    end
    
    def sort_items(column : Int32, order : SortOrder = SortOrder::AscendingOrder) : Void
      Binding.bg_QTableWidget_sortItems_int_Qt__SortOrder(self, column, order)
    end
    
    def sorting_enabled=(enable : Bool) : Void
      Binding.bg_QTableWidget_setSortingEnabled_bool(self, enable)
    end
    
    def sorting_enabled?() : Bool
      Binding.bg_QTableWidget_isSortingEnabled_(self)
    end
    
    def edit_item(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_editItem_QTableWidgetItem_X(self, item)
    end
    
    def open_persistent_editor(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_openPersistentEditor_QTableWidgetItem_X(self, item)
    end
    
    def close_persistent_editor(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_closePersistentEditor_QTableWidgetItem_X(self, item)
    end
    
    def is_persistent_editor_open(item : TableWidgetItem) : Bool
      Binding.bg_QTableWidget_isPersistentEditorOpen_QTableWidgetItem_X(self, item)
    end
    
    def cell_widget(row : Int32, column : Int32) : Widget
      Widget.new(unwrap: Binding.bg_QTableWidget_cellWidget_int_int(self, row, column))
    end
    
    def set_cell_widget(row : Int32, column : Int32, widget : Widget) : Void
      Binding.bg_QTableWidget_setCellWidget_int_int_QWidget_X(self, row, column, widget)
    end
    
    def remove_cell_widget(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_removeCellWidget_int_int(self, row, column)
    end
    
    def set_range_selected(range : Binding::QTableWidgetSelectionRange*, select_ : Bool) : Void
      Binding.bg_QTableWidget_setRangeSelected_const_QTableWidgetSelectionRange_R_bool(self, range, select_)
    end
    
    def selected_ranges() : Enumerable(Binding::QTableWidgetSelectionRange*)
      Container_QList_QTableWidgetSelectionRange_.new(unwrap: Binding.bg_QTableWidget_selectedRanges_(self))
    end
    
    def selected_items() : Enumerable(TableWidgetItem)
      Container_QList_QTableWidgetItem_X_.new(unwrap: Binding.bg_QTableWidget_selectedItems_(self))
    end
    
    def find_items(text : String, flags : MatchFlags) : Enumerable(TableWidgetItem)
      Container_QList_QTableWidgetItem_X_.new(unwrap: Binding.bg_QTableWidget_findItems_const_QString_R_Qt__MatchFlags(self, Qt::Converter::QString.wrap(text), flags))
    end
    
    def visual_row(logical_row : Int32) : Int32
      Binding.bg_QTableWidget_visualRow_int(self, logical_row)
    end
    
    def visual_column(logical_column : Int32) : Int32
      Binding.bg_QTableWidget_visualColumn_int(self, logical_column)
    end
    
    def item_at(p : Point) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_itemAt_const_QPoint_R(self, p))
    end
    
    def item_at(x : Int32, y : Int32) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_itemAt_int_int(self, x, y))
    end
    
    def visual_item_rect(item : TableWidgetItem) : Rect
      Rect.new(unwrap: Binding.bg_QTableWidget_visualItemRect_const_QTableWidgetItem_X(self, item))
    end
    
    def item_prototype() : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_itemPrototype_(self))
    end
    
    def item_prototype=(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_setItemPrototype_const_QTableWidgetItem_X(self, item)
    end
    
    def scroll_to_item(item : TableWidgetItem, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
      Binding.bg_QTableWidget_scrollToItem_const_QTableWidgetItem_X_QAbstractItemView__ScrollHint(self, item, hint)
    end
    
    def insert_row(row : Int32) : Void
      Binding.bg_QTableWidget_insertRow_int(self, row)
    end
    
    def insert_column(column : Int32) : Void
      Binding.bg_QTableWidget_insertColumn_int(self, column)
    end
    
    def remove_row(row : Int32) : Void
      Binding.bg_QTableWidget_removeRow_int(self, row)
    end
    
    def remove_column(column : Int32) : Void
      Binding.bg_QTableWidget_removeColumn_int(self, column)
    end
    
    def clear() : Void
      Binding.bg_QTableWidget_clear_(self)
    end
    
    def clear_contents() : Void
      Binding.bg_QTableWidget_clearContents_(self)
    end
    
    def item_pressed(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_itemPressed_QTableWidgetItem_X(self, item)
    end
    
    def item_clicked(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_itemClicked_QTableWidgetItem_X(self, item)
    end
    
    def item_double_clicked(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_itemDoubleClicked_QTableWidgetItem_X(self, item)
    end
    
    def item_activated(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_itemActivated_QTableWidgetItem_X(self, item)
    end
    
    def item_entered(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_itemEntered_QTableWidgetItem_X(self, item)
    end
    
    def item_changed(item : TableWidgetItem) : Void
      Binding.bg_QTableWidget_itemChanged_QTableWidgetItem_X(self, item)
    end
    
    def current_item_changed(current : TableWidgetItem, previous : TableWidgetItem) : Void
      Binding.bg_QTableWidget_currentItemChanged_QTableWidgetItem_X_QTableWidgetItem_X(self, current, previous)
    end
    
    def item_selection_changed() : Void
      Binding.bg_QTableWidget_itemSelectionChanged_(self)
    end
    
    def cell_pressed(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_cellPressed_int_int(self, row, column)
    end
    
    def cell_clicked(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_cellClicked_int_int(self, row, column)
    end
    
    def cell_double_clicked(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_cellDoubleClicked_int_int(self, row, column)
    end
    
    def cell_activated(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_cellActivated_int_int(self, row, column)
    end
    
    def cell_entered(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_cellEntered_int_int(self, row, column)
    end
    
    def cell_changed(row : Int32, column : Int32) : Void
      Binding.bg_QTableWidget_cellChanged_int_int(self, row, column)
    end
    
    def current_cell_changed(current_row : Int32, current_column : Int32, previous_row : Int32, previous_column : Int32) : Void
      Binding.bg_QTableWidget_currentCellChanged_int_int_int_int(self, current_row, current_column, previous_row, previous_column)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QTableWidget_event_QEvent_X(self, e)
    end
    
    protected def mime_types() : Binding::QStringList*
      Binding.bg_QTableWidget_mimeTypes_(self)
    end
    
    protected def mime_data(items : Enumerable(TableWidgetItem)) : MimeData
      MimeData.new(unwrap: Binding.bg_QTableWidget_mimeData_const_QList_QTableWidgetItem_X_(self, BindgenHelper.wrap_container(Container_QList_QTableWidgetItem_X_, items).to_unsafe))
    end
    
    protected def drop_mime_data(row : Int32, column : Int32, data : MimeData, action : DropAction) : Bool
      Binding.bg_QTableWidget_dropMimeData_int_int_const_QMimeData_X_Qt__DropAction(self, row, column, data, action)
    end
    
    protected def supported_drop_actions() : DropActions
      Binding.bg_QTableWidget_supportedDropActions_(self)
    end
    
    protected def items(data : MimeData) : Enumerable(TableWidgetItem)
      Container_QList_QTableWidgetItem_X_.new(unwrap: Binding.bg_QTableWidget_items_const_QMimeData_X(self, data))
    end
    
    protected def index_from_item(item : TableWidgetItem) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QTableWidget_indexFromItem_const_QTableWidgetItem_X(self, item))
    end
    
    protected def index_from_item(item : TableWidgetItem) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QTableWidget_indexFromItem_QTableWidgetItem_X(self, item))
    end
    
    protected def item_from_index(index : ModelIndex) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_QTableWidget_itemFromIndex_const_QModelIndex_R(self, index))
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QTableWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    def model=(model : AbstractItemModel) : Void
      Binding.bg_QTableView_setModel_QAbstractItemModel_X(self, model)
    end
    
    def root_index=(index : ModelIndex) : Void
      Binding.bg_QTableView_setRootIndex_const_QModelIndex_R(self, index)
    end
    
    def selection_model=(selection_model : Binding::QItemSelectionModel*) : Void
      Binding.bg_QTableView_setSelectionModel_QItemSelectionModel_X(self, selection_model)
    end
    
    def do_items_layout() : Void
      Binding.bg_QTableView_doItemsLayout_(self)
    end
    
    def visual_rect(index : ModelIndex) : Rect
      Rect.new(unwrap: Binding.bg_QTableView_visualRect_const_QModelIndex_R(self, index))
    end
    
    def scroll_to(index : ModelIndex, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
      Binding.bg_QTableView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint(self, index, hint)
    end
    
    def index_at(p : Point) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QTableView_indexAt_const_QPoint_R(self, p))
    end
    
    protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
      Binding.bg_QTableView_scrollContentsBy_int_int(self, dx, dy)
    end
    
    protected def view_options() : Binding::QStyleOptionViewItem*
      Binding.bg_QTableView_viewOptions_(self)
    end
    
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QTableView_paintEvent_QPaintEvent_X(self, e)
    end
    
    protected def timer_event(event : TimerEvent) : Void
      Binding.bg_QTableView_timerEvent_QTimerEvent_X(self, event)
    end
    
    protected def horizontal_offset() : Int32
      Binding.bg_QTableView_horizontalOffset_(self)
    end
    
    protected def vertical_offset() : Int32
      Binding.bg_QTableView_verticalOffset_(self)
    end
    
    protected def move_cursor(cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QTableView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(self, cursor_action, modifiers))
    end
    
    protected def set_selection(rect : Rect, command : ItemSelectionModel::SelectionFlags) : Void
      Binding.bg_QTableView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags(self, rect, command)
    end
    
    protected def visual_region_for_selection(selection : Binding::QItemSelection*) : Binding::QRegion*
      Binding.bg_QTableView_visualRegionForSelection_const_QItemSelection_R(self, selection)
    end
    
    protected def selected_indexes() : Binding::QModelIndexList*
      Binding.bg_QTableView_selectedIndexes_(self)
    end
    
    protected def update_geometries() : Void
      Binding.bg_QTableView_updateGeometries_(self)
    end
    
    protected def viewport_size_hint() : Binding::QSize*
      Binding.bg_QTableView_viewportSizeHint_(self)
    end
    
    protected def size_hint_for_row(row : Int32) : Int32
      Binding.bg_QTableView_sizeHintForRow_int(self, row)
    end
    
    protected def size_hint_for_column(column : Int32) : Int32
      Binding.bg_QTableView_sizeHintForColumn_int(self, column)
    end
    
    protected def vertical_scrollbar_action(action : Int32) : Void
      Binding.bg_QTableView_verticalScrollbarAction_int(self, action)
    end
    
    protected def horizontal_scrollbar_action(action : Int32) : Void
      Binding.bg_QTableView_horizontalScrollbarAction_int(self, action)
    end
    
    protected def is_index_hidden(index : ModelIndex) : Bool
      Binding.bg_QTableView_isIndexHidden_const_QModelIndex_R(self, index)
    end
    
    protected def selection_changed(selected : Binding::QItemSelection*, deselected : Binding::QItemSelection*) : Void
      Binding.bg_QTableView_selectionChanged_const_QItemSelection_R_const_QItemSelection_R(self, selected, deselected)
    end
    
    protected def current_changed(current : ModelIndex, previous : ModelIndex) : Void
      Binding.bg_QTableView_currentChanged_const_QModelIndex_R_const_QModelIndex_R(self, current, previous)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QTableWidget_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_item_pressed(&_proc_ : Proc(TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemPressed_CrystalProc_void__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Void).new do |arg0| _proc_.call(TableWidgetItem.new(unwrap: arg0)) end)))
    end
    
    def on_item_clicked(&_proc_ : Proc(TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemClicked_CrystalProc_void__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Void).new do |arg0| _proc_.call(TableWidgetItem.new(unwrap: arg0)) end)))
    end
    
    def on_item_double_clicked(&_proc_ : Proc(TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemDoubleClicked_CrystalProc_void__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Void).new do |arg0| _proc_.call(TableWidgetItem.new(unwrap: arg0)) end)))
    end
    
    def on_item_activated(&_proc_ : Proc(TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemActivated_CrystalProc_void__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Void).new do |arg0| _proc_.call(TableWidgetItem.new(unwrap: arg0)) end)))
    end
    
    def on_item_entered(&_proc_ : Proc(TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemEntered_CrystalProc_void__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Void).new do |arg0| _proc_.call(TableWidgetItem.new(unwrap: arg0)) end)))
    end
    
    def on_item_changed(&_proc_ : Proc(TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemChanged_CrystalProc_void__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Void).new do |arg0| _proc_.call(TableWidgetItem.new(unwrap: arg0)) end)))
    end
    
    def on_current_item_changed(&_proc_ : Proc(TableWidgetItem, TableWidgetItem, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_currentItemChanged_CrystalProc_void__QTableWidgetItem_X__QTableWidgetItem_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QTableWidgetItem*, Binding::QTableWidgetItem*, Void).new do |arg0, arg1| _proc_.call(TableWidgetItem.new(unwrap: arg0), TableWidgetItem.new(unwrap: arg1)) end)))
    end
    
    def on_item_selection_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_itemSelectionChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_cell_pressed(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_cellPressed_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_cell_clicked(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_cellClicked_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_cell_double_clicked(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_cellDoubleClicked_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_cell_activated(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_cellActivated_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_cell_entered(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_cellEntered_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_cell_changed(&_proc_ : Proc(Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_cellChanged_CrystalProc_void__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_current_cell_changed(&_proc_ : Proc(Int32, Int32, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QTableWidget_CONNECT_currentCellChanged_CrystalProc_void__int__int__int__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Int32, Int32, Int32, Void).new do |arg0, arg1, arg2, arg3| _proc_.call(arg0, arg1, arg2, arg3) end)))
    end
    
    def initialize(unwrap : Binding::QTableWidget*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : TableWidget)
      end
      protected def event(e : Event) : Bool
        Binding.bg_QTableWidget_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def mime_types() : Binding::QStringList*
        Binding.bg_QTableWidget_mimeTypes_SUPER_(@myself)
      end
      
      protected def mime_data(items : Enumerable(TableWidgetItem)) : MimeData
        MimeData.new(unwrap: Binding.bg_QTableWidget_mimeData_SUPER_const_QList_QTableWidgetItem_X_(@myself, BindgenHelper.wrap_container(Container_QList_QTableWidgetItem_X_, items).to_unsafe))
      end
      
      protected def drop_mime_data(row : Int32, column : Int32, data : MimeData, action : DropAction) : Bool
        Binding.bg_QTableWidget_dropMimeData_SUPER_int_int_const_QMimeData_X_Qt__DropAction(@myself, row, column, data, action)
      end
      
      protected def supported_drop_actions() : DropActions
        Binding.bg_QTableWidget_supportedDropActions_SUPER_(@myself)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QTableWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      def root_index=(index : ModelIndex) : Void
        Binding.bg_QTableView_setRootIndex_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      def selection_model=(selection_model : Binding::QItemSelectionModel*) : Void
        Binding.bg_QTableView_setSelectionModel_SUPER_QItemSelectionModel_X(@myself, selection_model)
      end
      
      def do_items_layout() : Void
        Binding.bg_QTableView_doItemsLayout_SUPER_(@myself)
      end
      
      def visual_rect(index : ModelIndex) : Rect
        Rect.new(unwrap: Binding.bg_QTableView_visualRect_SUPER_const_QModelIndex_R(@myself, index))
      end
      
      def scroll_to(index : ModelIndex, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
        Binding.bg_QTableView_scrollTo_SUPER_const_QModelIndex_R_QAbstractItemView__ScrollHint(@myself, index, hint)
      end
      
      def index_at(p : Point) : ModelIndex
        ModelIndex.new(unwrap: Binding.bg_QTableView_indexAt_SUPER_const_QPoint_R(@myself, p))
      end
      
      protected def scroll_contents_by(dx : Int32, dy : Int32) : Void
        Binding.bg_QTableView_scrollContentsBy_SUPER_int_int(@myself, dx, dy)
      end
      
      protected def view_options() : Binding::QStyleOptionViewItem*
        Binding.bg_QTableView_viewOptions_SUPER_(@myself)
      end
      
      protected def paint_event(e : PaintEvent) : Void
        Binding.bg_QTableView_paintEvent_SUPER_QPaintEvent_X(@myself, e)
      end
      
      protected def timer_event(event : TimerEvent) : Void
        Binding.bg_QTableView_timerEvent_SUPER_QTimerEvent_X(@myself, event)
      end
      
      protected def horizontal_offset() : Int32
        Binding.bg_QTableView_horizontalOffset_SUPER_(@myself)
      end
      
      protected def vertical_offset() : Int32
        Binding.bg_QTableView_verticalOffset_SUPER_(@myself)
      end
      
      protected def move_cursor(cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : ModelIndex
        ModelIndex.new(unwrap: Binding.bg_QTableView_moveCursor_SUPER_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(@myself, cursor_action, modifiers))
      end
      
      protected def set_selection(rect : Rect, command : ItemSelectionModel::SelectionFlags) : Void
        Binding.bg_QTableView_setSelection_SUPER_const_QRect_R_QItemSelectionModel__SelectionFlags(@myself, rect, command)
      end
      
      protected def visual_region_for_selection(selection : Binding::QItemSelection*) : Binding::QRegion*
        Binding.bg_QTableView_visualRegionForSelection_SUPER_const_QItemSelection_R(@myself, selection)
      end
      
      protected def selected_indexes() : Binding::QModelIndexList*
        Binding.bg_QTableView_selectedIndexes_SUPER_(@myself)
      end
      
      protected def update_geometries() : Void
        Binding.bg_QTableView_updateGeometries_SUPER_(@myself)
      end
      
      protected def viewport_size_hint() : Binding::QSize*
        Binding.bg_QTableView_viewportSizeHint_SUPER_(@myself)
      end
      
      protected def size_hint_for_row(row : Int32) : Int32
        Binding.bg_QTableView_sizeHintForRow_SUPER_int(@myself, row)
      end
      
      protected def size_hint_for_column(column : Int32) : Int32
        Binding.bg_QTableView_sizeHintForColumn_SUPER_int(@myself, column)
      end
      
      protected def vertical_scrollbar_action(action : Int32) : Void
        Binding.bg_QTableView_verticalScrollbarAction_SUPER_int(@myself, action)
      end
      
      protected def horizontal_scrollbar_action(action : Int32) : Void
        Binding.bg_QTableView_horizontalScrollbarAction_SUPER_int(@myself, action)
      end
      
      protected def is_index_hidden(index : ModelIndex) : Bool
        Binding.bg_QTableView_isIndexHidden_SUPER_const_QModelIndex_R(@myself, index)
      end
      
      protected def selection_changed(selected : Binding::QItemSelection*, deselected : Binding::QItemSelection*) : Void
        Binding.bg_QTableView_selectionChanged_SUPER_const_QItemSelection_R_const_QItemSelection_R(@myself, selected, deselected)
      end
      
      protected def current_changed(current : ModelIndex, previous : ModelIndex) : Void
        Binding.bg_QTableView_currentChanged_SUPER_const_QModelIndex_R_const_QModelIndex_R(@myself, current, previous)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ToolBar < Widget
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QToolBar_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QToolBar_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolBar_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolBar_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolBar_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(title : String, parent : Widget? = nil)
      result = Binding.bg_QToolBar__CONSTRUCT_const_QString_R_QWidget_X(Qt::Converter::QString.wrap(title), parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ToolBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall action_event change_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QToolBar.new(
      bg_QToolBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QToolBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QToolBar_JUMPTABLE_BgJumptable_QToolBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QToolBar__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ToolBar)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall action_event change_event paint_event event dev_type visible= size_hint minimum_size_hint height_for_width has_height_for_width? paint_engine mouse_press_event mouse_release_event mouse_double_click_event mouse_move_event wheel_event key_press_event key_release_event focus_in_event focus_out_event enter_event leave_event move_event resize_event close_event context_menu_event tablet_event drag_enter_event drag_move_event drag_leave_event drop_event show_event hide_event native_event metric init_painter shared_painter input_method_event input_method_query focus_next_prev_child ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QToolBar.new(
      bg_QToolBar_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QToolBar_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QToolBar_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|event| self.action_event(ActionEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|event| self.change_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|event| self.paint_event(PaintEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QToolBar_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|event| self.event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_devType_: BindgenHelper.wrap_proc({% if forwarded.includes?("dev_type") %} Proc(Int32).new{ self.dev_type() } {% else %} nil {% end %}),
      bg_QWidget_setVisible_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("visible=") %} Proc(Bool, Void).new{|visible| self.visible=(visible) } {% else %} nil {% end %}),
      bg_QWidget_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QWidget_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QWidget_heightForWidth_int: BindgenHelper.wrap_proc({% if forwarded.includes?("height_for_width") %} Proc(Int32, Int32).new{|unnamed_arg_0| self.height_for_width(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_hasHeightForWidth_: BindgenHelper.wrap_proc({% if forwarded.includes?("has_height_for_width?") %} Proc(Bool).new{ self.has_height_for_width?() } {% else %} nil {% end %}),
      bg_QWidget_paintEngine_: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_engine") %} Proc(Binding::QPaintEngine*).new{ self.paint_engine() } {% else %} nil {% end %}),
      bg_QWidget_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_press_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_release_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_double_click_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_double_click_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|event| self.mouse_move_event(MouseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_wheelEvent_QWheelEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("wheel_event") %} Proc(Binding::QWheelEvent*, Void).new{|event| self.wheel_event(event) } {% else %} nil {% end %}),
      bg_QWidget_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_press_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|event| self.key_release_event(KeyEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_in_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|event| self.focus_out_event(FocusEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|event| self.enter_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|event| self.leave_event(Event.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_moveEvent_QMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("move_event") %} Proc(Binding::QMoveEvent*, Void).new{|event| self.move_event(MoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_resizeEvent_QResizeEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("resize_event") %} Proc(Binding::QResizeEvent*, Void).new{|event| self.resize_event(ResizeEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_closeEvent_QCloseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("close_event") %} Proc(Binding::QCloseEvent*, Void).new{|event| self.close_event(CloseEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_contextMenuEvent_QContextMenuEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("context_menu_event") %} Proc(Binding::QContextMenuEvent*, Void).new{|event| self.context_menu_event(event) } {% else %} nil {% end %}),
      bg_QWidget_tabletEvent_QTabletEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("tablet_event") %} Proc(Binding::QTabletEvent*, Void).new{|event| self.tablet_event(event) } {% else %} nil {% end %}),
      bg_QWidget_dragEnterEvent_QDragEnterEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_enter_event") %} Proc(Binding::QDragEnterEvent*, Void).new{|event| self.drag_enter_event(DragEnterEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragMoveEvent_QDragMoveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_move_event") %} Proc(Binding::QDragMoveEvent*, Void).new{|event| self.drag_move_event(DragMoveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drag_leave_event") %} Proc(Binding::QDragLeaveEvent*, Void).new{|event| self.drag_leave_event(DragLeaveEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_dropEvent_QDropEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("drop_event") %} Proc(Binding::QDropEvent*, Void).new{|event| self.drop_event(DropEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_showEvent_QShowEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("show_event") %} Proc(Binding::QShowEvent*, Void).new{|event| self.show_event(ShowEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_hideEvent_QHideEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("hide_event") %} Proc(Binding::QHideEvent*, Void).new{|event| self.hide_event(HideEvent.new(unwrap: event)) } {% else %} nil {% end %}),
      bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X: BindgenHelper.wrap_proc({% if forwarded.includes?("native_event") %} Proc(Binding::QByteArray*, Void*, LibC::Long*, Bool).new{|event_type, message, result| self.native_event(event_type, message, result) } {% else %} nil {% end %}),
      bg_QWidget_metric_QPaintDevice__PaintDeviceMetric: BindgenHelper.wrap_proc({% if forwarded.includes?("metric") %} Proc(PaintDevice::PaintDeviceMetric, Int32).new{|unnamed_arg_0| self.metric(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QWidget_initPainter_QPainter_X: BindgenHelper.wrap_proc({% if forwarded.includes?("init_painter") %} Proc(Binding::QPainter*, Void).new{|painter| self.init_painter(Painter.new(unwrap: painter)) } {% else %} nil {% end %}),
      bg_QWidget_sharedPainter_: BindgenHelper.wrap_proc({% if forwarded.includes?("shared_painter") %} Proc(Binding::QPainter*).new{ self.shared_painter().to_unsafe } {% else %} nil {% end %}),
      bg_QWidget_inputMethodEvent_QInputMethodEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_event") %} Proc(Binding::QInputMethodEvent*, Void).new{|unnamed_arg_0| self.input_method_event(InputMethodEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QWidget_inputMethodQuery_Qt__InputMethodQuery: BindgenHelper.wrap_proc({% if forwarded.includes?("input_method_query") %} Proc(InputMethodQuery, Binding::CrystalVariant).new{|unnamed_arg_0| (self.input_method_query(unnamed_arg_0).to_unsafe) } {% else %} nil {% end %}),
      bg_QWidget_focusNextPrevChild_bool: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_next_prev_child") %} Proc(Bool, Bool).new{|next_| self.focus_next_prev_child(next_) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QToolBar_JUMPTABLE_BgJumptable_QToolBar_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def movable=(movable : Bool) : Void
      Binding.bg_QToolBar_setMovable_bool(self, movable)
    end
    
    def movable?() : Bool
      Binding.bg_QToolBar_isMovable_(self)
    end
    
    def allowed_areas=(areas : ToolBarAreas) : Void
      Binding.bg_QToolBar_setAllowedAreas_Qt__ToolBarAreas(self, areas)
    end
    
    def allowed_areas() : ToolBarAreas
      Binding.bg_QToolBar_allowedAreas_(self)
    end
    
    def is_area_allowed(area : ToolBarArea) : Bool
      Binding.bg_QToolBar_isAreaAllowed_Qt__ToolBarArea(self, area)
    end
    
    def orientation=(orientation : Orientation) : Void
      Binding.bg_QToolBar_setOrientation_Qt__Orientation(self, orientation)
    end
    
    def orientation() : Orientation
      Binding.bg_QToolBar_orientation_(self)
    end
    
    def clear() : Void
      Binding.bg_QToolBar_clear_(self)
    end
    
    def add_action(text : String) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QString_R(self, Qt::Converter::QString.wrap(text)))
    end
    
    def add_action(icon : Icon, text : String) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QIcon_R_const_QString_R(self, icon, Qt::Converter::QString.wrap(text)))
    end
    
    def add_action(text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QString_R_const_QObject_X_const_char_X(self, Qt::Converter::QString.wrap(text), receiver, member))
    end
    
    def add_action(icon : Icon, text : String, receiver : Object, member : UInt8*) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addAction_const_QIcon_R_const_QString_R_const_QObject_X_const_char_X(self, icon, Qt::Converter::QString.wrap(text), receiver, member))
    end
    
    def add_separator() : Action
      Action.new(unwrap: Binding.bg_QToolBar_addSeparator_(self))
    end
    
    def insert_separator(before : Action) : Action
      Action.new(unwrap: Binding.bg_QToolBar_insertSeparator_QAction_X(self, before))
    end
    
    def add_widget(widget : Widget) : Action
      Action.new(unwrap: Binding.bg_QToolBar_addWidget_QWidget_X(self, widget))
    end
    
    def insert_widget(before : Action, widget : Widget) : Action
      Action.new(unwrap: Binding.bg_QToolBar_insertWidget_QAction_X_QWidget_X(self, before, widget))
    end
    
    def action_geometry(action : Action) : Rect
      Rect.new(unwrap: Binding.bg_QToolBar_actionGeometry_QAction_X(self, action))
    end
    
    def action_at(p : Point) : Action
      Action.new(unwrap: Binding.bg_QToolBar_actionAt_const_QPoint_R(self, p))
    end
    
    def action_at(x : Int32, y : Int32) : Action
      Action.new(unwrap: Binding.bg_QToolBar_actionAt_int_int(self, x, y))
    end
    
    def toggle_view_action() : Action
      Action.new(unwrap: Binding.bg_QToolBar_toggleViewAction_(self))
    end
    
    def icon_size() : Binding::QSize*
      Binding.bg_QToolBar_iconSize_(self)
    end
    
    def tool_button_style() : ToolButtonStyle
      Binding.bg_QToolBar_toolButtonStyle_(self)
    end
    
    def widget_for_action(action : Action) : Widget
      Widget.new(unwrap: Binding.bg_QToolBar_widgetForAction_QAction_X(self, action))
    end
    
    def floatable?() : Bool
      Binding.bg_QToolBar_isFloatable_(self)
    end
    
    def floatable=(floatable : Bool) : Void
      Binding.bg_QToolBar_setFloatable_bool(self, floatable)
    end
    
    def floating?() : Bool
      Binding.bg_QToolBar_isFloating_(self)
    end
    
    def icon_size=(icon_size : Binding::QSize*) : Void
      Binding.bg_QToolBar_setIconSize_const_QSize_R(self, icon_size)
    end
    
    def tool_button_style=(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QToolBar_setToolButtonStyle_Qt__ToolButtonStyle(self, tool_button_style)
    end
    
    def action_triggered(action : Action) : Void
      Binding.bg_QToolBar_actionTriggered_QAction_X(self, action)
    end
    
    def movable_changed(movable : Bool) : Void
      Binding.bg_QToolBar_movableChanged_bool(self, movable)
    end
    
    def allowed_areas_changed(allowed_areas : ToolBarAreas) : Void
      Binding.bg_QToolBar_allowedAreasChanged_Qt__ToolBarAreas(self, allowed_areas)
    end
    
    def orientation_changed(orientation : Orientation) : Void
      Binding.bg_QToolBar_orientationChanged_Qt__Orientation(self, orientation)
    end
    
    def icon_size_changed(icon_size : Binding::QSize*) : Void
      Binding.bg_QToolBar_iconSizeChanged_const_QSize_R(self, icon_size)
    end
    
    def tool_button_style_changed(tool_button_style : ToolButtonStyle) : Void
      Binding.bg_QToolBar_toolButtonStyleChanged_Qt__ToolButtonStyle(self, tool_button_style)
    end
    
    def top_level_changed(top_level : Bool) : Void
      Binding.bg_QToolBar_topLevelChanged_bool(self, top_level)
    end
    
    def visibility_changed(visible : Bool) : Void
      Binding.bg_QToolBar_visibilityChanged_bool(self, visible)
    end
    
    protected def action_event(event : ActionEvent) : Void
      Binding.bg_QToolBar_actionEvent_QActionEvent_X(self, event)
    end
    
    protected def change_event(event : Event) : Void
      Binding.bg_QToolBar_changeEvent_QEvent_X(self, event)
    end
    
    protected def paint_event(event : PaintEvent) : Void
      Binding.bg_QToolBar_paintEvent_QPaintEvent_X(self, event)
    end
    
    protected def event(event : Event) : Bool
      Binding.bg_QToolBar_event_QEvent_X(self, event)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionToolBar*) : Void
      Binding.bg_QToolBar_initStyleOption_QStyleOptionToolBar_X(self, option)
    end
    
    def dev_type() : Int32
      Binding.bg_QWidget_devType_(self)
    end
    
    def visible=(visible : Bool) : Void
      Binding.bg_QWidget_setVisible_bool(self, visible)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QWidget_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QWidget_minimumSizeHint_(self)
    end
    
    def height_for_width(unnamed_arg_0 : Int32) : Int32
      Binding.bg_QWidget_heightForWidth_int(self, unnamed_arg_0)
    end
    
    def has_height_for_width?() : Bool
      Binding.bg_QWidget_hasHeightForWidth_(self)
    end
    
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QWidget_paintEngine_(self)
    end
    
    protected def mouse_press_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mousePressEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_release_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseReleaseEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_double_click_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseDoubleClickEvent_QMouseEvent_X(self, event)
    end
    
    protected def mouse_move_event(event : MouseEvent) : Void
      Binding.bg_QWidget_mouseMoveEvent_QMouseEvent_X(self, event)
    end
    
    protected def wheel_event(event : Binding::QWheelEvent*) : Void
      Binding.bg_QWidget_wheelEvent_QWheelEvent_X(self, event)
    end
    
    protected def key_press_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyPressEvent_QKeyEvent_X(self, event)
    end
    
    protected def key_release_event(event : KeyEvent) : Void
      Binding.bg_QWidget_keyReleaseEvent_QKeyEvent_X(self, event)
    end
    
    protected def focus_in_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusInEvent_QFocusEvent_X(self, event)
    end
    
    protected def focus_out_event(event : FocusEvent) : Void
      Binding.bg_QWidget_focusOutEvent_QFocusEvent_X(self, event)
    end
    
    protected def enter_event(event : Event) : Void
      Binding.bg_QWidget_enterEvent_QEvent_X(self, event)
    end
    
    protected def leave_event(event : Event) : Void
      Binding.bg_QWidget_leaveEvent_QEvent_X(self, event)
    end
    
    protected def move_event(event : MoveEvent) : Void
      Binding.bg_QWidget_moveEvent_QMoveEvent_X(self, event)
    end
    
    protected def resize_event(event : ResizeEvent) : Void
      Binding.bg_QWidget_resizeEvent_QResizeEvent_X(self, event)
    end
    
    protected def close_event(event : CloseEvent) : Void
      Binding.bg_QWidget_closeEvent_QCloseEvent_X(self, event)
    end
    
    protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
      Binding.bg_QWidget_contextMenuEvent_QContextMenuEvent_X(self, event)
    end
    
    protected def tablet_event(event : Binding::QTabletEvent*) : Void
      Binding.bg_QWidget_tabletEvent_QTabletEvent_X(self, event)
    end
    
    protected def drag_enter_event(event : DragEnterEvent) : Void
      Binding.bg_QWidget_dragEnterEvent_QDragEnterEvent_X(self, event)
    end
    
    protected def drag_move_event(event : DragMoveEvent) : Void
      Binding.bg_QWidget_dragMoveEvent_QDragMoveEvent_X(self, event)
    end
    
    protected def drag_leave_event(event : DragLeaveEvent) : Void
      Binding.bg_QWidget_dragLeaveEvent_QDragLeaveEvent_X(self, event)
    end
    
    protected def drop_event(event : DropEvent) : Void
      Binding.bg_QWidget_dropEvent_QDropEvent_X(self, event)
    end
    
    protected def show_event(event : ShowEvent) : Void
      Binding.bg_QWidget_showEvent_QShowEvent_X(self, event)
    end
    
    protected def hide_event(event : HideEvent) : Void
      Binding.bg_QWidget_hideEvent_QHideEvent_X(self, event)
    end
    
    protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
      Binding.bg_QWidget_nativeEvent_const_QByteArray_R_void_X_long_X(self, event_type, message, result)
    end
    
    protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
      Binding.bg_QWidget_metric_QPaintDevice__PaintDeviceMetric(self, unnamed_arg_0)
    end
    
    protected def init_painter(painter : Painter) : Void
      Binding.bg_QWidget_initPainter_QPainter_X(self, painter)
    end
    
    protected def shared_painter() : Painter
      Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_(self))
    end
    
    protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
      Binding.bg_QWidget_inputMethodEvent_QInputMethodEvent_X(self, unnamed_arg_0)
    end
    
    def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
      Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_Qt__InputMethodQuery(self, unnamed_arg_0))
    end
    
    protected def focus_next_prev_child(next_ : Bool) : Bool
      Binding.bg_QWidget_focusNextPrevChild_bool(self, next_)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QToolBar_staticMetaObject_STATIC_GETTER_()
    end
    
    def on_action_triggered(&_proc_ : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_actionTriggered_CrystalProc_void__QAction_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAction*, Void).new do |arg0| _proc_.call(Action.new(unwrap: arg0)) end)))
    end
    
    def on_movable_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_movableChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_allowed_areas_changed(&_proc_ : Proc(ToolBarAreas, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_allowedAreasChanged_CrystalProc_void__Qt__ToolBarAreas_(self, BindgenHelper.wrap_proc(Proc(ToolBarAreas, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_orientation_changed(&_proc_ : Proc(Orientation, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_orientationChanged_CrystalProc_void__Qt__Orientation_(self, BindgenHelper.wrap_proc(Proc(Orientation, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_icon_size_changed(&_proc_ : Proc(Binding::QSize, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSize*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_tool_button_style_changed(&_proc_ : Proc(ToolButtonStyle, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_toolButtonStyleChanged_CrystalProc_void__Qt__ToolButtonStyle_(self, BindgenHelper.wrap_proc(Proc(ToolButtonStyle, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_top_level_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_topLevelChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_visibility_changed(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolBar_CONNECT_visibilityChanged_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QToolBar*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ToolBar)
      end
      protected def action_event(event : ActionEvent) : Void
        Binding.bg_QToolBar_actionEvent_SUPER_QActionEvent_X(@myself, event)
      end
      
      protected def change_event(event : Event) : Void
        Binding.bg_QToolBar_changeEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def paint_event(event : PaintEvent) : Void
        Binding.bg_QToolBar_paintEvent_SUPER_QPaintEvent_X(@myself, event)
      end
      
      protected def event(event : Event) : Bool
        Binding.bg_QToolBar_event_SUPER_QEvent_X(@myself, event)
      end
      
      def dev_type() : Int32
        Binding.bg_QWidget_devType_SUPER_(@myself)
      end
      
      def visible=(visible : Bool) : Void
        Binding.bg_QWidget_setVisible_SUPER_bool(@myself, visible)
      end
      
      def size_hint() : Binding::QSize*
        Binding.bg_QWidget_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QWidget_minimumSizeHint_SUPER_(@myself)
      end
      
      def height_for_width(unnamed_arg_0 : Int32) : Int32
        Binding.bg_QWidget_heightForWidth_SUPER_int(@myself, unnamed_arg_0)
      end
      
      def has_height_for_width?() : Bool
        Binding.bg_QWidget_hasHeightForWidth_SUPER_(@myself)
      end
      
      def paint_engine() : Binding::QPaintEngine*
        Binding.bg_QWidget_paintEngine_SUPER_(@myself)
      end
      
      protected def mouse_press_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mousePressEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_release_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_double_click_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseDoubleClickEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def mouse_move_event(event : MouseEvent) : Void
        Binding.bg_QWidget_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, event)
      end
      
      protected def wheel_event(event : Binding::QWheelEvent*) : Void
        Binding.bg_QWidget_wheelEvent_SUPER_QWheelEvent_X(@myself, event)
      end
      
      protected def key_press_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyPressEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def key_release_event(event : KeyEvent) : Void
        Binding.bg_QWidget_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, event)
      end
      
      protected def focus_in_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusInEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def focus_out_event(event : FocusEvent) : Void
        Binding.bg_QWidget_focusOutEvent_SUPER_QFocusEvent_X(@myself, event)
      end
      
      protected def enter_event(event : Event) : Void
        Binding.bg_QWidget_enterEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def leave_event(event : Event) : Void
        Binding.bg_QWidget_leaveEvent_SUPER_QEvent_X(@myself, event)
      end
      
      protected def move_event(event : MoveEvent) : Void
        Binding.bg_QWidget_moveEvent_SUPER_QMoveEvent_X(@myself, event)
      end
      
      protected def resize_event(event : ResizeEvent) : Void
        Binding.bg_QWidget_resizeEvent_SUPER_QResizeEvent_X(@myself, event)
      end
      
      protected def close_event(event : CloseEvent) : Void
        Binding.bg_QWidget_closeEvent_SUPER_QCloseEvent_X(@myself, event)
      end
      
      protected def context_menu_event(event : Binding::QContextMenuEvent*) : Void
        Binding.bg_QWidget_contextMenuEvent_SUPER_QContextMenuEvent_X(@myself, event)
      end
      
      protected def tablet_event(event : Binding::QTabletEvent*) : Void
        Binding.bg_QWidget_tabletEvent_SUPER_QTabletEvent_X(@myself, event)
      end
      
      protected def drag_enter_event(event : DragEnterEvent) : Void
        Binding.bg_QWidget_dragEnterEvent_SUPER_QDragEnterEvent_X(@myself, event)
      end
      
      protected def drag_move_event(event : DragMoveEvent) : Void
        Binding.bg_QWidget_dragMoveEvent_SUPER_QDragMoveEvent_X(@myself, event)
      end
      
      protected def drag_leave_event(event : DragLeaveEvent) : Void
        Binding.bg_QWidget_dragLeaveEvent_SUPER_QDragLeaveEvent_X(@myself, event)
      end
      
      protected def drop_event(event : DropEvent) : Void
        Binding.bg_QWidget_dropEvent_SUPER_QDropEvent_X(@myself, event)
      end
      
      protected def show_event(event : ShowEvent) : Void
        Binding.bg_QWidget_showEvent_SUPER_QShowEvent_X(@myself, event)
      end
      
      protected def hide_event(event : HideEvent) : Void
        Binding.bg_QWidget_hideEvent_SUPER_QHideEvent_X(@myself, event)
      end
      
      protected def native_event(event_type : Binding::QByteArray*, message : Void*, result : LibC::Long*) : Bool
        Binding.bg_QWidget_nativeEvent_SUPER_const_QByteArray_R_void_X_long_X(@myself, event_type, message, result)
      end
      
      protected def metric(unnamed_arg_0 : PaintDevice::PaintDeviceMetric) : Int32
        Binding.bg_QWidget_metric_SUPER_QPaintDevice__PaintDeviceMetric(@myself, unnamed_arg_0)
      end
      
      protected def init_painter(painter : Painter) : Void
        Binding.bg_QWidget_initPainter_SUPER_QPainter_X(@myself, painter)
      end
      
      protected def shared_painter() : Painter
        Painter.new(unwrap: Binding.bg_QWidget_sharedPainter_SUPER_(@myself))
      end
      
      protected def input_method_event(unnamed_arg_0 : InputMethodEvent) : Void
        Binding.bg_QWidget_inputMethodEvent_SUPER_QInputMethodEvent_X(@myself, unnamed_arg_0)
      end
      
      def input_method_query(unnamed_arg_0 : InputMethodQuery) : Variant
        Qt::Variant.new(Binding.bg_QWidget_inputMethodQuery_SUPER_Qt__InputMethodQuery(@myself, unnamed_arg_0))
      end
      
      protected def focus_next_prev_child(next_ : Bool) : Bool
        Binding.bg_QWidget_focusNextPrevChild_SUPER_bool(@myself, next_)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class ToolButton < AbstractButton
    def meta_object() : Binding::QMetaObject*
      Binding.bg_QToolButton_metaObject_(self)
    end
    
    def qt_metacast(unnamed_arg_0 : UInt8*) : Void*
      Binding.bg_QToolButton_qt_metacast_const_char_X(self, unnamed_arg_0)
    end
    
    def qt_metacall(unnamed_arg_0 : MetaObjectCall, unnamed_arg_1 : Int32, unnamed_arg_2 : Void***) : Int32
      Binding.bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX(self, unnamed_arg_0, unnamed_arg_1, unnamed_arg_2)
    end
    
    def self.tr(s : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolButton_tr_STATIC_const_char_X(s))
    end
    
    def self.tr(s : UInt8*, c : UInt8*) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolButton_tr_STATIC_const_char_X_const_char_X(s, c))
    end
    
    def self.tr(s : UInt8*, c : UInt8*, n : Int32 = -1) : String
      Qt::Converter::QString.unwrap(Binding.bg_QToolButton_tr_STATIC_const_char_X_const_char_X_int(s, c, n))
    end
    
    def initialize(parent : Widget? = nil)
      result = Binding.bg_QToolButton__CONSTRUCT_QWidget_X(parent)
    @unwrap = result
    {% begin %}
    {%
      methods = [] of Def
      ([@type] + @type.ancestors).select(&.<(ToolButton)).map{|x| methods = methods + x.methods}
      forwarded = methods.map(&.name.stringify).select{|m| %w[ meta_object qt_metacast qt_metacall size_hint minimum_size_hint event mouse_press_event mouse_release_event paint_event action_event enter_event leave_event timer_event change_event hit_button next_check_state check_state_set key_press_event key_release_event mouse_move_event focus_in_event focus_out_event ].includes?(m) }.uniq
    %}
    jump_table = Binding::BgJumptable_QToolButton.new(
      bg_QToolButton_metaObject_: BindgenHelper.wrap_proc({% if forwarded.includes?("meta_object") %} Proc(Binding::QMetaObject*).new{ self.meta_object() } {% else %} nil {% end %}),
      bg_QToolButton_qt_metacast_const_char_X: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacast") %} Proc(UInt8*, Void*).new{|unnamed_arg_0| self.qt_metacast(unnamed_arg_0) } {% else %} nil {% end %}),
      bg_QToolButton_qt_metacall_QMetaObject__Call_int_void_XX: BindgenHelper.wrap_proc({% if forwarded.includes?("qt_metacall") %} Proc(MetaObjectCall, Int32, Void**, Int32).new{|unnamed_arg_0, unnamed_arg_1, unnamed_arg_2| self.qt_metacall(unnamed_arg_0, unnamed_arg_1, unnamed_arg_2) } {% else %} nil {% end %}),
      bg_QToolButton_sizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("size_hint") %} Proc(Binding::QSize*).new{ self.size_hint() } {% else %} nil {% end %}),
      bg_QToolButton_minimumSizeHint_: BindgenHelper.wrap_proc({% if forwarded.includes?("minimum_size_hint") %} Proc(Binding::QSize*).new{ self.minimum_size_hint() } {% else %} nil {% end %}),
      bg_QToolButton_event_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("event") %} Proc(Binding::QEvent*, Bool).new{|e| self.event(Event.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QToolButton_mousePressEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_press_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_press_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_mouseReleaseEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_release_event") %} Proc(Binding::QMouseEvent*, Void).new{|unnamed_arg_0| self.mouse_release_event(MouseEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_paintEvent_QPaintEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("paint_event") %} Proc(Binding::QPaintEvent*, Void).new{|unnamed_arg_0| self.paint_event(PaintEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_actionEvent_QActionEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("action_event") %} Proc(Binding::QActionEvent*, Void).new{|unnamed_arg_0| self.action_event(ActionEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_enterEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("enter_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.enter_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_leaveEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("leave_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.leave_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_timerEvent_QTimerEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("timer_event") %} Proc(Binding::QTimerEvent*, Void).new{|unnamed_arg_0| self.timer_event(TimerEvent.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_changeEvent_QEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("change_event") %} Proc(Binding::QEvent*, Void).new{|unnamed_arg_0| self.change_event(Event.new(unwrap: unnamed_arg_0)) } {% else %} nil {% end %}),
      bg_QToolButton_hitButton_const_QPoint_R: BindgenHelper.wrap_proc({% if forwarded.includes?("hit_button") %} Proc(Binding::QPoint, Bool).new{|pos| self.hit_button(Point.new(unwrap: pos)) } {% else %} nil {% end %}),
      bg_QToolButton_nextCheckState_: BindgenHelper.wrap_proc({% if forwarded.includes?("next_check_state") %} Proc(Void).new{ self.next_check_state() } {% else %} nil {% end %}),
      bg_QAbstractButton_checkStateSet_: BindgenHelper.wrap_proc({% if forwarded.includes?("check_state_set") %} Proc(Void).new{ self.check_state_set() } {% else %} nil {% end %}),
      bg_QAbstractButton_keyPressEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_press_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_press_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("key_release_event") %} Proc(Binding::QKeyEvent*, Void).new{|e| self.key_release_event(KeyEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("mouse_move_event") %} Proc(Binding::QMouseEvent*, Void).new{|e| self.mouse_move_event(MouseEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusInEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_in_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_in_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
      bg_QAbstractButton_focusOutEvent_QFocusEvent_X: BindgenHelper.wrap_proc({% if forwarded.includes?("focus_out_event") %} Proc(Binding::QFocusEvent*, Void).new{|e| self.focus_out_event(FocusEvent.new(unwrap: e)) } {% else %} nil {% end %}),
    )
    Binding.bg_BgInherit_QToolButton_JUMPTABLE_BgJumptable_QToolButton_R(result, pointerof(jump_table))
    {% end %}
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QToolButton_sizeHint_(self)
    end
    
    def minimum_size_hint() : Binding::QSize*
      Binding.bg_QToolButton_minimumSizeHint_(self)
    end
    
    def tool_button_style() : ToolButtonStyle
      Binding.bg_QToolButton_toolButtonStyle_(self)
    end
    
    def arrow_type() : ArrowType
      Binding.bg_QToolButton_arrowType_(self)
    end
    
    def arrow_type=(type : ArrowType) : Void
      Binding.bg_QToolButton_setArrowType_Qt__ArrowType(self, type)
    end
    
    def menu=(menu : Menu) : Void
      Binding.bg_QToolButton_setMenu_QMenu_X(self, menu)
    end
    
    def menu() : Menu
      Menu.new(unwrap: Binding.bg_QToolButton_menu_(self))
    end
    
    def popup_mode=(mode : ToolButton::ToolButtonPopupMode) : Void
      Binding.bg_QToolButton_setPopupMode_QToolButton__ToolButtonPopupMode(self, mode)
    end
    
    def popup_mode() : ToolButton::ToolButtonPopupMode
      Binding.bg_QToolButton_popupMode_(self)
    end
    
    def default_action() : Action
      Action.new(unwrap: Binding.bg_QToolButton_defaultAction_(self))
    end
    
    def auto_raise=(enable : Bool) : Void
      Binding.bg_QToolButton_setAutoRaise_bool(self, enable)
    end
    
    def auto_raise() : Bool
      Binding.bg_QToolButton_autoRaise_(self)
    end
    
    def show_menu() : Void
      Binding.bg_QToolButton_showMenu_(self)
    end
    
    def tool_button_style=(style : ToolButtonStyle) : Void
      Binding.bg_QToolButton_setToolButtonStyle_Qt__ToolButtonStyle(self, style)
    end
    
    def default_action=(unnamed_arg_0 : Action) : Void
      Binding.bg_QToolButton_setDefaultAction_QAction_X(self, unnamed_arg_0)
    end
    
    def triggered(unnamed_arg_0 : Action) : Void
      Binding.bg_QToolButton_triggered_QAction_X(self, unnamed_arg_0)
    end
    
    protected def event(e : Event) : Bool
      Binding.bg_QToolButton_event_QEvent_X(self, e)
    end
    
    protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QToolButton_mousePressEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
      Binding.bg_QToolButton_mouseReleaseEvent_QMouseEvent_X(self, unnamed_arg_0)
    end
    
    protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
      Binding.bg_QToolButton_paintEvent_QPaintEvent_X(self, unnamed_arg_0)
    end
    
    protected def action_event(unnamed_arg_0 : ActionEvent) : Void
      Binding.bg_QToolButton_actionEvent_QActionEvent_X(self, unnamed_arg_0)
    end
    
    protected def enter_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QToolButton_enterEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def leave_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QToolButton_leaveEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
      Binding.bg_QToolButton_timerEvent_QTimerEvent_X(self, unnamed_arg_0)
    end
    
    protected def change_event(unnamed_arg_0 : Event) : Void
      Binding.bg_QToolButton_changeEvent_QEvent_X(self, unnamed_arg_0)
    end
    
    protected def hit_button(pos : Point) : Bool
      Binding.bg_QToolButton_hitButton_const_QPoint_R(self, pos)
    end
    
    protected def next_check_state() : Void
      Binding.bg_QToolButton_nextCheckState_(self)
    end
    
    protected def init_style_option(option : Binding::QStyleOptionToolButton*) : Void
      Binding.bg_QToolButton_initStyleOption_QStyleOptionToolButton_X(self, option)
    end
    
    protected def check_state_set() : Void
      Binding.bg_QAbstractButton_checkStateSet_(self)
    end
    
    protected def key_press_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyPressEvent_QKeyEvent_X(self, e)
    end
    
    protected def key_release_event(e : KeyEvent) : Void
      Binding.bg_QAbstractButton_keyReleaseEvent_QKeyEvent_X(self, e)
    end
    
    protected def mouse_move_event(e : MouseEvent) : Void
      Binding.bg_QAbstractButton_mouseMoveEvent_QMouseEvent_X(self, e)
    end
    
    protected def focus_in_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusInEvent_QFocusEvent_X(self, e)
    end
    
    protected def focus_out_event(e : FocusEvent) : Void
      Binding.bg_QAbstractButton_focusOutEvent_QFocusEvent_X(self, e)
    end
    
    def self.static_meta_object() : Binding::QMetaObject*
      Binding.bg_QToolButton_staticMetaObject_STATIC_GETTER_()
    end
    
    enum ToolButtonPopupMode : UInt32
      DelayedPopup = 0
      MenuButtonPopup = 1
      InstantPopup = 2
    end
    def on_triggered(&_proc_ : Proc(Action, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QToolButton_CONNECT_triggered_CrystalProc_void__QAction_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QAction*, Void).new do |arg0| _proc_.call(Action.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QToolButton*)
      result = unwrap
    @unwrap = result
    end
    
    private class Superclass
      def initialize(@myself : ToolButton)
      end
      def size_hint() : Binding::QSize*
        Binding.bg_QToolButton_sizeHint_SUPER_(@myself)
      end
      
      def minimum_size_hint() : Binding::QSize*
        Binding.bg_QToolButton_minimumSizeHint_SUPER_(@myself)
      end
      
      protected def event(e : Event) : Bool
        Binding.bg_QToolButton_event_SUPER_QEvent_X(@myself, e)
      end
      
      protected def mouse_press_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QToolButton_mousePressEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def mouse_release_event(unnamed_arg_0 : MouseEvent) : Void
        Binding.bg_QToolButton_mouseReleaseEvent_SUPER_QMouseEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def paint_event(unnamed_arg_0 : PaintEvent) : Void
        Binding.bg_QToolButton_paintEvent_SUPER_QPaintEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def action_event(unnamed_arg_0 : ActionEvent) : Void
        Binding.bg_QToolButton_actionEvent_SUPER_QActionEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def enter_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QToolButton_enterEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def leave_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QToolButton_leaveEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def timer_event(unnamed_arg_0 : TimerEvent) : Void
        Binding.bg_QToolButton_timerEvent_SUPER_QTimerEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def change_event(unnamed_arg_0 : Event) : Void
        Binding.bg_QToolButton_changeEvent_SUPER_QEvent_X(@myself, unnamed_arg_0)
      end
      
      protected def hit_button(pos : Point) : Bool
        Binding.bg_QToolButton_hitButton_SUPER_const_QPoint_R(@myself, pos)
      end
      
      protected def next_check_state() : Void
        Binding.bg_QToolButton_nextCheckState_SUPER_(@myself)
      end
      
      protected def check_state_set() : Void
        Binding.bg_QAbstractButton_checkStateSet_SUPER_(@myself)
      end
      
      protected def key_press_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyPressEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def key_release_event(e : KeyEvent) : Void
        Binding.bg_QAbstractButton_keyReleaseEvent_SUPER_QKeyEvent_X(@myself, e)
      end
      
      protected def mouse_move_event(e : MouseEvent) : Void
        Binding.bg_QAbstractButton_mouseMoveEvent_SUPER_QMouseEvent_X(@myself, e)
      end
      
      protected def focus_in_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusInEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
      protected def focus_out_event(e : FocusEvent) : Void
        Binding.bg_QAbstractButton_focusOutEvent_SUPER_QFocusEvent_X(@myself, e)
      end
      
    end
    private def superclass
      Superclass.new(self)
    end
  end
  class AbstractEventDispatcherImpl < AbstractEventDispatcher
    def process_events(flags : EventLoop::ProcessEventsFlags) : Bool
      Binding.bg_QAbstractEventDispatcher_processEvents_QEventLoop__ProcessEventsFlags(self, flags)
    end
    
    def has_pending_events?() : Bool
      Binding.bg_QAbstractEventDispatcher_hasPendingEvents_(self)
    end
    
    def register_socket_notifier(notifier : SocketNotifier) : Void
      Binding.bg_QAbstractEventDispatcher_registerSocketNotifier_QSocketNotifier_X(self, notifier)
    end
    
    def unregister_socket_notifier(notifier : SocketNotifier) : Void
      Binding.bg_QAbstractEventDispatcher_unregisterSocketNotifier_QSocketNotifier_X(self, notifier)
    end
    
    def register_timer(timer_id : Int32, interval : Int32, timer_type : TimerType, object : Object) : Void
      Binding.bg_QAbstractEventDispatcher_registerTimer_int_int_Qt__TimerType_QObject_X(self, timer_id, interval, timer_type, object)
    end
    
    def unregister_timer(timer_id : Int32) : Bool
      Binding.bg_QAbstractEventDispatcher_unregisterTimer_int(self, timer_id)
    end
    
    def unregister_timers(object : Object) : Bool
      Binding.bg_QAbstractEventDispatcher_unregisterTimers_QObject_X(self, object)
    end
    
    def registered_timers(object : Object) : Enumerable(Binding::EventDispatcherTimerInfo)
      Container_QList_QAbstractEventDispatcher__TimerInfo_.new(unwrap: Binding.bg_QAbstractEventDispatcher_registeredTimers_QObject_X(self, object))
    end
    
    def remaining_time(timer_id : Int32) : Int32
      Binding.bg_QAbstractEventDispatcher_remainingTime_int(self, timer_id)
    end
    
    def wake_up() : Void
      Binding.bg_QAbstractEventDispatcher_wakeUp_(self)
    end
    
    def interrupt() : Void
      Binding.bg_QAbstractEventDispatcher_interrupt_(self)
    end
    
    def flush() : Void
      Binding.bg_QAbstractEventDispatcher_flush_(self)
    end
    
    def on_about_to_block(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_CONNECT_aboutToBlock_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_awake(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractEventDispatcher_CONNECT_awake_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QAbstractEventDispatcher*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class AbstractItemModelImpl < AbstractItemModel
    def index(row : Int32, column : Int32) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_index_int_int(self, row, column))
    end
    
    def index(row : Int32, column : Int32, parent : ModelIndex) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_index_int_int_const_QModelIndex_R(self, row, column, parent))
    end
    
    def parent(child : ModelIndex) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemModel_parent_const_QModelIndex_R(self, child))
    end
    
    def row_count() : Int32
      Binding.bg_QAbstractItemModel_rowCount_(self)
    end
    
    def row_count(parent : ModelIndex) : Int32
      Binding.bg_QAbstractItemModel_rowCount_const_QModelIndex_R(self, parent)
    end
    
    def column_count() : Int32
      Binding.bg_QAbstractItemModel_columnCount_(self)
    end
    
    def column_count(parent : ModelIndex) : Int32
      Binding.bg_QAbstractItemModel_columnCount_const_QModelIndex_R(self, parent)
    end
    
    def data(index : ModelIndex, role : Int32 = 0) : Variant
      Qt::Variant.new(Binding.bg_QAbstractItemModel_data_const_QModelIndex_R_int(self, index, role))
    end
    
    def on_data_changed(&_proc_ : Proc(ModelIndex, ModelIndex, Enumerable(Int32), Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_dataChanged_CrystalProc_void__const_QModelIndex_R__const_QModelIndex_R__const_QVector_int__R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Binding::QModelIndex*, Binding::ContainerQVectorInt*, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), ModelIndex.new(unwrap: arg1), Container_QVector_int_.new(unwrap: arg2)) end)))
    end
    
    def on_header_data_changed(&_proc_ : Proc(Orientation, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_headerDataChanged_CrystalProc_void__Qt__Orientation__int__int_(self, BindgenHelper.wrap_proc(Proc(Orientation, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(arg0, arg1, arg2) end)))
    end
    
    def on_layout_changed(&_proc_ : Proc(Enumerable(Binding::QPersistentModelIndex*), AbstractItemModel::LayoutChangeHint, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_layoutChanged_CrystalProc_void__const_QList_QPersistentModelIndex__R__QAbstractItemModel__LayoutChangeHint_(self, BindgenHelper.wrap_proc(Proc(Binding::ContainerQListQPersistentModelIndex*, AbstractItemModel::LayoutChangeHint, Void).new do |arg0, arg1| _proc_.call(Container_QList_QPersistentModelIndex_.new(unwrap: arg0), arg1) end)))
    end
    
    def on_layout_about_to_be_changed(&_proc_ : Proc(Enumerable(Binding::QPersistentModelIndex*), AbstractItemModel::LayoutChangeHint, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_layoutAboutToBeChanged_CrystalProc_void__const_QList_QPersistentModelIndex__R__QAbstractItemModel__LayoutChangeHint_(self, BindgenHelper.wrap_proc(Proc(Binding::ContainerQListQPersistentModelIndex*, AbstractItemModel::LayoutChangeHint, Void).new do |arg0, arg1| _proc_.call(Container_QList_QPersistentModelIndex_.new(unwrap: arg0), arg1) end)))
    end
    
    def on_rows_about_to_be_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsAboutToBeInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_rows_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_rows_about_to_be_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsAboutToBeRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_rows_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_about_to_be_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsAboutToBeInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_inserted(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsInserted_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_about_to_be_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsAboutToBeRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_columns_removed(&_proc_ : Proc(ModelIndex, Int32, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsRemoved_CrystalProc_void__const_QModelIndex_R__int__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Void).new do |arg0, arg1, arg2| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2) end)))
    end
    
    def on_model_about_to_be_reset(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_modelAboutToBeReset_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_model_reset(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_modelReset_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_rows_about_to_be_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsAboutToBeMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def on_rows_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_rowsMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def on_columns_about_to_be_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsAboutToBeMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def on_columns_moved(&_proc_ : Proc(ModelIndex, Int32, Int32, ModelIndex, Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemModel_CONNECT_columnsMoved_CrystalProc_void__const_QModelIndex_R__int__int__const_QModelIndex_R__int_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Int32, Int32, Binding::QModelIndex*, Int32, Void).new do |arg0, arg1, arg2, arg3, arg4| _proc_.call(ModelIndex.new(unwrap: arg0), arg1, arg2, ModelIndex.new(unwrap: arg3), arg4) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractItemModel*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class IODeviceImpl < IODevice
    protected def read_data(data : UInt8*, maxlen : Int64) : Int64
      Binding.bg_QIODevice_readData_char_X_qint64(self, data, maxlen)
    end
    
    protected def write_data(data : UInt8*, len : Int64) : Int64
      Binding.bg_QIODevice_writeData_const_char_X_qint64(self, data, len)
    end
    
    def on_ready_read(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_readyRead_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_channel_ready_read(&_proc_ : Proc(Int32, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_channelReadyRead_CrystalProc_void__int_(self, BindgenHelper.wrap_proc(Proc(Int32, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_bytes_written(&_proc_ : Proc(Int64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_bytesWritten_CrystalProc_void__qint64_(self, BindgenHelper.wrap_proc(Proc(Int64, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_channel_bytes_written(&_proc_ : Proc(Int32, Int64, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_channelBytesWritten_CrystalProc_void__int__qint64_(self, BindgenHelper.wrap_proc(Proc(Int32, Int64, Void).new do |arg0, arg1| _proc_.call(arg0, arg1) end)))
    end
    
    def on_about_to_close(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_aboutToClose_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_read_channel_finished(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QIODevice_CONNECT_readChannelFinished_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QIODevice*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class PaintDeviceImpl < PaintDevice
    def paint_engine() : Binding::QPaintEngine*
      Binding.bg_QPaintDevice_paintEngine_(self)
    end
    
    def initialize(unwrap : Binding::QPaintDevice*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class SurfaceImpl < Surface
    def format() : Binding::QSurfaceFormat*
      Binding.bg_QSurface_format_(self)
    end
    
    def surface_handle() : Binding::QPlatformSurface*
      Binding.bg_QSurface_surfaceHandle_(self)
    end
    
    def surface_type() : Surface::SurfaceType
      Binding.bg_QSurface_surfaceType_(self)
    end
    
    def size() : Binding::QSize*
      Binding.bg_QSurface_size_(self)
    end
    
    def initialize(unwrap : Binding::QSurface*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class AbstractButtonImpl < AbstractButton
    protected def paint_event(e : PaintEvent) : Void
      Binding.bg_QAbstractButton_paintEvent_QPaintEvent_X(self, e)
    end
    
    def on_pressed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_pressed_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_released(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_released_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_clicked(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_clicked_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def on_toggled(&_proc_ : Proc(Bool, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractButton_CONNECT_toggled_CrystalProc_void__bool_(self, BindgenHelper.wrap_proc(Proc(Bool, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractButton*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class AbstractItemDelegateImpl < AbstractItemDelegate
    def paint(painter : Painter, option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Void
      Binding.bg_QAbstractItemDelegate_paint_QPainter_X_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, painter, option, index)
    end
    
    def size_hint(option : Binding::QStyleOptionViewItem*, index : ModelIndex) : Binding::QSize*
      Binding.bg_QAbstractItemDelegate_sizeHint_const_QStyleOptionViewItem_R_const_QModelIndex_R(self, option, index)
    end
    
    def on_commit_data(&_proc_ : Proc(Widget, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemDelegate_CONNECT_commitData_CrystalProc_void__QWidget_X_(self, BindgenHelper.wrap_proc(Proc(Binding::QWidget*, Void).new do |arg0| _proc_.call(Widget.new(unwrap: arg0)) end)))
    end
    
    def on_close_editor(&_proc_ : Proc(Widget, AbstractItemDelegate::EndEditHint, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemDelegate_CONNECT_closeEditor_CrystalProc_void__QWidget_X__QAbstractItemDelegate__EndEditHint_(self, BindgenHelper.wrap_proc(Proc(Binding::QWidget*, AbstractItemDelegate::EndEditHint, Void).new do |arg0, arg1| _proc_.call(Widget.new(unwrap: arg0), arg1) end)))
    end
    
    def on_size_hint_changed(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemDelegate_CONNECT_sizeHintChanged_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractItemDelegate*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class AbstractItemViewImpl < AbstractItemView
    def visual_rect(index : ModelIndex) : Rect
      Rect.new(unwrap: Binding.bg_QAbstractItemView_visualRect_const_QModelIndex_R(self, index))
    end
    
    def scroll_to(index : ModelIndex, hint : AbstractItemDelegate::ScrollHint = AbstractItemDelegate::ScrollHint::EnsureVisible) : Void
      Binding.bg_QAbstractItemView_scrollTo_const_QModelIndex_R_QAbstractItemView__ScrollHint(self, index, hint)
    end
    
    def index_at(point : Point) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemView_indexAt_const_QPoint_R(self, point))
    end
    
    protected def move_cursor(cursor_action : AbstractItemDelegate::CursorAction, modifiers : KeyboardModifiers) : ModelIndex
      ModelIndex.new(unwrap: Binding.bg_QAbstractItemView_moveCursor_QAbstractItemView__CursorAction_Qt__KeyboardModifiers(self, cursor_action, modifiers))
    end
    
    protected def horizontal_offset() : Int32
      Binding.bg_QAbstractItemView_horizontalOffset_(self)
    end
    
    protected def vertical_offset() : Int32
      Binding.bg_QAbstractItemView_verticalOffset_(self)
    end
    
    protected def is_index_hidden(index : ModelIndex) : Bool
      Binding.bg_QAbstractItemView_isIndexHidden_const_QModelIndex_R(self, index)
    end
    
    protected def set_selection(rect : Rect, command : ItemSelectionModel::SelectionFlags) : Void
      Binding.bg_QAbstractItemView_setSelection_const_QRect_R_QItemSelectionModel__SelectionFlags(self, rect, command)
    end
    
    protected def visual_region_for_selection(selection : Binding::QItemSelection*) : Binding::QRegion*
      Binding.bg_QAbstractItemView_visualRegionForSelection_const_QItemSelection_R(self, selection)
    end
    
    def on_pressed(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_pressed_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_clicked(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_clicked_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_double_clicked(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_doubleClicked_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_activated(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_activated_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_entered(&_proc_ : Proc(ModelIndex, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_entered_CrystalProc_void__const_QModelIndex_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QModelIndex*, Void).new do |arg0| _proc_.call(ModelIndex.new(unwrap: arg0)) end)))
    end
    
    def on_viewport_entered(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_viewportEntered_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_icon_size_changed(&_proc_ : Proc(Binding::QSize, Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QAbstractItemView_CONNECT_iconSizeChanged_CrystalProc_void__const_QSize_R_(self, BindgenHelper.wrap_proc(Proc(Binding::QSize*, Void).new do |arg0| _proc_.call(arg0) end)))
    end
    
    def initialize(unwrap : Binding::QAbstractItemView*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class LayoutItemImpl < LayoutItem
    def size_hint() : Binding::QSize*
      Binding.bg_QLayoutItem_sizeHint_(self)
    end
    
    def minimum_size() : Binding::QSize*
      Binding.bg_QLayoutItem_minimumSize_(self)
    end
    
    def maximum_size() : Binding::QSize*
      Binding.bg_QLayoutItem_maximumSize_(self)
    end
    
    def expanding_directions() : Orientations
      Binding.bg_QLayoutItem_expandingDirections_(self)
    end
    
    def geometry=(unnamed_arg_0 : Rect) : Void
      Binding.bg_QLayoutItem_setGeometry_const_QRect_R(self, unnamed_arg_0)
    end
    
    def geometry() : Rect
      Rect.new(unwrap: Binding.bg_QLayoutItem_geometry_(self))
    end
    
    def empty?() : Bool
      Binding.bg_QLayoutItem_isEmpty_(self)
    end
    
    def initialize(unwrap : Binding::QLayoutItem*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class LayoutImpl < Layout
    def add_item(unnamed_arg_0 : LayoutItem) : Void
      Binding.bg_QLayout_addItem_QLayoutItem_X(self, unnamed_arg_0)
    end
    
    def item_at(index : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QLayout_itemAt_int(self, index))
    end
    
    def take_at(index : Int32) : LayoutItem
      LayoutItemImpl.new(unwrap: Binding.bg_QLayout_takeAt_int(self, index))
    end
    
    def count() : Int32
      Binding.bg_QLayout_count_(self)
    end
    
    def size_hint() : Binding::QSize*
      Binding.bg_QLayoutItem_sizeHint_(self)
    end
    
    def initialize(unwrap : Binding::QLayout*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class GraphicsItemImpl < GraphicsItem
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_boundingRect_(self))
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def initialize(unwrap : Binding::QGraphicsItem*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class GraphicsObjectImpl < GraphicsObject
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_boundingRect_(self))
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def on_parent_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_parentChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_opacity_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_opacityChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_visible_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_visibleChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_enabled_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_enabledChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_x_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_xChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_y_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_yChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_z_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_zChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_rotation_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_rotationChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_scale_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_scaleChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_children_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_childrenChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_width_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_widthChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def on_height_changed(&_proc_ : Proc(Void)) : SignalConnection
      SignalConnection.new(unwrap: Binding.bg_QGraphicsObject_CONNECT_heightChanged_CrystalProc_void_(self, BindgenHelper.wrap_proc(Proc(Void).new do  _proc_.call() end)))
    end
    
    def initialize(unwrap : Binding::QGraphicsObject*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class AbstractGraphicsShapeItemImpl < AbstractGraphicsShapeItem
    def bounding_rect() : RectF
      RectF.new(unwrap: Binding.bg_QGraphicsItem_boundingRect_(self))
    end
    
    def paint(painter : Painter, option : StyleOptionGraphicsItem, widget : Widget? = nil) : Void
      Binding.bg_QGraphicsItem_paint_QPainter_X_const_QStyleOptionGraphicsItem_X_QWidget_X(self, painter, option, widget)
    end
    
    def initialize(unwrap : Binding::QAbstractGraphicsShapeItem*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class GraphicsTransformImpl < GraphicsTransform
    def apply_to(matrix : Binding::QMatrix4x4*) : Void
      Binding.bg_QGraphicsTransform_applyTo_QMatrix4x4_X(self, matrix)
    end
    
    def initialize(unwrap : Binding::QGraphicsTransform*)
      result = unwrap
    @unwrap = result
    end
    
  end
  QT_VERSION = 331520
  QT_VERSION_STR = "5.15.0"
  QT_VERSION_MAJOR = 5
  QT_VERSION_MINOR = 15
  QT_VERSION_PATCH = 0
  def self.q_version() : UInt8*
    Binding.bg____qVersion_STATIC_()
  end
  
  class Container_QList_qreal_
    include BindgenHelper::SequentialContainer(Float64)
    
    @unwrap : Binding::ContainerQListQreal*
    
    def initialize()
      result = Binding.bg_Container_QList_qreal___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Float64
      Binding.bg_Container_QList_qreal__at_int(self, index)
    end
    
    def push(value : Float64) : Void
      Binding.bg_Container_QList_qreal__push_back_qreal(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_qreal__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQreal*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QAbstractEventDispatcher__TimerInfo_
    include BindgenHelper::SequentialContainer(Binding::EventDispatcherTimerInfo)
    
    @unwrap : Binding::ContainerQListQAbstractEventDispatcherTimerInfo*
    
    def initialize()
      result = Binding.bg_Container_QList_QAbstractEventDispatcher__TimerInfo___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Binding::EventDispatcherTimerInfo
      Binding.bg_Container_QList_QAbstractEventDispatcher__TimerInfo__at_int(self, index)
    end
    
    def push(value : Binding::EventDispatcherTimerInfo) : Void
      Binding.bg_Container_QList_QAbstractEventDispatcher__TimerInfo__push_back_QAbstractEventDispatcher__TimerInfo(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QAbstractEventDispatcher__TimerInfo__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQAbstractEventDispatcherTimerInfo*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QVariant_
    include BindgenHelper::SequentialContainer(Variant)
    
    @unwrap : Binding::ContainerQListQVariant*
    
    def initialize()
      result = Binding.bg_Container_QList_QVariant___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Variant
      Qt::Variant.new(Binding.bg_Container_QList_QVariant__at_int(self, index))
    end
    
    def push(value : Variant) : Void
      Binding.bg_Container_QList_QVariant__push_back_QVariant(self, (value.to_unsafe))
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QVariant__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQVariant*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QPersistentModelIndex_
    include BindgenHelper::SequentialContainer(Binding::QPersistentModelIndex*)
    
    @unwrap : Binding::ContainerQListQPersistentModelIndex*
    
    def initialize()
      result = Binding.bg_Container_QList_QPersistentModelIndex___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Binding::QPersistentModelIndex*
      Binding.bg_Container_QList_QPersistentModelIndex__at_int(self, index)
    end
    
    def push(value : Binding::QPersistentModelIndex*) : Void
      Binding.bg_Container_QList_QPersistentModelIndex__push_back_QPersistentModelIndex(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QPersistentModelIndex__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQPersistentModelIndex*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QUrl_
    include BindgenHelper::SequentialContainer(Url)
    
    @unwrap : Binding::ContainerQListQUrl*
    
    def initialize()
      result = Binding.bg_Container_QList_QUrl___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Url
      Url.new(unwrap: Binding.bg_Container_QList_QUrl__at_int(self, index))
    end
    
    def push(value : Url) : Void
      Binding.bg_Container_QList_QUrl__push_back_QUrl(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QUrl__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQUrl*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QKeySequence_
    include BindgenHelper::SequentialContainer(KeySequence)
    
    @unwrap : Binding::ContainerQListQKeySequence*
    
    def initialize()
      result = Binding.bg_Container_QList_QKeySequence___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : KeySequence
      KeySequence.new(unwrap: Binding.bg_Container_QList_QKeySequence__at_int(self, index))
    end
    
    def push(value : KeySequence) : Void
      Binding.bg_Container_QList_QKeySequence__push_back_QKeySequence(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QKeySequence__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQKeySequence*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QSize_
    include BindgenHelper::SequentialContainer(Binding::QSize*)
    
    @unwrap : Binding::ContainerQListQSize*
    
    def initialize()
      result = Binding.bg_Container_QList_QSize___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Binding::QSize*
      Binding.bg_Container_QList_QSize__at_int(self, index)
    end
    
    def push(value : Binding::QSize*) : Void
      Binding.bg_Container_QList_QSize__push_back_QSize(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QSize__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQSize*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QScreen_X_
    include BindgenHelper::SequentialContainer(Screen)
    
    @unwrap : Binding::ContainerQListQScreenX*
    
    def initialize()
      result = Binding.bg_Container_QList_QScreen_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Screen
      Screen.new(unwrap: Binding.bg_Container_QList_QScreen_X__at_int(self, index))
    end
    
    def push(value : Screen) : Void
      Binding.bg_Container_QList_QScreen_X__push_back_QScreen_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QScreen_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQScreenX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QAction_X_
    include BindgenHelper::SequentialContainer(Action)
    
    @unwrap : Binding::ContainerQListQActionX*
    
    def initialize()
      result = Binding.bg_Container_QList_QAction_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Action
      Action.new(unwrap: Binding.bg_Container_QList_QAction_X__at_int(self, index))
    end
    
    def push(value : Action) : Void
      Binding.bg_Container_QList_QAction_X__push_back_QAction_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QAction_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQActionX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QWidget_X_
    include BindgenHelper::SequentialContainer(Widget)
    
    @unwrap : Binding::ContainerQListQWidgetX*
    
    def initialize()
      result = Binding.bg_Container_QList_QWidget_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Widget
      Widget.new(unwrap: Binding.bg_Container_QList_QWidget_X__at_int(self, index))
    end
    
    def push(value : Widget) : Void
      Binding.bg_Container_QList_QWidget_X__push_back_QWidget_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QWidget_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQWidgetX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QGraphicsWidget_X_
    include BindgenHelper::SequentialContainer(GraphicsWidget)
    
    @unwrap : Binding::ContainerQListQGraphicsWidgetX*
    
    def initialize()
      result = Binding.bg_Container_QList_QGraphicsWidget_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : GraphicsWidget
      GraphicsWidget.new(unwrap: Binding.bg_Container_QList_QGraphicsWidget_X__at_int(self, index))
    end
    
    def push(value : GraphicsWidget) : Void
      Binding.bg_Container_QList_QGraphicsWidget_X__push_back_QGraphicsWidget_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QGraphicsWidget_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQGraphicsWidgetX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QAbstractButton_X_
    include BindgenHelper::SequentialContainer(AbstractButton)
    
    @unwrap : Binding::ContainerQListQAbstractButtonX*
    
    def initialize()
      result = Binding.bg_Container_QList_QAbstractButton_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : AbstractButton
      AbstractButtonImpl.new(unwrap: Binding.bg_Container_QList_QAbstractButton_X__at_int(self, index))
    end
    
    def push(value : AbstractButton) : Void
      Binding.bg_Container_QList_QAbstractButton_X__push_back_QAbstractButton_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QAbstractButton_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQAbstractButtonX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QGesture_X_
    include BindgenHelper::SequentialContainer(Gesture)
    
    @unwrap : Binding::ContainerQListQGestureX*
    
    def initialize()
      result = Binding.bg_Container_QList_QGesture_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Gesture
      Gesture.new(unwrap: Binding.bg_Container_QList_QGesture_X__at_int(self, index))
    end
    
    def push(value : Gesture) : Void
      Binding.bg_Container_QList_QGesture_X__push_back_QGesture_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QGesture_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQGestureX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QGraphicsItem_X_
    include BindgenHelper::SequentialContainer(GraphicsItem)
    
    @unwrap : Binding::ContainerQListQGraphicsItemX*
    
    def initialize()
      result = Binding.bg_Container_QList_QGraphicsItem_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : GraphicsItem
      GraphicsItemImpl.new(unwrap: Binding.bg_Container_QList_QGraphicsItem_X__at_int(self, index))
    end
    
    def push(value : GraphicsItem) : Void
      Binding.bg_Container_QList_QGraphicsItem_X__push_back_QGraphicsItem_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QGraphicsItem_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQGraphicsItemX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QGraphicsTransform_X_
    include BindgenHelper::SequentialContainer(GraphicsTransform)
    
    @unwrap : Binding::ContainerQListQGraphicsTransformX*
    
    def initialize()
      result = Binding.bg_Container_QList_QGraphicsTransform_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : GraphicsTransform
      GraphicsTransformImpl.new(unwrap: Binding.bg_Container_QList_QGraphicsTransform_X__at_int(self, index))
    end
    
    def push(value : GraphicsTransform) : Void
      Binding.bg_Container_QList_QGraphicsTransform_X__push_back_QGraphicsTransform_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QGraphicsTransform_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQGraphicsTransformX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QGraphicsView_X_
    include BindgenHelper::SequentialContainer(GraphicsView)
    
    @unwrap : Binding::ContainerQListQGraphicsViewX*
    
    def initialize()
      result = Binding.bg_Container_QList_QGraphicsView_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : GraphicsView
      GraphicsView.new(unwrap: Binding.bg_Container_QList_QGraphicsView_X__at_int(self, index))
    end
    
    def push(value : GraphicsView) : Void
      Binding.bg_Container_QList_QGraphicsView_X__push_back_QGraphicsView_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QGraphicsView_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQGraphicsViewX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QRectF_
    include BindgenHelper::SequentialContainer(RectF)
    
    @unwrap : Binding::ContainerQListQRectF*
    
    def initialize()
      result = Binding.bg_Container_QList_QRectF___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : RectF
      RectF.new(unwrap: Binding.bg_Container_QList_QRectF__at_int(self, index))
    end
    
    def push(value : RectF) : Void
      Binding.bg_Container_QList_QRectF__push_back_QRectF(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QRectF__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQRectF*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QDockWidget_X_
    include BindgenHelper::SequentialContainer(DockWidget)
    
    @unwrap : Binding::ContainerQListQDockWidgetX*
    
    def initialize()
      result = Binding.bg_Container_QList_QDockWidget_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : DockWidget
      DockWidget.new(unwrap: Binding.bg_Container_QList_QDockWidget_X__at_int(self, index))
    end
    
    def push(value : DockWidget) : Void
      Binding.bg_Container_QList_QDockWidget_X__push_back_QDockWidget_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QDockWidget_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQDockWidgetX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_int_
    include BindgenHelper::SequentialContainer(Int32)
    
    @unwrap : Binding::ContainerQListInt*
    
    def initialize()
      result = Binding.bg_Container_QList_int___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Int32
      Binding.bg_Container_QList_int__at_int(self, index)
    end
    
    def push(value : Int32) : Void
      Binding.bg_Container_QList_int__push_back_int(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_int__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListInt*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QTableWidgetSelectionRange_
    include BindgenHelper::SequentialContainer(Binding::QTableWidgetSelectionRange*)
    
    @unwrap : Binding::ContainerQListQTableWidgetSelectionRange*
    
    def initialize()
      result = Binding.bg_Container_QList_QTableWidgetSelectionRange___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Binding::QTableWidgetSelectionRange*
      Binding.bg_Container_QList_QTableWidgetSelectionRange__at_int(self, index)
    end
    
    def push(value : Binding::QTableWidgetSelectionRange*) : Void
      Binding.bg_Container_QList_QTableWidgetSelectionRange__push_back_QTableWidgetSelectionRange(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QTableWidgetSelectionRange__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQTableWidgetSelectionRange*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QList_QTableWidgetItem_X_
    include BindgenHelper::SequentialContainer(TableWidgetItem)
    
    @unwrap : Binding::ContainerQListQTableWidgetItemX*
    
    def initialize()
      result = Binding.bg_Container_QList_QTableWidgetItem_X___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : TableWidgetItem
      TableWidgetItem.new(unwrap: Binding.bg_Container_QList_QTableWidgetItem_X__at_int(self, index))
    end
    
    def push(value : TableWidgetItem) : Void
      Binding.bg_Container_QList_QTableWidgetItem_X__push_back_QTableWidgetItem_X(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QList_QTableWidgetItem_X__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQListQTableWidgetItemX*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_unsigned_int_
    include BindgenHelper::SequentialContainer(UInt32)
    
    @unwrap : Binding::ContainerQVectorUnsignedInt*
    
    def initialize()
      result = Binding.bg_Container_QVector_unsigned_int___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : UInt32
      Binding.bg_Container_QVector_unsigned_int__at_int(self, index)
    end
    
    def push(value : UInt32) : Void
      Binding.bg_Container_QVector_unsigned_int__push_back_unsigned_int(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_unsigned_int__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorUnsignedInt*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_int_
    include BindgenHelper::SequentialContainer(Int32)
    
    @unwrap : Binding::ContainerQVectorInt*
    
    def initialize()
      result = Binding.bg_Container_QVector_int___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Int32
      Binding.bg_Container_QVector_int__at_int(self, index)
    end
    
    def push(value : Int32) : Void
      Binding.bg_Container_QVector_int__push_back_int(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_int__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorInt*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QTextLength_
    include BindgenHelper::SequentialContainer(TextLength)
    
    @unwrap : Binding::ContainerQVectorQTextLength*
    
    def initialize()
      result = Binding.bg_Container_QVector_QTextLength___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : TextLength
      TextLength.new(unwrap: Binding.bg_Container_QVector_QTextLength__at_int(self, index))
    end
    
    def push(value : TextLength) : Void
      Binding.bg_Container_QVector_QTextLength__push_back_QTextLength(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QTextLength__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQTextLength*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QTextFormat_
    include BindgenHelper::SequentialContainer(TextFormat)
    
    @unwrap : Binding::ContainerQVectorQTextFormat*
    
    def initialize()
      result = Binding.bg_Container_QVector_QTextFormat___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : TextFormat
      TextFormat.new(unwrap: Binding.bg_Container_QVector_QTextFormat__at_int(self, index))
    end
    
    def push(value : TextFormat) : Void
      Binding.bg_Container_QVector_QTextFormat__push_back_QTextFormat(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QTextFormat__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQTextFormat*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QLineF_
    include BindgenHelper::SequentialContainer(QLineF)
    
    @unwrap : Binding::ContainerQVectorQLineF*
    
    def initialize()
      result = Binding.bg_Container_QVector_QLineF___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : QLineF
      QLineF.new(unwrap: Binding.bg_Container_QVector_QLineF__at_int(self, index))
    end
    
    def push(value : QLineF) : Void
      Binding.bg_Container_QVector_QLineF__push_back_QLineF(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QLineF__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQLineF*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QPointF_
    include BindgenHelper::SequentialContainer(PointF)
    
    @unwrap : Binding::ContainerQVectorQPointF*
    
    def initialize()
      result = Binding.bg_Container_QVector_QPointF___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : PointF
      PointF.new(unwrap: Binding.bg_Container_QVector_QPointF__at_int(self, index))
    end
    
    def push(value : PointF) : Void
      Binding.bg_Container_QVector_QPointF__push_back_QPointF(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QPointF__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQPointF*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QLine_
    include BindgenHelper::SequentialContainer(QLine)
    
    @unwrap : Binding::ContainerQVectorQLine*
    
    def initialize()
      result = Binding.bg_Container_QVector_QLine___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : QLine
      QLine.new(unwrap: Binding.bg_Container_QVector_QLine__at_int(self, index))
    end
    
    def push(value : QLine) : Void
      Binding.bg_Container_QVector_QLine__push_back_QLine(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QLine__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQLine*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QPoint_
    include BindgenHelper::SequentialContainer(Point)
    
    @unwrap : Binding::ContainerQVectorQPoint*
    
    def initialize()
      result = Binding.bg_Container_QVector_QPoint___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Point
      Point.new(unwrap: Binding.bg_Container_QVector_QPoint__at_int(self, index))
    end
    
    def push(value : Point) : Void
      Binding.bg_Container_QVector_QPoint__push_back_QPoint(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QPoint__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQPoint*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QRectF_
    include BindgenHelper::SequentialContainer(RectF)
    
    @unwrap : Binding::ContainerQVectorQRectF*
    
    def initialize()
      result = Binding.bg_Container_QVector_QRectF___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : RectF
      RectF.new(unwrap: Binding.bg_Container_QVector_QRectF__at_int(self, index))
    end
    
    def push(value : RectF) : Void
      Binding.bg_Container_QVector_QRectF__push_back_QRectF(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QRectF__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQRectF*)
      result = unwrap
    @unwrap = result
    end
    
  end
  class Container_QVector_QRect_
    include BindgenHelper::SequentialContainer(Rect)
    
    @unwrap : Binding::ContainerQVectorQRect*
    
    def initialize()
      result = Binding.bg_Container_QVector_QRect___CONSTRUCT_()
    @unwrap = result
    end
    
    def unsafe_fetch(index : Int) : Rect
      Rect.new(unwrap: Binding.bg_Container_QVector_QRect__at_int(self, index))
    end
    
    def push(value : Rect) : Void
      Binding.bg_Container_QVector_QRect__push_back_QRect(self, value)
    end
    
    def size() : Int32
      Binding.bg_Container_QVector_QRect__size_(self)
    end
    
    def to_unsafe
      @unwrap
    end
    def initialize(unwrap : Binding::ContainerQVectorQRect*)
      result = unwrap
    @unwrap = result
    end
    
  end
  enum GlobalColor : UInt32
    Color0 = 0
    Color1 = 1
    Black = 2
    White = 3
    Darkgray = 4
    Gray = 5
    Lightgray = 6
    Red = 7
    Green = 8
    Blue = 9
    Cyan = 10
    Magenta = 11
    Yellow = 12
    Darkred = 13
    Darkgreen = 14
    Darkblue = 15
    Darkcyan = 16
    Darkmagenta = 17
    Darkyellow = 18
    Transparent = 19
  end
  @[Flags]
  enum KeyboardModifiers : UInt32
    NoModifier = 0
    ShiftModifier = 33554432
    ControlModifier = 67108864
    AltModifier = 134217728
    MetaModifier = 268435456
    KeypadModifier = 536870912
    GroupSwitchModifier = 1073741824
    KeyboardModifierMask = 4261412864
  end
  enum MouseButton : UInt32
    NoButton = 0
    LeftButton = 1
    RightButton = 2
    MidButton = 4
    MiddleButton = 4
    BackButton = 8
    Xbutton1 = 8
    ExtraButton1 = 8
    ForwardButton = 16
    Xbutton2 = 16
    ExtraButton2 = 16
    TaskButton = 32
    ExtraButton3 = 32
    ExtraButton4 = 64
    ExtraButton5 = 128
    ExtraButton6 = 256
    ExtraButton7 = 512
    ExtraButton8 = 1024
    ExtraButton9 = 2048
    ExtraButton10 = 4096
    ExtraButton11 = 8192
    ExtraButton12 = 16384
    ExtraButton13 = 32768
    ExtraButton14 = 65536
    ExtraButton15 = 131072
    ExtraButton16 = 262144
    ExtraButton17 = 524288
    ExtraButton18 = 1048576
    ExtraButton19 = 2097152
    ExtraButton20 = 4194304
    ExtraButton21 = 8388608
    ExtraButton22 = 16777216
    ExtraButton23 = 33554432
    ExtraButton24 = 67108864
    AllButtons = 134217727
    MaxMouseButton = 67108864
    MouseButtonMask = 4294967295
  end
  @[Flags]
  enum MouseButtons : UInt32
    NoButton = 0
    LeftButton = 1
    RightButton = 2
    MidButton = 4
    MiddleButton = 4
    BackButton = 8
    Xbutton1 = 8
    ExtraButton1 = 8
    ForwardButton = 16
    Xbutton2 = 16
    ExtraButton2 = 16
    TaskButton = 32
    ExtraButton3 = 32
    ExtraButton4 = 64
    ExtraButton5 = 128
    ExtraButton6 = 256
    ExtraButton7 = 512
    ExtraButton8 = 1024
    ExtraButton9 = 2048
    ExtraButton10 = 4096
    ExtraButton11 = 8192
    ExtraButton12 = 16384
    ExtraButton13 = 32768
    ExtraButton14 = 65536
    ExtraButton15 = 131072
    ExtraButton16 = 262144
    ExtraButton17 = 524288
    ExtraButton18 = 1048576
    ExtraButton19 = 2097152
    ExtraButton20 = 4194304
    ExtraButton21 = 8388608
    ExtraButton22 = 16777216
    ExtraButton23 = 33554432
    ExtraButton24 = 67108864
    AllButtons = 134217727
    MaxMouseButton = 67108864
    MouseButtonMask = 4294967295
  end
  enum Orientation : UInt32
    Horizontal = 1
    Vertical = 2
  end
  @[Flags]
  enum Orientations : UInt32
    Horizontal = 1
    Vertical = 2
  end
  enum FocusPolicy : UInt32
    NoFocus = 0
    TabFocus = 1
    ClickFocus = 2
    StrongFocus = 11
    WheelFocus = 15
  end
  enum SortOrder : UInt32
    AscendingOrder = 0
    DescendingOrder = 1
  end
  @[Flags]
  enum Alignment : UInt32
    AlignLeft = 1
    AlignLeading = 1
    AlignRight = 2
    AlignTrailing = 2
    AlignHCenter = 4
    AlignJustify = 8
    AlignAbsolute = 16
    AlignHorizontal_Mask = 31
    AlignTop = 32
    AlignBottom = 64
    AlignVCenter = 128
    AlignBaseline = 256
    AlignVertical_Mask = 480
    AlignCenter = 132
  end
  enum TextElideMode : UInt32
    ElideLeft = 0
    ElideRight = 1
    ElideMiddle = 2
    ElideNone = 3
  end
  enum WindowType : UInt32
    Widget = 0
    Window = 1
    Dialog = 3
    Sheet = 5
    Drawer = 7
    Popup = 9
    Tool = 11
    ToolTip = 13
    SplashScreen = 15
    Desktop = 17
    SubWindow = 18
    ForeignWindow = 33
    CoverWindow = 65
    WindowType_Mask = 255
    Mswindowsfixedsizedialoghint = 256
    Mswindowsowndc = 512
    BypassWindowManagerHint = 1024
    X11bypasswindowmanagerhint = 1024
    FramelessWindowHint = 2048
    WindowTitleHint = 4096
    WindowSystemMenuHint = 8192
    WindowMinimizeButtonHint = 16384
    WindowMaximizeButtonHint = 32768
    WindowMinMaxButtonsHint = 49152
    WindowContextHelpButtonHint = 65536
    WindowShadeButtonHint = 131072
    WindowStaysOnTopHint = 262144
    WindowTransparentForInput = 524288
    WindowOverridesSystemGestures = 1048576
    WindowDoesNotAcceptFocus = 2097152
    MaximizeUsingFullscreenGeometryHint = 4194304
    CustomizeWindowHint = 33554432
    WindowStaysOnBottomHint = 67108864
    WindowCloseButtonHint = 134217728
    MacWindowToolBarButtonHint = 268435456
    BypassGraphicsProxyWidget = 536870912
    NoDropShadowWindowHint = 1073741824
    WindowFullscreenButtonHint = 2147483648
  end
  @[Flags]
  enum WindowFlags : UInt32
    Widget = 0
    Window = 1
    Dialog = 3
    Sheet = 5
    Drawer = 7
    Popup = 9
    Tool = 11
    ToolTip = 13
    SplashScreen = 15
    Desktop = 17
    SubWindow = 18
    ForeignWindow = 33
    CoverWindow = 65
    WindowType_Mask = 255
    Mswindowsfixedsizedialoghint = 256
    Mswindowsowndc = 512
    BypassWindowManagerHint = 1024
    X11bypasswindowmanagerhint = 1024
    FramelessWindowHint = 2048
    WindowTitleHint = 4096
    WindowSystemMenuHint = 8192
    WindowMinimizeButtonHint = 16384
    WindowMaximizeButtonHint = 32768
    WindowMinMaxButtonsHint = 49152
    WindowContextHelpButtonHint = 65536
    WindowShadeButtonHint = 131072
    WindowStaysOnTopHint = 262144
    WindowTransparentForInput = 524288
    WindowOverridesSystemGestures = 1048576
    WindowDoesNotAcceptFocus = 2097152
    MaximizeUsingFullscreenGeometryHint = 4194304
    CustomizeWindowHint = 33554432
    WindowStaysOnBottomHint = 67108864
    WindowCloseButtonHint = 134217728
    MacWindowToolBarButtonHint = 268435456
    BypassGraphicsProxyWidget = 536870912
    NoDropShadowWindowHint = 1073741824
    WindowFullscreenButtonHint = 2147483648
  end
  enum WindowState : UInt32
    WindowNoState = 0
    WindowMinimized = 1
    WindowMaximized = 2
    WindowFullScreen = 4
    WindowActive = 8
  end
  @[Flags]
  enum WindowStates : UInt32
    WindowNoState = 0
    WindowMinimized = 1
    WindowMaximized = 2
    WindowFullScreen = 4
    WindowActive = 8
  end
  enum ApplicationState : UInt32
    ApplicationSuspended = 0
    ApplicationHidden = 1
    ApplicationInactive = 2
    ApplicationActive = 4
  end
  enum ScreenOrientation : UInt32
    PrimaryOrientation = 0
    PortraitOrientation = 1
    LandscapeOrientation = 2
    InvertedPortraitOrientation = 4
    InvertedLandscapeOrientation = 8
  end
  @[Flags]
  enum ScreenOrientations : UInt32
    PrimaryOrientation = 0
    PortraitOrientation = 1
    LandscapeOrientation = 2
    InvertedPortraitOrientation = 4
    InvertedLandscapeOrientation = 8
  end
  enum WidgetAttribute : UInt32
    WaDisabled = 0
    WaUndermouse = 1
    WaMousetracking = 2
    WaContentspropagated = 3
    WaOpaquepaintevent = 4
    WaNobackground = 4
    WaStaticcontents = 5
    WaLaidout = 7
    WaPaintonscreen = 8
    WaNosystembackground = 9
    WaUpdatesdisabled = 10
    WaMapped = 11
    WaMacnoclickthrough = 12
    WaInputmethodenabled = 14
    WaWstateVisible = 15
    WaWstateHidden = 16
    WaForcedisabled = 32
    WaKeycompression = 33
    WaPendingmoveevent = 34
    WaPendingresizeevent = 35
    WaSetpalette = 36
    WaSetfont = 37
    WaSetcursor = 38
    WaNochildeventsfromchildren = 39
    WaWindowmodified = 41
    WaResized = 42
    WaMoved = 43
    WaPendingupdate = 44
    WaInvalidsize = 45
    WaMacbrushedmetal = 46
    WaMacmetalstyle = 46
    WaCustomwhatsthis = 47
    WaLayoutonentirerect = 48
    WaOutsidewsrange = 49
    WaGrabbedshortcut = 50
    WaTransparentformouseevents = 51
    WaPaintunclipped = 52
    WaSetwindowicon = 53
    WaNomousereplay = 54
    WaDeleteonclose = 55
    WaRighttoleft = 56
    WaSetlayoutdirection = 57
    WaNochildeventsforparent = 58
    WaForceupdatesdisabled = 59
    WaWstateCreated = 60
    WaWstateCompresskeys = 61
    WaWstateInpaintevent = 62
    WaWstateReparented = 63
    WaWstateConfigpending = 64
    WaWstatePolished = 66
    WaWstateDnd = 67
    WaWstateOwnsizepolicy = 68
    WaWstateExplicitshowhide = 69
    WaShowmodal = 70
    WaMousenomask = 71
    WaGroupleader = 72
    WaNomousepropagation = 73
    WaHover = 74
    WaInputmethodtransparent = 75
    WaQuitonclose = 76
    WaKeyboardfocuschange = 77
    WaAcceptdrops = 78
    WaDropsiteregistered = 79
    WaForceacceptdrops = 79
    WaWindowpropagation = 80
    WaNox11eventcompression = 81
    WaTintedbackground = 82
    WaX11opengloverlay = 83
    WaAlwaysshowtooltips = 84
    WaMacopaquesizegrip = 85
    WaSetstyle = 86
    WaSetlocale = 87
    WaMacshowfocusrect = 88
    WaMacnormalsize = 89
    WaMacsmallsize = 90
    WaMacminisize = 91
    WaLayoutuseswidgetrect = 92
    WaStyledbackground = 93
    WaMswindowsusedirect3d = 94
    WaCanhostqmdisubwindowtitlebar = 95
    WaMacalwaysshowtoolwindow = 96
    WaStylesheet = 97
    WaShowwithoutactivating = 98
    WaX11bypasstransientforhint = 99
    WaNativewindow = 100
    WaDontcreatenativeancestors = 101
    WaMacvariablesize = 102
    WaDontshowonscreen = 103
    WaX11netwmwindowtypedesktop = 104
    WaX11netwmwindowtypedock = 105
    WaX11netwmwindowtypetoolbar = 106
    WaX11netwmwindowtypemenu = 107
    WaX11netwmwindowtypeutility = 108
    WaX11netwmwindowtypesplash = 109
    WaX11netwmwindowtypedialog = 110
    WaX11netwmwindowtypedropdownmenu = 111
    WaX11netwmwindowtypepopupmenu = 112
    WaX11netwmwindowtypetooltip = 113
    WaX11netwmwindowtypenotification = 114
    WaX11netwmwindowtypecombo = 115
    WaX11netwmwindowtypednd = 116
    WaMacframeworkscaled = 117
    WaSetwindowmodality = 118
    WaWstateWindowopacityset = 119
    WaTranslucentbackground = 120
    WaAccepttouchevents = 121
    WaWstateAcceptedtouchbeginevent = 122
    WaTouchpadacceptsingletouchevents = 123
    WaX11donotacceptfocus = 126
    WaMacnoshadow = 127
    WaAlwaysstackontop = 128
    WaTablettracking = 129
    WaContentsmarginsrespectssafearea = 130
    WaStylesheettarget = 131
    WaAttributecount = 132
  end
  enum ApplicationAttribute : UInt32
    AaImmediatewidgetcreation = 0
    AaMswindowsusedirect3dbydefault = 1
    AaDontshowiconsinmenus = 2
    AaNativewindows = 3
    AaDontcreatenativewidgetsiblings = 4
    AaPluginapplication = 5
    AaMacpluginapplication = 5
    AaDontusenativemenubar = 6
    AaMacdontswapctrlandmeta = 7
    AaUse96dpi = 8
    AaDisablenativevirtualkeyboard = 9
    AaX11initthreads = 10
    AaSynthesizetouchforunhandledmouseevents = 11
    AaSynthesizemouseforunhandledtouchevents = 12
    AaUsehighdpipixmaps = 13
    AaForcerasterwidgets = 14
    AaUsedesktopopengl = 15
    AaUseopengles = 16
    AaUsesoftwareopengl = 17
    AaShareopenglcontexts = 18
    AaSetpalette = 19
    AaEnablehighdpiscaling = 20
    AaDisablehighdpiscaling = 21
    AaUsestylesheetpropagationinwidgetstyles = 22
    AaDontusenativedialogs = 23
    AaSynthesizemouseforunhandledtabletevents = 24
    AaCompresshighfrequencyevents = 25
    AaDontcheckopenglcontextthreadaffinity = 26
    AaDisableshaderdiskcache = 27
    AaDontshowshortcutsincontextmenus = 28
    AaCompresstabletevents = 29
    AaDisablewindowcontexthelpbutton = 30
    AaDisablesessionmanager = 31
    AaAttributecount = 32
  end
  @[Flags]
  enum ImageConversionFlags : UInt32
    ColorMode_Mask = 3
    AutoColor = 0
    ColorOnly = 3
    MonoOnly = 2
    AlphaDither_Mask = 12
    ThresholdAlphaDither = 0
    OrderedAlphaDither = 4
    DiffuseAlphaDither = 8
    NoAlpha = 12
    Dither_Mask = 48
    DiffuseDither = 0
    OrderedDither = 16
    ThresholdDither = 32
    DitherMode_Mask = 192
    AutoDither = 0
    PreferDither = 64
    AvoidDither = 128
    NoOpaqueDetection = 256
    NoFormatConversion = 512
  end
  enum BgMode : UInt32
    TransparentMode = 0
    OpaqueMode = 1
  end
  enum Key : UInt32
    Escape = 16777216
    Tab = 16777217
    Backtab = 16777218
    Backspace = 16777219
    Return = 16777220
    Enter = 16777221
    Insert = 16777222
    Delete = 16777223
    Pause = 16777224
    Print = 16777225
    SysReq = 16777226
    Clear = 16777227
    Home = 16777232
    End = 16777233
    Left = 16777234
    Up = 16777235
    Right = 16777236
    Down = 16777237
    PageUp = 16777238
    PageDown = 16777239
    Shift = 16777248
    Control = 16777249
    Meta = 16777250
    Alt = 16777251
    CapsLock = 16777252
    NumLock = 16777253
    ScrollLock = 16777254
    F1 = 16777264
    F2 = 16777265
    F3 = 16777266
    F4 = 16777267
    F5 = 16777268
    F6 = 16777269
    F7 = 16777270
    F8 = 16777271
    F9 = 16777272
    F10 = 16777273
    F11 = 16777274
    F12 = 16777275
    F13 = 16777276
    F14 = 16777277
    F15 = 16777278
    F16 = 16777279
    F17 = 16777280
    F18 = 16777281
    F19 = 16777282
    F20 = 16777283
    F21 = 16777284
    F22 = 16777285
    F23 = 16777286
    F24 = 16777287
    F25 = 16777288
    F26 = 16777289
    F27 = 16777290
    F28 = 16777291
    F29 = 16777292
    F30 = 16777293
    F31 = 16777294
    F32 = 16777295
    F33 = 16777296
    F34 = 16777297
    F35 = 16777298
    Super_L = 16777299
    Super_R = 16777300
    Menu = 16777301
    Hyper_L = 16777302
    Hyper_R = 16777303
    Help = 16777304
    Direction_L = 16777305
    Direction_R = 16777312
    Space = 32
    Any = 32
    Exclam = 33
    QuoteDbl = 34
    NumberSign = 35
    Dollar = 36
    Percent = 37
    Ampersand = 38
    Apostrophe = 39
    ParenLeft = 40
    ParenRight = 41
    Asterisk = 42
    Plus = 43
    Comma = 44
    Minus = 45
    Period = 46
    Slash = 47
    Digit0 = 48
    Digit1 = 49
    Digit2 = 50
    Digit3 = 51
    Digit4 = 52
    Digit5 = 53
    Digit6 = 54
    Digit7 = 55
    Digit8 = 56
    Digit9 = 57
    Colon = 58
    Semicolon = 59
    Less = 60
    Equal = 61
    Greater = 62
    Question = 63
    At = 64
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    BracketLeft = 91
    Backslash = 92
    BracketRight = 93
    AsciiCircum = 94
    Underscore = 95
    QuoteLeft = 96
    BraceLeft = 123
    Bar = 124
    BraceRight = 125
    AsciiTilde = 126
    Nobreakspace = 160
    Exclamdown = 161
    Cent = 162
    Sterling = 163
    Currency = 164
    Yen = 165
    Brokenbar = 166
    Section = 167
    Diaeresis = 168
    Copyright = 169
    Ordfeminine = 170
    Guillemotleft = 171
    Notsign = 172
    Hyphen = 173
    Registered = 174
    Macron = 175
    Degree = 176
    Plusminus = 177
    Twosuperior = 178
    Threesuperior = 179
    Acute = 180
    Mu = 181
    Paragraph = 182
    Periodcentered = 183
    Cedilla = 184
    Onesuperior = 185
    Masculine = 186
    Guillemotright = 187
    Onequarter = 188
    Onehalf = 189
    Threequarters = 190
    Questiondown = 191
    Agrave = 192
    Aacute = 193
    Acircumflex = 194
    Atilde = 195
    Adiaeresis = 196
    Aring = 197
    AE = 198
    Ccedilla = 199
    Egrave = 200
    Eacute = 201
    Ecircumflex = 202
    Ediaeresis = 203
    Igrave = 204
    Iacute = 205
    Icircumflex = 206
    Idiaeresis = 207
    ETH = 208
    Ntilde = 209
    Ograve = 210
    Oacute = 211
    Ocircumflex = 212
    Otilde = 213
    Odiaeresis = 214
    Multiply = 215
    Ooblique = 216
    Ugrave = 217
    Uacute = 218
    Ucircumflex = 219
    Udiaeresis = 220
    Yacute = 221
    THORN = 222
    Ssharp = 223
    Division = 247
    Ydiaeresis = 255
    AltGr = 16781571
    Multi_key = 16781600
    Codeinput = 16781623
    SingleCandidate = 16781628
    MultipleCandidate = 16781629
    PreviousCandidate = 16781630
    Mode_switch = 16781694
    Kanji = 16781601
    Muhenkan = 16781602
    Henkan = 16781603
    Romaji = 16781604
    Hiragana = 16781605
    Katakana = 16781606
    Hiragana_Katakana = 16781607
    Zenkaku = 16781608
    Hankaku = 16781609
    Zenkaku_Hankaku = 16781610
    Touroku = 16781611
    Massyo = 16781612
    Kana_Lock = 16781613
    Kana_Shift = 16781614
    Eisu_Shift = 16781615
    Eisu_toggle = 16781616
    Hangul = 16781617
    Hangul_Start = 16781618
    Hangul_End = 16781619
    Hangul_Hanja = 16781620
    Hangul_Jamo = 16781621
    Hangul_Romaja = 16781622
    Hangul_Jeonja = 16781624
    Hangul_Banja = 16781625
    Hangul_PreHanja = 16781626
    Hangul_PostHanja = 16781627
    Hangul_Special = 16781631
    Dead_Grave = 16781904
    Dead_Acute = 16781905
    Dead_Circumflex = 16781906
    Dead_Tilde = 16781907
    Dead_Macron = 16781908
    Dead_Breve = 16781909
    Dead_Abovedot = 16781910
    Dead_Diaeresis = 16781911
    Dead_Abovering = 16781912
    Dead_Doubleacute = 16781913
    Dead_Caron = 16781914
    Dead_Cedilla = 16781915
    Dead_Ogonek = 16781916
    Dead_Iota = 16781917
    Dead_Voiced_Sound = 16781918
    Dead_Semivoiced_Sound = 16781919
    Dead_Belowdot = 16781920
    Dead_Hook = 16781921
    Dead_Horn = 16781922
    Dead_Stroke = 16781923
    Dead_Abovecomma = 16781924
    Dead_Abovereversedcomma = 16781925
    Dead_Doublegrave = 16781926
    Dead_Belowring = 16781927
    Dead_Belowmacron = 16781928
    Dead_Belowcircumflex = 16781929
    Dead_Belowtilde = 16781930
    Dead_Belowbreve = 16781931
    Dead_Belowdiaeresis = 16781932
    Dead_Invertedbreve = 16781933
    Dead_Belowcomma = 16781934
    Dead_Currency = 16781935
    Dead_a = 16781952
    Dead_A = 16781953
    Dead_e = 16781954
    Dead_E = 16781955
    Dead_i = 16781956
    Dead_I = 16781957
    Dead_o = 16781958
    Dead_O = 16781959
    Dead_u = 16781960
    Dead_U = 16781961
    Dead_Small_Schwa = 16781962
    Dead_Capital_Schwa = 16781963
    Dead_Greek = 16781964
    Dead_Lowline = 16781968
    Dead_Aboveverticalline = 16781969
    Dead_Belowverticalline = 16781970
    Dead_Longsolidusoverlay = 16781971
    Back = 16777313
    Forward = 16777314
    Stop = 16777315
    Refresh = 16777316
    VolumeDown = 16777328
    VolumeMute = 16777329
    VolumeUp = 16777330
    BassBoost = 16777331
    BassUp = 16777332
    BassDown = 16777333
    TrebleUp = 16777334
    TrebleDown = 16777335
    MediaPlay = 16777344
    MediaStop = 16777345
    MediaPrevious = 16777346
    MediaNext = 16777347
    MediaRecord = 16777348
    MediaPause = 16777349
    MediaTogglePlayPause = 16777350
    HomePage = 16777360
    Favorites = 16777361
    Search = 16777362
    Standby = 16777363
    OpenUrl = 16777364
    LaunchMail = 16777376
    LaunchMedia = 16777377
    Launch0 = 16777378
    Launch1 = 16777379
    Launch2 = 16777380
    Launch3 = 16777381
    Launch4 = 16777382
    Launch5 = 16777383
    Launch6 = 16777384
    Launch7 = 16777385
    Launch8 = 16777386
    Launch9 = 16777387
    LaunchA = 16777388
    LaunchB = 16777389
    LaunchC = 16777390
    LaunchD = 16777391
    LaunchE = 16777392
    LaunchF = 16777393
    MonBrightnessUp = 16777394
    MonBrightnessDown = 16777395
    KeyboardLightOnOff = 16777396
    KeyboardBrightnessUp = 16777397
    KeyboardBrightnessDown = 16777398
    PowerOff = 16777399
    WakeUp = 16777400
    Eject = 16777401
    ScreenSaver = 16777402
    WWW = 16777403
    Memo = 16777404
    LightBulb = 16777405
    Shop = 16777406
    History = 16777407
    AddFavorite = 16777408
    HotLinks = 16777409
    BrightnessAdjust = 16777410
    Finance = 16777411
    Community = 16777412
    AudioRewind = 16777413
    BackForward = 16777414
    ApplicationLeft = 16777415
    ApplicationRight = 16777416
    Book = 16777417
    CD = 16777418
    Calculator = 16777419
    ToDoList = 16777420
    ClearGrab = 16777421
    Close = 16777422
    Copy = 16777423
    Cut = 16777424
    Display = 16777425
    DOS = 16777426
    Documents = 16777427
    Excel = 16777428
    Explorer = 16777429
    Game = 16777430
    Go = 16777431
    ITouch = 16777432
    LogOff = 16777433
    Market = 16777434
    Meeting = 16777435
    MenuKB = 16777436
    MenuPB = 16777437
    MySites = 16777438
    News = 16777439
    OfficeHome = 16777440
    Option = 16777441
    Paste = 16777442
    Phone = 16777443
    Calendar = 16777444
    Reply = 16777445
    Reload = 16777446
    RotateWindows = 16777447
    RotationPB = 16777448
    RotationKB = 16777449
    Save = 16777450
    Send = 16777451
    Spell = 16777452
    SplitScreen = 16777453
    Support = 16777454
    TaskPane = 16777455
    Terminal = 16777456
    Tools = 16777457
    Travel = 16777458
    Video = 16777459
    Word = 16777460
    Xfer = 16777461
    ZoomIn = 16777462
    ZoomOut = 16777463
    Away = 16777464
    Messenger = 16777465
    WebCam = 16777466
    MailForward = 16777467
    Pictures = 16777468
    Music = 16777469
    Battery = 16777470
    Bluetooth = 16777471
    WLAN = 16777472
    UWB = 16777473
    AudioForward = 16777474
    AudioRepeat = 16777475
    AudioRandomPlay = 16777476
    Subtitle = 16777477
    AudioCycleTrack = 16777478
    Time = 16777479
    Hibernate = 16777480
    View = 16777481
    TopMenu = 16777482
    PowerDown = 16777483
    Suspend = 16777484
    ContrastAdjust = 16777485
    LaunchG = 16777486
    LaunchH = 16777487
    TouchpadToggle = 16777488
    TouchpadOn = 16777489
    TouchpadOff = 16777490
    MicMute = 16777491
    Red = 16777492
    Green = 16777493
    Yellow = 16777494
    Blue = 16777495
    ChannelUp = 16777496
    ChannelDown = 16777497
    Guide = 16777498
    Info = 16777499
    Settings = 16777500
    MicVolumeUp = 16777501
    MicVolumeDown = 16777502
    New = 16777504
    Open = 16777505
    Find = 16777506
    Undo = 16777507
    Redo = 16777508
    MediaLast = 16842751
    Select = 16842752
    Yes = 16842753
    No = 16842754
    Cancel = 16908289
    Printer = 16908290
    Execute = 16908291
    Sleep = 16908292
    Play = 16908293
    Zoom = 16908294
    Exit = 16908298
    Context1 = 17825792
    Context2 = 17825793
    Context3 = 17825794
    Context4 = 17825795
    Call = 17825796
    Hangup = 17825797
    Flip = 17825798
    ToggleCallHangup = 17825799
    VoiceDial = 17825800
    LastNumberRedial = 17825801
    Camera = 17825824
    CameraFocus = 17825825
    Unknown = 33554431
  end
  enum ArrowType : UInt32
    NoArrow = 0
    UpArrow = 1
    DownArrow = 2
    LeftArrow = 3
    RightArrow = 4
  end
  enum PenStyle : UInt32
    NoPen = 0
    SolidLine = 1
    DashLine = 2
    DotLine = 3
    DashDotLine = 4
    DashDotDotLine = 5
    CustomDashLine = 6
    Mpenstyle = 15
  end
  enum BrushStyle : UInt32
    NoBrush = 0
    SolidPattern = 1
    Dense1Pattern = 2
    Dense2Pattern = 3
    Dense3Pattern = 4
    Dense4Pattern = 5
    Dense5Pattern = 6
    Dense6Pattern = 7
    Dense7Pattern = 8
    HorPattern = 9
    VerPattern = 10
    CrossPattern = 11
    Bdiagpattern = 12
    Fdiagpattern = 13
    DiagCrossPattern = 14
    LinearGradientPattern = 15
    RadialGradientPattern = 16
    ConicalGradientPattern = 17
    TexturePattern = 24
  end
  enum SizeMode : UInt32
    AbsoluteSize = 0
    RelativeSize = 1
  end
  enum UIEffect : UInt32
    UiGeneral = 0
    UiAnimatemenu = 1
    UiFademenu = 2
    UiAnimatecombo = 3
    UiAnimatetooltip = 4
    UiFadetooltip = 5
    UiAnimatetoolbox = 6
  end
  enum CursorShape : UInt32
    ArrowCursor = 0
    UpArrowCursor = 1
    CrossCursor = 2
    WaitCursor = 3
    Ibeamcursor = 4
    SizeVerCursor = 5
    SizeHorCursor = 6
    SizeBDiagCursor = 7
    SizeFDiagCursor = 8
    SizeAllCursor = 9
    BlankCursor = 10
    SplitVCursor = 11
    SplitHCursor = 12
    PointingHandCursor = 13
    ForbiddenCursor = 14
    WhatsThisCursor = 15
    BusyCursor = 16
    OpenHandCursor = 17
    ClosedHandCursor = 18
    DragCopyCursor = 19
    DragMoveCursor = 20
    DragLinkCursor = 21
    LastCursor = 21
    BitmapCursor = 24
    CustomCursor = 25
  end
  enum TextFormatEnum : UInt32
    PlainText = 0
    RichText = 1
    AutoText = 2
    MarkdownText = 3
  end
  enum AspectRatioMode : UInt32
    IgnoreAspectRatio = 0
    KeepAspectRatio = 1
    KeepAspectRatioByExpanding = 2
  end
  enum DockWidgetArea : UInt32
    LeftDockWidgetArea = 1
    RightDockWidgetArea = 2
    TopDockWidgetArea = 4
    BottomDockWidgetArea = 8
    DockWidgetArea_Mask = 15
    AllDockWidgetAreas = 15
    NoDockWidgetArea = 0
  end
  @[Flags]
  enum DockWidgetAreas : UInt32
    LeftDockWidgetArea = 1
    RightDockWidgetArea = 2
    TopDockWidgetArea = 4
    BottomDockWidgetArea = 8
    DockWidgetArea_Mask = 15
    AllDockWidgetAreas = 15
    NoDockWidgetArea = 0
  end
  enum ToolBarArea : UInt32
    LeftToolBarArea = 1
    RightToolBarArea = 2
    TopToolBarArea = 4
    BottomToolBarArea = 8
    ToolBarArea_Mask = 15
    AllToolBarAreas = 15
    NoToolBarArea = 0
  end
  @[Flags]
  enum ToolBarAreas : UInt32
    LeftToolBarArea = 1
    RightToolBarArea = 2
    TopToolBarArea = 4
    BottomToolBarArea = 8
    ToolBarArea_Mask = 15
    AllToolBarAreas = 15
    NoToolBarArea = 0
  end
  enum TimeSpec : UInt32
    LocalTime = 0
    Utc = 1
    OffsetFromUTC = 2
    TimeZone = 3
  end
  enum ScrollBarPolicy : UInt32
    ScrollBarAsNeeded = 0
    ScrollBarAlwaysOff = 1
    ScrollBarAlwaysOn = 2
  end
  enum CaseSensitivity : UInt32
    CaseInsensitive = 0
    CaseSensitive = 1
  end
  enum Corner : UInt32
    TopLeftCorner = 0
    TopRightCorner = 1
    BottomLeftCorner = 2
    BottomRightCorner = 3
  end
  enum Edge : UInt32
    TopEdge = 1
    LeftEdge = 2
    RightEdge = 4
    BottomEdge = 8
  end
  @[Flags]
  enum Edges : UInt32
    TopEdge = 1
    LeftEdge = 2
    RightEdge = 4
    BottomEdge = 8
  end
  enum ConnectionType : UInt32
    AutoConnection = 0
    DirectConnection = 1
    QueuedConnection = 2
    BlockingQueuedConnection = 3
    UniqueConnection = 128
  end
  enum ShortcutContext : UInt32
    WidgetShortcut = 0
    WindowShortcut = 1
    ApplicationShortcut = 2
    WidgetWithChildrenShortcut = 3
  end
  enum FillRule : UInt32
    OddEvenFill = 0
    WindingFill = 1
  end
  enum MaskMode : UInt32
    MaskInColor = 0
    MaskOutColor = 1
  end
  enum ClipOperation : UInt32
    NoClip = 0
    ReplaceClip = 1
    IntersectClip = 2
  end
  enum ItemSelectionMode : UInt32
    ContainsItemShape = 0
    IntersectsItemShape = 1
    ContainsItemBoundingRect = 2
    IntersectsItemBoundingRect = 3
  end
  enum ItemSelectionOperation : UInt32
    ReplaceSelection = 0
    AddToSelection = 1
  end
  enum TransformationMode : UInt32
    FastTransformation = 0
    SmoothTransformation = 1
  end
  enum FocusReason : UInt32
    MouseFocusReason = 0
    TabFocusReason = 1
    BacktabFocusReason = 2
    ActiveWindowFocusReason = 3
    PopupFocusReason = 4
    ShortcutFocusReason = 5
    MenuBarFocusReason = 6
    OtherFocusReason = 7
    NoFocusReason = 8
  end
  enum ContextMenuPolicy : UInt32
    NoContextMenu = 0
    DefaultContextMenu = 1
    ActionsContextMenu = 2
    CustomContextMenu = 3
    PreventContextMenu = 4
  end
  enum InputMethodQuery : UInt32
    ImEnabled = 1
    ImCursorRectangle = 2
    ImMicroFocus = 2
    ImFont = 4
    ImCursorPosition = 8
    ImSurroundingText = 16
    ImCurrentSelection = 32
    ImMaximumTextLength = 64
    ImAnchorPosition = 128
    ImHints = 256
    ImPreferredLanguage = 512
    ImAbsolutePosition = 1024
    ImTextBeforeCursor = 2048
    ImTextAfterCursor = 4096
    ImEnterKeyType = 8192
    ImAnchorRectangle = 16384
    ImInputItemClipRectangle = 32768
    ImPlatformData = 2147483648
    ImQueryInput = 16570
    ImQueryAll = 4294967295
  end
  @[Flags]
  enum InputMethodQueries : UInt32
    ImEnabled = 1
    ImCursorRectangle = 2
    ImMicroFocus = 2
    ImFont = 4
    ImCursorPosition = 8
    ImSurroundingText = 16
    ImCurrentSelection = 32
    ImMaximumTextLength = 64
    ImAnchorPosition = 128
    ImHints = 256
    ImPreferredLanguage = 512
    ImAbsolutePosition = 1024
    ImTextBeforeCursor = 2048
    ImTextAfterCursor = 4096
    ImEnterKeyType = 8192
    ImAnchorRectangle = 16384
    ImInputItemClipRectangle = 32768
    ImPlatformData = 2147483648
    ImQueryInput = 16570
    ImQueryAll = 4294967295
  end
  @[Flags]
  enum InputMethodHints : UInt32
    ImhNone = 0
    ImhHiddenText = 1
    ImhSensitiveData = 2
    ImhNoAutoUppercase = 4
    ImhPreferNumbers = 8
    ImhPreferUppercase = 16
    ImhPreferLowercase = 32
    ImhNoPredictiveText = 64
    ImhDate = 128
    ImhTime = 256
    ImhPreferLatin = 512
    ImhMultiLine = 1024
    ImhNoEditMenu = 2048
    ImhNoTextHandles = 4096
    ImhDigitsOnly = 65536
    ImhFormattedNumbersOnly = 131072
    ImhUppercaseOnly = 262144
    ImhLowercaseOnly = 524288
    ImhDialableCharactersOnly = 1048576
    ImhEmailCharactersOnly = 2097152
    ImhUrlCharactersOnly = 4194304
    ImhLatinOnly = 8388608
    ImhExclusiveInputMask = 4294901760
  end
  enum ToolButtonStyle : UInt32
    ToolButtonIconOnly = 0
    ToolButtonTextOnly = 1
    ToolButtonTextBesideIcon = 2
    ToolButtonTextUnderIcon = 3
    ToolButtonFollowStyle = 4
  end
  enum LayoutDirection : UInt32
    LeftToRight = 0
    RightToLeft = 1
    LayoutDirectionAuto = 2
  end
  @[Flags]
  enum FindChildOptions : UInt32
    FindDirectChildrenOnly = 0
    FindChildrenRecursively = 1
  end
  enum DropAction : UInt32
    CopyAction = 1
    MoveAction = 2
    LinkAction = 4
    ActionMask = 255
    TargetMoveAction = 32770
    IgnoreAction = 0
  end
  @[Flags]
  enum DropActions : UInt32
    CopyAction = 1
    MoveAction = 2
    LinkAction = 4
    ActionMask = 255
    TargetMoveAction = 32770
    IgnoreAction = 0
  end
  enum CheckState : UInt32
    Unchecked = 0
    PartiallyChecked = 1
    Checked = 2
  end
  @[Flags]
  enum ItemFlags : UInt32
    NoItemFlags = 0
    ItemIsSelectable = 1
    ItemIsEditable = 2
    ItemIsDragEnabled = 4
    ItemIsDropEnabled = 8
    ItemIsUserCheckable = 16
    ItemIsEnabled = 32
    ItemIsAutoTristate = 64
    ItemIsTristate = 64
    ItemNeverHasChildren = 128
    ItemIsUserTristate = 256
  end
  @[Flags]
  enum MatchFlags : UInt32
    MatchExactly = 0
    MatchContains = 1
    MatchStartsWith = 2
    MatchEndsWith = 3
    MatchRegExp = 4
    MatchWildcard = 5
    MatchFixedString = 8
    MatchRegularExpression = 9
    MatchCaseSensitive = 16
    MatchWrap = 32
    MatchRecursive = 64
  end
  enum WindowModality : UInt32
    NonModal = 0
    WindowModal = 1
    ApplicationModal = 2
  end
  @[Flags]
  enum TextInteractionFlags : UInt32
    NoTextInteraction = 0
    TextSelectableByMouse = 1
    TextSelectableByKeyboard = 2
    LinksAccessibleByMouse = 4
    LinksAccessibleByKeyboard = 8
    TextEditable = 16
    TextEditorInteraction = 19
    TextBrowserInteraction = 13
  end
  enum SizeHint : UInt32
    MinimumSize = 0
    PreferredSize = 1
    MaximumSize = 2
    MinimumDescent = 3
    Nsizehints = 4
  end
  enum WindowFrameSection : UInt32
    NoSection = 0
    LeftSection = 1
    TopLeftSection = 2
    TopSection = 3
    TopRightSection = 4
    RightSection = 5
    BottomRightSection = 6
    BottomSection = 7
    BottomLeftSection = 8
    TitleBarArea = 9
  end
  enum GestureState : UInt32
    NoGesture = 0
    GestureStarted = 1
    GestureUpdated = 2
    GestureFinished = 3
    GestureCanceled = 4
  end
  enum GestureType : UInt32
    TapGesture = 1
    TapAndHoldGesture = 2
    PanGesture = 3
    PinchGesture = 4
    SwipeGesture = 5
    CustomGesture = 256
    LastGestureType = 4294967295
  end
  @[Flags]
  enum GestureFlags : UInt32
    DontStartGestureOnChildren = 1
    ReceivePartialGestures = 2
    IgnoredGesturesPropagateToParent = 4
  end
  enum CursorMoveStyle : UInt32
    LogicalMoveStyle = 0
    VisualMoveStyle = 1
  end
  enum TimerType : UInt32
    PreciseTimer = 0
    CoarseTimer = 1
    VeryCoarseTimer = 2
  end
  enum MouseEventSource : UInt32
    MouseEventNotSynthesized = 0
    MouseEventSynthesizedBySystem = 1
    MouseEventSynthesizedByQt = 2
    MouseEventSynthesizedByApplication = 3
  end
  @[Flags]
  enum MouseEventFlags : UInt32
    MouseEventCreatedDoubleClick = 1
    MouseEventFlagMask = 255
  end
  enum HighDpiScaleFactorRoundingPolicy : Int32
    Unset = 0
    Round = 1
    Ceil = 2
    Floor = 3
    RoundPreferFloor = 4
    PassThrough = 5
  end
  enum ReturnByValueConstant : UInt32
    ReturnByValue = 0
  end
  enum MetaObjectCall : UInt32
    InvokeMetaMethod = 0
    ReadProperty = 1
    WriteProperty = 2
    ResetProperty = 3
    QueryPropertyDesignable = 4
    QueryPropertyScriptable = 5
    QueryPropertyStored = 6
    QueryPropertyEditable = 7
    QueryPropertyUser = 8
    CreateInstance = 9
    IndexOfMethod = 10
    RegisterPropertyMetaType = 11
    RegisterMethodArgumentMetaType = 12
  end
  module MetaType
    enum Type : UInt32
      Void = 43
      Bool = 1
      Int = 2
      Uint = 3
      LongLong = 4
      Ulonglong = 5
      Double = 6
      Long = 32
      Short = 33
      Char = 34
      Ulong = 35
      Ushort = 36
      Uchar = 37
      Float = 38
      Schar = 40
      Nullptr = 51
      Qcborsimpletype = 52
      VoidStar = 31
      Qchar = 7
      Qstring = 10
      Qstringlist = 11
      Qbytearray = 12
      Qbitarray = 13
      Qdate = 14
      Qtime = 15
      Qdatetime = 16
      Qurl = 17
      Qlocale = 18
      Qrect = 19
      Qrectf = 20
      Qsize = 21
      Qsizef = 22
      Qline = 23
      Qlinef = 24
      Qpoint = 25
      Qpointf = 26
      Qregexp = 27
      Qeasingcurve = 29
      Quuid = 30
      Qvariant = 41
      Qregularexpression = 44
      Qjsonvalue = 45
      Qjsonobject = 46
      Qjsonarray = 47
      Qjsondocument = 48
      Qcborvalue = 53
      Qcborarray = 54
      Qcbormap = 55
      Qmodelindex = 42
      Qpersistentmodelindex = 50
      Qobjectstar = 39
      Qvariantmap = 8
      Qvariantlist = 9
      Qvarianthash = 28
      Qbytearraylist = 49
      Qfont = 64
      Qpixmap = 65
      Qbrush = 66
      Qcolor = 67
      Qpalette = 68
      Qicon = 69
      Qimage = 70
      Qpolygon = 71
      Qregion = 72
      Qbitmap = 73
      Qcursor = 74
      Qkeysequence = 75
      Qpen = 76
      Qtextlength = 77
      Qtextformat = 78
      Qmatrix = 79
      Qtransform = 80
      Qmatrix4x4 = 81
      Qvector2d = 82
      Qvector3d = 83
      Qvector4d = 84
      Qquaternion = 85
      Qpolygonf = 86
      Qcolorspace = 87
      Qsizepolicy = 121
      FirstCoreType = 1
      LastCoreType = 55
      FirstGuiType = 64
      LastGuiType = 87
      FirstWidgetsType = 121
      LastWidgetsType = 121
      HighestInternalId = 121
      Qreal = 6
      UnknownType = 0
      User = 1024
    end
  end
  enum VariantType : UInt32
    Invalid = 0
    Bool = 1
    Int = 2
    Uint = 3
    LongLong = 4
    Ulonglong = 5
    Double = 6
    Char = 7
    Map = 8
    List = 9
    String = 10
    StringList = 11
    ByteArray = 12
    BitArray = 13
    Date = 14
    Time = 15
    DateTime = 16
    Url = 17
    Locale = 18
    Rect = 19
    RectF = 20
    Size = 21
    SizeF = 22
    Line = 23
    LineF = 24
    Point = 25
    PointF = 26
    RegExp = 27
    RegularExpression = 44
    Hash = 28
    EasingCurve = 29
    Uuid = 30
    ModelIndex = 42
    PersistentModelIndex = 50
    LastCoreType = 55
    Font = 64
    Pixmap = 65
    Brush = 66
    Color = 67
    Palette = 68
    Image = 70
    Polygon = 71
    Region = 72
    Bitmap = 73
    Cursor = 74
    KeySequence = 75
    Pen = 76
    TextLength = 77
    TextFormat = 78
    Matrix = 79
    Transform = 80
    Matrix4x4 = 81
    Vector2D = 82
    Vector3D = 83
    Vector4D = 84
    Quaternion = 85
    PolygonF = 86
    Icon = 69
    LastGuiType = 87
    SizePolicy = 121
    UserType = 1024
    LastType = 4294967295
  end
  module ItemSelectionModel
    enum SelectionFlag : UInt32
      NoUpdate = 0
      Clear = 1
      Select = 2
      Deselect = 4
      Toggle = 8
      Current = 16
      Rows = 32
      Columns = 64
      SelectCurrent = 18
      ToggleCurrent = 24
      ClearAndSelect = 3
    end
    @[Flags]
    enum SelectionFlags : UInt32
      NoUpdate = 0
      Clear = 1
      Select = 2
      Deselect = 4
      Toggle = 8
      Current = 16
      Rows = 32
      Columns = 64
      SelectCurrent = 18
      ToggleCurrent = 24
      ClearAndSelect = 3
    end
  end
  module Gradient
    enum Preset : UInt32
      WarmFlame = 1
      NightFade = 2
      SpringWarmth = 3
      JuicyPeach = 4
      YoungPassion = 5
      LadyLips = 6
      SunnyMorning = 7
      RainyAshville = 8
      FrozenDreams = 9
      WinterNeva = 10
      DustyGrass = 11
      TemptingAzure = 12
      HeavyRain = 13
      AmyCrisp = 14
      MeanFruit = 15
      DeepBlue = 16
      RipeMalinka = 17
      CloudyKnoxville = 18
      MalibuBeach = 19
      NewLife = 20
      TrueSunset = 21
      MorpheusDen = 22
      RareWind = 23
      NearMoon = 24
      WildApple = 25
      SaintPetersburg = 26
      PlumPlate = 28
      EverlastingSky = 29
      HappyFisher = 30
      Blessing = 31
      SharpeyeEagle = 32
      LadogaBottom = 33
      LemonGate = 34
      ItmeoBranding = 35
      ZeusMiracle = 36
      OldHat = 37
      StarWine = 38
      HappyAcid = 41
      AwesomePine = 42
      NewYork = 43
      ShyRainbow = 44
      MixedHopes = 46
      FlyHigh = 47
      StrongBliss = 48
      FreshMilk = 49
      SnowAgain = 50
      FebruaryInk = 51
      KindSteel = 52
      SoftGrass = 53
      GrownEarly = 54
      SharpBlues = 55
      ShadyWater = 56
      DirtyBeauty = 57
      GreatWhale = 58
      TeenNotebook = 59
      PoliteRumors = 60
      SweetPeriod = 61
      WideMatrix = 62
      SoftCherish = 63
      RedSalvation = 64
      BurningSpring = 65
      NightParty = 66
      SkyGlider = 67
      HeavenPeach = 68
      PurpleDivision = 69
      AquaSplash = 70
      SpikyNaga = 72
      LoveKiss = 73
      CleanMirror = 75
      PremiumDark = 76
      ColdEvening = 77
      CochitiLake = 78
      SummerGames = 79
      PassionateBed = 80
      MountainRock = 81
      DesertHump = 82
      JungleDay = 83
      PhoenixStart = 84
      OctoberSilence = 85
      FarawayRiver = 86
      AlchemistLab = 87
      OverSun = 88
      PremiumWhite = 89
      MarsParty = 90
      EternalConstance = 91
      JapanBlush = 92
      SmilingRain = 93
      CloudyApple = 94
      BigMango = 95
      HealthyWater = 96
      AmourAmour = 97
      RiskyConcrete = 98
      StrongStick = 99
      ViciousStance = 100
      PaloAlto = 101
      HappyMemories = 102
      MidnightBloom = 103
      Crystalline = 104
      PartyBliss = 106
      ConfidentCloud = 107
      LeCocktail = 108
      RiverCity = 109
      FrozenBerry = 110
      ChildCare = 112
      FlyingLemon = 113
      NewRetrowave = 114
      HiddenJaguar = 115
      AboveTheSky = 116
      Nega = 117
      DenseWater = 118
      Seashore = 120
      MarbleWall = 121
      CheerfulCaramel = 122
      NightSky = 123
      MagicLake = 124
      YoungGrass = 125
      ColorfulPeach = 126
      GentleCare = 127
      PlumBath = 128
      HappyUnicorn = 129
      AfricanField = 131
      SolidStone = 132
      OrangeJuice = 133
      GlassWater = 134
      NorthMiracle = 136
      FruitBlend = 137
      MillenniumPine = 138
      HighFlight = 139
      MoleHall = 140
      SpaceShift = 142
      ForestInei = 143
      RoyalGarden = 144
      RichMetal = 145
      JuicyCake = 146
      SmartIndigo = 147
      SandStrike = 148
      NorseBeauty = 149
      AquaGuidance = 150
      SunVeggie = 151
      SeaLord = 152
      BlackSea = 153
      GrassShampoo = 154
      LandingAircraft = 155
      WitchDance = 156
      SleeplessNight = 157
      AngelCare = 158
      CrystalRiver = 159
      SoftLipstick = 160
      SaltMountain = 161
      PerfectWhite = 162
      FreshOasis = 163
      StrictNovember = 164
      MorningSalad = 165
      DeepRelief = 166
      SeaStrike = 167
      NightCall = 168
      SupremeSky = 169
      LightBlue = 170
      MindCrawl = 171
      LilyMeadow = 172
      SugarLollipop = 173
      SweetDessert = 174
      MagicRay = 175
      TeenParty = 176
      FrozenHeat = 177
      GagarinView = 178
      FabledSunset = 179
      PerfectBlue = 180
      NumPresets = 181
    end
  end
  module OpenGLContext
    enum OpenGLModuleType : UInt32
      LibGL = 0
      LibGLES = 1
    end
  end
  module OpenGLWidget
    enum UpdateBehavior : UInt32
      NoPartialUpdate = 0
      PartialUpdate = 1
    end
  end
end
